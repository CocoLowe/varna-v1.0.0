// Varna Roleplay - edited/coding by @PeiTheLord or Marvellous


#pragma compat 1
#pragma warning disable 217

#include <a_samp>
#include <afk>
#pragma dynamic 500000
#include <download>
#include <JunkBuster>
#include <a_mysql>
#include <antimodifiye>
#include <sampac>
#include <antihizbitroast>
#include <foreach>
#include <Antiaractamir>
#include <Antiairbreak>
#include <hizlidonmusse>
#include <vehtp>
#include <easyDialog>
#include <dialogs>
#include <progress2>
#include <streamer>
#include <zcmd>
#include <zones>
#include <bitrosurf>
#include <mapandreas>
#include <sAwh>
#include <attachments>
#include <physics>
#include <mSelection>
#include <cuffs>
#include <djson>
#include <SKY>
#include <e_callbacks>
#include <weapon-config>
#include    <sqlitei>
#include    <YSI\y_iterate>
#include <sscanf2>

#undef MAX_PLAYERS
#define HARCSTILUS 1111
#define STORAGE_POSITION    	("SerialBans.txt")
#define SERIAL_SIZE   			(25)
#define FILE_SIZE               (516)
#define STR_SIZE                (90)
#define SÉTASTILUS 1112
#define WALK_DEFAULT    0
#define WALK_NORMAL     1
#define WALK_PED        2
#define MAX_ATM_MACHINES 10
#define WALK_GANGSTA    3
#define WALK_GANGSTA2   4
#define WALK_OLD        5
#define WALK_FAT_OLD    6
#define WALK_FAT        7
#define WALK_LADY      	8
#define WALK_LADY2      9
#define WALK_WHORE      10
#define WALK_WHORE2     11
#define WALK_DRUNK     	12
#define WALK_BLIND     	13
#define ZOLD 0x33AA33AA
#define MAX_VEHICLEHASAR 300.0

#define cimento1 1
#define cimento1_CO 2138.8184,-2115.0784,14.3167

#define cimento2 2
#define cimento2_CO 2018.3628,-2107.8547,14.3409

#define cimento3 3
#define cimento3_CO 1959.6904,-2138.1069,14.3156

#define cimento4 4
#define cimento4_CO 1752.7378,-2163.7649,14.3137

#define cimento5 5
#define cimento5_CO 1532.4369,-1900.9086,15.0314

#define cimento6 6
#define cimento6_CO 1427.4323,-1870.1289,14.3139

#define cimento7 7
#define cimento7_CO 1213.4813,-1849.7860,14.3143

#define cimento8 8
#define cimento8_CO 1074.8881,-1850.5846,14.3193

#define cimento9 9
#define cimento9_CO 1003.5865,-1788.8497,14.9670

#define cimento10 10
#define cimento10_CO 842.0389,-1767.6790,14.3190

#define cimento11 11
#define cimento11_CO 527.4144,-1712.3816,13.6031

#define cimento12 12
#define cimento12_CO 257.4746,-1673.4269,10.2950

#define cimento13 13
#define cimento13_CO 77.8672,-1525.3397,5.8739

#define cimento14 14
#define cimento14_CO -75.9576,-1503.9470,3.3607

#define cimento15 15
#define cimento15_CO -125.3938,-1199.3411,3.6271

#define cimento16 16
#define cimento16_CO -96.5259,-1017.6252,25.0587

#define cimento17 17
#define cimento17_CO -350.2983,-848.8000,48.1597

#define cimento18 18
#define cimento18_CO -588.5105,-959.6385,63.0846

#define cimento19 19
#define cimento19_CO -786.2496,-1001.0417,80.6103

#define cimento20 20
#define cimento20_CO -886.9432,-1108.1023,99.7396

#define cimento21 21
#define cimento21_CO -1059.9753,-939.0520,83.9792

#define cimento22 22
#define cimento22_CO -1241.4282,-774.8878,65.8007

#define cimento23 23
#define cimento23_CO -1568.8035,-805.2653,52.2852

#define cimento24 24
#define cimento24_CO -1759.3712,-607.0415,17.1111

#define cimento25 25
#define cimento25_CO -1795.8506,-576.2444,17.1082

#define cimento26 26
#define cimento26_CO -1813.3130,-413.7905,16.4718

#define cimento27 27
#define cimento27_CO -1824.1753,-234.5615,19.1571

#define cimento28 28
#define cimento28_CO -1870.0231,-201.6903,19.3219


#define tasimacilik1 1
#define tasimacilik1_CO 2422.5549,-2088.2419,13.5761

#define tasimacilik2 2
#define tasimacilik2_CO 2416.1416,-2015.9375,13.5065

#define tasimacilik3 3
#define tasimacilik3_CO 2416.1116,-1935.7040,13.4786

#define tasimacilik4 4
#define tasimacilik4_CO 2415.8486,-1837.3695,13.4766

#define tasimacilik5 5
#define tasimacilik5_CO 2415.8315,-1736.8206,13.5008

#define tasimacilik6 6
#define tasimacilik6_CO 2466.8303,-1734.7030,13.4751

#define tasimacilik7 7
#define tasimacilik7_CO 2539.1699,-1734.6327,13.4766

#define tasimacilik8 8
#define tasimacilik8_CO 2645.2803,-1713.8024,10.8282

#define tasimacilik9 9
#define tasimacilik9_CO 2667.1897,-1659.5616,10.7894

#define tasimacilik10 10
#define tasimacilik10_CO 2768.1133,-1660.0612,11.9180

#define tasimacilik11 11
#define tasimacilik11_CO 2882.4490,-1644.0646,10.9731

#define tasimacilik12 12
#define tasimacilik12_CO 2913.4402,-1542.4836,10.9688

#define tasimacilik13 13
#define tasimacilik13_CO 2908.2847,-1275.0396,10.9688

#define tasimacilik14 14
#define tasimacilik14_CO 2891.8367,-1015.8649,10.9693

#define tasimacilik15 15
#define tasimacilik15_CO 2897.8403,-741.4634,10.9334

#define tasimacilik16 16
#define tasimacilik16_CO 2880.9229,-531.1834,13.8654

#define tasimacilik17 17
#define tasimacilik17_CO 2763.6003,-380.8113,24.3546

#define tasimacilik18 18
#define tasimacilik18_CO 2736.7043,-226.7930,29.1095

#define tasimacilik19 19
#define tasimacilik19_CO 2773.7146,-34.2206,36.0219

#define tasimacilik20 20
#define tasimacilik20_CO 2777.7610,173.9948,20.4009

#define tasimacilik21 21
#define tasimacilik21_CO 2649.4629,329.3610,22.9311

#define tasimacilik22 22
#define tasimacilik22_CO 2471.0122,325.1478,31.6172

#define tasimacilik23 23
#define tasimacilik23_CO 2276.4207,346.9255,32.7088

#define tasimacilik24 24
#define tasimacilik24_CO 2341.5723,213.4634,26.4284

#define tasimacilik25 25
#define tasimacilik25_CO 2342.5117,94.9786,26.4272

#define tasimacilik26 26
#define tasimacilik26_CO 2307.0469,92.6865,26.4307

#define tasimacilik27 27
#define tasimacilik27_CO 2283.5410,64.1197,26.5771


#define GEREKEN_BAGIMLILIK  (5)
#define strcpy(%0,%1,%2) strcat((%0[0] = '\0', %0), %1, %2)
#define MAX_WEP_SLOT (5)
#define KRIZ_SURESI         (300)
#define URUN_ISIM_DEGISTIRME            (5)
#define URUN_KOKEN_DEGISTIRME           (2)
#define MAX_CCTV 100
#define MAX_CCTV_NAME 50
#define URUN_DOGUMTARIHI_DEGISTIRME     (2)
#define URUN_OZEL_NUMARA                (3)
#define URUN_DIL_SIFIRLAMA              (2)
#define URUN_KARAKTER_SIFIRLAMA         (2)
#define URUN_MASKE_KULLANIMI            (10)
#define URUN_BISIKLET                   (300)
#define URUN_GATE                       (5)
#define     MAX_COP_OBJECTS     (300)
#define     COPOBJECTS_DIALOG   (6450)
#define     SPEEDCAM_RANGE      (30.0)
#define MAX_SWEARS 1000
#define STR 1000
#define URUN_HIZLIMOTOR                 (3)
#define URUN_BIRLIK_TIPI                (300)
#define URUN_BIRLIK_ADI                 (300)
#define URUN_PREMIUMSLOT                (10)
#define URUN_SOYAD   		            (5)
#define URUN_OOCSICIL        	        (5)
#define MAX_PLAYERS (150)
#define sHeightStart 50
#define sModel 354
#define MAX_UICOMPASS_TD	7	//The amount of TD that will be used in Your compass
#define MIN_UICOMPASS_STEP	5	//The minimum step of the compass
#define MAX_UICOMPASS_STEP	15	//The maximum step of the compass

/// Anti Rak-Samp
#define MAX_BAGLANTI 3

// Araç Zýrhlatma Sistemi

new AracZirh[MAX_VEHICLES];
#define MAX_ARAC_ZIRH 5000

new handle_mysql;
new Swears[MAX_SWEARS][STR];
new Float:OldVehiclePos[2000][4];
new LastCar[500];
new num_words = 0;
new KomutFloodSistemi[MAX_PLAYERS], KomutSpamSuresi[MAX_PLAYERS];
new Float:bakx,Float:baky,Float:bakz;
new RandomHelmet[] =
{
    18645, //MotorcycleHelmet
        18976,  //MotorcycleHelmet2
        18977,  //MotorcycleHelmet3
        18978,  //MotorcycleHelmet4
        18979   //MotorcycleHelmet5

};
static
	PlayerSerial[SERIAL_SIZE];
new onlinepl;
enum atmData {
	atmID,
	atmExists,
	Float:atmPos[4],
	atmInterior,
	atmWorld,
	atmObject,
	Text3D:atmText3D
};
new ATMData[MAX_ATM_MACHINES][atmData];

#define DIALOG_PAPAGAN													   (503)
#define DIALOG_PAPAGAN_2												   (504)
#define DIALOG_PAPAGAN_YONETIM                                             (505)
#define DIALOG_PAPAGAN_NICK                                                (506)
#define DIALOG_PAPAGAN_YIYECEKLER                                          (507)
#define DIALOG_PAPAGAN_KONUSMA                                             (508)
#define DIALOG_PAPAGAN_KONTROL                                             (509)
#define DIALOG_PAPAGAN_TAKIP                                               (510)
#define DIALOG_PAPAGAN_OTUR                                                (511)
#define PAPAGAN_FIYAT													   (100)
#define PAPAGAN_NICK_FIYAT 												   (200)
#define DIALOG_KARAKTER													   (512)


#define KAYIT_DIZIN												  "/Papaganlar/"

#define papagan-> papagan_
enum papaganInfo
{
	papagan_Name[24],
	bool: papagan_Called,
	papagan_Kilo,
	papagan_Timer,
	papagan_Can,
	papagan_Enerji,
	papagan_id,
	Text3D:papagan_labelid,
	papagan_Model
};
enum    _:e_object_types
{
	OBJECT_TYPE_ROADBLOCK,
	OBJECT_TYPE_SIGN,
	OBJECT_TYPE_POLICELINE,
	OBJECT_TYPE_SPIKE,
	OBJECT_TYPE_SPEEDCAM
}
enum	e_object_data
{
	Owner[MAX_PLAYER_NAME],
	Type,
	ObjData,
	ObjModel,
	Float: ObjX,
	Float: ObjY,
	Float: ObjZ,
	Float: ObjRX,
	Float: ObjRY,
	Float: ObjRZ,
	ObjInterior,
	ObjVirtualWorld,
	ObjID,
	Text3D: ObjLabel,
	ObjArea,
	bool: ObjCreated
}
new pDrunkLevelLast[MAX_PLAYERS];
new eskiad[MAX_PLAYERS][24];
new pFPS[MAX_PLAYERS];
enum E_CCTV_INFO
{
	ID,

	cctv_Name[MAX_CCTV_NAME],
	Float: cctv_X,
	Float: cctv_Y,
	Float: cctv_Z,

	Float: cctv_rotX,
	Float: cctv_rotY,
	Float: cctv_rotZ,

	cctv_VW,
	cctv_Interior,
	cctv_Faction,

	cctv_Object
};
new PapaganInfo[MAX_PLAYERS][papaganInfo];
new Hacker[MAX_PLAYERS];
new EffectTimer[MAX_PLAYERS] = {-1, ...};
new AdminDuty[MAX_PLAYERS];
new CPotobus[MAX_PLAYERS];
new CPcimento[MAX_PLAYERS];
new CPtasimacilik[MAX_PLAYERS];
new Flasher[MAX_VEHICLES] = 0;
new FlasherState[MAX_VEHICLES];
new
	CCTVInfo[MAX_CCTV][E_CCTV_INFO],
	Iterator: CCTVIter<MAX_CCTV>;

new
	Float: CCTV_oldX[MAX_PLAYERS],
	Float: CCTV_oldY[MAX_PLAYERS],
	Float: CCTV_oldZ[MAX_PLAYERS],
	Float: CCTV_oldAngle[MAX_PLAYERS],
	CCTV_oldSkin[MAX_PLAYERS],
	CCTV_oldVW[MAX_PLAYERS],
	CCTV_oldInterior[MAX_PLAYERS],
	inCCTV[MAX_PLAYERS],
	CCTV_ID[MAX_PLAYERS],
	CCTV_inEditing[MAX_PLAYERS];

	//Ýhtiyaç barlarý
	new PlayerBar: Aclik[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...};
new PlayerBar: Susuzluk[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...};

//#endif
#define otobus1 1
#define otobus1_CO 1819.4210,-1869.2213,13.4141

#define otobus2 2
#define otobus2_CO 1819.2510,-1890.6771,13.3894

#define otobus3 3
#define otobus3_CO 1818.9677,-1926.4794,13.3806

#define otobus4 4
#define otobus4_CO 1834.1071,-1935.2390,13.3761

#define otobus5 5
#define otobus5_CO 1853.6533,-1934.8553,13.3767

#define otobus6 6
#define otobus6_CO 1881.0449,-1934.6577,13.3828

#define otobus7 7
#define otobus7_CO 1930.9160,-1934.2976,13.3828

#define otobus8 8
#define otobus8_CO 1957.3712,-1934.1068,13.3828

#define otobus9 9
#define otobus9_CO 1959.1177,-1962.9043,13.6732

#define otobus10 10
#define otobus10_CO 1957.4576,-2026.4313,13.3906

#define otobus11 11
#define otobus11_CO 1959.2229,-2054.3137,13.3828

#define otobus12 12
#define otobus12_CO 1959.1187,-2096.8616,13.3902

#define otobus13 13
#define otobus13_CO 1972.7834,-2112.6189,13.3845

#define otobus14 14
#define otobus14_CO 2008.6425,-2113.5366,13.3818

#define otobus15 15
#define otobus15_CO 2057.1873,-2112.9197,13.3710

#define otobus16 16
#define otobus16_CO 2095.7275,-2113.8394,13.3002

#define otobus17 17
#define otobus17_CO 2128.3188,-2116.3374,13.3482

#define otobus18 18
#define otobus18_CO 2168.3464,-2138.2292,13.3480

#define otobus19 19
#define otobus19_CO 2197.7275,-2168.2749,13.3480

#define otobus20 20
#define otobus20_CO 2222.7712,-2145.4436,13.3758

#define otobus21 21
#define otobus21_CO 2268.5686,-2101.0486,13.7067

#define otobus22 22
#define otobus22_CO 2287.0334,-2082.0085,13.3679

#define otobus23 23
#define otobus23_CO 2252.0247,-2044.7432,13.3919

#define otobus24 24
#define otobus24_CO 2219.7720,-2010.8215,13.3607

#define otobus25 25
#define otobus25_CO 2216.6892,-1975.0107,13.3906

#define otobus26 26
#define otobus26_CO 2219.4133,-1924.7709,13.3247

#define otobus27 27
#define otobus27_CO 2220.9824,-1872.0974,13.3828

#define otobus28 28
#define otobus28_CO 2219.2725,-1811.8229,13.1953

#define otobus29 29
#define otobus29_CO 2218.9744,-1761.7283,13.3767

#define otobus30 30
#define otobus30_CO 2219.4832,-1735.3883,13.4062

#define otobus31 31
#define otobus31_CO 2236.1023,-1735.5591,13.3828

#define otobus32 32
#define otobus32_CO 2272.2810,-1735.6931,13.3828

#define otobus33 33
#define otobus33_CO 2300.6963,-1735.7983,13.3828

#define otobus34 34
#define otobus34_CO 2341.4209,-1735.9495,13.3828

#define otobus35 35
#define otobus35_CO 2385.7097,-1736.1136,13.3828

#define otobus36 36
#define otobus36_CO 2425.8887,-1735.8214,13.4444

#define otobus37 37
#define otobus37_CO 2478.7866,-1734.6145,13.3828

#define otobus38 38
#define otobus38_CO 2528.6006,-1734.7993,13.3828

#define otobus39 39
#define otobus39_CO 2574.9155,-1734.9712,13.3828

#define otobus40 40
#define otobus40_CO 2619.5857,-1735.1368,11.4965

#define otobus41 41
#define otobus41_CO 2644.5425,-1734.8619,10.7344

#define otobus42 42
#define otobus42_CO 2646.3518,-1716.0647,10.7344

#define otobus43 43
#define otobus43_CO 2645.7874,-1672.1719,10.7610

#define otobus44 44
#define otobus44_CO 2646.3521,-1618.1965,10.7286

#define otobus45 45
#define otobus45_CO 2645.2478,-1598.4912,12.2979

#define otobus46 46
#define otobus46_CO 2645.5955,-1565.0809,18.3345

#define otobus47 47
#define otobus47_CO 2645.8638,-1539.4117,22.9738

#define otobus48 48
#define otobus48_CO 2645.3496,-1495.8387,30.2572

#define otobus49 49
#define otobus49_CO 2646.7634,-1433.3907,30.2813

#define otobus50 50
#define otobus50_CO 2645.2651,-1384.9277,30.2813

#define otobus51 51
#define otobus51_CO 2645.6482,-1348.0814,35.0390

#define otobus52 52
#define otobus52_CO 2645.5017,-1314.5090,41.1046

#define otobus53 53
#define otobus53_CO 2645.5073,-1263.2479,49.8438

#define otobus54 54
#define otobus54_CO 2645.7654,-1204.5769,49.9931

#define otobus55 55
#define otobus55_CO 2645.4712,-1134.0011,64.5545

#define otobus56 56
#define otobus56_CO 2645.9131,-1091.5258,69.4512

#define otobus57 57
#define otobus57_CO 2646.0383,-1052.4628,69.4068

#define otobus58 58
#define otobus58_CO 2630.0444,-1043.9108,69.4141

#define otobus59 59
#define otobus59_CO 2579.8469,-1044.1467,69.4141

#define otobus60 60
#define otobus60_CO 2559.0935,-1065.7236,69.0888

#define otobus61 61
#define otobus61_CO 2524.3752,-1089.2078,56.6227

#define otobus62 62
#define otobus62_CO 2459.6428,-1084.4806,42.8245

#define otobus63 63
#define otobus63_CO 2367.0459,-1097.7003,33.8113

#define otobus64 64
#define otobus64_CO 2322.0042,-1139.9480,26.9890

#define otobus65 65
#define otobus65_CO 2297.2676,-1147.7769,26.7717

#define otobus66 66
#define otobus66_CO 2226.9536,-1132.3416,25.6250

#define otobus67 67
#define otobus67_CO 2167.4104,-1116.6050,25.4140

#define otobus68 68
#define otobus68_CO 2131.6892,-1108.6349,25.2002

#define otobus69 69
#define otobus69_CO 2061.9048,-1083.2382,24.7527

#define otobus70 70
#define otobus70_CO 2016.8964,-1063.2258,24.4737

#define otobus71 71
#define otobus71_CO 1938.1886,-1039.7920,23.9426

#define otobus72 72
#define otobus72_CO 1876.9478,-1045.0388,23.6797

#define otobus73 73
#define otobus73_CO 1864.4967,-1083.3706,23.6644

#define otobus74 74
#define otobus74_CO 1864.6389,-1124.9800,23.7336

#define otobus75 75
#define otobus75_CO 1862.1193,-1178.1299,23.6563

#define otobus76 76
#define otobus76_CO 1823.4553,-1178.6786,23.6279

#define otobus77 77
#define otobus77_CO 1766.7594,-1164.3905,23.6518

#define otobus78 78
#define otobus78_CO 1704.5466,-1159.3818,23.6563

#define otobus79 79
#define otobus79_CO 1659.2905,-1157.1449,23.7292

#define otobus80 80
#define otobus80_CO 1617.7283,-1158.2390,23.8976

#define otobus81 81
#define otobus81_CO 1545.8999,-1158.3450,23.9063

#define otobus82 82
#define otobus82_CO 1452.3771,-1158.1683,23.6645

#define otobus83 83
#define otobus83_CO 1388.0791,-1139.7317,23.6563

#define otobus84 84
#define otobus84_CO 1339.9279,-1139.4540,23.6563

#define otobus85 85
#define otobus85_CO 1339.7010,-1193.1721,20.0364

#define otobus86 86
#define otobus86_CO 1339.5771,-1278.1276,13.3828

#define otobus87 87
#define otobus87_CO 1339.4661,-1360.2427,13.3828

#define otobus88 88
#define otobus88_CO 1334.9711,-1397.3129,13.3304

#define otobus89 89
#define otobus89_CO 1304.9347,-1397.1255,13.2388

#define otobus90 90
#define otobus90_CO 1283.0696,-1391.4382,13.2876

#define otobus91 91
#define otobus91_CO 1242.3883,-1397.3187,13.0347

#define otobus92 92
#define otobus92_CO 1177.1482,-1397.2682,13.2809

#define otobus93 93
#define otobus93_CO 1100.5742,-1397.2085,13.4517

#define otobus94 94
#define otobus94_CO 1029.1249,-1397.1534,13.1789

#define otobus95 95
#define otobus95_CO 930.5071,-1397.0769,13.2720

#define otobus96 96
#define otobus96_CO 808.4324,-1396.9821,13.4704

#define otobus97 97
#define otobus97_CO 723.4608,-1396.9158,13.4704

#define otobus98 98
#define otobus98_CO 689.3904,-1396.8906,13.3908

#define otobus99 99
#define otobus99_CO 660.3761,-1391.3239,13.4904

#define otobus100 100
#define otobus100_CO 585.9913,-1401.0879,13.6675

#define otobus101 101
#define otobus101_CO 506.1694,-1420.2706,15.8709

#define otobus102 102
#define otobus102_CO 462.6595,-1440.0426,24.7933

#define otobus103 103
#define otobus103_CO 424.2363,-1450.1727,30.2147

#define otobus104 104
#define otobus104_CO 392.7904,-1406.6287,34.0579

#define otobus105 105
#define otobus105_CO 356.6227,-1433.0878,34.2793

#define otobus106 106
#define otobus106_CO 293.0827,-1487.7201,32.6405

#define otobus107 107
#define otobus107_CO 251.3112,-1483.9871,25.6074

#define otobus108 108
#define otobus108_CO 209.7003,-1520.1219,16.3526

#define otobus109 109
#define otobus109_CO 175.9351,-1514.9785,12.3097

#define otobus110 110
#define otobus110_CO 144.1199,-1560.8496,10.4078

#define otobus111 111
#define otobus111_CO 118.6207,-1600.9114,10.4859

#define otobus112 112
#define otobus112_CO 111.0868,-1634.0442,10.1153

#define otobus113 113
#define otobus113_CO 112.7422,-1673.8855,9.7574

#define otobus114 114
#define otobus114_CO 149.4021,-1739.4353,5.2434

#define otobus115 115
#define otobus115_CO 213.7829,-1734.6086,4.3724

#define otobus116 116
#define otobus116_CO 306.8733,-1740.8724,4.3454

#define otobus117 117
#define otobus117_CO 341.2263,-1753.0028,4.4809

#define otobus118 118
#define otobus118_CO 355.2872,-1775.8895,5.2286

#define otobus119 119
#define otobus119_CO 404.2063,-1776.6331,5.3062

#define otobus120 120
#define otobus120_CO 440.4440,-1775.7621,5.3270

#define otobus121 121
#define otobus121_CO 460.9571,-1756.5425,5.4988

#define otobus122 122
#define otobus122_CO 462.9488,-1724.7922,10.5006

#define otobus123 123
#define otobus123_CO 523.0933,-1732.6554,11.9803

#define otobus124 124
#define otobus124_CO 597.2869,-1742.8701,13.2313

#define otobus125 125
#define otobus125_CO 695.4357,-1766.0536,13.5592

#define otobus126 126
#define otobus126_CO 806.9274,-1786.6862,13.4183

#define otobus127 127
#define otobus127_CO 937.1039,-1793.0004,13.6831

#define otobus128 128
#define otobus128_CO 1018.2557,-1815.6854,13.9601

#define otobus129 129
#define otobus129_CO 1075.4847,-1854.0679,13.3910

#define otobus130 130
#define otobus130_CO 1148.3832,-1855.2994,13.3938

#define otobus131 131
#define otobus131_CO 1229.2656,-1854.9531,13.3828

#define otobus132 132
#define otobus132_CO 1286.1466,-1854.6702,13.3906

#define otobus133 133
#define otobus133_CO 1334.8041,-1858.4324,13.3906

#define otobus134 134
#define otobus134_CO 1388.1162,-1875.1127,13.3828

#define otobus135 135
#define otobus135_CO 1441.5247,-1875.0179,13.3906

#define otobus136 136
#define otobus136_CO 1520.6362,-1875.3784,13.3828

#define otobus137 137
#define otobus137_CO 1615.5088,-1875.0902,13.3828

#define otobus138 138
#define otobus138_CO 1672.3174,-1871.7097,13.3906

#define otobus139 139
#define otobus139_CO 1691.3502,-1835.5898,13.3828

#define otobus140 140
#define otobus140_CO 1705.8414,-1814.2795,13.3645

#define otobus141 141
#define otobus141_CO 1750.2499,-1823.9047,13.3867

#define otobus142 142
#define otobus142_CO 1802.0934,-1835.7101,13.3828

#define otobus143 143
#define otobus143_CO 1818.9479,-1842.3829,13.4141

#define otobus144 144
#define otobus144_CO 1814.9385,-1860.1489,13.4141
new walktime[MAX_PLAYERS];
new tanitim[MAX_PLAYERS];

#define DAMAGE_COUNT 10
new Shamal, ShamalArea[4] = {-1, ...};
new Tren, TrenArea[5] = {-1, ...};
new AimbotWarnings[MAX_PLAYERS];
new sonkomut[MAX_PLAYERS];
new Spawned[MAX_PLAYERS];
new bool:flying[MAX_PLAYERS];
new HelmetEnabled[MAX_PLAYERS];
new pCop[MAX_PLAYERS];


new Injourney[MAX_PLAYERS];
new Watching[MAX_PLAYERS];

new
        CarUpdate[MAX_VEHICLES] = {0, ...},
        Float: CarLastPos[MAX_VEHICLES][3];

#define MODE_SKATE (1)        // 0 - medium speed | 1 - fast speed
#define TYPE_SKATE (1)        // 0 - the skate is placed on the right arm | 1 - the skate is placed in the back
#define INDEX_SKATE (6)       //is the slot that used SetPlayerAttachedObject

enum skate{
        bool:sActive,
        sSkate,
};

new InfoSkate[MAX_PLAYERS][skate];

new bool:IsSpeeding[MAX_PLAYERS],
    playerspeedtimer[MAX_PLAYERS],
    CrashTimer[MAX_PLAYERS],
    Float:pSpeed[MAX_PLAYERS];

new garbage_AracDurum[MAX_VEHICLES];
new garbage_AracTime[MAX_VEHICLES];
new garbage_AracPlayer[MAX_VEHICLES];

#define     MONEY_PER_METER     (0.015)
#define     MONEY_PER_METER_CIFTCI     (0.015)
#define     UPDATE_TIME         (1)   // in milliseconds

new Downloaded[MAX_PLAYERS];
new PlayerTick[MAX_PLAYERS];

new
	bool: SweeperJob[MAX_PLAYERS] = {false, ...},
    SweeperUpdate[MAX_PLAYERS] = {0, ...},
    SweeperDistance[MAX_PLAYERS] = {0, ...},
    Float: SweeperLastPos[MAX_PLAYERS][3],
    bool: CiftciJob[MAX_PLAYERS] = {false, ...},
    CiftciUpdate[MAX_PLAYERS] = {0, ...},
    CiftciDistance[MAX_PLAYERS] = {0, ...},
    Float: CiftciLastPos[MAX_PLAYERS][3];

enum OTOBUSINFO{
	SecurityMission,
	BusMission,
	BusStop,
	BusStopTime,
	BusStopTimeFail
}
new Mise[MAX_PLAYERS][OTOBUSINFO];
new
	CopObjectData[MAX_COP_OBJECTS][e_object_data],
	EditingCopObjectID[MAX_PLAYERS] = {-1, ...},
	RoadblockList = mS_INVALID_LISTID,
	SignList = mS_INVALID_LISTID;

new
    Float: zOffsets[5] = {1.35, 3.25, 0.35, 0.4, 5.35},
    Float: streamDistances[5] = {10.0, 10.0, 5.0, 3.0, SPEEDCAM_RANGE};

new
	DB: ObjectDB,
	DBStatement: LoadObjects,
	DBStatement: AddObject,
	DBStatement: UpdateObject,
	DBStatement: RemoveObject;
new Text3D:KosText[MAX_PLAYERS];
new Text3D:pdrozet[MAX_PLAYERS];
new Text3D:VipText[MAX_PLAYERS];
new Text3D:rozet[MAX_PLAYERS];
new Text3D:HPLabel[MAX_PLAYERS];
new Text3D:aDutyText[MAX_PLAYERS];
new Text3D:hDutyText[MAX_PLAYERS];
new PlayerText:AracKumanda[MAX_PLAYERS][10];
new PlayerText:BlackTD[MAX_PLAYERS][2];
new PlayerText:Giris[MAX_PLAYERS];
new PlayerText:Statement[MAX_PLAYERS];
new Text:Textdraw88;

new PlayerText:TDEditor_Hud[MAX_PLAYERS][7];

new Text:KarakterimEkrani[26];
new PlayerText:KarakterimEkrani_P[MAX_PLAYERS][13];
new Text:MaasEkrani[4];
new PlayerText:MaasEkrani_P[MAX_PLAYERS][7];

new GOV;
new KMTimer[MAX_PLAYERS];
new k_basvuru, k_time, k_saat, k_dakika;
new BkDurum[MAX_PLAYERS];
new Text:GBText;
new blackmap ;
new Text:td_ObjelerYukleniyor;
new Text:carMDC[MAX_VEHICLES][5];
new timerMDC[MAX_VEHICLES];
new PlayerText:MainMDC[MAX_PLAYERS][29];

new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];

#define     MAX_BALIK_SLOT		(10)
new TUTMA_ORANI = 10;
new PAYDAY_ORANI = 60;
#define     DIALOG_BALIK        (3660)
#define DIALOG_HOUSE_PASSWORD

enum    e_baliklar
{
	TurAdi[32],
	MinAgirlik,
	MaxAgirlik,
	Float: GramFiyat
};

enum    e_balikbilgi
{
	BalikID[MAX_BALIK_SLOT],
	BalikGram[MAX_BALIK_SLOT]
};

enum    e_balikcilar
{
	Float: balikciX,
	Float: balikciY,
	Float: balikciZ,
	Float: balikciA,
	Text3D: balikciLabel,
	balikciIcon,
	balikciActor
};



new
	OyuncuBaliklari[MAX_PLAYERS][e_balikbilgi],
	KovaBaliklari[MAX_PLAYERS][e_balikbilgi],
	BalikTimer[MAX_PLAYERS] = {-1, ...},
	PlayerBar: BalikBari[MAX_PLAYERS];

new Text: BalikText;



new
	BalikTurleri[][e_baliklar] = {
	// tür adý - min. aðýrlýk - max. aðýrlýk - gram fiyatý
		{"Zargana", 266, 866, 0.25},
		{"Alabalýk", 333, 1733, 0.25},
		{"Levrek", 600, 1160, 0.25},
		{"Sazan", 233, 833, 0.25},
		{"Sudak", 800, 3500, 0.60},
		{"Somon", 266, 1160, 0.25},
		{"Gümüþ", 300, 1000, 0.50},
		{"Ýskorpit", 300, 1160, 0.25},
		{"Çupra", 300, 2000, 0.25},
		{"Eþkina", 300, 600, 0.25},
	 	{"Gelincik", 300, 1000, 0.50},
        {"Ýnci Balýðý", 500, 1000, 1.40},
        {"Ýskavrit", 200, 1060, 0.50}
	};
new g_iHandle;
//===================[rootcouse Banka Sistemi]============================
#define     MAX_BANKERS     (20)
#define     MAX_ATMMS        (100)

#define     BANKER_USE_MAPICON      			// comment or remove this line if you don't want bankers to have mapicons
#define     ATMM_USE_MAPICON         			// comment or remove this line if you don't want atmms to have mapicons
#define     BANKER_ICON_RANGE       (10.0)		// banker mapicon stream distance, you can remove this if you're not using banker icons (default: 10.0)
#define     ATMM_ICON_RANGE       	(100.0)		// atmm mapicon stream distance, you can remove this if you're not using banker icons (default: 100.0)
#define     ACCOUNT_PRICE           (100)      	// amount of money required to create a new bank account (default: 100)
#define     ACCOUNT_CLIMIT          (5)         // a player can create x accounts, you can comment or remove this line if you don't want an account limit (default: 5)
#define     ACCOUNT_LIMIT           (500000000) // how much money can a bank account have (default: 500,000,000)

enum    _:E_BANK_DIALOG
{
    DIALOG_BANK_MENU_NOLOGIN = 12450,
    DIALOG_BANK_MENU,
    DIALOG_BANK_CREATE_ACCOUNT,
    DIALOG_BANK_ACCOUNTS,
    DIALOG_BANK_LOGIN_ID,
	DIALOG_BANK_LOGIN_PASS,
	DIALOG_BANK_DEPOSIT,
	DIALOG_BANK_WITHDRAW,
	DIALOG_BANK_TRANSFER_1,
	DIALOG_BANK_TRANSFER_2,
	DIALOG_BANK_PASSWORD,
	DIALOG_BANK_REMOVE,
	DIALOG_BANK_LOGS,
	DIALOG_BANK_LOG_PAGE
}

enum    _:E_BANK_LOGTYPE
{
	TYPE_NONE,
	TYPE_LOGIN,
	TYPE_DEPOSIT,
	TYPE_WITHDRAW,
	TYPE_TRANSFER,
	TYPE_PASSCHANGE
}

enum    E_BANKER
{
	// saved
	Skin,
	Float: bankerX,
	Float: bankerY,
	Float: bankerZ,
	Float: bankerA,
	// temp
	bankerActorID,
	#if defined BANKER_USE_MAPICON
	bankerIconID,
	#endif
	Text3D: bankerLabel
}

enum    E_ATMM
{
	// saved
	Float: atmmX,
	Float: atmmY,
	Float: atmmZ,
	Float: atmmRX,
	Float: atmmRY,
	Float: atmmRZ,
	// temp
	atmmObjID,
	Text3D: atmmLabel
}
new
	BankerData[MAX_BANKERS][E_BANKER],
	ATMMData[MAX_ATMMS][E_ATMM];



new
	CurrentAccountID[MAX_PLAYERS] = {-1, ...},
	LogListType[MAX_PLAYERS] = {TYPE_NONE, ...},
	LogListPage[MAX_PLAYERS],
	EditingATMMID[MAX_PLAYERS] = {-1, ...};

formatInt(intVariable, iThousandSeparator = ',', iCurrencyChar = '$')
{
    /*
		By Kar
		https://gist.github.com/Kar2k/bfb0eafb2caf71a1237b349684e091b9/8849dad7baa863afb1048f40badd103567c005a5#file-formatint-function
	*/
	static
		s_szReturn[ 32 ],
		s_szThousandSeparator[ 2 ] = { ' ', EOS },
		s_szCurrencyChar[ 2 ] = { ' ', EOS },
		s_iVariableLen,
		s_iChar,
		s_iSepPos,
		bool:s_isNegative
	;

	format( s_szReturn, sizeof( s_szReturn ), "%d", intVariable );

	if(s_szReturn[0] == '-')
		s_isNegative = true;
	else
		s_isNegative = false;

	s_iVariableLen = strlen( s_szReturn );

	if ( s_iVariableLen >= 4 && iThousandSeparator)
	{
		s_szThousandSeparator[ 0 ] = iThousandSeparator;

		s_iChar = s_iVariableLen;
		s_iSepPos = 0;

		while ( --s_iChar > _:s_isNegative )
		{
			if ( ++s_iSepPos == 3 )
			{
				strins( s_szReturn, s_szThousandSeparator, s_iChar );

				s_iSepPos = 0;
			}
		}
	}
	if(iCurrencyChar) {
		s_szCurrencyChar[ 0 ] = iCurrencyChar;
		strins( s_szReturn, s_szCurrencyChar, _:s_isNegative );
	}
	return s_szReturn;
}
Bank_SaveLog(playerid, type, accid, toaccid, amount)
{
	if(type == TYPE_NONE) return 1;
	new queryy[256];

	switch(type)
	{
	    case TYPE_LOGIN, TYPE_PASSCHANGE: mysql_format(g_iHandle, queryy, sizeof(queryy), "INSERT INTO bank_logs SET AccountID=%d, Type=%d, Player='%e', Date=UNIX_TIMESTAMP()", accid, type, Player_GetName(playerid));
	    case TYPE_DEPOSIT, TYPE_WITHDRAW: mysql_format(g_iHandle, queryy, sizeof(queryy), "INSERT INTO bank_logs SET AccountID=%d, Type=%d, Player='%e', Amount=%d, Date=UNIX_TIMESTAMP()", accid, type, Player_GetName(playerid), amount);
		case TYPE_TRANSFER: mysql_format(g_iHandle, queryy, sizeof(queryy), "INSERT INTO bank_logs SET AccountID=%d, ToAccountID=%d, Type=%d, Player='%e', Amount=%d, Date=UNIX_TIMESTAMP()", accid, toaccid, type, Player_GetName(playerid), amount);
	}

	mysql_tquery(g_iHandle, queryy);
	return 1;
}

Bank_ShowMenu(playerid)
{
	new string[256], using_atmm = GetPVarInt(playerid, "usingATMM");
	if(CurrentAccountID[playerid] == -1) {
		format(string, sizeof(string), "{%06x}Hesap Olustur\t{2ECC71}%s\nHesaplarim\t{F1C40F}%d\nHesap Giriþi", (using_atmm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8), (using_atmm ? ("") : formatInt(ACCOUNT_PRICE)), Bank_AccountCount(playerid));
		ShowPlayerDialog(playerid, DIALOG_BANK_MENU_NOLOGIN, DIALOG_STYLE_TABLIST, "{F1C40F}Bank: {FFFFFF}Menu", string, "Seç", "Kapat");
	}else{
	    new balance = Bank_GetBalance(CurrentAccountID[playerid]), menu_title[64];
		format(menu_title, sizeof(menu_title), "{F1C40F}Banka: {FFFFFF}Menu (Hesap No: {F1C40F}%d{FFFFFF})", CurrentAccountID[playerid]);

	    format(
			string,
			sizeof(string),
			"{%06x}Hesap Oluþtur\t{2ECC71}%s\nHesaplarým\t{F1C40F}%d\nPara Yatýr\t{2ECC71}%s\nPara Çek\t{2ECC71}%s\nTransfer\t{2ECC71}%s\n{%06x}Hesap Kayýtlarý\n{%06x}Þifre Deðiþtir\n{%06x}Hesabý Sil\nÇýkýþ",
			(using_atmm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
			(using_atmm ? ("") : formatInt(ACCOUNT_PRICE)),
			Bank_AccountCount(playerid),
			formatInt(GetMoney(playerid)),
			formatInt(balance),
			formatInt(balance),
			(using_atmm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
			(using_atmm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8),
			(using_atmm ? 0xE74C3CFF >>> 8 : 0xFFFFFFFF >>> 8)
		);

		ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_TABLIST, menu_title, string, "Seç", "Kapat");
	}

	DeletePVar(playerid, "bankLoginAccount");
	DeletePVar(playerid, "bankTransferAccount");
	return 1;
}

Bank_ShowLogMenu(playerid)
{
	LogListType[playerid] = TYPE_NONE;
	LogListPage[playerid] = 0;
	ShowPlayerDialog(playerid, DIALOG_BANK_LOGS, DIALOG_STYLE_LIST, "{F1C40F}Banka: {FFFFFF}Loglar", "Para Yatýr\nPara Çek\nTransfer\nGiriþ\nÞifre Deðiþtir", "Göster", "Geri");
	return 1;
}

Player_GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	return name;
}

Bank_AccountCount(playerid)
{
	new queryy[144], Cache: find_accounts;
	mysql_format(g_iHandle, queryy, sizeof(queryy), "SELECT null FROM bank_accounts WHERE Owner='%e' && Disabled=0", Player_GetName(playerid));
	find_accounts = mysql_query(g_iHandle, queryy);

	new count = cache_num_rows();
	cache_delete(find_accounts);
	return count;
}

Bank_GetBalance(accountid)
{
	new queryy[144], Cache: get_balance;
	mysql_format(g_iHandle, queryy, sizeof(queryy), "SELECT Balance FROM bank_accounts WHERE ID=%d && Disabled=0", accountid);
	get_balance = mysql_query(g_iHandle, queryy);

	new balance = cache_get_field_content_int(0, "Balance");
	cache_delete(get_balance);
	return balance;
}

Bank_GetOwner(accountid)
{
	new queryy[144], owner[MAX_PLAYER_NAME], Cache: get_owner;
	mysql_format(g_iHandle, queryy, sizeof(queryy), "SELECT Owner FROM bank_accounts WHERE ID=%d && Disabled=0", accountid);
	get_owner = mysql_query(g_iHandle, queryy);

	cache_get_field_content(0, "Owner", owner);
	cache_delete(get_owner);
	return owner;
}

Bank_ListAccounts(playerid)
{
    new queryy[256], Cache: get_accounts;
    mysql_format(g_iHandle, queryy, sizeof(queryy), "SELECT ID, Balance, LastAccess, FROM_UNIXTIME(CreatedOn, '%%d/%%m/%%Y %%H:%%i:%%s') AS Created, FROM_UNIXTIME(LastAccess, '%%d/%%m/%%Y %%H:%%i:%%s') AS Last FROM bank_accounts WHERE Owner='%e' && Disabled=0 ORDER BY CreatedOn DESC", Player_GetName(playerid));
	get_accounts = mysql_query(g_iHandle, queryy);
    new rows = cache_num_rows();

	if(rows) {
	    new string[1024], cdate[24], ldate[24];
    	format(string, sizeof(string), "ID\tMevcut Para\tHesap Oluþturma\tLast Access\n");
	    for(new i; i < rows; ++i)
	    {
        	cache_get_field_content(i, "Created", cdate);
        	cache_get_field_content(i, "Last", ldate);
	        format(string, sizeof(string), "%s{FFFFFF}%d\t{2ECC71}%s\t{FFFFFF}%s\t%s\n", string, cache_get_field_content_int(i, "ID"), formatInt(cache_get_field_content_int(i, "Balance")), cdate, (cache_get_field_content_int(i, "LastAccess") == 0) ? ("Never") : ldate);
	    }

		ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_TABLIST_HEADERS, "{F1C40F}Banka: {FFFFFF}Hesabým", string, "Giriþ", "Geri");
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bir banka hesabýna sahip deðilsiniz.");
		Bank_ShowMenu(playerid);
	}

    cache_delete(get_accounts);
	return 1;
}

Bank_ShowLogs(playerid)
{
	new queryy[196], type = LogListType[playerid], Cache: bank_logs;
	mysql_format(g_iHandle, queryy, sizeof(queryy), "SELECT *, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i:%%s') as ActionDate FROM bank_logs WHERE AccountID=%d && Type=%d ORDER BY Date DESC LIMIT %d, 15", CurrentAccountID[playerid], type, LogListPage[playerid] * 15);
	bank_logs = mysql_query(g_iHandle, queryy);

	new rows = cache_num_rows();
	if(rows) {
		new list[1512], title[96], name[MAX_PLAYER_NAME], date[24];
		switch(type)
		{
		    case TYPE_LOGIN:
			{
				format(list, sizeof(list), "By\tGiriþ Tarihi\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Giriþ Geçmiþi(Page %d)", LogListPage[playerid] + 1);
			}

			case TYPE_DEPOSIT:
			{
				format(list, sizeof(list), "By\tAmount\tYatýrma Tarihi\n");
				format(title, sizeof(title), "{F1C40F}Bank: {FFFFFF}Deposit History (Page %d)", LogListPage[playerid] + 1);
			}

			case TYPE_WITHDRAW:
			{
				format(list, sizeof(list), "By\tAmount\tPara Çekme Tarihi\n");
				format(title, sizeof(title), "{F1C40F}Bank: {FFFFFF}Withdraw History (Page %d)", LogListPage[playerid] + 1);
			}

			case TYPE_TRANSFER:
			{
				format(list, sizeof(list), "By\tTo Account\tAmount\tTransfer Date\n");
				format(title, sizeof(title), "{F1C40F}Bank: {FFFFFF}Transfer History (Page %d)", LogListPage[playerid] + 1);
			}

			case TYPE_PASSCHANGE:
			{
				format(list, sizeof(list), "By\tAction Date\n");
				format(title, sizeof(title), "{F1C40F}Bank: {FFFFFF}Password Changes (Page %d)", LogListPage[playerid] + 1);
			}
		}

	    for(new i; i < rows; ++i)
	    {
	        cache_get_field_content(i, "Player", name);
        	cache_get_field_content(i, "ActionDate", date);

            switch(type)
			{
			    case TYPE_LOGIN:
				{
					format(list, sizeof(list), "%s%s\t%s\n", list, name, date);
				}

				case TYPE_DEPOSIT:
				{
					format(list, sizeof(list), "%s%s\t{2ECC71}%s\t%s\n", list, name, formatInt(cache_get_field_content_int(i, "Amount")), date);
				}

				case TYPE_WITHDRAW:
  		{
					format(list, sizeof(list), "%s%s\t{2ECC71}%s\t%s\n", list, name, formatInt(cache_get_field_content_int(i, "Amount")), date);
				}

				case TYPE_TRANSFER:
				{
					format(list, sizeof(list), "%s%s\t%d\t{2ECC71}%s\t%s\n", list, name, cache_get_field_content_int(i, "ToAccountID"), formatInt(cache_get_field_content_int(i, "Amount")), date);
				}

				case TYPE_PASSCHANGE:
				{
					format(list, sizeof(list), "%s%s\t%s\n", list, name, date);
				}
			}
	    }

		ShowPlayerDialog(playerid, DIALOG_BANK_LOG_PAGE, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Next", "Previous");
	}else{
		SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Aradýðýnýz kayýt bulunamadý.");
		Bank_ShowLogMenu(playerid);
	}

	cache_delete(bank_logs);
	return 1;
}


//==================[EV SÝSTEMÝ]=========
#define     MAX_EVS          (100)
#define     MAX_EV_NAME      (48)
#define     MAX_EV_PASSWORD  (16)
#define     MAX_EV_ADDRESS   (48)
#define     MAX_INT_NAME        (32)
#define     INVALID_EV_ID    (-1)
#define     EV_COOLDOWN      (6)
#define     LIMIT_PER_PLAYER    (3)


enum    _:e_lockmodes
{
	LOCK_MODE_NOLOCK,
	LOCK_MODE_PASSWORD,
	LOCK_MODE_KEYS,
	LOCK_MODE_OWNER
}

enum    _:e_selectmodes
{
	SELECT_MODE_NONE,
	SELECT_MODE_EDIT,
	SELECT_MODE_SELL
}

enum	_:e_dialogids
{
	DIALOG_BUY_EV = 7500,
	DIALOG_EV_PASSWORD,
	DIALOG_EV_MENU,
	DIALOG_EV_NAME,
	DIALOG_EV_NEW_PASSWORD,
	DIALOG_EV_LOCK,
	DIALOG_SAFE_MENU,
	DIALOG_SAFE_TAKE,
	DIALOG_SAFE_PUT,
	DIALOG_GUNS_MENU,
	DIALOG_GUNS_TAKE,
	DIALOG_FURNITURE_MENU,
	DIALOG_FURNITURE_BUY,
	DIALOG_FURNITURE_SELL,
	DIALOG_VISITORS_MENU,
	DIALOG_VISITORS,
	DIALOG_KEYS_MENU,
	DIALOG_KEYS,
	DIALOG_SAFE_HISTORY,
	DIALOG_MY_KEYS,
	DIALOG_BUY_EV_FROM_OWNER,
	DIALOG_SELL_EV,
	DIALOG_SELLING_PRICE
}

enum    e_EV
{
	Name[MAX_EV_NAME],
	Owner[MAX_PLAYER_NAME],
	Password[MAX_EV_PASSWORD],
	Address[MAX_EV_ADDRESS],
	Float: EVX,
	Float: EVY,
	Float: EVZ,
	Price,
	SalePrice,
	Interior,
	LockMode,
	SafeMoney,
	LastEntered,
	Text3D: EVLabel,
	EVPickup,
	EVIcon,
	bool: Save
};

enum    e_interior
{
	IntName[MAX_INT_NAME],
	Float: intX,
	Float: intY,
	Float: intZ,
	intID,
	Text3D: intLabel,
	intPickup
};

enum    e_furnituredata
{
	ModelID,
	Name[32],
	Price
};

enum    e_furniture
{
	SQLID,
	EVID,
	ArrayID,
	Float: furnitureX,
	Float: furnitureY,
	Float: furnitureZ,
	Float: furnitureRX,
	Float: furnitureRY,
	Float: furnitureRZ
};

enum    e_sazone
{
    SAZONE_NAME[28],
    Float: SAZONE_AREA[6]
};


//#define OnPlayerKeyStateChange Walk_OnPlayerKeyStateChange
forward Walk_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
forward HileyleAracPatlatma(playerid);
//===============[HIZ LÝMÝTÝ]============//
forward SetPlayerSpeedCap( playerid, Float:value );
forward OnPlayerMakeCBug(playerid);
forward DisablePlayerSpeedCap( playerid );
forward OnPlayerSerialBanned(playerid);
//forward HackCheck(playerid);
new
	Float:g_fSpeedCap[ MAX_PLAYERS ] = { 0.0, ... }
;

//===============[ANTI FAKEKILL]============//
new AntiFakekill[MAX_PLAYERS];
forward AntiFakekillTimer(playerid);

//===============[ARAÇ GÖSTERGE]============//
new PlayerText:AracGostergesi[3][MAX_PLAYERS];

//=============[ARAÇ INTERÝORLARI]==========//
new HangiTropic[MAX_PLAYERS];
new
	KaravanID[MAX_PLAYERS] = {INVALID_VEHICLE_ID, ...};
//===============[YARALANMA]============//
new Yarali[MAX_PLAYERS];
new TakiptekiYarali[MAX_PLAYERS];
new Float:Dx[MAX_PLAYERS],Float:Dy[MAX_PLAYERS],Float:Dz[MAX_PLAYERS];

new Float:DeathPosX                                     [MAX_PLAYERS];
new Float:DeathPosY                                     [MAX_PLAYERS];
new Float:DeathPosZ                                     [MAX_PLAYERS];
#define BAYGIN_SURE 180
new PlayerText:LoginTD[MAX_PLAYERS][25];
new PlayerText:TDEditor_TD[MAX_PLAYERS][6];
new Text:NewLoginTD[2];
new PlayerText:CharacterView[MAX_PLAYERS][18];

new CallNo[MAX_PLAYERS][7];
new Text:TelefonTD[18];
new Text:TelefonMenu[23];
new Text:TelefonGiris[3];
new Text:TelefonCevirme[24];
new Text:TelefonArama[5];
new PlayerText:TelefonPlayer[MAX_PLAYERS][4];
new PlayerText:TelefonYazi[MAX_PLAYERS][4];
new konusmasuresi[MAX_PLAYERS];

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

new takingselfie[MAX_PLAYERS];
new Float:Degree[MAX_PLAYERS];
const Float: Radius = 1.4; //do not edit this
const Float: Speed  = 1.25; //do not edit this
const Float: Height = 1.0; // do not edit this
new Float:lX[MAX_PLAYERS];
new Float:lY[MAX_PLAYERS];
new Float:lZ[MAX_PLAYERS];
//===============[QUIZ SÝSTEMÝ]============//

#define     MAX_QUIZ  (15)
new
	Quiz[MAX_QUIZ][1024],
	Siklar[MAX_QUIZ][1024],
	Cevaplar[MAX_QUIZ];

new
	SoruID[MAX_PLAYERS] = {-1, ...},
	SoruSoruldu[MAX_PLAYERS][MAX_QUIZ],
	YanlisCevap[MAX_PLAYERS],
	CevaplananSoru[MAX_PLAYERS],
	SonSoruID;
//A B C D E F G H K L M N O P R S T
new Harfler[][] ={"A", "B", "C", "D", "E", "F", "G", "H", "K", "L", "M", "N", "O", "P", "R", "S", "T"};

#define ALARM_UCRET (2500)
#define HURDA_UCRET (11500)

#define MAX_YARDIM_KOMUTLARI (300)
enum komutEnum
{
	komutVarmi,
	komutAd[24],
	komutTanim[256],
	komutKatagori,
	komutOlusum
};
new Komutlar[MAX_YARDIM_KOMUTLARI][komutEnum];

#define MAX_DYNAMIC_ACTORS (50)
enum actorEnum
{
	bool:actorVarmi,
	actorAd[32],
	actorSkin,
	Text3D:actorLabel,
	Text3D:actorUseLabel,
	actorReal,
	actorWorld,
	actorInterior,
	Float:actorPos[4]
};

new Actors[MAX_DYNAMIC_ACTORS][actorEnum];

enum  takimEnum
{
	takimAd[32],
	takimKullanildimi,
};

new Takimlar[][takimEnum] = {
    {"Manchester United"},
    {"Real Madrid"},
    {"FC Barcelona"},
    {"FC Bayern Münih"},
    {"Chelsea"},
    {"Arsenal"},
    {"Porto"},
    {"Inter"},
    {"Valencia"},
    {"Atletico Madrid"},
    {"FC Shaktar Donetsk"},
    {"Olimpik Lyon"},
    {"AC Milan"},
    {"SL Benfica"},
    {"Schalke"},
    {"Marsilya"},
    {"CSKA Moskova"},
    {"Liverpool"},
    {"Manchester City"},
    {"SP Portugal"},
    {"Roma"},
    {"Palermo"},
    {"Lille"},
    {"Braga"},
    {"Guimaraes"},
    {"Zulte Waragem"},
    {"Mechelen"},
    {"Puebla"},
    {"Los Santos FC"},
    {"Las Venturas FC"},
    {"Dillimore FC"},
    {"Bayside FC"},
    {"Atrantos FC"},
    {"San Fierro FC"},
    {"Chico"},
    {"Envigado"},
    {"Santa Fe"},
    {"Jaguares"},
    {"Atletico Bucar"},
    {"Sao Paulo"},
    {"Ituano"},
    {"Colo Colo"},
    {"Team Empire"},
    {"Skeeletons United"},
    {"Pyrolyse Team"},
    {"West Tigers"}
};

 //===============[BÝRLÝK SÝSTEMÝ]============//
#define  BIRLIK_KURMA_SEVIYESI  (3)
#define  BIRLIK_KURMA_PARASI  (10000)
new BirlikAdi[MAX_PLAYERS][24];

 //===========[SANEWS YAYIN SÝSTEMÝ]==========//

enum  yayin_Enum
{
	YayinDurum,
	Float:cPos[3],
	Float:lPos[3],
	YayinObject,
	YayinAltyazi[128],
	YayinAdi[24],
	YayinURL[128],
	yayinVW,
	yayinInterior,
	YayinEkstra[128]
};

new YayinVeri[yayin_Enum];
new Text:Yayin[11];

enum timer_data
{
	telefonKapat,
	telefonAc,
	memurcagirma,
	GBI,

}
new Timer[MAX_PLAYERS][timer_data];

 //==========[ETNÝK KÖKENLER]=======//

new Kokenler[][25] = {
{"Amerika"},
{"Ingiltere"},
{"Italya"},
{"Meksýka"},
{"Rusya"},
{"Isvec"},
{"Kanada"},
{"Avustralya"},
{"Avusturya"},
{"Cin"},
{"Fransa"},
{"Kore"},
{"Japonya"},
{"Irlanda"},
{"Jamika"},
{"Kolombiya"},
{"Brezilya"},
{"Polonya"},
{"Isvýcre"},
{"Danimarka"},
{"Belcika"},
{"Ispanya"},
{"Israil"},
{"Almanya"},
{"Yunanistan"}
};


 //==========[LSPD Cruiser]=======//
enum cruiserEnum {
	SlotAdi[24],
	SilahID,
	KalanMermi
};

new CruiserData[MAX_VEHICLES][5][cruiserEnum];
new Beanbag[MAX_VEHICLES];
new CelikYelek[MAX_VEHICLES];
new AgriKesici[MAX_VEHICLES];
enum silahEnum {
        silahID,
        silahOnayliMetal,
		silahOnaysizMetal,
        silahAd[128]
};

enum  gbData
{
	Float:minX,
	Float:minY,
	Float:maxX,
	Float:maxY,
	Zone,
	Rectangle,
};

new GuvenliBolge[][gbData] = {
{1041.5, -1384.5, 1338.5, -1265.5} // VERONA 3
};

enum  modgarageEnum
{
	Float:modifiyeX,
	Float:modifiyeY,
	Float:modifiyeZ,
	Float:modifiyeA,
	Text3D:modifiyeLabel,
	modifiyeMapIcon,
	modifiyePickup
};

new ModifiyeGarajlari[][modgarageEnum] = {
{1041.2935,-1030.1356,32.0865,179.1800},
{2645.2092,-2035.1563,13.5540,359.1915},
{-1935.5161,235.3533,34.3125,180.5899},
{-2713.1694,217.4347,4.2533,268.3241}
};

//ARAÇ RENK MENÜ
new SectigiAracRenk1[MAX_PLAYERS];
new SectigiAracRenk2[MAX_PLAYERS];
new MesajString[512];
 //==========[ANKESÖRLÜ TELEFON SÝSTEMÝ]=======//

enum  AnkesorluTelefonlar
{
	Float:ankesorX,
	Float: ankesorY,
	Float: ankesorZ,
    Text3D: ankesorLabel,
    ankesorIcon
};

new Ankesorlu[][AnkesorluTelefonlar] = {
{-1661.5938, 1398.0938, 6.8828},
{-1689.1172, 1359.5469, 6.8828},
{-1696.6875, 1334.4766, 6.8828},
{-1964.1406, 162.8672, 27.3516},
{-1965.2109, 162.8672, 27.3516},
{-1966.2812, 162.8672, 27.3516},
{-1967.3594, 162.8672, 27.3516},
{-2419.3516, 718.2109, 34.8594},
{1709.9922, -1604.9141, 13.2266},
{1711.3438, -1606.0391, 13.2266},
{1721.6719, -1720.3906, 13.2266},
{1721.6719, -1721.2891, 13.2266},
{1722.6094, -1720.3906, 13.2266},
{1722.6094, -1721.2891, 13.2266},
{1805.4062, -1600.4609, 13.2266},
{1806.3906, -1599.6172, 13.2266},
{1807.3828, -1598.7812, 13.2266},
{1808.3750, -1597.9219, 13.2266},
{1809.3438, -1597.0859, 13.2266},
{2068.9375, -1767.8359, 13.2109},
{2069.0000, -1766.6641, 13.2109},
{2165.9219, -1154.9609, 24.4141},
{2165.9219, -1155.8047, 24.4141},
{2257.6562, -1211.1875, 23.6797},
{2259.2031, -1211.2109, 23.6797},
{2279.2578, 2524.9844, 10.5391},
{2279.2578, 2526.7344, 10.5391},
{2279.2578, 2528.5547, 10.5391},
{278.5547, -1630.6719, 32.9297},
{279.1875, -1630.7812, 32.9297},
{295.1641, -1573.0625, 33.1562},
{296.7578, -1573.2969, 33.1562},
{302.0859, -1593.2031, 32.5156},
{303.0312, -1593.3125, 32.5156},
{355.8047, -1364.9531, 14.1641},
{356.3828, -1364.6797, 14.1641},
{379.1094, -1717.0469, 23.0391},
{379.1094, -1717.9141, 22.7734},
{638.0312, -1228.0234, 17.8203},
{638.0312, -1228.6641, 17.7891}
};

enum  baz_Enum
{
	Float:bazX,
	Float:bazY,
	Float:bazZ,
    Text3D:bazLabel,
    bazObject
};

enum bombaData {
	bombaPlaced,
	Float:bombaPos[3],
	bombaInterior,
	bombaWorld,
	bombaObject,
};

new BazIstasyonu[][baz_Enum] = {
{2565.8806,-635.8564,136.2760},
{1236.7795,-1225.5447,25.3548}
};
#define     VAULT_VIRTUALWORLD      (69)
#define     PICKUP_COOLDOWN         (3)
#define     DEPOSIT_MIN             (3500)
#define     DEPOSIT_MAX             (5000)

enum    e_objecttypes
{
        TYPE_LASER1 = 2,
        TYPE_LASER2,
        TYPE_LASER3,
        TYPE_VAULTDOOR = 6
};

enum    e_labeltypes
{
        Text3D: TYPE_KEYPAD,
        Text3D: TYPE_EXPLOSIVE,
        Text3D: TYPE_TIMELOCK
};

enum    e_bankcontrols
{
        bool: Alarm,
        bool: LasersOn,
        VaultDoorState,
        KeypadHackTime,
        DoorInteractionTime
};

new
        AlarmArea = -1,
    	VaultObjects[8] = {INVALID_OBJECT_ID, ...},
        Text3D: VaultLabels[e_labeltypes] = {Text3D: INVALID_3DTEXT_ID, ...},
        Text3D: InsideVaultLabels[8] = {Text3D: INVALID_3DTEXT_ID, ...},
        BankControls[e_bankcontrols],
        bool: DepositRobbed[8];

new
        RobberyTimer[MAX_PLAYERS] = {-1, ...},
        RobberyCounter[MAX_PLAYERS],
        RobberyType[MAX_PLAYERS],
        RobberyCash[MAX_PLAYERS],
        RobberyEscape[MAX_PLAYERS] = {-1, ...};

new
        Float: DepositCoords[8][3] = {
                {2141.9255, 1629.3380, 993.5761},
                {2141.9255, 1633.2180, 993.5761},
                {2141.9255, 1637.0980, 993.5761},
                {2141.9255, 1640.9780, 993.5761},
                {2146.5600, 1629.3040, 993.5761},
                {2146.5600, 1633.1840, 993.5761},
                {2146.5600, 1637.0640, 993.5761},
                {2146.5600, 1640.9440, 993.5761}
        };

new
        Float: GetawayLocations[][3] = {
        {405.4649, 2451.4956, 16.5000},
       // {-1647.8981, 2497.6980, 86.2031},
       // {-911.9169, -498.3112, 25.9609},
        {405.4649, 2451.4956, 16.5000},
         {405.4649, 2451.4956, 16.5000}
        };

forward RobberyUpdate(playerid);
forward ResetLasers();
forward OpenVaultDoor(type, seconds);
forward ResetVaultDoor();
forward DisableAlarm();

enum  agacEnum
{
	agacModel,
	Float:agacX,
	Float:agacY,
	Float:agacZ,
	agacKesildimi,
	agacHasar,
    agacObject,
    Text3D:agacLabel,
    agacSap
};

new Agaclar[][agacEnum] = {
{617, 760.50879, -227.69521, 11.33700}
};

#define KATAGORI_HESAP    		(0)
#define KATAGORI_ROL      		(1)
#define KATAGORI_DESTEK   		(2)
#define KATAGORI_OYUN     		(3)
#define KATAGORI_TELEFON  		(4)
#define KATAGORI_ENVANTER 		(5)
#define KATAGORI_BIRLIK   		(6)
#define KATAGORI_ARAC     		(7)
#define KATAGORI_SILAH    		(8)
#define KATAGORI_UYUSTURUCU     (9)
#define KATAGORI_EV     		(10)
#define KATAGORI_ISYERI         (11)
#define KATAGORI_OTEL           (12)
#define KATAGORI_BALIKCILIK     (13)
#define KATAGORI_TESTER         (14)
#define KATAGORI_ADMIN          (15)

new Float:DMRandomSpawn[][] =
{
	{1305.1410,4.0920,1001.0272,86.7666}, // Randomspawn
	{1252.9692,5.9944,1008.2578,268.0200}, // Randomspawn
	{1284.7468,-60.6096,1002.4991,0.7910}
};

#define MAX_PAINTBALL_ODA 10
#define PB_BEKLIYOR 0
#define PB_BASLADI 1
#define PB_X 1123.1628
#define PB_Y -2036.9438
#define PB_Z 69.8936
#define PB_A 272.6906
//new PlayerText:PBSkorTablosu[MAX_PLAYERS][6];

enum  paintballEnum
{
	odaAdi[24],
	odaSifre[24],
	odaVarmi,
	odaSahip,
	odaTur,
	odaDurum,
	odaSure,
	odaTakimPuan[2],
	odaMap
};


new Paintball[MAX_PAINTBALL_ODA][paintballEnum];

#define MAX_KERESTE (10)
enum  keresteEnum
{
	Float:keresteX,
	Float:keresteY,
	Float:keresteZ,
	Float:keresteA,
	keresteVehicle,
	keresteVarmi,
	keresteAgacID,
    keresteObject
};
new Keresteler[MAX_KERESTE][keresteEnum];


enum  katesiEnum
{
	Float:atesPos[3],
	atesVarmi,
    atesOdunObject,
    atesInterior,
    atesVW
};

new KampAtesleri[MAX_PLAYERS][katesiEnum];

enum  nargileEnum
{
	Float:nargilePos[3],
	nargileVarmi,
    nargileObject,
    dumanObject,
    nargileInterior,
    nargileVW
};

new NargileAtesleri[MAX_PLAYERS][nargileEnum];

#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

new GirisTimer[MAX_PLAYERS];
new bool:SigaraDurum[MAX_PLAYERS];
new bool:KiyafetDurum[MAX_PLAYERS];
new bool:PenisDurum[MAX_PLAYERS];

new PMSpec[MAX_PLAYERS];
new
        lsbarbell,
        sfbarbell,
        lvbarbell,
        lvbarbell2,
        IsEquipmentUsed[11],
        GymButton[MAX_PLAYERS],
        GymLoop[MAX_PLAYERS],
        GymPointvariable[MAX_PLAYERS],
        GymPointX[MAX_PLAYERS],
        GymTimer[MAX_PLAYERS],
        MyEquipment[MAX_PLAYERS]
;

#define OBJ_SLOT_POOL (0)

enum poolBall
{
	bObject,
	bExisting
}

new
	PlayingPool[MAX_PLAYERS],
	PoolCamera[MAX_PLAYERS],
	UsingChalk[MAX_PLAYERS],
	PoolScore[MAX_PLAYERS],
	Float:AimAngle[MAX_PLAYERS][2],
	AimObject,
	PoolStarted,
	PoolAimer = -1,
	PoolLastShooter = -1,
	PoolLastScore,
	PoolBall[16][poolBall],
	Text:PoolTD[4],
	Float:PoolPower,
	PoolDir;

forward AFKKicker();

#define AFKTime 10

new
        ShipObject[MAX_VEHICLES] = {INVALID_OBJECT_ID, ...};

new pizzahile[MAX_PLAYERS];

#pragma unused Business_GetCount
#pragma unused GetClosestGarbage


new shotTime[MAX_PLAYERS];
new shot[MAX_PLAYERS];
new NoReloading[MAX_PLAYERS];
new CurrentWeapon[MAX_PLAYERS];
new CurrentAmmo[MAX_PLAYERS];

#define forEx(%0,%1) for(new %1=0;%1<%0;%1++)
#define         MAX_Z_FISH_THRESHOLD            8.0
#define         WATER_CHECK_RADIUS              5.0


stock GetNumberOfPlayersOnThisIP(test_ip[])
{
   new against_ip[32+1];
   new ip_count = 0;
   for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
      if(IsPlayerConnected(i))
        {
          GetPlayerIp(i, against_ip, 32);
          if(!strcmp(against_ip, test_ip)) ip_count++;
      }
   }
   return ip_count;
}

stock const
	Float:BallSpawn[3] = {2706.9944, -1802.1829, 422.8372},
	Float:Corners[4][3] = {
		{2677.1453, -1748.0548, 422.8372},
		{2736.6797, -1747.9595, 422.8372},
		{2736.7180, -1856.2570, 422.8372},
		{2677.3398, -1856.5066, 422.8372}
	};


new
	Ball = -1,
	Goal = 0,
	LastTouch = INVALID_PLAYER_ID,
	pLastTick[MAX_PLAYERS],
	BallHolder = -1,
	PlayerText:pPowerTD[MAX_PLAYERS],
	Text:PowerTD[2];


new Speedlimit[MAX_PLAYERS];
// Texture Haritalar
//Player Textdraws:


#define MEMUR_X 	(246.3112)
#define MEMUR_Y 	(117.8975)
#define MEMUR_Z 	(1003.2184)

//-------- AKTÖRLER ------- //

#define GTIP_AILE (1)
#define GTIP_CETE (2)
#define GTIP_YARIS (3)
#define GTIP_LEGAL (4)
#define GTIP_TAMIRHANE (5)
#define GTIP_HITMAN (6)

//============================ Aksesuar SÝSTEMÝ ============================//


	#define COL_GREEN2         "{33CC00}" //this is color
    #define COL_WHITE          "{FFFFFF}" //this too
    #define DIALOG_ATTACH_INDEX             13500
    #define DIALOG_ATTACH_INDEX_SELECTION   DIALOG_ATTACH_INDEX+1
	#define DIALOG_ATTACH_EDITREPLACE       DIALOG_ATTACH_INDEX+2
    #define DIALOG_ATTACH_MODEL_SELECTION   DIALOG_ATTACH_INDEX+3
    #define DIALOG_ATTACH_BONE_SELECTION    DIALOG_ATTACH_INDEX+4
	#define AKSESUAR_SATINAL 23636

	enum AttachmentEnum
    {
        attachmodel,
        attachname[24]
    }

    new AttachmentObjects[][AttachmentEnum] = {
    {18632, "FishingRod"},
    {18633, "GTASAWrench1"},
    {18634, "GTASACrowbar1"},
    {18635, "GTASAHammer1"},
    {18638, "HardHat1"},
    {18639, "BlackHat1"},
    {18640, "Hair1"},
    {18975, "Hair2"},
    {19136, "Hair4"},
    {19274, "Hair5"},
    {18644, "Screwdriver1"},
    {18645, "MotorcycleHelmet1"},
    {18865, "MobilePhone1"},
    {18866, "MobilePhone2"},
    {18867, "MobilePhone3"},
    {18868, "MobilePhone4"},
    {18869, "MobilePhone5"},
    {18870, "MobilePhone6"},
    {18871, "MobilePhone7"},
    {18872, "MobilePhone8"},
    {18873, "MobilePhone9"},
    {18874, "MobilePhone10"},
    {18875, "Pager1"},
    {18890, "Rake1"},
    {18891, "Bandana1"},
    {18892, "Bandana2"},
    {18893, "Bandana3"},
    {18894, "Bandana4"},
    {18895, "Bandana5"},
    {18896, "Bandana6"},
    {18897, "Bandana7"},
    {18898, "Bandana8"},
    {18899, "Bandana9"},
    {18900, "Bandana10"},
    {18901, "Bandana11"},
    {18902, "Bandana12"},
    {18903, "Bandana13"},
    {18904, "Bandana14"},
    {18905, "Bandana15"},
    {18906, "Bandana16"},
    {18907, "Bandana17"},
    {18908, "Bandana18"},
    {18909, "Bandana19"},
    {18910, "Bandana20"},
    {18911, "Mask1"},
    {18912, "Mask2"},
    {18913, "Mask3"},
    {18914, "Mask4"},
    {18915, "Mask5"},
    {18916, "Mask6"},
    {18917, "Mask7"},
    {18918, "Mask8"},
    {18919, "Mask9"},
    {18920, "Mask10"},
    {18921, "Beret1"},
    {18922, "Beret2"},
    {18923, "Beret3"},
    {18924, "Beret4"},
    {18925, "Beret5"},
    {18926, "Hat1"},
    {18927, "Hat2"},
    {18928, "Hat3"},
    {18929, "Hat4"},
    {18930, "Hat5"},
    {18931, "Hat6"},
    {18932, "Hat7"},
    {18933, "Hat8"},
    {18934, "Hat9"},
    {18935, "Hat10"},
    {18936, "Helmet1"},
    {18937, "Helmet2"},
    {18938, "Helmet3"},
    {18939, "CapBack1"},
    {18940, "CapBack2"},
    {18941, "CapBack3"},
    {18942, "CapBack4"},
    {18943, "CapBack5"},
    {18944, "HatBoater1"},
    {18945, "HatBoater2"},
    {18946, "HatBoater3"},
    {18947, "HatBowler1"},
    {18948, "HatBowler2"},
    {18949, "HatBowler3"},
    {18950, "HatBowler4"},
    {18951, "HatBowler5"},
    {18952, "BoxingHelmet1"},
    {18953, "CapKnit1"},
    {18954, "CapKnit2"},
    {18955, "CapOverEye1"},
    {18956, "CapOverEye2"},
    {18957, "CapOverEye3"},
    {18958, "CapOverEye4"},
    {18959, "CapOverEye5"},
    {18960, "CapRimUp1"},
    {18961, "CapTrucker1"},
    {18962, "CowboyHat2"},
   // {18963, "CJElvisHead"},
    {18964, "SkullyCap1"},
    {18965, "SkullyCap2"},
    {18966, "SkullyCap3"},
    {18967, "HatMan1"},
    {18968, "HatMan2"},
    {18969, "HatMan3"},
    {18970, "HatTiger1"},
    {18971, "HatCool1"},
    {18972, "HatCool2"},
    {18973, "HatCool3"},
    {18974, "MaskZorro1"},
    {18976, "MotorcycleHelmet2"},
    {18977, "MotorcycleHelmet3"},
    {18978, "MotorcycleHelmet4"},
    {18979, "MotorcycleHelmet5"},
    {19006, "GlassesType1"},
    {19007, "GlassesType2"},
    {19008, "GlassesType3"},
    {19009, "GlassesType4"},
    {19010, "GlassesType5"},
    {19011, "GlassesType6"},
    {19012, "GlassesType7"},
    {19013, "GlassesType8"},
    {19014, "GlassesType9"},
    {19015, "GlassesType10"},
    {19016, "GlassesType11"},
    {19017, "GlassesType12"},
    {19018, "GlassesType13"},
    {19019, "GlassesType14"},
    {19020, "GlassesType15"},
    {19021, "GlassesType16"},
    {19022, "GlassesType17"},
    {19023, "GlassesType18"},
    {19024, "GlassesType19"},
    {19025, "GlassesType20"},
    {19026, "GlassesType21"},
    {19027, "GlassesType22"},
    {19028, "GlassesType23"},
    {19029, "GlassesType24"},
    {19030, "GlassesType25"},
    {19031, "GlassesType26"},
    {19032, "GlassesType27"},
    {19033, "GlassesType28"},
    {19034, "GlassesType29"},
    {19035, "GlassesType30"},
    {19036, "HockeyMask1"},
    {19037, "HockeyMask2"},
    {19038, "HockeyMask3"},
    {19039, "WatchType1"},
    {19040, "WatchType2"},
    {19041, "WatchType3"},
    {19042, "WatchType4"},
    {19043, "WatchType5"},
    {19044, "WatchType6"},
    {19045, "WatchType7"},
    {19046, "WatchType8"},
    {19047, "WatchType9"},
    {19048, "WatchType10"},
    {19049, "WatchType11"},
    {19050, "WatchType12"},
    {19051, "WatchType13"},
    {19052, "WatchType14"},
    {19053, "WatchType15"},
    {19085, "EyePatch1"},
    {19090, "PomPomBlue"},
    {19091, "PomPomRed"},
    {19092, "PomPomGreen"},
    {19093, "HardHat2"},
    {19094, "BurgerShotHat1"},
    {19095, "CowboyHat1"},
    {19096, "CowboyHat3"},
    {19097, "CowboyHat4"},
    {19098, "CowboyHat5"},
    {19113, "SillyHelmet1"},
    {19114, "SillyHelmet2"},
    {19115, "SillyHelmet3"},
    {19116, "PlainHelmet1"},
    {19117, "PlainHelmet2"},
    {19118, "PlainHelmet3"},
    {19119, "PlainHelmet4"},
    {19120, "PlainHelmet5"},
    {19137, "CluckinBellHat1"},
    {19160, "HardHat3"},
    {19163, "GimpMask1"},
    {19317, "bassguitar01"},
    {19318, "flyingv01"},
    {19319, "warlock01"},
    {19330, "fire_hat01"},
    {19331, "fire_hat02"},
    {19348, "cane01"},
    {19349, "monocle01"},
    {19350, "moustache01"},
    {19351, "moustache02"},
    {19352, "tophat01"},
    {19487, "tophat02"},
    {19488, "HatBowler6"},
    {19513, "whitephone"},
    {3044, "Cigar"},
    {1210, "Briefcase"},
    {19559, "Dað Çantasý"},
    {19904, "Ýnþaat Yeleði"},
    {19517, "Sarý Saç"},
    {19077, "Siyah Saç"},
    {18641, "El Feneri"},
    {19317, "Gitar 1"},
    {19318, "Gitar 2"},
    {19319, "Gitar 3"},
    {19553, "Kovboy Þapkasý"},
    {19554, "Siyah Bere"},
    {19623, "Kamera"},
    {19610, "Mikrofon"},
    {19624, "Bavul"},
    {11745, "Bavul 2"},
	{19625, "Sigara"}
    };

    enum a_CopEnum
    {
        olusumamodel,
        olusumaname[24]
    }

    new AttachCops[][a_CopEnum] = {
	{19141, "SWAT Kaský1"},
	{19142, "SWAT Zýrhý1"},
	{18636, "Polis Kepi1"},
	{19099, "Polis Kepi2"},
	{19100, "Polis Kepi3"},
	{18637, "Polis Kalkaný1"},
	{19161, "Polis Þapkasý1"},
	{19162, "Polis Þapkasý2"},
	{19200, "Polis Kaský1"},
	{19138, "Polis Gözlüðü1"},
	{19139, "Polis Gözlüðü2"},
	{19140, "Polis Gözlüðü3"},
	{19347, "Rozet"},
	{19472, "Gaz Maskesi"},
	{19773, "Kýlýf"},
	{19785, "Senior Arma"},
	{19521, ""},
	{19520, ""}
	};

    new AttachmentBones[][24] = {
    {"Omurga"},
    {"Kafa"},
    {"Sol Üst Kol"},
    {"Sað Üst Kol"},
    {"Sol El"},
    {"Sað El"},
    {"Sol Uyluk"},
    {"Sað Uyluk"},
    {"Sol Ayak"},
    {"Sað Ayak"},
    {"Sað Baldýr"},
    {"Sol Baldýr"},
    {"Sol Önkol"},
    {"Sað Önkol"},
    {"Sol Köprücük"},
    {"Sað Köprücük"},
    {"Boyun"},
    {"Çene"}
    };

    #define PD_ENGEL 23638

	enum EngellerEnum
    {
        engelmodel,
        engeladi[24]
    }

   /* new Engeller[][EngellerEnum] = {
	{1238, "Koni"},
	{1228, "Küçük Barikat 1"},
	{1282, "Küçük Barikat 2"},
	{1424, "Küçük Barikat 3"},
	{1237, "Varil"},
	{978, "Orta Barikat 1"},
	{979, "Orta Barikat 2"},
	{981, "Büyük Barikat"},
	{19467, "Tümsek"},
	{19834, "Olayyeri Þeridi"}
	};*/

//============================ GÝÞE SÝSTEMÝ ============================//
// Main configuration
#define TollCost (10) 					// How much it costs to pass the tolls
#define TollDelayCop (4) 				// The timespace in seconds between each /toll command for all cops (To avoid spam)
#define TollOpenDistance (8.0) 			// The distance in units the player can be from the icon to open the toll
new gisemsg[256];
// Other defines
#define MAX_TOLLS (5) // Amount of tolls
#define INVALID_TOLL_ID (-1)
#define RichmanToll (0)
#define FlintToll (1)
#define LVToll (2)
#define BlueberryTollR (3)
#define BlueberryTollL (4)
#define Pasaport (1)

#define L_sz_TollStringLocked ("Giþe Memuru: Üzgünüm fakat þu an size giþeleri açamam.")
#define L_sz_TollStringNoMoney ("Giþe memuruna para vermek için yeterli paranýz yok!")
#define L_sz_TollStringBye ("Giþe Memuru: Teþekkürler, iyi günler dilerim.")
#define L_sz_TollStringHurryUp ("Giþeden geçme süreniz 5 saniyedir.")
#define l_sz_TollPasaportYok ("Bir pasaporta sahip deðilsiniz.")
#define SCM SendClientMessage
//Tolls
new L_a_RequestAllowedCop, // The same timer for all /toll changes
	L_a_TollObject[MAX_TOLLS*2]; // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
//Tolls
//========================BoomBox URL's========================//
enum TOLL_INFO
{
	E_tLocked,  // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
	E_tOpenTime // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
}
new aTolls[MAX_TOLLS][TOLL_INFO];

//============================ GÝÞE SÝSTEMÝ ============================//

new Text:Altyazi1;
new Text:Altyazi2;
new Text:Altyazi3;
#define MODEL_SELECTION_LSPD (2898)
#define SERVER_NAME 	 "Varna Roleplay - www.varnarpg.com"
#define SERVER_URL 		 "www.varnarpg.com"
#define SERVER_MAP 		 "Los Santos"
#define SERVER_REVISION  "vBeta: 1.0.0"
#define SERVER_VERSION   "vBeta: 1.0.0"
#define SERVER_DIL       "Cyclops"
#define SERVER_CITY 	 (1) // (1) Los Santos, (2) San Fierro, (3) Las Venturas
#define R "{FF0000}" //red
#define G "{B5B5BC}" //gray
#define B "{FFFFFF}" //white
#define M "{A88022}" //brown
#define GR "{2ECC71}" //Yeþil

#define SOL "\\"
#define SAG "\/"
#define COLOR_BLACK       (0x000000FF)
#define COLOR_CLIENT      (0xAAC4E5FF)
#define COLOR_WHITE       (0xFFFFFFFF)
#define COLOR_RED         (0xFF0000FF)
#define COLOR_CYAN        (0xC2A2DAAA)
#define COLOR_LIGHTRED    (0xFF6347FF)
//#define COLOR_LIGHTRED    (0xFF0000FF)
#define COLOR_LIGHTGREEN  (0x9ACD32FF)
#define COLOR_YELLOW      (0xFFFF00FF)
#define COLOR_GREY        (0xAFAFAFFF)
#define COLOR_GRAD2       (0xAFAFAFFF)
#define COLOR_HOSPITAL    (0xFF8282FF)
#define COLOR_PURPLE      (0xD0AEEBFF)
#define COLOR_HELPERRENK1 (0xE6E600FF)
#define COLOR_LIGHTYELLOW (0xF5DEB3FF)
#define COLOR_DARKBLUE    (0x1394BFFF)
#define COLOR_ORANGE      (0xFFA500FF)
#define COLOR_LIME        (0x00FF00FF)
#define COLOR_GREEN       (0x33AA33AA)
#define COLOR_BLUE        (0x2641FEFF)
#define COLOR_DARKGREEN   (0x33AA33FF)
#define COLOR_GRAD1	      (0xCCE6E6FF)
#define COLOR_GRAY (0x808080FF)
#define COLOR_FACTION     (0xBDF38BFF)
#define COLOR_RADIO       (0x8D8DFFFF)
#define COLOR_LIGHTBLUE   (0x007FFFFF)
#define COLOR_SERVER      (0xFFFF90FF)
#define COLOR_DEPARTMENT  (0xF0CC00FF)
#define COLOR_ADMINCHAT   (0x33EE33FF)
#define DEFAULT_COLOR     (0xFFFFFFFF)
#define COLOR_LSPDNEW 0x9189EFFF
#define THREAD_CREATE_CHAR (1)
#define THREAD_CHECK_ACCOUNT (2)
#define THREAD_LOGIN (3)
#define THREAD_CHARACTERS (4)
#define THREAD_LOAD_CHARACTER (5)
#define THREAD_VERIFY_PASS (6)
#define THREAD_FIND_USERNAME (7)
#define THREAD_LOAD_INVENTORY (8)
#define THREAD_BAN_LOOKUP (9)
#define THREAD_LOAD_CONTACTS (10)
#define THREAD_LOAD_LOCATIONS (11)
#define THREAD_LOAD_TICKETS (12)
#define THREAD_SHOW_CHARACTER (13)
#define THREAD_LOAD_KUPON (14)
#define THREAD_LOAD_KONTRAKT (15)
#define THREAD_LOAD_URUN (16)
#define MODEL_SELECTION_SKIN (4)
#define MODEL_SELECTION_INVENTORY (5)
#define MODEL_SELECTION_CLOTHES (6)
#define MODEL_SELECTION_DEALER (7)
#define MODEL_SELECTION_DEALER_ADD (8)
#define MODEL_SELECTION_BUY_CAR (9)
#define MODEL_SELECTION_FURNITURE (10)
#define MODEL_SELECTION_COLOR (11)
#define MODEL_SELECTION_SKINS (12)
#define MODEL_SELECTION_ADD_SKIN (13)
#define MODEL_SELECTION_FACTION_SKIN (14)
#define MODEL_SELECTION_WHEELS (15)
#define MODEL_SELECTION_FRISK (16)
#define MODEL_SELECTION_MAYOLAR (17)
#define MODEL_SELECTION_VIP (18)
#define MODEL_SELECTION_SOYUNMA (67318)

#define FACTION_POLICE (1)
#define FACTION_NEWS (2)
#define FACTION_MEDIC (3)
#define FACTION_GOV (4)
#define FACTION_GANG (5)
#define FACTION_INTEL (6)
#define FACTION_AKADEMI (7)

#define KAZANC_PIZZA         35


#define JOB_COURIER (1)
#define JOB_MECHANIC (2) //
#define JOB_TAXI (3) //
#define JOB_UNLOADER (4) //
#define JOB_MINER (5)
#define JOB_FOOD_VENDOR (6) //
#define JOB_GARBAGE (7) //
#define JOB_SORTER (8) //
#define JOB_WEAPON_SMUGGLER (9) //
#define JOB_TIRCILIK (10)
#define JOB_OTOBUSSOFORU (11) //
#define JOB_PIZZACILIK (12)
#define JOB_CIFTCILIK (13)
#define JOB_ODUNCULUK (14) //
#define JOB_TEMIZLIKCI (15) //
#define JOB_E_KACAKCILIK (16) //
#define JOB_I_KACAKCILIK (17)
#define JOB_CIMENTO (18)
#define JOB_TASIMACI (19)
#define JOB_UYUSTURUCU (20)
#define JOB_INSAAT (21)

//inþaat mesleði pei
#define INDEX_EKSTRASILAH 8
#define kutual 2703.2803,902.5160,10.4338 // kutu alma bölgesi
#define kutubirak 2699.4321,882.6678,10.3957 // 1 bölge
#define kutubirak2 2677.2046,865.2785,10.9395 // 2 bölge
#define kutubirak3 2692.3896,827.9319,10.0126 // 3 bölge
#define kutubirak4 2713.5554,811.9569,10.8984 // 4 bölge
#define kutubirak5 2619.9783,820.0101,5.3158 // 5 bölge

//new CPotobus[MAX_PLAYERS];

#define otobus1 1
#define otobus1_CO 1819.4210,-1869.2213,13.4141

#define otobus2 2
#define otobus2_CO 1819.2510,-1890.6771,13.3894

#define otobus3 3
#define otobus3_CO 1818.9677,-1926.4794,13.3806

#define otobus4 4
#define otobus4_CO 1834.1071,-1935.2390,13.3761

#define otobus5 5
#define otobus5_CO 1853.6533,-1934.8553,13.3767

#define otobus6 6
#define otobus6_CO 1881.0449,-1934.6577,13.3828

#define otobus7 7
#define otobus7_CO 1930.9160,-1934.2976,13.3828

#define otobus8 8
#define otobus8_CO 1957.3712,-1934.1068,13.3828

#define otobus9 9
#define otobus9_CO 1959.1177,-1962.9043,13.6732

#define otobus10 10
#define otobus10_CO 1957.4576,-2026.4313,13.3906

#define otobus11 11
#define otobus11_CO 1959.2229,-2054.3137,13.3828

#define otobus12 12
#define otobus12_CO 1959.1187,-2096.8616,13.3902

#define otobus13 13
#define otobus13_CO 1972.7834,-2112.6189,13.3845

#define otobus14 14
#define otobus14_CO 2008.6425,-2113.5366,13.3818

#define otobus15 15
#define otobus15_CO 2057.1873,-2112.9197,13.3710

#define otobus16 16
#define otobus16_CO 2095.7275,-2113.8394,13.3002

#define otobus17 17
#define otobus17_CO 2128.3188,-2116.3374,13.3482

#define otobus18 18
#define otobus18_CO 2168.3464,-2138.2292,13.3480

#define otobus19 19
#define otobus19_CO 2197.7275,-2168.2749,13.3480

#define otobus20 20
#define otobus20_CO 2222.7712,-2145.4436,13.3758

#define otobus21 21
#define otobus21_CO 2268.5686,-2101.0486,13.7067

#define otobus22 22
#define otobus22_CO 2287.0334,-2082.0085,13.3679

#define otobus23 23
#define otobus23_CO 2252.0247,-2044.7432,13.3919

#define otobus24 24
#define otobus24_CO 2219.7720,-2010.8215,13.3607

#define otobus25 25
#define otobus25_CO 2216.6892,-1975.0107,13.3906

#define otobus26 26
#define otobus26_CO 2219.4133,-1924.7709,13.3247

#define otobus27 27
#define otobus27_CO 2220.9824,-1872.0974,13.3828

#define otobus28 28
#define otobus28_CO 2219.2725,-1811.8229,13.1953

#define otobus29 29
#define otobus29_CO 2218.9744,-1761.7283,13.3767

#define otobus30 30
#define otobus30_CO 2219.4832,-1735.3883,13.4062

#define otobus31 31
#define otobus31_CO 2236.1023,-1735.5591,13.3828

#define otobus32 32
#define otobus32_CO 2272.2810,-1735.6931,13.3828

#define otobus33 33
#define otobus33_CO 2300.6963,-1735.7983,13.3828

#define otobus34 34
#define otobus34_CO 2341.4209,-1735.9495,13.3828

#define otobus35 35
#define otobus35_CO 2385.7097,-1736.1136,13.3828

#define otobus36 36
#define otobus36_CO 2425.8887,-1735.8214,13.4444

#define otobus37 37
#define otobus37_CO 2478.7866,-1734.6145,13.3828

#define otobus38 38
#define otobus38_CO 2528.6006,-1734.7993,13.3828

#define otobus39 39
#define otobus39_CO 2574.9155,-1734.9712,13.3828

#define otobus40 40
#define otobus40_CO 2619.5857,-1735.1368,11.4965

#define otobus41 41
#define otobus41_CO 2644.5425,-1734.8619,10.7344

#define otobus42 42
#define otobus42_CO 2646.3518,-1716.0647,10.7344

#define otobus43 43
#define otobus43_CO 2645.7874,-1672.1719,10.7610

#define otobus44 44
#define otobus44_CO 2646.3521,-1618.1965,10.7286

#define otobus45 45
#define otobus45_CO 2645.2478,-1598.4912,12.2979

#define otobus46 46
#define otobus46_CO 2645.5955,-1565.0809,18.3345

#define otobus47 47
#define otobus47_CO 2645.8638,-1539.4117,22.9738

#define otobus48 48
#define otobus48_CO 2645.3496,-1495.8387,30.2572

#define otobus49 49
#define otobus49_CO 2646.7634,-1433.3907,30.2813

#define otobus50 50
#define otobus50_CO 2645.2651,-1384.9277,30.2813

#define otobus51 51
#define otobus51_CO 2645.6482,-1348.0814,35.0390

#define otobus52 52
#define otobus52_CO 2645.5017,-1314.5090,41.1046

#define otobus53 53
#define otobus53_CO 2645.5073,-1263.2479,49.8438

#define otobus54 54
#define otobus54_CO 2645.7654,-1204.5769,49.9931

#define otobus55 55
#define otobus55_CO 2645.4712,-1134.0011,64.5545

#define otobus56 56
#define otobus56_CO 2645.9131,-1091.5258,69.4512

#define otobus57 57
#define otobus57_CO 2646.0383,-1052.4628,69.4068

#define otobus58 58
#define otobus58_CO 2630.0444,-1043.9108,69.4141

#define otobus59 59
#define otobus59_CO 2579.8469,-1044.1467,69.4141

#define otobus60 60
#define otobus60_CO 2559.0935,-1065.7236,69.0888

#define otobus61 61
#define otobus61_CO 2524.3752,-1089.2078,56.6227

#define otobus62 62
#define otobus62_CO 2459.6428,-1084.4806,42.8245

#define otobus63 63
#define otobus63_CO 2367.0459,-1097.7003,33.8113

#define otobus64 64
#define otobus64_CO 2322.0042,-1139.9480,26.9890

#define otobus65 65
#define otobus65_CO 2297.2676,-1147.7769,26.7717

#define otobus66 66
#define otobus66_CO 2226.9536,-1132.3416,25.6250

#define otobus67 67
#define otobus67_CO 2167.4104,-1116.6050,25.4140

#define otobus68 68
#define otobus68_CO 2131.6892,-1108.6349,25.2002

#define otobus69 69
#define otobus69_CO 2061.9048,-1083.2382,24.7527

#define otobus70 70
#define otobus70_CO 2016.8964,-1063.2258,24.4737

#define otobus71 71
#define otobus71_CO 1938.1886,-1039.7920,23.9426

#define otobus72 72
#define otobus72_CO 1876.9478,-1045.0388,23.6797

#define otobus73 73
#define otobus73_CO 1864.4967,-1083.3706,23.6644

#define otobus74 74
#define otobus74_CO 1864.6389,-1124.9800,23.7336

#define otobus75 75
#define otobus75_CO 1862.1193,-1178.1299,23.6563

#define otobus76 76
#define otobus76_CO 1823.4553,-1178.6786,23.6279

#define otobus77 77
#define otobus77_CO 1766.7594,-1164.3905,23.6518

#define otobus78 78
#define otobus78_CO 1704.5466,-1159.3818,23.6563

#define otobus79 79
#define otobus79_CO 1659.2905,-1157.1449,23.7292

#define otobus80 80
#define otobus80_CO 1617.7283,-1158.2390,23.8976

#define otobus81 81
#define otobus81_CO 1545.8999,-1158.3450,23.9063

#define otobus82 82
#define otobus82_CO 1452.3771,-1158.1683,23.6645

#define otobus83 83
#define otobus83_CO 1388.0791,-1139.7317,23.6563

#define otobus84 84
#define otobus84_CO 1339.9279,-1139.4540,23.6563

#define otobus85 85
#define otobus85_CO 1339.7010,-1193.1721,20.0364

#define otobus86 86
#define otobus86_CO 1339.5771,-1278.1276,13.3828

#define otobus87 87
#define otobus87_CO 1339.4661,-1360.2427,13.3828

#define otobus88 88
#define otobus88_CO 1334.9711,-1397.3129,13.3304

#define otobus89 89
#define otobus89_CO 1304.9347,-1397.1255,13.2388

#define otobus90 90
#define otobus90_CO 1283.0696,-1391.4382,13.2876

#define otobus91 91
#define otobus91_CO 1242.3883,-1397.3187,13.0347

#define otobus92 92
#define otobus92_CO 1177.1482,-1397.2682,13.2809

#define otobus93 93
#define otobus93_CO 1100.5742,-1397.2085,13.4517

#define otobus94 94
#define otobus94_CO 1029.1249,-1397.1534,13.1789

#define otobus95 95
#define otobus95_CO 930.5071,-1397.0769,13.2720

#define otobus96 96
#define otobus96_CO 808.4324,-1396.9821,13.4704

#define otobus97 97
#define otobus97_CO 723.4608,-1396.9158,13.4704

#define otobus98 98
#define otobus98_CO 689.3904,-1396.8906,13.3908

#define otobus99 99
#define otobus99_CO 660.3761,-1391.3239,13.4904

#define otobus100 100
#define otobus100_CO 585.9913,-1401.0879,13.6675

#define otobus101 101
#define otobus101_CO 506.1694,-1420.2706,15.8709

#define otobus102 102
#define otobus102_CO 462.6595,-1440.0426,24.7933

#define otobus103 103
#define otobus103_CO 424.2363,-1450.1727,30.2147

#define otobus104 104
#define otobus104_CO 392.7904,-1406.6287,34.0579

#define otobus105 105
#define otobus105_CO 356.6227,-1433.0878,34.2793

#define otobus106 106
#define otobus106_CO 293.0827,-1487.7201,32.6405

#define otobus107 107
#define otobus107_CO 251.3112,-1483.9871,25.6074

#define otobus108 108
#define otobus108_CO 209.7003,-1520.1219,16.3526

#define otobus109 109
#define otobus109_CO 175.9351,-1514.9785,12.3097

#define otobus110 110
#define otobus110_CO 144.1199,-1560.8496,10.4078

#define otobus111 111
#define otobus111_CO 118.6207,-1600.9114,10.4859

#define otobus112 112
#define otobus112_CO 111.0868,-1634.0442,10.1153

#define otobus113 113
#define otobus113_CO 112.7422,-1673.8855,9.7574

#define otobus114 114
#define otobus114_CO 149.4021,-1739.4353,5.2434

#define otobus115 115
#define otobus115_CO 213.7829,-1734.6086,4.3724

#define otobus116 116
#define otobus116_CO 306.8733,-1740.8724,4.3454

#define otobus117 117
#define otobus117_CO 341.2263,-1753.0028,4.4809

#define otobus118 118
#define otobus118_CO 355.2872,-1775.8895,5.2286

#define otobus119 119
#define otobus119_CO 404.2063,-1776.6331,5.3062

#define otobus120 120
#define otobus120_CO 440.4440,-1775.7621,5.3270

#define otobus121 121
#define otobus121_CO 460.9571,-1756.5425,5.4988

#define otobus122 122
#define otobus122_CO 462.9488,-1724.7922,10.5006

#define otobus123 123
#define otobus123_CO 523.0933,-1732.6554,11.9803

#define otobus124 124
#define otobus124_CO 597.2869,-1742.8701,13.2313

#define otobus125 125
#define otobus125_CO 695.4357,-1766.0536,13.5592

#define otobus126 126
#define otobus126_CO 806.9274,-1786.6862,13.4183

#define otobus127 127
#define otobus127_CO 937.1039,-1793.0004,13.6831

#define otobus128 128
#define otobus128_CO 1018.2557,-1815.6854,13.9601

#define otobus129 129
#define otobus129_CO 1075.4847,-1854.0679,13.3910

#define otobus130 130
#define otobus130_CO 1148.3832,-1855.2994,13.3938

#define otobus131 131
#define otobus131_CO 1229.2656,-1854.9531,13.3828

#define otobus132 132
#define otobus132_CO 1286.1466,-1854.6702,13.3906

#define otobus133 133
#define otobus133_CO 1334.8041,-1858.4324,13.3906

#define otobus134 134
#define otobus134_CO 1388.1162,-1875.1127,13.3828

#define otobus135 135
#define otobus135_CO 1441.5247,-1875.0179,13.3906

#define otobus136 136
#define otobus136_CO 1520.6362,-1875.3784,13.3828

#define otobus137 137
#define otobus137_CO 1615.5088,-1875.0902,13.3828

#define otobus138 138
#define otobus138_CO 1672.3174,-1871.7097,13.3906

#define otobus139 139
#define otobus139_CO 1691.3502,-1835.5898,13.3828

#define otobus140 140
#define otobus140_CO 1705.8414,-1814.2795,13.3645

#define otobus141 141
#define otobus141_CO 1750.2499,-1823.9047,13.3867

#define otobus142 142
#define otobus142_CO 1802.0934,-1835.7101,13.3828

#define otobus143 143
#define otobus143_CO 1818.9479,-1842.3829,13.4141

#define otobus144 144
#define otobus144_CO 1814.9385,-1860.1489,13.4141

//yeni hesap
stock kapatac(durum)
{
		new mesaj[128];
	    switch(durum)
	    {
	        case 0: mesaj = "{FF4A4A}Kapat";
	        case 1: mesaj = "{00BB3E}Aç";
	    }
	return mesaj;
}
stock IsPlayerFalling(playerid)
{
    if(GetPlayerAnimationIndex(playerid) == 1195 || GetPlayerAnimationIndex(playerid) == 1197 || GetPlayerAnimationIndex(playerid) == 1133 || GetPlayerAnimationIndex(playerid) == 1130)
    {
        new Float:Z;
        GetPlayerVelocity(playerid, Z, Z, Z);
        if(Z != 0)
        {
            return 1;
        }

    }
    return 0;
}
stock GetFreeObjectID()
{
	new id = -1;
	for(new i; i < MAX_COP_OBJECTS; i++)
	{
	    if(!CopObjectData[i][ObjCreated])
	    {
	        id = i;
	        break;
	    }
	}

	return id;
}
/*encode_lights(light1, light2, light3, light4) {

	return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);

}
encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper) {

	return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);

}
encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door) {
	#pragma unused behind_driver_door
	#pragma unused behind_passenger_door

	// will be modified once again, when rear doors are synced.
	return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);

}*/
encode_tires(tire1, tire2, tire3, tire4) {

	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);

}

stock ackapat(durum)
{
		new mesaj[128];
	    switch(durum)
	    {
	        case 0: mesaj = "{00BB3E}Aç";
	        case 1: mesaj = "{FF4A4A}Kapat";
	    }
	return mesaj;
}

#define E_KACAKCILIK_YUKALMA_X 642.0709
#define E_KACAKCILIK_YUKALMA_Y -499.9306
#define E_KACAKCILIK_YUKALMA_Z 16.3359
#define E_KACAKCILIK_YUKTESLIM_X 2209.3499
#define E_KACAKCILIK_YUKTESLIM_Y -2641.2695
#define E_KACAKCILIK_YUKTESLIM_Z 13.5469
#define E_KACAKCILIK_VERILEN_EXP 5
#define E_KACAKCILIK_VERILEN_PARA 550
#define E_KACAKCILIK_VERILEN_KASA 15

#define I_KACAKCILIK_YUKALMA_X 2534.8809
#define I_KACAKCILIK_YUKALMA_Y -2131.6790
#define I_KACAKCILIK_YUKALMA_Z 13.5469
#define I_KACAKCILIK_YUKTESLIM_X 2808.0352
#define I_KACAKCILIK_YUKTESLIM_Y 903.3627
#define I_KACAKCILIK_YUKTESLIM_Z 10.7500
#define I_KACAKCILIK_VERILEN_EXP 15
#define I_KACAKCILIK_VERILEN_PARA 475
#define I_KACAKCILIK_VERILEN_KASA 75

#define SendServerMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_DARKGREEN, "[V:RP] {FFFFFF}"%1)

#define SendSyntaxMessage(%0,%1) \
	SendClientMessageEx(%0, 0xFFFF00FF, "[!] {FFFFFF}"%1)

#define SendErrorMessage(%0,%1) \
	SendClientMessageEx(%0, 0xE74C3CFF, "Server: {FFFFFF}"%1)

#define SendAdminAction(%0,%1) \
	SendClientMessageEx(%0, 0x8000FFFF, "[!] {FFFFFF}"%1)



#define MAX_OTELODASI (10)
#define MAX_HABER (10)
#define MAX_SANDIK (10)
#define MAX_BILLBOARDS (20)
#define MAX_REPORTS (20)
#define MAX_SORU (20)
#define MAX_INVENTORY (120)
#define MAX_URUN (120)
#define MAX_HOUSES (350)
#define MAX_HOUSE_STORAGE (10)
#define MAX_BUSINESSES (500)
#define MAX_DROPPED_ITEMS (500)
#define MAX_ENTRANCES (100)
#define MAX_DEALERSHIP_CARS (150)
#define MAX_DYNAMIC_CARS (4000)
#define MAX_GAS_PUMPS (30)
#define MAX_FURNITURE (500)
#define MAX_HOUSE_FURNITURE (500)
#define MAX_DYNAMIC_JOBS (20)
#define MAX_CONTACTS (20)
#define MAX_GPS_LOCATIONS (20)
#define MAX_SERVER_LOCATIONS (20)
#define MAX_CAR_STORAGE (3)
#define MAX_BIKE_STORAGE (2)
#define MAX_CRATES (200)
#define MAX_DRUG_PLANTS (100)
#define MAX_FACTIONS (100)
#define MAX_ARREST_POINTS (10)
#define MAX_PLAYER_TICKETS (5)
#define MAX_KUPON (2)
#define MAX_DONATOR_KUPON (3)
#define MAX_KONTRAKT (3)
#define MAX_MAC (50)
#define MAX_BARRICADES (25)
#define MAX_BOOTHS (8)
#define MAX_GATES (125)
#define MAX_OBJECT (500)
#define MAX_FABRIKA (10)
#define MAX_MEZAR (150)
#define MAX_ONAYLIHOOD (100)
#define MAX_IMPOUND_LOTS (20)
#define MAX_YARIS (10)
#define MAX_GARBAGE_BINS (150)
#define MAX_VENDORS (100)
#define MAX_WEAPON_RACKS (100)
#define MAX_SPEED_CAMERAS (20)
#define MAX_LISTED_ITEMS (10)
#define MAX_GRAFFITI_POINTS (20)
#define MAX_METAL_DETECTORS (20)
#define MAX_CADIR (99)

#define MAX_OWNABLE_CARS (6)
#define MAX_OWNABLE_HOUSES (6)
#define MAX_OWNABLE_BUSINESSES (6)

#define MAX_BACKPACKS (1000)
#define MAX_BACKPACK_ITEMS (4000)
#define MAX_BACKPACK_CAPACITY (10)

#define PRISON_WORLD (63261)


#define SICIL_BAN   (1)
#define SICIL_JAIL  (2)

new TruckingCheck[MAX_PLAYERS];
new Text3D:vehicle3Dtext[MAX_VEHICLES];
new Text3D:aracilan[MAX_VEHICLES];
new vehicletext[MAX_VEHICLES][24];
new vehiclecallsign[MAX_VEHICLES];
new tiryuk[MAX_VEHICLES];
new yuktip[MAX_VEHICLES];
new tiryapiyor[MAX_PLAYERS];

#define CEVAPSIZ_ARAMA ("Cevapsýz Arama")
#define REDDEDILEN_ARAMA ("Reddedilen Arama")
#define FREEZE_SECONDS 5
#define red 0xF22E59FF
#define green 0x6FF22EFF
#define GELEN_ARAMA ("Gelen Arama")
#define GIDEN_ARAMA ("Giden Arama")


enum hasarData {
	hasarVarmi,
	hasarBolge,
	Float:hasarDeger,
	hasarVeren,
	hasarSilah
};
enum plantData {
	plantID,
	plantExists,
	plantType,
	plantDrugs,
	Float:plantPos[4],
	plantInterior,
	plantWorld,
	plantObject,
	Text3D:plantText3D
};
enum playerData {
	pID,
	pSmsHakki,
	pSilahSikti,
	pYanKoltuk,
	pWantedLevel,
	pGirisYapti,
	pSpawnOldu,
	pBiKere,
	pCKOnay,
	pAFKOldu,
	pCK,
	pUyusturucuAldi,
	pYukAldi,
	pSilahHakki,
	pSilahZaman,
	pGercekSilah,
	pDestekMute,
	pSexAnim,
	pSiparisVerilen,
	pOtobusTur,
	pEvGozlemliyor,
	pKutuNokta,
	pKutu,
	pMdcSifre,
	pTotalUsed,
	pSQLID,
	pBagajdanAldi,
	pSilverVip,
	pGoldVip,
	pQuantumVip,
	pInt,
	pGirisTimerr,
	pTabPM,
	pEvSilah,
	pLSPD,
	pCCTV,
	pAccent,
    aTBan,
    pEvBakma,
    pBirlikKurmaIzni,
    pHizliMotor,
    pUyusturucu,
	pLspdDuty,
    aTWarn,
    pAracParcalatTime,
	pSiparisVerdi,
    aTKick,
    aTCharge,
    aTJail,
    pGodMode,
    aTUnjail,
    aTUnwarn,
    pPet,
    aTUnban,
    aTPM,
	pDependTime,
	pCadiricinde,
	pAccount,
	pLogged,
	//pKodAlmismi,
	//pForumNick,
	pForumBaglandi,
	pCimentoSkill,
	pForumNick[32],
	pHediyeTime,
	pSiparisTime,
	pBagisci,
	pTasimaciSkill,
	BahisPara,
	pIP[16],
	pTezgah,
	pLoginDate[36],
	pExtraSlot,
	PlayerText:pTextdraws[83],
	pUsername[MAX_PLAYER_NAME + 1],
	pLoginAttempts,
	pMacID,
	pKuponMiktar,
	pFabrikaCalisma,
	pBocek,
	pPartner,
	pPartnerTeklif,
	pKartusHazir,
	pKartusSure,
	pYaris,
	pYarisAdim,
	pMayo,
	pDMUyari,
	pDMUyariSure,
	pAFK,
	pYarisHazirliyormu,
	pAFKTime,
	pCreated,
	pChatAnimation,
	pOffDivizyon,
	pBizJob,
	pBizJobID,
	pBizRank,
	pTenRengi[32],
	pTopallama,
	pOffRank,
	pGarbageTime,
	pGarbageCar,
	pEditingGate,
	pGender,
	pBirthdate[24],
	pOrigin[32],
	Float:pVCoin,
	pCaptureFactory,
	pSkin,
	pEditType,
	Float:pPaintballLast[2],
	pYukseltilenArac,
	pYukseltmeUcret,
	pPaintball,
	pPaintballTeam,
	pPaintballKill,
	pPaintballDeath,
	pTSlot[5],
	pASlot[5],
	pABone[5],
	pGlasses,
	pHat,
	pAksesuar,
	pBandana,
	Float:pPos[4],
	Float:pHealth,
	pInterior,
	Text3D:oYarali,
	pWorld,
	pCharacter,
	pHospital,
	pWalkStyle,
	pHospitalInt,
	pHospitalTime,
	pRepairTime,
	pKilled,
	pMoney,
	pBankMoney,
	pOwnsBillboard,
	pSavings,
	pPayCode[24],
	pPay,
	pAdmin,
	pAdminName[24],
	pTesterName[24],
	pShowFooter,
	pFooterTimer,
	pBilet,
	pShowAltyazi,
	pKereste,
	pOdunTimer,
	pOdunculuk,
 	pAdminChat,
	pOyVerdimi,
	pAltyaziTimer,
	pReportTime,
	pSoygun,
	pSoruTime,
	pHelpTime,
	pSpectator,
	pLastPM,
	pJailTime,
	pJailReason[256],
	pMuted,
	pGBWarn,
	pDisplayStats,
	pCharacterMenu,
	pToggleGlasses,
	pToggleHat,
	pToggleBandana,
	pToggleArmor,
	pLastShot,
	pShotTime,
	pInventoryItem,
	pStorageItem,
	pStorageSelect,
	pProductModify,
 	pTester,
 	pTesterHide,
 	pRaporSayisi,
 	pSoruSayisi,
	pGuns[13],
	pAmmo[13],
	pTutorial,
	pTutorialTime,
	pTutorialStage,
	pTutorialObject,
	pHouse,
	pBusiness,
	pEntrance,
	pDealership,
	pContact,
	pGasPump,
	pGasStation,
	pEditPump,
	pEditFurniture,
	pEditGate,
	pEditingObject,
	pEditObject,
	pEditRack,
	pSelectFurniture,
	pEmniyetKemeri,
	pRefill,
	pRefillPrice,
	pDealerCar,
	pEditingItem[32 char],
	pHouseSeller,
	pHouseOffered,
	pHouseValue,
	pBusinessSeller,
	pBusinessOffered,
	pBusinessValue,
	pCarSeller,
	pCarOffered,
	pCarValue,
	pShakeOffer,
	pShakeType,
	pFriskOffer,
	pFoodSeller,
	pFoodType,
	pFoodPrice,
	pFactionOffer,
	pFactionOffered,
	pBizJobOffer,
	pBizJobOffered,
	pHouseLights,
	pMetalAldimi,
	pTirSeviye,
	pTirEXP,
	pSilahSeviye,
	pSilahEXP,
	pPhone,
	pPhoneOff,
	pLottery,
	pLotteryB,
	pHunger,
	pThirst,
	pHungerTime,
	pThirstTime,
	pCooking,
	pCookingTime,
	pCookingHouse,
	pPlayingHours,
	pGorunus[256],
	pKasSeviye,
	pKasEXP,
	pLevel,
	pDovus,
	pEkstraDil,
	pEXP,
	pMinutes,
	Float:pArmorStatus,
	pArmorShown,
	pClothesType,
	pDrivingTest,
	pOtobusDuty,
	pTestStage,
	pTirAsama,
	pTirGelisAsama,
	pPizzaAsama,
	pPizzaIsbasi,
	pPizzaBasladimi,
 	pTestCar,
	pTestWarns,
	pFurnitureType,
	pJob,
	pTaxiFee,
	pTaxiTime,
	pTaxiPlayer,
	pTaksiKabul,
	pTaxiDuty,
	pFirstAid,
	pAidTimer,
	pIncomingCall,
	pCallLine,
	pMining,
	pMineTime,
	pMineCount,
	pMinedRock,
	pCarryTrash,
	pCarryCrate,
	pCrateVehicle,
	pCrafting,
	pOpeningCrate,
	pHarvesting,
	pFaction,
	pFactionID,
	pFactionRank,
	pFactionDivizyon,
	pFactionEdit,
	pSelectedSlot,
	pOnDuty,
	pDutySkin,
	pTazer,
	pBeanBag,
	pFlash,
	pStunned,
	pCuffed,
	pDragged,
	pDraggedBy,
	pDragTimer,
	pWarrants,
	pPlakaDurum,
	pMDCPlayer,
	pTrackTime,
	pKonumTime,
	pCP,
	pPrisoned,
	pBaygin,
	pBayginSure,
	pBroadcast,
	pNewsGuest,
	pSpamCount,
	pCommandCount,
	pMuteTime,
	pTransfer,
	pWaypoint,
	pLocation[32],
	Float:pWaypointPos[3],
	pFuelCan,
	pDisableOOC,
	pDisablePM,
	pDisableFaction,
	pDisableTester,
	pDisableBC,
	pDisableSpeedo,
	pNameChange[32],
	pDrugUsed,
	pDrugTime,
	pFingerTime,
	pFingerItem,
	pHealthTime,
	pWeapon,
	pWeaponTime,
	pBackpackLoot,
	pGiveItem,
	pChannel,
	pEmergency,
	pPlaceAd,
	pAdTime,
	pRangeBooth,
	pTargets,
	pTargetLevel,
	pVendorTime,
	pLoopAnim,
	pExecute,
	pBoombox,
	pCadir,
	pTakeItems,
	PlayerBar:pDrinkBar,
	pDrinking,
	pDrinkTime,
	pAdvertise[128 char],
	pIhbar[128 char],
	pReklamTimer,
	pTaxiCalled,
	pSpeedTime,
	pMarker,
	pBleeding,
	pBleedTime,
	pLoadType,
	pLoadCrate,
	pLoading,
	pYuklendiMateryal,
	pYukleniyorMateryal,
	pUnloading,
	pUnloadVehicle,
	pShipment,
	pDeliverShipment,
	pHoldWeapon,
	pUsedMagazine,
	pTask,
	pBankTask,
	pStoreTask,
	pTestTask,
	pWarnings,
	pWarn1[32],
	pWarn2[32],
	pSorting,
	pSortCrate,
	pTesterDuty,
	pAdminDuty,
	pSeekHelp,
	pHUD,
	pMaskID,
	pMask,
	pMaskOn,
	pHideTags,
	pFactionMod,
	pCapacity,
	pPlayRadio,
	pLeaveTime,
	pLeaveIP[16],
	pGraffiti,
	pGraffitiTime,
	pGraffitiColor,
	pGraffitiFont[64 char],
	pGraffitiText[64 char],
	pEditGraffiti,
	pKasa,
	pAdminHide,
	pDetectorTime,
	pImmobing,
	pImmobCar,
	pImmobTime,
	pImmobSure,
	pPicking,
	pPickCar,
	pPickTime,
	pPickSure,
	pJetpack,
	pFreeze,
	pFreezeTimer,
	pSpawnPoint,
	pPasaport
};

enum reportData {
	rExists,
	rType,
	rPlayer,
	rText[128 char]
};

enum soruData {
	rExists,
	rType,
	rPlayer,
	rText[128 char]
};

#define MAX_FIREWORK 100 //You can change it...
#define NON -1
#define function%0(%1) forward%0(%1); public%0(%1)

enum EnumFirework
{
        FW_Owner,
        Float:FW_Pos[4],
        Float:FW_Height,
        Float:FW_Radius,
        FW_Amount,
        FW_RocketsReleased,
        FW_RocketDirection,
        FW_Timer,
        FW_Box
};
new FireworkInfo[MAX_FIREWORK][EnumFirework];


enum billboardData {
	bbID,
	bbExists,
	bbName[32],
	bbMessage[230],
	bbOwner,
	bbPrice,
	bbRange,
	bbTime,
	Float:bbPos[4],
	Text3D:bbText3D
};

new BillBoardData[MAX_BILLBOARDS][billboardData];
new BillboardCheckout[MAX_PLAYERS];

enum inventoryData {
	invExists,
	invID,
	invItem[32 char],
	invModel,
	invQuantity
};

enum urunData {
	urunVarmi,
	urunID,
	urunAd[128 char],
	urunMiktar
};


#define SEYEHAT_BILETUCRET (7)
#define OTEL_KIRAUCRET (500)
#define OTOBUS_UCRET (9)

enum otelData {
	odaVarmi,
	odaKiralayan,
	odaKiraBitis,
	odaKilit
};

enum houseData {
	houseID,
	houseExists,
	houseOwner,
	houseOwnerName[32],
	housePrice,
	houseAddress[32],
	Float:housePos[4],
	Float:houseInt[4],
	houseLevel,
	houseDolap[3],
	garajTip,
	Text3D:garajText3D,
	garajPickup,
	garajKilit,
	houseBirlik,
	houseKiraZaman,
	houseKiraUcret,
	houseKiralayan,
	houseAnahtar,
	houseKiraSure,
	houseKiralanabilir,
 	houseGardolap[3],
	Float:garajPos[4],
	Float:garajInt[4],
	houseInterior,
	houseExterior,
	houseExteriorVW,
	houseLocked,
	LockMode,
	houseMoney,
	houseMapIcon,
	Text3D:houseText3D,
	housePickup,
	houseLights,
	houseWeapons[10],
	houseAmmo[10]
};

enum houseStorage {
	hItemID,
	hItemExists,
	hItemName[32 char],
	hItemModel,
	hItemQuantity
};

enum sandikData {
	sandikID,
	sandikVarmi,
	Float:sandikPos[4],
	sandikBaslik[128],
	sandikIcerik[128],
	sandikOy,
	sandikObject,
	Text3D:sandikLabel,
	sandikInterior,
	sandikWorld
};

enum haberData {
	haberID,
	haberVarmi,
	haberBaslik[128],
	haberIcerik[512],
	haberYazan[24],
	haberTip,
	haberOkunma
};

enum businessData {
	bizID,
	bizExists,
 	bizName[32],
	bizMessage[128],
    bizOwner,
	bizType,
	bizPrice,
	bizLoginFee,
	bizPersonel[2],
 	bizMusic[256],
	bizOwnerName[32],
	bizOrtak,
	bizOrtakName[32],
	Float:bizPos[4],
	Float:bizInt[4],
	Float:bizSpawn[4],
	Float:bizDeliver[3],
	bizInterior,
	bizExterior,
	bizExteriorVW,
	bizLocked,
	bizVault,
	bizProducts,
	bizPickup,
	bizShipment,
	bizPrices[21],
	Text3D:bizText3D,
	Text3D:bizDeliverText3D,
	bizDeliverPickup
};

enum droppedItems {
	droppedID,
	droppedItem[32],
	droppedPlayer[24],
	droppedModel,
	droppedQuantity,
	Float:droppedPos[3],
	droppedWeapon,
	droppedAmmo,
	droppedInt,
	droppedWorld,
	droppedObject,
	Text3D:droppedText3D
};

enum entranceData {
	entranceID,
	entranceExists,
	entranceName[32],
	entrancePass[32],
	entranceIcon,
	entranceLocked,
	Float:entrancePos[4],
	Float:entranceInt[4],
	entranceInterior,
	entranceExterior,
	entranceExteriorVW,
	entranceType,
	entranceCustom,
	entranceWorld,
	entranceForklift[7],
	entrancePickup,
	entranceMapIcon,
	entranceBaglanti,
	Text3D:entranceText3D
};

enum dealershipCars {
	vehID,
	vehModel,
	vehPrice
};

#define MAX_TEMPOBJECT 5

enum vehicleData {
TempExists[MAX_TEMPOBJECT],
TempObject[MAX_TEMPOBJECT]
};

enum carData {
	carID,
	carExists,
	carModel,
	carOwner,
	carDisplay,
	Float:carPos[4],
	carColor1,
	carColor2,
	carAlarm,
	Float:carHasar,
	carKilitSeviye,
	carImmobiliser,
	carPaintjob,
	carLocked,
	carVergi,
	carMods[14],
	carImpounded,
	carDistance,
	carImpoundPrice,
	carFaction,
	carZirh,
	carBirlik,
	carMeslek,
	carKiralik,
	carKiraUcret,
	carPlaka[24],
 	carKiraZaman,
	carWeapons[5],
	carAmmo[5],
	carGaleri,
	carPrice,
	carAnahtar,
	carHurda,
	carVehicle
};

enum carStorage {
	cItemID,
	cItemExists,
	cItemName[32 char],
	cItemModel,
	cItemQuantity
};

enum pumpData {
	pumpID,
	pumpExists,
	pumpBusiness,
	Float:pumpPos[4],
	pumpFuel,
	pumpObject,
	Text3D:pumpText3D
};

enum furnitureData {
	furnitureID,
	furnitureHouse,
	furnitureExists,
	furnitureModel,
	furnitureName[32],
	Float:furniturePos[3],
	Float:furnitureRot[3],
	furnitureObject
};

enum jobData {
	jobID,
	jobExists,
	jobType,
	Float:jobPos[3],
	Float:jobPoint[3],
	Float:jobDeliver[3],
	jobInterior,
	jobWorld,
	jobPointInt,
	jobPointWorld,
	jobPickups[3],
	jobMapIcon,
	Text3D:jobText3D[3]
};

enum contactData {
	contactID,
	contactExists,
	contactName[32],
	contactNumber
};

enum locationData {
	locationID,
	locationExists,
	locationName[32],
	Float:locationPos[3],
};

enum slocData {
	slocID,
	slocExists,
	slocName[32],
	Float:slocPos[3],
};

enum crateData {
	crateID,
	crateExists,
	crateType,
 	Float:cratePos[4],
	crateInterior,
	crateWorld,
	crateObject,
	crateVehicle,
	Text3D:crateText3D
};

enum factionData {
	factionID,
	factionExists,
	factionName[32],
	factionColor,
	factionType,
	factionRanks,
	factionOnay,
	factionUOnay,
	factionSOnay,
	factionBKS,
	factionBAS,
	factionBFS,
	factionBCS,
	factionMOTD[128],
	factionLevel,
	factionEXP,
	Float:factionLockerPos[3],
	factionLockerInt,
	factionLockerWorld,
	factionKasa,
	factionKasaMiktar,
	Float:factionKasaPos[3],
	factionKasaInt,
	factionKasaWorld,
	factionDivizyon[4],
	factionSkins[24],
	factionWeapons[10],
	factionAmmo[10],
	Text3D:factionText3D,
	Text3D:factionTextKasa,
	factionPickup,
	Float:SpawnX,
	Float:SpawnY,
	Float:SpawnZ,
	SpawnInterior,
	SpawnVW,
	gTip
};
enum prisonData {
	prisonDoors[3],
	prisonCells[24],
	prisonDoorOpened[3],
	prisonCellOpened[24]
};

enum arrestPoints {
	arrestID,
	arrestExists,
	Float:arrestPos[3],
	arrestInterior,
	arrestWorld,
	Text3D:arrestText3D,
	arrestPickup
};

enum kuponData {
	kuponID,
	kuponVarmi,
	kuponTarih[32],
	kuponOdul,
	kuponYatirilan,
	kuponMacID,
	kuponTahmin
};

#define MAX_BAHIS (20000)
#define MIN_BAHIS (50)

enum kontraktData {
	kontraktID,
	kontraktVarmi,
	kontraktSebep[128],
	kontraktTarih[36],
	kontraktMiktar,
	kontraktImzalayan[36],
	kontraktKatil
};

#define MAX_KONTRAKTUCRET (100000)
#define MIN_KONTRAKTUCRET (10000)
#define MIN_OLUSUMKONTRAKTUCRET (20000)

enum macData {
	macID,
	macVarmi,
	Float:macOran,
	macTakim1,
	macTakim1Skor,
	macTakim2,
	macTakim2Skor,
	macOynandimi,
	macZaman
};

enum ticketData {
	ticketID,
	ticketExists,
	ticketFee,
	ticketDate[36],
	ticketReason[64]
};

enum barricadeData {
	cadeExists,
	cadeType,
	Float:cadePos[3],
	cadeObject
};

enum mezarData {
	mezarID,
	mezarAd[32],
	mezarTarih[32],
	mezarYazit[128],
	mezarOtopsi[32],
	mezarVarmi,
	Float:mezarPos[4],
	Text3D:mezarText3D,
	mezarObject
};

enum hoodData {
	hoodID,
	hoodAd[32],
	hoodVarmi,
	Float:hoodPos[4],
	hoodPickup,
	Text3D:hoodText3D
};

enum fabrikaData {
	fabrikaID,
	fabrikaAd[32],
	fabrikaVarmi,
	fabrikaTip,
	fabrikaDepo[4],
	Float:fabrikaPos[4],
	Float:fabrikaUretimHizi,
	fabrikaWorld,
	fabrikaCaptureTime,
	fabrikaInterior,
	fabrikaBirlik,
	fabrikaPickup,
	fabrikaMapIcon,
	fabrikaTime,
	Text3D:fabrikaText3D
};

enum gateData {
	gateID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateOwner,
	gateBirlik,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gatePass[32],
	gateTimer,
	gateObject
};


enum objectData {
	objectID,
	objectVarmi,
	objectModel,
	Float:objectPos[6],
	objectInterior,
	objectWorld,
	objectOwner,
	objectObject
};

enum backpackData {
	backpackID,
	backpackExists,
	backpackPlayer,
	backpackHouse,
	backpackVehicle,
	Float:backpackPos[3],
	backpackInterior,
	backpackWorld,
	Text3D:backpackText3D,
	backpackObject
};

enum backpackItems {
	bItemID,
	bItemBackpack,
	bItemExists,
	bItemName[32],
	bItemModel,
	bItemQuantity
};

enum impoundData {
	impoundID,
	impoundExists,
	Float:impoundLot[3],
	Float:impoundRelease[4],
	Text3D:impoundText3D,
	impoundPickup
};

enum yarisData {
	yarisID,
	yarisVarmi,
	yarisCountCP,
	yarisSiralama,
	yarisGeriSayim,
	Float:yarisCPx[64],
	Float:yarisCPy[64],
	Float:yarisCPz[64],
	yarisKurucu[24],
	yarisAd[24],
	yarisDurum,
	yarisKayit
};

enum garbageData {
	garbageID,
	garbageExists,
 	garbageModel,
	garbageCapacity,
	Float:garbagePos[4],
	garbageInterior,
	garbageWorld,
	Text3D:garbageText3D,
	garbageObject
};

enum vendorData {
	vendorID,
	vendorExists,
	vendorType,
	Float:vendorPos[4],
	vendorInterior,
	vendorWorld,
	Text3D:vendorText3D,
	vendorObject
};
enum cadirData {
	cadirPlaced,
	cadirID,
	Float:cadirPos[3],
	cadirInterior,
	cadirWorld,
	cadirInt,
	cadirObject,
	Text3D:cadirText3D
};
enum boomboxData {
	boomboxPlaced,
	Float:boomboxPos[3],
	boomboxInterior,
	boomboxWorld,
	boomboxObject,
	boomboxYoutube,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};
enum tezgahData {
	tezgahPlaced,
	Float:tezgahPos[3],
	tezgahInterior,
	tezgahWorld,
	tezgahObject,
	//boomboxYoutube,
	//boomboxURL[128 char],
	Text3D:tezgahText3D
};

enum kovaData {
	kovaPlaced,
	Float:kovaPos[3],
	kovaInterior,
	kovaWorld,
	kovaObject,
	Text3D:kovaText3D
};

enum rackData {
	rackID,
	rackExists,
	rackHouse,
	Float:rackPos[4],
	rackInterior,
	rackWorld,
	rackWeapons[4],
	rackAmmo[4],
	rackObjects[5],
	Text3D:rackText3D
};

enum speedData {
	speedID,
	speedExists,
	Float:speedPos[4],
	Float:speedRange,
	Float:speedLimit,
	speedObject,
	speedMapIcon,
	Text3D:speedText3D
};

enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[4],
	graffitiIcon,
	graffitiObject,
	graffitiColor,
	graffitiFont[64],
	graffitiText[64]
};

enum detectorData {
	detectorID,
	detectorExists,
	Float:detectorPos[4],
	detectorInterior,
	detectorWorld,
	detectorObject[2]
};


new g_StatusOOC;
new g_AracRespawn;
new g_RespawnTime;
new g_TaxVault;
new g_soygunZamani;
new g_ServerMOTD[128];
new g_ServerLocked;
new Text:gServerTextdraws[4];

new g_ServerRestart;
new g_RestartTime;
new g_BoothUsed[MAX_BOOTHS];
new g_BoothObject[MAX_BOOTHS] = {-1, ...};

new g_aFireObjects[36] = {INVALID_OBJECT_ID, ...};
new g_aFireExtinguished[36];

new PrisonData[prisonData];
new Float:PrisonCells[24][3];

new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];
new MetalDetectors[MAX_METAL_DETECTORS][detectorData];
new BarricadeData[MAX_BARRICADES][barricadeData];


new VendorData[MAX_VENDORS][vendorData];
new SpeedData[MAX_SPEED_CAMERAS][speedData];

new Bombalar[MAX_PLAYERS][bombaData];
new BoomboxData[MAX_PLAYERS][boomboxData];
new CadirData[MAX_CADIR][cadirData];
new TezgahData[MAX_PLAYERS][tezgahData];
new KovaData[MAX_PLAYERS][kovaData];
new RackData[MAX_WEAPON_RACKS][rackData];

new Yarislar[MAX_YARIS][yarisData];
new Maclar[MAX_MAC][macData];
new GarbageData[MAX_GARBAGE_BINS][garbageData];

new BackpackData[MAX_BACKPACKS][backpackData];
new BackpackItems[MAX_BACKPACK_ITEMS][backpackItems];

new BackpackListed[MAX_PLAYERS][MAX_BACKPACK_ITEMS];
new ImpoundData[MAX_IMPOUND_LOTS][impoundData];

#define MAX_HASAR (30)
new Hasarlar[MAX_PLAYERS][MAX_HASAR][hasarData];


new PlayerData[MAX_PLAYERS][playerData];
new Float:AccessoryData[MAX_PLAYERS][5][11];
new TicketData[MAX_PLAYERS][MAX_PLAYER_TICKETS][ticketData];
new Kuponlar[MAX_PLAYERS][3][kuponData];
new Kontraktlar[MAX_PLAYERS][MAX_KONTRAKT][kontraktData];
new ListedVehicles[MAX_PLAYERS][MAX_OWNABLE_CARS];

new UrunData[MAX_PLAYERS][MAX_URUN][urunData];
new InventoryData[MAX_PLAYERS][MAX_INVENTORY][inventoryData];
new ContactData[MAX_PLAYERS][MAX_CONTACTS][contactData];
new LocationData[MAX_PLAYERS][MAX_GPS_LOCATIONS][locationData];
new ServerLocationData[MAX_SERVER_LOCATIONS][slocData];

new ListedFurniture[MAX_PLAYERS][MAX_HOUSE_FURNITURE];
new NearestItems[MAX_PLAYERS][MAX_LISTED_ITEMS];
new ListedContacts[MAX_PLAYERS][MAX_CONTACTS];

new Sorular[MAX_SORU][soruData];
new ReportData[MAX_REPORTS][reportData];
new ArrestData[MAX_ARREST_POINTS][arrestPoints];

new BusinessData[MAX_BUSINESSES][businessData];
new Haberler[MAX_HABER][haberData];
new Sandiklar[MAX_SANDIK][sandikData];
new PumpData[MAX_GAS_PUMPS][pumpData];
new DealershipCars[MAX_BUSINESSES][MAX_DEALERSHIP_CARS][dealershipCars];

new DroppedItems[MAX_DROPPED_ITEMS][droppedItems];
new EntranceData[MAX_ENTRANCES][entranceData];

new CarData[MAX_DYNAMIC_CARS][carData];
new VehicleData[MAX_DYNAMIC_CARS][vehicleData];
new CarStorage[MAX_DYNAMIC_CARS][MAX_CAR_STORAGE][carStorage];


new OtelOdalari[MAX_OTELODASI][otelData];
new HouseData[MAX_HOUSES][houseData];
new HouseStorage[MAX_HOUSES][MAX_HOUSE_STORAGE][houseStorage];
new FurnitureData[MAX_FURNITURE][furnitureData];

new JobData[MAX_DYNAMIC_JOBS][jobData];
new CrateData[MAX_CRATES][crateData];
new PlantData[MAX_DRUG_PLANTS][plantData];

new FactionData[MAX_FACTIONS][factionData];
new FactionRanks[MAX_FACTIONS][15][32];
new FactionDivizyon[MAX_FACTIONS][4][32];
new GateData[MAX_GATES][gateData];
new ObjectData[MAX_OBJECT][objectData];
new Fabrikalar[10][fabrikaData];
new Mezarlar[MAX_MEZAR][mezarData];
new OnayliHoodlar[MAX_ONAYLIHOOD][hoodData];
/*
	0 to 10: Character textdraws
	11 to 22: ID card
	23 to 33: Character customization
	34 to 38: Speedometer
	39: Footer textdraw
	40 to 49: Stats textdraw
	50 to 57: Character textdraw
	58 to 61: Tutorial textdraws
	62: House light
	63 to 64: Hunger and thirst (percent)
	65 to 66: Hunger and thirst (model it)
	67 to 68: Armor
	69: GPS
*/
new PlayerCharacters[MAX_PLAYERS][3][MAX_PLAYER_NAME + 1];
new PlayerCharactersSkin[MAX_PLAYERS][3];

enum coreVehicles {
	vehFuel,
	vehWindowsDown,
	vehKapilar,
	vehBugday,
	vehTemporary,
	vehUKutu,
	vehUyusturucuObj,
	vehLoads,
	vehCimento,
	vehTasimaci,
	vehLoadType,
	vehIKacakcilik,
	vehEKacakcilik,
	vehZirh,
	vehCrate,
	vehKereste,
	Float:vehKM,
	vehKeresteObj[16],
	vehTrash,
	vehRepairing,
	Float:vehHasar,
	vehFlasorObjesi[9],
	vehFlasorObjesi2[9],
	vehSirenOn,
	vehRadar,
	vehRadarLimit,
	vehSirenObject,
	vehRadio,
	vehURL[128 char],
	Float:vehLoadHealth,
 	Float:vehLoadPos[3]
};

new CoreVehicles[MAX_VEHICLES][coreVehicles];

new havaid;
stock const g_aWeatherRotations[] = {
	14, 1, 7, 3, 5, 12, 15
};

enum e_InventoryItems {
	e_InventoryItem[32],
	e_InventoryModel
};

static const g_aInventoryItems[][e_InventoryItems] = {
	{"Marijuana", 1578},
	{"Kokain", 1575},
	{"Eroin", 1577},
	{"LSD", 1577},
	{"Bira", 1486},
	{"Ekstazi", 2253},
	{"Skunk", 2244},
	{"Streoids", 1241},
	{"Marijuana Tohumu", 1578},
	//{"Kokain Tohumu", 1575},
	{"Skunk Tohumu", 1577},
	{"Golf Club", 333},
	{"Knife", 335},
	{"Shovel", 337},
	{"Katana", 339},
	{"Colt 45", 346},
	{"Desert Eagle", 348},
	{"Micro SMG", 352},
	{"Tec-9", 372},
	{"MP5", 353},
	{"Shotgun", 349},
	{"AK-47", 355},
	{"Rifle", 357},
	{"Sniper", 358},
	{"Sarjor", 2039},
	{"Pismis Hamburger", 2703},
	{"Pismis Pizza", 2702},
	{"Ehliyet", 1581},
	{"Ruhsat", 1581},
	{"Telefon", 330},
	{"GPS Cihazi", 18875},
	{"Sprey Kutusu", 365},
	{"Su", 2958},
	{"Soda", 1543},
    {"Benzin Kutusu", 1650},
	{"Levye", 18634},
	{"Boombox", 2226},
	{"Portatif Cadir", 3243},
	{"Tezgah", 1340},
	{"Maske", 19036},
	{"Sosisli", 2880},
	{"Ilkyardim Kiti", 1580},
	{"Alet Cantasi", 920},
	{"Maymuncuk", 2680},
	{"NOS Kapagi", 1010},
	{"Dondurulmus Pizza", 2814},
	{"Dondurulmus Hamburger", 2768},
	{"Cephane Kartusu", 2358},
	{"Celik Yelek", 19142},
	{"Bos Sise", 1484},
	{"Karton", 928},
	{"Tavuk", 2663},
	{"Telsiz", 18868},
	{"Metal", 1942},
	{"Zar", 1851},
	{"Sigara", 1019},
	{"Ip", 19088},
	{"Goz Bagi", 19874},
	{"Bugday", 872},
	{"Kalas", 1463},
	{"Nargile", 1453},
	{"Kaykay", 19878},
	{"Balik Kovasi", 19878}
};

new const Float:arrHospitalDeliver[5][3] = {
    {-334.9757, 1063.0171, 19.7392},
	{1579.9666, 1767.1462, 10.8203},
	{1501.3879, -1537.8320, 13.5442},
	{2024.4246, -1404.1580, 17.2020},
	{1243.9304, 331.4186, 19.5547}
};

new const Float:arrHospitalSpawns[2][4] = {
	{1515.2700,-1568.8071,14.6566, 270.0000},
	{2034.0670, -1402.6815, 17.2938, 180.0000}
};

new const Float:g_arrWeaponDamage[] = {
	1.32, 1.32, 4.62, 4.62, 2.64, 4.62, 4.62, 4.62, 2.64, 13.53,
	4.62, 2.64, 4.62, 2.64, 4.62, 2.64, 0.00, 0.00, 0.00, 0.00,
	0.00, 0.00, 8.25, 13.2, 46.2, 49.5, 49.5, 39.6, 6.60, 8.25,
	9.90, 9.90, 6.60, 24.75, 41.25, 0.00, 0.00, 0.00, 46.2, 0.00,
	0.00, 2.64, 2.64, 0.00, 0.00, 0.00, 1.32
};

new const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};


/*new const g_aPreloadLibs[][] = {
    {"COLT45"},
	{"SILENCED"},
	{"PYTHON"},
	{"BUDDY"},
	{"RIFLE"},
	{"TEC"},
	{"GRENADE"},
	{"CRACK"},
	{"BASEBALL"},
	{"BSKTBALL"},
	{"DEALER"},
	{"MISC"},
	{"CARRY"},
	{"CRACK"},
	{"GRAFFITI"},
	{"VENDING"},
	{"SMOKING"}
};*/


new const g_aPreloadLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

enum houseInteriors {
	eHousePrice,
	eHouseInterior,
	Float:eHouseX,
	Float:eHouseY,
	Float:eHouseZ,
	Float:eHouseAngle
};

new const Float:arrHouseInteriors[][houseInteriors] = {
	{1000, 10, 2269.8772, -1210.3240, 1047.5625, 90.0000},
    {7500, 2, 2468.2576, -1698.2361, 1013.5078, 90.0000},
	{9000, 3, 2495.8711, -1693.0996, 1014.7422, 180.0000},
	{2500, 5, 2233.7888, -1114.2689, 1050.8828, 0.0000},
	{15000, 9, 2317.8015, -1026.2113, 1050.2178, 0.0000},
	{20000, 3, 235.2923, 1187.3684, 1080.2578, 0.0000},
	{8000, 2, 226.2912, 1240.0554, 1082.1406, 90.0000},
	{12000, 1, 223.1618, 1287.5175, 1082.1406, 0.0000},
	{25000, 5, 226.9281, 1114.2813, 1080.9962, 270.0000},
	{10000, 15, 295.1485, 1473.1080, 1080.2578, 0.0000},
	{8000, 10, 23.9584, 1340.6075, 1084.3750, 0.0000},
	{8000, 4, 222.0425, 1140.7565, 1082.6094, 0.0000},
	{30000, 12, 2324.4209, -1148.9365, 1050.7101, 0.0000},
	{8000, 4, -261.1430, 1456.6396, 1084.3672, 90.0000},
	{8000, 5, 22.9676, 1403.8368, 1084.4297, 0.0000},
	{8000, 5, 140.3088, 1366.8196, 1083.8594, 0.0000},
	{8000, 6, 234.3149, 1064.2772, 1084.2114, 0.0000},
	{8000, 7, 225.7000, 1022.0012, 1084.0161, 0.0000},
	{8000, 5, 1298.9750, -796.4567, 1084.0078, 0.0000},
	{8000, 15, -283.8687, 1471.1174, 1084.3750, 90.0000},
	{1, 1, 527.9220,1391.6925,1083.6216,357.4334},
	{1, 1, 527.9220,1391.6925,1083.6216,357.4334},
	{1, 1, 437.9262,1428.9943,1082.2285,353.6967},
	{1, 1, 403.2771,1414.5157,1080.7426,89.4326},
	{1, 1, 274.0647,1458.2540,1080.5398,358.5651},
	{1, 1, 271.4174,1064.8138,1081.3422,358.8785},
	{1, 1, 171.9211,1387.4561,1081.9717,359.1919}
};

new const Float:arrBoothPositions[MAX_BOOTHS][3] = {
    {300.5000, -138.5660, 1004.0625},
	{300.5000, -137.0286, 1004.0625},
	{300.5000, -135.5336, 1004.0625},
	{300.5000, -134.0436, 1004.0625},
	{300.5000, -132.5637, 1004.0625},
	{300.5000, -131.0782, 1004.0625},
	{300.5000, -129.5582, 1004.0625},
	{300.5000, -128.0786, 1004.0625}
};

//===============[MODIFIYE SISTEMI]============//
#define dialog_TUNING   1323
#define dialog_TUNING_2 1324
#define COLOR_PRICE             750
#define D_TEXT "Paintjob\nRenkler\nEgzoz\nÖn Tampon\nArka Tampon\nÇatý\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro"

new PlayerText:TuningBuy[ MAX_PLAYERS ][ 14 ];

enum Vehicle {
    vVehID,
    vOwner[ MAX_PLAYER_NAME ],
        bool:vTuned,
        vSpoiler,
        vHood,
        vRoof,
        vSkirt,
        vLamps,
        vNitro,
        vExhaust,
        vWheels,
        vStereo,
        vHydraulics,
        vFrontBumper,
        vRearBumper,
        vRightVent,
        vLeftVent,
        vColor1,
        vColor2,
        vPaintJob
}
new VehicleInfo[ MAX_VEHICLES ][ Vehicle ];

enum PaintjobInfi {
        vehID,
        pNumber,
        pPrice,
        pPriceEx,
        pName[ 12 ]
};
#define NUMBER_TYPE_PAINTJOB    36
static const
#define TEKRENK (1000)
pjInfo[ NUMBER_TYPE_PAINTJOB ][ PaintjobInfi ] = {
        { 483, 0, 3450, 1750, "Paintjob 1" },
        { 534, 0, 3450, 1750, "Paintjob 1" },
        { 534, 1, 3450, 1750, "Paintjob 2" },
        { 534, 2, 3450, 1750, "Paintjob 3" },
        { 535, 0, 3450, 1750, "Paintjob 1" },
        { 535, 1, 3450, 1750, "Paintjob 2" },
        { 535, 2, 3450, 1750, "Paintjob 3" },
        { 536, 0, 3450, 1750, "Paintjob 1" },
        { 536, 1, 3450, 1750, "Paintjob 2" },
        { 536, 2, 3450, 1750, "Paintjob 3" },
        { 558, 0, 3450, 1750, "Paintjob 1" },
        { 558, 1, 3450, 1750, "Paintjob 2" },
        { 558, 2, 3450, 1750, "Paintjob 3" },
        { 559, 0, 3450, 1750, "Paintjob 1" },
        { 559, 1, 3450, 1750, "Paintjob 2" },
        { 559, 2, 3450, 1750, "Paintjob 3" },
        { 560, 0, 3450, 1750, "Paintjob 1" },
        { 560, 1, 3450, 1750, "Paintjob 2" },
        { 560, 2, 3450, 1750, "Paintjob 3" },
        { 561, 0, 3450, 1750, "Paintjob 1" },
        { 561, 1, 3450, 1750, "Paintjob 2" },
        { 561, 2, 3450, 1750, "Paintjob 3" },
        { 562, 0, 3450, 1750, "Paintjob 1" },
        { 562, 1, 3450, 1750, "Paintjob 2" },
        { 562, 2, 3450, 1750, "Paintjob 3" },
        { 565, 0, 3450, 1750, "Paintjob 1" },
        { 565, 1, 3450, 1750, "Paintjob 2" },
        { 565, 2, 3450, 1750, "Paintjob 3" },
        { 567, 0, 3450, 1750, "Paintjob 1" },
        { 567, 1, 3450, 1750, "Paintjob 2" },
        { 567, 2, 3450, 1750, "Paintjob 3" },
        { 575, 0, 3450, 1750, "Paintjob 1" },
        { 575, 1, 3450, 1750, "Paintjob 2" },
        { 576, 0, 3450, 1750, "Paintjob 1" },
        { 576, 1, 3450, 1750, "Paintjob 2" },
        { 576, 2, 3450, 1750, "Paintjob 3" }
};

enum ComponentsInfo {
        cID,
        cName[ 40 ],
        cPrice,
        cPriceEx,
        cType
};
#define MAX_COMPONENTS  194
static const
        cInfo[ MAX_COMPONENTS ][ ComponentsInfo ] = {
        { 1000, "Pro Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1001, "Win Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1002, "Drag Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1003, "Alpha Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1004, "Champ Scoop Hood", 100, 50,CARMODTYPE_HOOD },
        { 1005, "Fury Scoop Hood", 100, 50,CARMODTYPE_HOOD },
        { 1006, "Roof Scoop Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1007, "Right Sideskirt", 600, 300,CARMODTYPE_SIDESKIRT },
        { 1008, "5x Nitrous", 5000, 2500,CARMODTYPE_NITRO },
        { 1009, "2x Nitrous", 8000, 4000,CARMODTYPE_NITRO },
        { 1010, "10x Nitrous", 10000, 5000,CARMODTYPE_NITRO },
        { 1011, "Race Scoop Hood", 100, 50,CARMODTYPE_HOOD },
        { 1012, "Worx Scoop Hood", 100, 50,CARMODTYPE_HOOD },
        { 1013, "Round Fog Lamp", 100, 50,CARMODTYPE_LAMPS },
        { 1014, "Champ Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1015, "Race Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1016, "Worx Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1017, "Left Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1018, "Upswept Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1019, "Twin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1020, "Large Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1021, "Medium Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1022, "Small Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1023, "Fury Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1024, "Square Fog Lamp", 100, CARMODTYPE_LAMPS },
        { 1025, "Offroad Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1026, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1027, "Left Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1028, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1029, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1030, "Left X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1031, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1032, "Alien Roof Vent", 1400, 550, CARMODTYPE_ROOF },
        { 1033, "X-Flow Roof Vent", 1400, 550, CARMODTYPE_ROOF },
        { 1034, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1035, "X-Flow Roof Vent", 1400, 550, CARMODTYPE_ROOF },
        { 1036, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1037, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1038, "Alien Roof Vent", 1400, 550, CARMODTYPE_ROOF },
        { 1039, "Left X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1040, "Left Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1041, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1042, "Right Chrome Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1043, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1044, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1045, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1046, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1047, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1048, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1049, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1050, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1051, "Left Alien Sideskirt", 1000, 500, CARMODTYPE_SPOILER },
        { 1052, "Left X-Flow Sideskirt", 1000, 500, CARMODTYPE_SPOILER },
        { 1053, "X-Flow Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1054, "Alien Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1055, "Alien Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1056, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1057, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1058, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1059, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1060, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1061, "X-Flow Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1062, "Left Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1063, "Left X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1064, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1065, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1066, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1067, "Alien Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1068, "X-Flow Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1069, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1070, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1071, "Left Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1072, "Left X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1073, "Shadow Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1074, "Mega Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1075, "Rimshine Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1076, "Wires Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1077, "Classic Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1078, "Twist Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1079, "Cutter Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1080, "Switch Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1081, "Grove Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1082, "Import Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1083, "Dollar Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1084, "Trance Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1085, "Atomic Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1086, "Stereo Wheels", 500, 250, CARMODTYPE_STEREO },
        { 1087, "Hydraulics", 3250, 1250, CARMODTYPE_HYDRAULICS },
        { 1088, "Alien Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1089, "X-Flow Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1090, "Right Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1091, "X-Flow Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1092, "Alien Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1093, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1094, "Left Alien Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1095, "Right X-Flow Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1096, "Ahab Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1097, "Virtual Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1098, "Access Wheels", 1000, 500, CARMODTYPE_WHEELS },
        { 1099, "Left Chrome Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1100, "Chrome Grill", 500, 250, -1 }, // Bullbar
        { 1101, "Left `Chrome Flames` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1102, "Left `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1103, "Covertible Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1104, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1105, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1106, "Right `Chrome Arches`", 600, CARMODTYPE_SIDESKIRT },
        { 1107, "Left `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1108, "Right `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1109, "Chrome", 500, 250, -1 }, // Bullbar
        { 1110, "Slamin", 500, 250, -1 }, // Bullbar
        { 1111, "Little Sign?", 500, 250, -1 }, // sig
        { 1112, "Little Sign?", 500, 250, -1 }, // sig
        { 1113, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1114, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1115, "Chrome", 500, 250, -1 }, // Bullbar
        { 1116, "Slamin", 500, 250, -1 }, // Bullbar
        { 1117, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1118, "Right `Chrome Trim` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1119, "Right `Wheelcovers` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1120, "Left `Chrome Trim` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1121, "Left `Wheelcovers` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1122, "Right `Chrome Flames` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1123, "Bullbar Chrome Bars", 500, 250, -1 }, // Bullbar
        { 1124, "Left `Chrome Arches` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1125, "Bullbar Chrome Lights", 500, 250, -1 }, // Bullbar
        { 1126, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1127, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1128, "Vinyl Hardtop", 1400, 550, CARMODTYPE_ROOF },
        { 1129, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1130, "Hardtop Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1131, "Softtop Roof", 1400, 550, CARMODTYPE_ROOF },
        { 1132, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1133, "Right `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1134, "Right `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1135, "Slamin Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1136, "Chrome Exhaust", 450, 200,  CARMODTYPE_EXHAUST },
        { 1137, "Left `Chrome Strip` Sideskirt", 600, CARMODTYPE_SIDESKIRT },
        { 1138, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1139, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1140, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1141, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1142, "Left Oval Vents", 1000, 500, CARMODTYPE_VENT_LEFT },
        { 1143, "Right Oval Vents", 1000, 500,CARMODTYPE_VENT_RIGHT },
        { 1144, "Left Square Vents", 1000, 500, CARMODTYPE_VENT_LEFT },
        { 1145, "Right Square Vents", 1000, 500,CARMODTYPE_VENT_RIGHT },
        { 1146, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1147, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1148, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1149, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1150, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1151, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1152, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1153, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1154, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1155, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1156, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1157, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1158, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1159, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1160, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1161, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1162, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1163, "X-Flow Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1164, "Alien Spoiler", 1000, 500, CARMODTYPE_SPOILER },
        { 1165, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1166, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1167, "X-Flow Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1168, "Alien Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1169, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1170, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1171, "Alien Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1172, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1173, "X-Flow Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1174, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1175, "Slamin Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1176, "Chrome Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1177, "Slamin Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1178, "Slamin Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1179, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1180, "Chrome Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1181, "Slamin Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1182, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1183, "Slamin Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1184, "Chrome Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1185, "Slamin Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1186, "Slamin Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1187, "Chrome Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1188, "Slamin Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1189, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1190, "Slamin Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1191, "Chrome Front Bumper", 1250, 600, CARMODTYPE_FRONT_BUMPER },
        { 1192, "Chrome Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER },
        { 1193, "Slamin Rear Bumper", 1250, 600, CARMODTYPE_REAR_BUMPER }
};

enum tpi {
        tID,
        tType,
        bool:tPaintjob,
        PJColor[ 2 ]
};
new TPInfo[ MAX_PLAYERS ][ tpi ];

new globalstring[ 128 ];
new VehicleNames[][] =
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
    "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
    "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
    "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
    "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
    "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
    "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
    "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
    "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
    "Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
    "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
    "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
    "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
    "Blista Compact", "Police Maverick", "Boxville", "Benson", "Mesa", "RC Goblin",
    "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
    "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
    "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
    "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
    "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
    "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
    "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
    "Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratium",
    "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
    "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
    "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
    "Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha",
    "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville",
    "Tiller", "Utility Trailer"
};

new SureGuncelle[MAX_PLAYERS];
new SpecSuresi[MAX_PLAYERS];

new Text3D: GaleriLabel[MAX_VEHICLES];
new Text3D: OyuncuLabel[MAX_PLAYERS];
new IzlenenID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};
new IzlemeGuncelle[MAX_PLAYERS];

new Text: SpecBG;
new Text: SpecHPIcon;
new Text: SpecGunIcon;
new Text: SpecCarIcon;
new PlayerText: SpecTitle[MAX_PLAYERS];
new PlayerText: SpecHPText[MAX_PLAYERS];
new PlayerText: SpecGunText[MAX_PLAYERS];
new PlayerText: SpecCarText[MAX_PLAYERS];
new PlayerText: SpecCarModel[MAX_PLAYERS];


new ColorList[][121] = // Bunu tanýt
{
    "{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009\n",
    "{46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019\n",
    "{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029\n",
    "{421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039\n",
    "{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049\n",
    "{848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059\n",
    "{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069\n",
    "{851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079\n",
    "{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089\n",
    "{AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099\n",
    "{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109\n",
    "{7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119\n",
    "{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127 {177517}128 {210606}129\n",
    "{125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137 {B7B7B7}138 {464C8D}139\n",
    "{84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147 {1E1D13}148 {1E1306}149\n",
    "{1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157 {992E1E}158 {2C1E08}159\n",
    "{142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167 {481A0E}168 {7A7399}169\n",
    "{746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177 {7B3E7E}178 {3C1737}179\n",
    "{733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187 {163012}188 {16301B}189\n",
    "{642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197 {2B3C99}198 {3A3A0B}199\n",
    "{8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207 {2C5089}208 {15426C}209\n",
    "{103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217 {995C52}218 {99581E}219\n",
    "{993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227 {96821D}228 {197F19}229\n",
    "{3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237 {8A653A}238 {732617}239\n",
    "{319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247 {561A28}248 {4E0E27}249\n",
    "{706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255\n"
};
new stock g_arrVehicleNames[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

enum e_InteriorData {
	e_InteriorName[32],
	e_InteriorID,
	Float:e_InteriorX,
	Float:e_InteriorY,
	Float:e_InteriorZ
};

new const g_arrInteriorData[][e_InteriorData] = {
	{"24/7 1", 17, -25.884498, -185.868988, 1003.546875},
    {"24/7 2", 10, 6.091179, -29.271898, 1003.549438},
    {"24/7 3", 18, -30.946699, -89.609596, 1003.546875},
    {"24/7 4", 16, -25.132598, -139.066986, 1003.546875},
    {"24/7 5", 4, -27.312299, -29.277599, 1003.557250},
    {"24/7 6", 6, -26.691598, -55.714897, 1003.546875},
    {"Airport Ticket", 14, -1827.147338, 7.207417, 1061.143554},
    {"Airport Baggage", 14, -1861.936889, 54.908092, 1061.143554},
    {"Shamal", 1, 1.808619, 32.384357, 1199.593750},
    {"Andromada", 9, 315.745086, 984.969299, 1958.919067},
    {"Ammunation 1", 1, 286.148986, -40.644397, 1001.515625},
    {"Ammunation 2", 4, 286.800994, -82.547599, 1001.515625},
    {"Ammunation 3", 6, 296.919982, -108.071998, 1001.515625},
    {"Ammunation 4", 7, 314.820983, -141.431991, 999.601562},
    {"Ammunation 5", 6, 316.524993, -167.706985, 999.593750},
    {"Ammunation Booths", 7, 302.292877, -143.139099, 1004.062500},
    {"Ammunation Range", 7, 298.507934, -141.647048, 1004.054748},
    {"Blastin Fools Hallway", 3, 1038.531372, 0.111030, 1001.284484},
    {"Budget Inn Motel Room", 12, 444.646911, 508.239044, 1001.419494},
    {"Jefferson Motel", 15, 2215.454833, -1147.475585, 1025.796875},
    {"Off Track Betting Shop", 3, 833.269775, 10.588416, 1004.179687},
    {"Sex Shop", 3, -103.559165, -24.225606, 1000.718750},
    {"Meat Factory", 1, 963.418762, 2108.292480, 1011.030273},
    {"Zero's RC shop", 6, -2240.468505, 137.060440, 1035.414062},
    {"Dillimore Gas", 0, 663.836242, -575.605407, 16.343263},
    {"Catigula's Basement", 1, 2169.461181, 1618.798339, 999.976562},
    {"FC Janitor Room", 10, 1889.953369, 1017.438293, 31.882812},
    {"Woozie's Office", 1, -2159.122802, 641.517517, 1052.381713},
    {"Binco", 15, 207.737991, -109.019996, 1005.132812},
    {"Didier Sachs", 14, 204.332992, -166.694992, 1000.523437},
    {"Prolaps", 3, 207.054992, -138.804992, 1003.507812},
    {"Suburban", 1, 203.777999, -48.492397, 1001.804687},
    {"Victim", 5, 226.293991, -7.431529, 1002.210937},
    {"Zip", 18, 161.391006, -93.159156, 1001.804687},
    {"Club", 17, 493.390991, -22.722799, 1000.679687},
    {"Bar", 11, 501.980987, -69.150199, 998.757812},
    {"Lil' Probe Inn", 18, -227.027999, 1401.229980, 27.765625},
    {"Jay's Diner", 4, 457.304748, -88.428497, 999.554687},
    {"Gant Bridge Diner", 5, 454.973937, -110.104995, 1000.077209},
    {"Secret Valley Diner", 6, 435.271331, -80.958938, 999.554687},
    {"World of Coq", 1, 452.489990, -18.179698, 1001.132812},
    {"Welcome Pump", 1, 681.557861, -455.680053, -25.609874},
    {"Burger Shot", 10, 375.962463, -65.816848, 1001.507812},
    {"Cluckin' Bell", 9, 369.579528, -4.487294, 1001.858886},
    {"Well Stacked Pizza", 5, 373.825653, -117.270904, 1001.499511},
    {"Rusty Browns Donuts", 17, 381.169189, -188.803024, 1000.632812},
    {"Denise's Room", 1, 244.411987, 305.032989, 999.148437},
    {"Katie's Room", 2, 271.884979, 306.631988, 999.148437},
    {"Helena's Room", 3, 291.282989, 310.031982, 999.148437},
    {"Michelle's Room", 4, 302.180999, 300.722991, 999.148437},
    {"Barbara's Room", 5, 322.197998, 302.497985, 999.148437},
    {"Millie's Room", 6, 346.870025, 309.259033, 999.155700},
    {"Sherman Dam", 17, -959.564392, 1848.576782, 9.000000},
    {"Planning Dept", 3, 384.808624, 173.804992, 1008.382812},
    {"Area 51", 0, 223.431976, 1872.400268, 13.734375},
    {"LS Gym", 5, 772.111999, -3.898649, 1000.728820},
    {"SF Gym", 6, 774.213989, -48.924297, 1000.585937},
    {"LV Gym", 7, 773.579956, -77.096694, 1000.655029},
    {"B-Dup's House", 3, 1527.229980, -11.574499, 1002.097106},
    {"B-Dup's Crack Pad", 2, 1523.509887, -47.821197, 1002.130981},
    {"CJ's House", 3, 2496.049804, -1695.238159, 1014.742187},
    {"Madd Doggs Mansion", 5, 1267.663208, -781.323242, 1091.906250},
    {"OG Loc's House", 3, 513.882507, -11.269994, 1001.565307},
    {"Ryders House", 2, 2454.717041, -1700.871582, 1013.515197},
    {"Sweet's House", 1, 2527.654052, -1679.388305, 1015.498596},
    {"Crack Factory", 2, 2543.462646, -1308.379882, 1026.728393},
    {"Big Spread Ranch", 3, 1212.019897, -28.663099, 1000.953125},
    {"Fanny batters", 6, 761.412963, 1440.191650, 1102.703125},
    {"Strip Club", 2, 1204.809936, -11.586799, 1000.921875},
    {"Strip Club (Private Room)", 2, 1204.809936, 13.897239, 1000.921875},
    {"Unnamed Brothel", 3, 942.171997, -16.542755, 1000.929687},
    {"Tiger Skin Brothel", 3, 964.106994, -53.205497, 1001.124572},
    {"Pleasure Domes", 3, -2640.762939, 1406.682006, 906.460937},
    {"Liberty City Outside", 1, -729.276000, 503.086944, 1371.971801},
    {"Liberty City Inside", 1, -794.806396, 497.738037, 1376.195312},
    {"Gang House", 5, 2350.339843, -1181.649902, 1027.976562},
    {"Colonel Furhberger's", 8, 2807.619873, -1171.899902, 1025.570312},
    {"Crack Den", 5, 318.564971, 1118.209960, 1083.882812},
    {"Warehouse 1", 1, 1412.639892, -1.787510, 1000.924377},
    {"Warehouse 2", 18, 1302.519897, -1.787510, 1001.028259},
    {"Sweet's Garage", 0, 2522.000000, -1673.383911, 14.866223},
    {"Lil' Probe Inn Toilet", 18, -221.059051, 1408.984008, 27.773437},
    {"Unused Safe House", 12, 2324.419921, -1145.568359, 1050.710083},
    {"RC Battlefield", 10, -975.975708, 1060.983032, 1345.671875},
    {"Barber 1", 2, 411.625976, -21.433298, 1001.804687},
    {"Barber 2", 3, 418.652984, -82.639793, 1001.804687},
    {"Barber 3", 12, 412.021972, -52.649898, 1001.898437},
    {"Tatoo Parlor 1", 16, -204.439987, -26.453998, 1002.273437},
    {"Tatoo Parlor 2", 17, -204.439987, -8.469599, 1002.273437},
    {"Tatoo Parlor 3", 3, -204.439987, -43.652496, 1002.273437},
    {"LS Police HQ", 6, 246.783996, 63.900199, 1003.640625},
    {"SF Police HQ", 10, 246.375991, 109.245994, 1003.218750},
    {"LV Police HQ", 3, 288.745971, 169.350997, 1007.171875},
    {"3 School", 3, -2029.798339, -106.675910, 1035.171875},
    {"8-Track", 7, -1398.065307, -217.028900, 1051.115844},
    {"Bloodbowl", 15, -1398.103515, 937.631164, 1036.479125},
    {"Dirt Track", 4, -1444.645507, -664.526000, 1053.572998},
    {"Kickstart", 14, -1465.268676, 1557.868286, 1052.531250},
    {"Vice Stadium", 1, -1401.829956, 107.051300, 1032.273437},
    {"SF Garage", 0, -1790.378295, 1436.949829, 7.187500},
    {"LS Garage", 0, 1643.839843, -1514.819580, 13.566620},
    {"SF Bomb Shop", 0, -1685.636474, 1035.476196, 45.210937},
    {"Blueberry Warehouse", 0, 76.632553, -301.156829, 1.578125},
    {"LV Warehouse 1", 0, 1059.895996, 2081.685791, 10.820312},
    {"LV Warehouse 2 (hidden part)", 0, 1059.180175, 2148.938720, 10.820312},
    {"Caligula's Hidden Room", 1, 2131.507812, 1600.818481, 1008.359375},
    {"Bank", 0, 2315.952880, -1.618174, 26.742187},
    {"Bank (Behind Desk)", 0, 2319.714843, -14.838361, 26.749565},
    {"LS Atrium", 18, 1710.433715, -1669.379272, 20.225049}
};

new const Float:g_arrDrivingCheckpoints[][] = {
	{1963.9385,-1974.7609,13.0958,357.9842},// cp1
	{1963.8893,-1853.6718,13.0883,0.3295},// cp2
	{1944.2578,-1723.8914,13.0957,1.1257},// cp3
	{1943.5837,-1644.2673,13.0882,1.1887},// cp4
	{1856.2805,-1609.8002,13.0956,91.2723},// cp5
	{1819.1624,-1669.9222,13.0881,181.5648},// cp6
	{1819.1213,-1800.8944,13.0928,179.0881},// cp7
	{1818.4344,-1879.4542,13.1056,179.2560},// cp8
	{1921.2081,-1934.9608,13.0882,269.7516},// cp9
	{1959.4524,-1979.4619,13.0535,179.5889},// cp10
	{1977.5022,-1995.8625,13.2166,357.8221}// cp11
};
new const Float:HaberKutulari[][] = {
	{-2243.8906, 1163.7344, 55.5781},
	{-2247.0703, 868.6484, 66.3359},
	{-2247.3594, 700.0938, 49.0859},
	{-2374.5000, 798.7500, 34.8047},
	{-2374.5312, 678.2109, 34.8047},
	{-2516.0781, 898.7812, 64.5703},
	{-2596.3672, 459.0234, 14.2266},
	{-2617.3984, 817.4375, 49.5859},
	{-2756.4375, 698.5547, 40.9531},
	{1116.1562, 1363.6016, 10.4297},
	{1445.0078, -1692.2344, 13.6953},
	{1445.0078, -1704.7656, 13.6953},
	{1510.8906, -1607.3125, 13.6953}
};
new const Float:g_arrPrisonSpawns[][] = {
	{1318.3375,-869.3515,7.8714},
    {1322.8729,-869.2974,7.8714},
    {1325.1188,-870.2001,7.8714},
    {1328.0930,-870.8606,7.8714},
    {1333.2864,-874.7021,7.8714},
    {1332.9828,-878.3291,7.8714},
    {1333.4796,-881.2087,7.8714},
    {1333.6068,-884.5388,7.8714},
    {1316.1476,-870.6807,11.5027},
    {1319.2772,-871.2475,11.5027},
    {1322.5745,-872.0967,11.5027},
    {1324.8716,-871.2523,11.5027},
    {1328.2128,-871.3962,11.5027},
    {1332.3167,-875.2788,11.5027},
    {1331.6956,-878.3959,11.5027},
    {1332.3293,-881.5812,11.5027},
    {1333.3389,-884.5779,11.5027}
};
new const Float:g_aracSpawns[][] = {
	{514.1979,-1306.4681,17.2414,87.3104},
    {513.8979,-1310.8035,17.2414,92.2180},
    {521.2477,-1316.6183,17.2414,183.4407},
    {524.7592,-1316.7946,17.2414,179.9883},
    {528.4471,-1317.0686,17.2414,180.3799},
    {532.4208,-1317.5212,17.2414,180.5273},
    {536.5370,-1317.5415,17.2414,177.5403},
    {540.5846,-1317.6492,17.2414,176.3914},
    {544.6474,-1317.9070,17.2414,179.2963}
};

new const g_aLegalMods[][] = {
    {400, 1024, 1021, 1020, 1019, 1018, 1013, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {401, 1145, 1144, 1143, 1142, 1020, 1019, 1017, 1013, 1007, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000},
    {404, 1021, 1020, 1019, 1017, 1016, 1013, 1007, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {405, 1023, 1021, 1020, 1019, 1018, 1014, 1001, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {410, 1024, 1023, 1021, 1020, 1019, 1017, 1013, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {415, 1023, 1019, 1018, 1017, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {418, 1021, 1020, 1016, 1006, 1002, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {420, 1021, 1019, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {421, 1023, 1021, 1020, 1019, 1018, 1016, 1014, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {422, 1021, 1020, 1019, 1017, 1013, 1007, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {426, 1021, 1019, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {436, 1022, 1021, 1020, 1019, 1017, 1013, 1007, 1006, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {439, 1145, 1144, 1143, 1142, 1023, 1017, 1013, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {477, 1021, 1020, 1019, 1018, 1017, 1007, 1006, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {478, 1024, 1022, 1021, 1020, 1013, 1012, 1005, 1004, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {489, 1024, 1020, 1019, 1018, 1016, 1013, 1006, 1005, 1004, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {491, 1145, 1144, 1143, 1142, 1023, 1021, 1020, 1019, 1018, 1017, 1014, 1007, 1003, 0000, 0000, 0000, 0000, 0000},
    {492, 1016, 1006, 1005, 1004, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {496, 1143, 1142, 1023, 1020, 1019, 1017, 1011, 1007, 1006, 1003, 1002, 1001, 0000, 0000, 0000, 0000, 0000, 0000},
    {500, 1024, 1021, 1020, 1019, 1013, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {516, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1007, 1004, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {517, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1017, 1016, 1007, 1003, 1002, 0000, 0000, 0000, 0000, 0000},
    {518, 1145, 1144, 1143, 1142, 1023, 1020, 1018, 1017, 1013, 1007, 1006, 1005, 1003, 1001, 0000, 0000, 0000, 0000},
    {527, 1021, 1020, 1018, 1017, 1015, 1014, 1007, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {529, 1023, 1020, 1019, 1018, 1017, 1012, 1011, 1007, 1006, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {534, 1185, 1180, 1179, 1178, 1127, 1126, 1125, 1124, 1123, 1122, 1106, 1101, 1100, 0000, 0000, 0000, 0000, 0000},
    {535, 1121, 1120, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1110, 1109, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {536, 1184, 1183, 1182, 1181, 1128, 1108, 1107, 1105, 1104, 1103, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {540, 1145, 1144, 1143, 1142, 1024, 1023, 1020, 1019, 1018, 1017, 1007, 1006, 1004, 1001, 0000, 0000, 0000, 0000},
    {542, 1145, 1144, 1021, 1020, 1019, 1018, 1015, 1014, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {546, 1145, 1144, 1143, 1142, 1024, 1023, 1019, 1018, 1017, 1007, 1006, 1004, 1002, 1001, 0000, 0000, 0000, 0000},
    {547, 1143, 1142, 1021, 1020, 1019, 1018, 1016, 1003, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {549, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1017, 1012, 1011, 1007, 1003, 1001, 0000, 0000, 0000, 0000},
    {550, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000},
    {551, 1023, 1021, 1020, 1019, 1018, 1016, 1006, 1005, 1003, 1002, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {558, 1168, 1167, 1166, 1165, 1164, 1163, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088, 0000, 0000, 0000, 0000},
    {559, 1173, 1162, 1161, 1160, 1159, 1158, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 0000, 0000, 0000, 0000},
    {560, 1170, 1169, 1141, 1140, 1139, 1138, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 0000, 0000, 0000, 0000},
    {561, 1157, 1156, 1155, 1154, 1064, 1063, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1031, 1030, 1027, 1026},
    {562, 1172, 1171, 1149, 1148, 1147, 1146, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 0000, 0000, 0000, 0000},
    {565, 1153, 1152, 1151, 1150, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 0000, 0000, 0000, 0000},
    {567, 1189, 1188, 1187, 1186, 1133, 1132, 1131, 1130, 1129, 1102, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {575, 1177, 1176, 1175, 1174, 1099, 1044, 1043, 1042, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {576, 1193, 1192, 1191, 1190, 1137, 1136, 1135, 1134, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {580, 1023, 1020, 1018, 1017, 1007, 1006, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {589, 1145, 1144, 1024, 1020, 1018, 1017, 1016, 1013, 1007, 1006, 1005, 1004, 1000, 0000, 0000, 0000, 0000, 0000},
    {600, 1022, 1020, 1018, 1017, 1013, 1007, 1006, 1005, 1004, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {603, 1145, 1144, 1143, 1142, 1024, 1023, 1020, 1019, 1018, 1017, 1007, 1006, 1001, 0000, 0000, 0000, 0000, 0000}
};
new g_vipskins[21] = {
	20262, 20263, 20265, 20266, 20267, 20268, 20269, 20270, 20271,
	20272, 20273, 20274, 20275, 20276, 20277, 20278, 20279, 20280, 20281,
	20281
};
new g_aMaleSkins[185] = {
	1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 299
};

new g_aFemaleSkins[77] = {
    9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69,
    75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141,
    145, 148, 150, 151, 152, 157, 169, 178, 190, 191, 192, 193, 194, 195,
    196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219, 224, 225,
    226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263,
    298
};

new g_aFemaleSkins2[45] = {
	20004, 20110, 20113, 20114, 20116, 20006, 20009, 20010, 20014, 20023, 20029, 20030, 20049,
	20051, 20058, 20059, 20062, 20063, 20065, 20074, 20075, 20091, 20121, 20122, 20124,
	20095, 20162, 20163, 20164, 20165, 20177, 20217, 20218, 20219, 20220, 20221, 20222, 20223,
	20224, 20226, 20227, 20228, 20229, 20230, 20210
};

new g_aMaleSkins2[127] = {
	20007, 20111, 20112, 20017, 20019, 20020, 20021, 20024, 20036, 20037, 20038, 20039, 20040,
    20041, 20042, 20043, 20044, 20045, 20046, 20047, 20048, 20050, 20052, 20053, 20120,
	20056, 20060, 20066, 20067, 20068, 20069, 20070, 20072, 20073, 20076, 20077, 20117, 20123,
	20078, 20079, 20080, 20081, 20082, 20083, 20084, 20085, 20118,
    20090, 20092, 20093, 20094, 20096, 20097, 20098, 20099, 20100, 20101, 20136,
	20137, 20138, 20139, 20140, 20141, 20142, 20143, 20144, 20145, 20146, 20147, 20148, 20149,
	20150, 20151, 20152, 20153, 20154, 20155, 20156, 20157, 20158, 20159, 20160, 20161, 20173,
	20174, 20175, 20176, 20178, 20180, 20181, 20182, 20183, 20184, 20185, 20186, 20187, 20188,
	20189, 20190, 20191, 20192, 20193, 20194, 20196, 20197, 20198, 20199, 20200, 20201, 20202,
	20203, 20204, 20205, 20206, 20208, 20209, 20211, 20213, 20214, 20215, 20216, 20243, 20244,
	20245, 20246, 20247, 20248
};

new g_aFemaleSkins3[12] = {
	20108, 20109, 20168, 20169, 20170, 20171, 20172, 63, 87, 139, 20251, 20252
};

new g_aMaleSkins3[5] = {
	45, 97, 154, 252, 18
};

enum e_FurnitureData {
	e_FurnitureType,
	e_FurnitureName[32],
	e_FurnitureModel
};

new const g_aFurnitureTypes[][] = {
	{"Çerçeveler"},
	{"Masalar"},
	{"Sandalyeler"},
	{"Yataklar"},
	{"Kabinler"},
	{"Televizyon Seti"},
	{"Mutfak Mobilyalarý"},
	{"Banyo Mobilyalarý"},
	{"Diðer Mobilyalar"}
};

new const g_aFurnitureData[][e_FurnitureData] = {
	{1, "Çerçeve 1", 2289},
	{1, "Çerçeve 2", 2288},
	{1, "Çerçeve 3", 2287},
	{1, "Çerçeve 4", 2286},
	{1, "Çerçeve 5", 2285},
	{1, "Çerçeve 6", 2284},
    {1, "Çerçeve 7", 2283},
    {1, "Çerçeve 8", 2282},
    {1, "Çerçeve 9", 2281},
    {1, "Çerçeve 10", 2280},
    {1, "Çerçeve 11", 2279},
	{1, "Çerçeve 12", 2278},
	{1, "Çerçeve 13", 2277},
	{1, "Çerçeve 14", 2276},
	{1, "Çerçeve 15", 2275},
	{1, "Çerçeve 16", 2274},
    {1, "Çerçeve 17", 2273},
    {1, "Çerçeve 18", 2272},
    {1, "Çerçeve 19", 2271},
    {1, "Çerçeve 20", 2270},
    {2, "Masa 1", 1433},
	{2, "Masa 2", 1998},
	{2, "Masa 3", 2008},
	{2, "Masa 4", 2180},
	{2, "Masa 5", 2185},
    {2, "Masa 6", 2205},
    {2, "Masa 7", 2314},
    {2, "Masa 8", 2635},
    {2, "Masa 9", 2637},
    {2, "Masa 10", 2644},
	{2, "Masa 11", 2747},
	{2, "Masa 12", 2764},
	{2, "Masa 13", 2763},
	{2, "Masa 14", 2762},
	{2, "Masa 15", 936},
	{2, "Masa 16", 937},
	{2, "Masa 17", 941},
	{2, "Masa 18", 2115},
	{2, "Masa 19", 2116},
	{2, "Masa 20", 2112},
	{2, "Masa 21", 2111},
	{2, "Masa 22", 2110},
	{2, "Masa 23", 2109},
	{2, "Masa 24", 2085},
	{2, "Masa 25", 2032},
	{2, "Masa 26", 2031},
	{2, "Masa 27", 2030},
	{2, "Masa 28", 2029},
    {3, "Sandalye 1", 1671},
    {3, "Sandalye 2", 1704},
    {3, "Sandalye 3", 1705},
    {3, "Sandalye 4", 1708},
    {3, "Sandalye 5", 1711},
    {3, "Sandalye 6", 1715},
    {3, "Sandalye 7", 1721},
    {3, "Sandalye 8", 1724},
    {3, "Sandalye 9", 1727},
    {3, "Sandalye 10", 1729},
    {3, "Sandalye 11", 1735},
    {3, "Sandalye 12", 1739},
    {3, "Sandalye 13", 1805},
    {3, "Sandalye 14", 1806},
    {3, "Sandalye 15", 1810},
    {3, "Sandalye 16", 1811},
    {3, "Sandalye 17", 2079},
    {3, "Sandalye 18", 2120},
    {3, "Sandalye 19", 2124},
    {3, "Sandalye 20", 2356},
    {3, "Sandalye 21", 1768},
    {3, "Sandalye 22", 1766},
    {3, "Sandalye 23", 1764},
    {3, "Sandalye 24", 1763},
    {3, "Sandalye 25", 1761},
    {3, "Sandalye 26", 1760},
    {3, "Sandalye 27", 1757},
    {3, "Sandalye 28", 1756},
    {3, "Sandalye 29", 1753},
    {3, "Sandalye 30", 1713},
    {3, "Sandalye 31", 1712},
    {3, "Sandalye 32", 1706},
    {3, "Sandalye 33", 1703},
    {3, "Sandalye 34", 1702},
    {3, "Sandalye 35", 1754},
    {3, "Sandalye 36", 1755},
    {3, "Sandalye 37", 1758},
    {3, "Sandalye 38", 1759},
    {3, "Sandalye 39", 1762},
    {3, "Sandalye 40", 1765},
    {3, "Sandalye 41", 1767},
    {3, "Sandalye 42", 1769},
	{4, "Yatak 1", 1700},
	{4, "Yatak 2", 1701},
	{4, "Yatak 3", 1725},
	{4, "Yatak 4", 1745},
	{4, "Yatak 5", 1793},
	{4, "Yatak 6", 1794},
	{4, "Yatak 7", 1795},
	{4, "Yatak 8", 1796},
	{4, "Yatak 9", 1797},
	{4, "Yatak 10", 1771},
	{4, "Yatak 11", 1798},
	{4, "Yatak 12", 1799},
    {4, "Yatak 13", 1800},
    {4, "Yatak 14", 1801},
    {4, "Yatak 15", 1802},
    {4, "Yatak 16", 1812},
    {4, "Yatak 17", 2090},
    {4, "Yatak 18", 2299},
    {5, "Kabin 1", 1416},
	{5, "Kabin 2", 1417},
	{5, "Kabin 3", 1741},
	{5, "Kabin 4", 1742},
	{5, "Kabin 5", 1743},
	{5, "Kabin 6", 2025},
	{5, "Kabin 7", 2065},
	{5, "Kabin 8", 2066},
	{5, "Kabin 9", 2067},
	{5, "Kabin 10", 2087},
    {5, "Kabin 11", 2088},
    {5, "Kabin 12", 2094},
    {5, "Kabin 13", 2095},
    {5, "Kabin 14", 2306},
    {5, "Kabin 15", 2307},
	{5, "Kabin 16", 2323},
	{5, "Kabin 17", 2328},
	{5, "Kabin 18", 2329},
	{5, "Kabin 19", 2330},
	{5, "Kabin 20", 2708},
	{6, "Televizyon 1", 1518},
	{6, "Televizyon 2", 1717},
	{6, "Televizyon 3", 1747},
	{6, "Televizyon 4", 1748},
	{6, "Televizyon 5", 1749},
	{6, "Televizyon 6", 1750},
	{6, "Televizyon 7", 1752},
	{6, "Televizyon 8", 1781},
	{6, "Televizyon 9", 1791},
	{6, "Televizyon 10", 1792},
    {6, "Televizyon 11", 2312},
	{6, "Televizyon 12", 2316},
	{6, "Televizyon 13", 2317},
	{6, "Televizyon 14", 2318},
	{6, "Televizyon 15", 2320},
	{6, "Televizyon 16", 2595},
	{6, "Televizyon 17", 16377},
	{7, "Mutfak 1", 2013},
	{7, "Mutfak 2", 2017},
	{7, "Mutfak 3", 2127},
	{7, "Mutfak 4", 2130},
	{7, "Mutfak 5", 2131},
	{7, "Mutfak 6", 2132},
	{7, "Mutfak 7", 2135},
	{7, "Mutfak 8", 2136},
	{7, "Mutfak 9", 2144},
	{7, "Mutfak 10", 2147},
    {7, "Mutfak 11", 2149},
    {7, "Mutfak 12", 2150},
    {7, "Mutfak 13", 2415},
    {7, "Mutfak 14", 2417},
    {7, "Mutfak 15", 2421},
    {7, "Mutfak 16", 2426},
    {7, "Mutfak 17", 2014},
    {7, "Mutfak 18", 2015},
    {7, "Mutfak 19", 2016},
    {7, "Mutfak 20", 2018},
    {7, "Mutfak 21", 2019},
    {7, "Mutfak 22", 2022},
    {7, "Mutfak 23", 2133},
    {7, "Mutfak 24", 2134},
	{7, "Mutfak 25", 2137},
	{7, "Mutfak 26", 2138},
	{7, "Mutfak 27", 2139},
	{7, "Mutfak 28", 2140},
	{7, "Mutfak 29", 2141},
	{7, "Mutfak 30", 2142},
	{7, "Mutfak 31", 2143},
	{7, "Mutfak 32", 2145},
	{7, "Mutfak 33", 2148},
	{7, "Mutfak 34", 2151},
	{7, "Mutfak 35", 2152},
	{7, "Mutfak 36", 2153},
	{7, "Mutfak 37", 2154},
	{7, "Mutfak 38", 2155},
	{7, "Mutfak 39", 2156},
	{7, "Mutfak 40", 2157},
	{7, "Mutfak 41", 2158},
	{7, "Mutfak 42", 2159},
	{7, "Mutfak 43", 2160},
	{7, "Mutfak 44", 2134},
	{7, "Mutfak 45", 2135},
	{7, "Mutfak 46", 2338},
	{7, "Mutfak 47", 2341},
	{8, "Banyo 1", 2514},
	{8, "Banyo 2", 2516},
	{8, "Banyo 3", 2517},
	{8, "Banyo 4", 2518},
	{8, "Banyo 5", 2520},
	{8, "Banyo 6", 2521},
	{8, "Banyo 7", 2522},
	{8, "Banyo 8", 2523},
	{8, "Banyo 9", 2524},
	{8, "Banyo 10", 2525},
    {8, "Banyo 11", 2526},
    {8, "Banyo 12", 2527},
    {8, "Banyo 13", 2528},
    {8, "Banyo 14", 2738},
    {8, "Banyo 15", 2739},
	{9, "Washer", 1208},
	{9, "Ceiling Fan", 1661},
	{9, "Moose Head", 1736},
	{9, "Radiator", 1738},
	{9, "Mop and Pail", 1778},
	{9, "Water Cooler", 1808},
	{9, "Water Cooler 2", 2002},
	{9, "Para Kasasý", 1829},
	{9, "Printer", 2186},
	{9, "Computer", 2190},
	{9, "Treadmill", 2627},
	{9, "Bench Press", 2629},
	{9, "Exercise Bike", 2630},
	{9, "Mat 1", 2631},
	{9, "Mat 2", 2632},
	{9, "Mat 3", 2817},
	{9, "Mat 4", 2818},
	{9, "Mat 5", 2833},
	{9, "Mat 6", 2834},
	{9, "Mat 7", 2835},
	{9, "Mat 8", 2836},
	{9, "Mat 9", 2841},
	{9, "Mat 10", 2842},
	{9, "Mat 11", 2847},
	{9, "Book Pile 1", 2824},
	{9, "Book Pile 2", 2826},
	{9, "Book Pile 3", 2827},
	{9, "Basketball", 2114},
	{9, "Lamba 1", 2108},
	{9, "Lamba 2", 2106},
	{9, "Lamba 3", 2069},
	{9, "Halý 1", 2569},
	{9, "Halý 2", 2570},
	{9, "Halý 3", 2573},
	{9, "Halý 4", 2574},
	{9, "Halý 5", 2576},
	{9, "Book", 2894}
};

//native IsValidVehicle(vehicleid);
native WP_Hash(buffer[], len, const str[]);
native gpci (playerid, serial [], len);

main() {
	print("Varna Roleplay - Code by PeiTheLord or Marvellous.");
}

SQL_Connect() {
   	g_iHandle = mysql_connect("localhost", "root", "game_database", "");
   	//g_iHandle = mysql_connect("localhost", "root", "samp", "");
	if (mysql_errno(g_iHandle) != 0) {
	    printf("[Database] MYSQL Baglantisi Basarisiz!");
	}
	else {
		printf("[Database] Tum verilerin yuklenmesi \"localhost\" basarili!");
	}
}

SQL_CreateAccount(const username[], const password[])
{
	new
	    query[512],
	    buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "INSERT INTO `accounts` (`Username`, `Password`, `RegisterDate`, `LoginDate`) VALUES('%s', '%s', '%s', '%s')", username, buffer, ReturnDate(), ReturnDate());
	mysql_tquery(g_iHandle, query);
}

SQL_CheckAccount(playerid)
{
	new
	    query[128];

    format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", ReturnName(playerid));
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_FIND_USERNAME);
}
SQL_AttemptLogin(playerid, const password[])
{
	new
		query[300],
		buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "SELECT `ID` FROM `accounts` WHERE `Username` = '%s' AND `Password` = '%s'", PlayerData[playerid][pUsername], buffer);
    mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LOGIN);
}
stock Wtoupper(ch)
{
if(ch == 'q') ch = 'Q';
else if(ch == 'w') ch = 'W';
else if(ch == 'e') ch = 'E';
else if(ch == 'r') ch = 'R';
else if(ch == 't') ch = 'T';
else if(ch == 'y') ch = 'Y';
else if(ch == 'u') ch = 'U';
else if(ch == 'ý') ch = 'I';
else if(ch == 'o') ch = 'O';
else if(ch == 'p') ch = 'P';
else if(ch == 'ð') ch = 'Ð';
else if(ch == 'ü') ch = 'Ü';
else if(ch == 'a') ch = 'A';
else if(ch == 's') ch = 'S';
else if(ch == 'd') ch = 'D';
else if(ch == 'f') ch = 'F';
else if(ch == 'g') ch = 'G';
else if(ch == 'h') ch = 'H';
else if(ch == 'j') ch = 'J';
else if(ch == 'k') ch = 'K';
else if(ch == 'l') ch = 'L';
else if(ch == 'þ') ch = 'Þ';
else if(ch == 'i') ch = 'Ý';
else if(ch == 'z') ch = 'Z';
else if(ch == 'x') ch = 'X';
else if(ch == 'c') ch = 'C';
else if(ch == 'v') ch = 'V';
else if(ch == 'b') ch = 'B';
else if(ch == 'n') ch = 'N';
else if(ch == 'm') ch = 'M';
else if(ch == 'ö') ch = 'Ö';
else if(ch == 'ç') ch = 'Ç';
return ch;
}

new UsedPlayerAttach[MAX_PLAYERS] = {-1, ...};

Load_VehicleData()
{
	for(new i = 0; i < MAX_DYNAMIC_CARS; i++)
	{
	    VehicleData[i][TempExists][0] = 0;
	    VehicleData[i][TempExists][1] = 0;
	    VehicleData[i][TempExists][2] = 0;
	    VehicleData[i][TempExists][3] = 0;
	    VehicleData[i][TempExists][4] = 0;
	}
	return 1;
}

stock SQL_IsLogged(playerid) {
	return (PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] > 0);
}
stock IsCbugWeapon(playerid)
{
    new weaponID = GetPlayerWeapon(playerid);
    if(weaponID == 22 || weaponID == 24 || weaponID == 25 || weaponID == 27)
    {
                return 1;
    }
        return 0;
}
stock ShowCarColorList(playerid,dialogid,Caption[],Button1[],Button2[]) // Stock'lar arasýna ekle
{
    new BigString[3098];
    for(new i = 0; i < sizeof(ColorList); i++)
	{
		format(BigString, sizeof(BigString), "%s%s", BigString, ColorList[i]);
	}
	ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_MSGBOX,Caption,BigString,Button1,Button2);
}

stock GetPlayerPacketloss(playerid,&Float:packetloss)
{
	/* Returns the packetloss percentage of the given playerid - Made by Fusez */

	if(!IsPlayerConnected(playerid)) return 0;

	new nstats[400+1], nstats_loss[20], start, end;
	GetPlayerNetworkStats(playerid, nstats, sizeof(nstats));

	start = strfind(nstats,"packetloss",true);
	end = strfind(nstats,"%",true,start);

	strmid(nstats_loss, nstats, start+12, end, sizeof(nstats_loss));
	packetloss = floatstr(nstats_loss);
	return 1;
}
stock Float:cache_get_field_float(row, const field_name[])
{
	new
	    str[16];

	cache_get_field_content(row, field_name, str, g_iHandle, sizeof(str));
	return floatstr(str);
}
stock SetPlayerWalkingStyle(playerid, style)
{
	PlayerData[playerid][pWalkStyle] = style;
}

stock GetPlayerWalkingStyle(playerid)
{
return PlayerData[playerid][pWalkStyle];
}
public HileyleAracPatlatma(playerid)
{
SendServerMessage(playerid, "Anti-hile devrede!");
KickEx(playerid);
return 1;
}
public OnAntiCheatVehicleWarp(playerid, vehicleid)
{
if (PlayerData[playerid][pLevel] < 2 && !PlayerData[playerid][pGirisYapti]) {
SendServerMessage(playerid, "Anti-hile devrede!");
RespawnVehicle(GetPlayerVehicleID(playerid));
KickEx(playerid);
}
return 1;
}
public OnAntiCheatVehicleWarpInto(playerid, vehicleid)
{
if (PlayerData[playerid][pLevel] < 2) {
SendServerMessage(playerid, "Anti-hile devrede!");
RespawnVehicle(GetPlayerVehicleID(playerid));
KickEx(playerid);
}
return 1;
}
public OnPlayerPause(playerid)
{
PlayerData[playerid][pAFKOldu] = 1;
return 1;
}
public OnPlayerUnpause(playerid)
{
PlayerData[playerid][pAFKOldu] = 0;
return 1;
}
forward serialbanarat(playerid);
public serialbanarat(playerid)
{
new rows, fields;
cache_get_data(rows, fields, g_iHandle);
if(!rows)
return 1;
else if(rows)
{
SendServerMessage(playerid, "Serial adresiniz yasaklýlar listesinde bulunduðu için oyundan atýldýnýz.");
KickEx(playerid);
}
return 1;
}
forward Tanitim(playerid);
public Tanitim(playerid)
{
//SendClientMessage(playerid, 0x804040FF, "Karakter Oluþturma: {FFFFFF}Þehirin tadýný çýkar! GPS cihazý envantere eklendi. '/envanter'");
SendClientMessage(playerid, 0xE74C3CFF, "Server: {FFFFFF}Las Venturas bölgesinden buraya 'Tren' ile ulaþým saðladýn.");
SendClientMessage(playerid, 0xE74C3CFF, "Server: {FFFFFF}Çantanda bir miktar para bulunmakta idareli kullan.");
SendClientMessage(playerid, 0xE74C3CFF, "Server: {FFFFFF}Komutlar hakkýnda ufak bilgilendirme için '/yardim' komutunu kullan.");
SendClientMessage(playerid, COLOR_DARKGREEN, "[V:RP]{FFFFFF} Oyun içinde yardýma ihtiyacýn olursa '/rapor' komutunu kullanabilirsin.");
//SendClientMessage(playerid, 0x804040FF, "Karakter Oluþturma: {FFFFFF}Ýkinci dilini seçmek istiyorsan, '/dilsec' komutunu kullan.");
//SendClientMessage(playerid, 0x804040FF, "Karakter Oluþturma: {FFFFFF}Kýyafetlerini deðiþtirmek için binco taraflarýna uðramayý unutma.");
SetDefaultSpawn(playerid);
PlayerData[playerid][pSilahHakki] = 0;
PlayerData[playerid][pSilahZaman] = 0;
TogglePlayerControllable(playerid,1);
if (PlayerData[playerid][pGender] > 0)
{
SetPlayerSkin(playerid, 59);
PlayerData[playerid][pSkin] = 59;
}
if (PlayerData[playerid][pGender] > 1)
{
SetPlayerSkin(playerid, 191);
PlayerData[playerid][pSkin] = 191;
}
//Dialog_Show(playerid, AdminList, DIALOG_STYLE_MSGBOX, "Hoþgeldiniz!", " {FFFFFF}Bu sunucu modunda meslek yapmak zorunda deðilsiniz.\n {00FF00}Seviyeli PayDay Sistemi {FFFFFF}sadece rolünüze odaklanmanýzý saðlayacaktýr.\n Hobi ve ek gelir olarak meslek yapmak isterseniz. {009FFF}/meslekler {FFFFFF}komutu aktiftir. ", "Kapat", "");
return 1;
}
forward EvBakma(playerid);
public EvBakma(playerid)
{
new id = House_Inside(playerid);
SetPlayerPos(playerid, bakx, baky, bakz);
SetPlayerInterior(playerid, HouseData[id][houseInterior]);
SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);
ObjeleriYukle(playerid);
PlayerData[playerid][pEvBakma] = 0;
PlayerData[playerid][pEvGozlemliyor] = 0;
return 1;
}
forward ATM_Load();
public ATM_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ATM_MACHINES)
	{
	    ATMData[i][atmExists] = true;
	    ATMData[i][atmID] = cache_get_field_int(i, "atmID");
	    ATMData[i][atmPos][0] = cache_get_field_float(i, "atmX");
        ATMData[i][atmPos][1] = cache_get_field_float(i, "atmY");
        ATMData[i][atmPos][2] = cache_get_field_float(i, "atmZ");
        ATMData[i][atmPos][3] = cache_get_field_float(i, "atmA");
        ATMData[i][atmInterior] = cache_get_field_int(i, "atmInterior");
		ATMData[i][atmWorld] = cache_get_field_int(i, "atmWorld");

		ATM_Refresh(i);
	}
	return 1;
}
/*forward WalkAnim(playerid);
public WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (GetPlayerWalkingStyle(playerid) == WALK_NORMAL)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_PED)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
 	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	return true;
}*/
stock IsPlayerDriver(playerid)
{
	if(IsPlayerConnected(playerid) && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
	{
		return 1;
	}
	return 0;
}
stock ViewBillboards(playerid)
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `billboards` ORDER BY `bbID` DESC");
	mysql_tquery(g_iHandle, string, "OnViewBillboards", "d", playerid);
	return 1;
}
stock AnimCek(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new animcik[32], animismine[32];
		GetAnimationName(GetPlayerAnimationIndex(playerid),animcik,32,animismine,32);
		if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_GLIDE", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_BREAST", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_CRAWL", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_DIVE_UNDER", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_DIVE_GLIDE", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_UNDER", true)) return 1;
		else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_TREAD", true)) return 1;
		else if(GetPlayerWeapon(playerid) != 46)
		{
			if(!strcmp(animcik, "PARACHUTE", true) && !strcmp(animismine, "FALL_SkyDive_Accel", true)) return 1;
			if(!strcmp(animcik, "PARACHUTE", true) && !strcmp(animismine, "FALL_SKYDIVE", true)) return 1;
		}
	}
	return 0;
}
stock PosCek(playerid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
	if((x >= -1408.0629 && y >= 2021.0587 && x <= -460.9319 && y <= 2861.4893) ||
	(x >= 1269.5886 && y >= -810.4507 && x <= 1288.8916 && y <= -800.5959) ||
	(x >= 1086.6010 && y >= -683.6998 && x <= 1103.0225 && y <= -662.1832) ||
	(x >= 169.6879 && y >= -1392.6630 && x <= 281.5444 && y <= -1168.9749) ||
	(x >= -828.3018 && y >= -2107.1487 && x <= -443.5032 && y <= -1855.6273) ||
	(x >= 1198.9982 && y >= -2407.0581 && x <= 1275.7397 && y <= -2341.6262) ||
	(x >= 2293.1467 && y >= -1432.5869 && x <= 2331.7388 && y <= -1397.6476) ||
	(x >= 1915.3196 && y >= -1236.2382 && x <= 2016.6565 && y <= -1167.9290) ||
	(x >= -2747.1692 && y >= -510.1152 && x <= -2663.2468 && y <= -411.4905) ||
	(x >= 1838.8041 && y >= 1463.2024 && x <= 2035.4167 && y <= 1703.0480) ||
	(x >= 2049.6646 && y >= 1843.3029 && x <= 2119.9021 && y <= 1983.5464) ||
	(x >= 2094.9255 && y >= 1085.2852 && x <= 2179.1790 && y <= 1183.0610) ||
	(x >= 2545.3718 && y >= 2347.7112 && x <= 2593.6794 && y <= 2403.8040))
	{
		return 1;
	}
	return 0;
}
stock SicilKontrol(playerid, id)
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `kickbanlog` WHERE `ID` = '%d'", PlayerData[id][pID]);
	mysql_tquery(g_iHandle, string, "OnSicilView", "dd", playerid, id);
	return 1;
}

stock AramaKayitlari(playerid)
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `aramakayitlari` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
	mysql_tquery(g_iHandle, string, "SonAramaKayitlari", "d", playerid);
	return 1;
}


stock OfflineUyeler(playerid, id)
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `characters` WHERE `Faction` = '%d'", FactionData[id][factionID]);
	mysql_tquery(g_iHandle, string, "OfflineBirlikUyeleri", "dd", playerid, id);
	return 1;
}

stock IsyeriCalisanlari(playerid, id)
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `characters` WHERE `BizJob` = '%d'", BusinessData[id][bizID]);
	mysql_tquery(g_iHandle, string, "IsyeriCalisanlari_f", "dd", playerid, id);
	return 1;
}


stock ViewFactions(playerid)
{
	new string[20000];
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {
 		format(string, sizeof(string), "%s{FFFFFF}Oluþum ({FFBF00}%i{FFFFFF}) | %s (Üye: %d)\n", string, i, FactionData[i][factionName], BirlikUyeSayisiCek(i));
	}
	Dialog_Show(playerid, FactionsList, DIALOG_STYLE_MSGBOX, "Tüm Oluþumlar", string, "Close", "");
	return 1;
}

stock SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_real_escape_string(string, entry, g_iHandle);
	return entry;
}

SQL_SaveCharacter(playerid)
{
	if (!PlayerData[playerid][pLogged] && !PlayerData[playerid][pCharacter])
		return 0;

	new
	    query[4880];


	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !PlayerData[playerid][pDrivingTest])
	{
	    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

	    GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	    GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);

	    if (!PlayerData[playerid][pKilled] && PlayerData[playerid][pHealth] == 0.0) {
	        PlayerData[playerid][pHealth] = 100.0;
		}
	}
	format(query, sizeof(query), "UPDATE `characters` SET `Created` = '%d', `Gender` = '%d', `Birthdate` = '%s', `Origin` = '%s', `Skin` = '%d', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `Health` = '%.4f', `Interior` = '%d', `World` = '%d', `Hospital` = '%d', `HospitalInt` = '%d', `Money` = '%d', `BankMoney` = '%d', `OwnsBillboard` = '%d', `Savings` = '%d', `Admin` = '%d', `JailTime` = '%d', `Muted` = '%d', `Tester` = '%d', `DonatorTime` = '%d', `JailReason` = '%s'",
		PlayerData[playerid][pCreated],
		PlayerData[playerid][pGender],
		PlayerData[playerid][pBirthdate],
		PlayerData[playerid][pOrigin],
 		PlayerData[playerid][pSkin],
		PlayerData[playerid][pPos][0],
		PlayerData[playerid][pPos][1],
		PlayerData[playerid][pPos][2],
		PlayerData[playerid][pPos][3],
  		PlayerData[playerid][pHealth],
		PlayerData[playerid][pInterior],
		PlayerData[playerid][pWorld],
		PlayerData[playerid][pHospital],
		PlayerData[playerid][pHospitalInt],
		PlayerData[playerid][pMoney],
		PlayerData[playerid][pBankMoney],
		PlayerData[playerid][pOwnsBillboard],
		PlayerData[playerid][pSavings],
		PlayerData[playerid][pAdmin],
		PlayerData[playerid][pJailTime],
		PlayerData[playerid][pMuted],
  		PlayerData[playerid][pTester],
		PlayerData[playerid][pJailReason]
	);
	for (new i = 0; i < 13; i ++) {
		format(query, sizeof(query), "%s, `Gun%d` = '%d', `Ammo%d` = '%d'", query, i + 1, PlayerData[playerid][pGuns][i], i + 1, PlayerData[playerid][pAmmo][i]);
	}
	format(query, sizeof(query), "%s, `Ayarlar` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d'",
		query,
		PlayerData[playerid][pDisablePM],
		PlayerData[playerid][pDisableOOC],
		PlayerData[playerid][pDisableFaction],
		PlayerData[playerid][pDisableBC],
		PlayerData[playerid][pDisableSpeedo],
		PlayerData[playerid][pDisableTester],
		PMSpec[playerid],
		PlayerData[playerid][pAdminChat],
		PlayerData[playerid][pChatAnimation],
		PlayerData[playerid][pPlakaDurum]
	);
	format(query, sizeof(query), "%s, `Baliklar` = '%d|%d|%d|%d|%d|%d|%d|%d', `BalikGram` = '%d|%d|%d|%d|%d|%d|%d|%d'",
		query,
  		OyuncuBaliklari[playerid][BalikID][0],
		OyuncuBaliklari[playerid][BalikID][1],
		OyuncuBaliklari[playerid][BalikID][2],
		OyuncuBaliklari[playerid][BalikID][3],
		OyuncuBaliklari[playerid][BalikID][4],
		OyuncuBaliklari[playerid][BalikID][5],
		OyuncuBaliklari[playerid][BalikID][6],
		OyuncuBaliklari[playerid][BalikID][7],
		OyuncuBaliklari[playerid][BalikGram][0],
		OyuncuBaliklari[playerid][BalikGram][1],
		OyuncuBaliklari[playerid][BalikGram][2],
		OyuncuBaliklari[playerid][BalikGram][3],
		OyuncuBaliklari[playerid][BalikGram][4],
		OyuncuBaliklari[playerid][BalikGram][5],
		OyuncuBaliklari[playerid][BalikGram][6],
		OyuncuBaliklari[playerid][BalikGram][7]
	);
	format(query, sizeof(query), "%s, `House` = '%d', `Business` = '%d', `Entrance` = '%d', `Phone` = '%d', `Lottery` = '%d', `LotteryB` = '%d', `Hunger` = '%d', `Thirst` = '%d', `PlayingHours` = '%d', `Minutes` = '%d', `ArmorStatus` = '%.4f', `Job` = '%d', `Faction` = '%d', `FactionRank` = '%d', `Prisoned` = '%d', `Injured` = '%d', `Warrants` = '%d', `Channel` = '%d', `Bleeding` = '%d', `AdminHide` = '%d', `SpawnPoint` = '%d', `FactionDivizyon` = '%d'",
		query,
		PlayerData[playerid][pHouse],
		PlayerData[playerid][pBusiness],
		PlayerData[playerid][pEntrance],
		PlayerData[playerid][pPhone],
		PlayerData[playerid][pLottery],
		PlayerData[playerid][pLotteryB],
		PlayerData[playerid][pHunger],
		PlayerData[playerid][pThirst],
		PlayerData[playerid][pPlayingHours],
		PlayerData[playerid][pMinutes],
  		PlayerData[playerid][pArmorStatus],
		PlayerData[playerid][pJob],
		PlayerData[playerid][pFactionID],
		PlayerData[playerid][pFactionRank],
		PlayerData[playerid][pPrisoned],
		PlayerData[playerid][pBaygin],
		PlayerData[playerid][pWarrants],
		PlayerData[playerid][pChannel],
		PlayerData[playerid][pBleeding],
		PlayerData[playerid][pAdminHide],
		PlayerData[playerid][pSpawnPoint],
		PlayerData[playerid][pFactionDivizyon]
	);
	format(query, sizeof(query), "%s, `FabrikaCalisma` = '%d', `Aranma` = '%d', `ForumBaglandi` = '%d', `SQLID` = '%d', `ParcalatTime` = '%d', `HizliMotor` = '%d', `BirlikKurmaIzni` = '%d', `Aksan` = '%d', `ForumNick` = '%s', `TesterName` = '%s', `TesterHide` = '%d', `Pet` = '%d', `Gorunus` = '%s', `BanSayisi` = '%d', `UnjailSayisi` = '%d', `PmSayisi` = '%d', `KickSayisi` = '%d', `JailSayisi` = '%d', `UnbanSayisi` = '%d', `CimentoSkill` = '%d', `Bagisci` = '%d', `SilverVip` = '%d', `GoldVip` = '%d', `QuantumVip` = '%d', `TotalUsed` = '%d', `TasimaciSkill` = '%d', `HediyeTime` = '%d', `UyusturucuAldi` = '%d', `CK` = '%d', `SilahHakki` = '%d', `SilahZaman` = '%d', `DestekMute` = '%d', `SmsHakki` = '%d', `BiKere` = '%d',`Pasaport` = '%d', `OnDuty` = '%d|%d'",
		query,
		PlayerData[playerid][pFabrikaCalisma],
		PlayerData[playerid][pWantedLevel],
		PlayerData[playerid][pForumBaglandi],
		PlayerData[playerid][pSQLID],
		PlayerData[playerid][pAracParcalatTime],
		PlayerData[playerid][pHizliMotor],
		PlayerData[playerid][pBirlikKurmaIzni],
		PlayerData[playerid][pAccent],
		SQL_ReturnEscaped(PlayerData[playerid][pForumNick]),
		PlayerData[playerid][pTesterName],
		PlayerData[playerid][pTesterHide],
		PlayerData[playerid][pPet],
		SQL_ReturnEscaped(PlayerData[playerid][pGorunus]),
		PlayerData[playerid][aTBan],
		PlayerData[playerid][aTUnjail],
		PlayerData[playerid][aTPM],
		PlayerData[playerid][aTKick],
		PlayerData[playerid][aTJail],
		PlayerData[playerid][aTUnban],
		PlayerData[playerid][pCimentoSkill],
		PlayerData[playerid][pBagisci],
		PlayerData[playerid][pSilverVip],
		PlayerData[playerid][pGoldVip],
		PlayerData[playerid][pQuantumVip],
		PlayerData[playerid][pTotalUsed],
		PlayerData[playerid][pTasimaciSkill],
		PlayerData[playerid][pHediyeTime],
		PlayerData[playerid][pSiparisTime],
		PlayerData[playerid][pUyusturucuAldi],
		PlayerData[playerid][pCK],
		PlayerData[playerid][pSilahHakki],
		PlayerData[playerid][pSilahZaman],
		PlayerData[playerid][pDestekMute],
		PlayerData[playerid][pSmsHakki],
		PlayerData[playerid][pBiKere],
		PlayerData[playerid][pPasaport],
		PlayerData[playerid][pOnDuty],
		PlayerData[playerid][pDutySkin]
	);
	format(query, sizeof(query), "%s, `Warnings` = '%d', `Warn1` = '%s', `Warn2` = '%s', `MaskID` = '%d', `Maske` = '%d', `FactionMod` = '%d', `Capacity` = '%d', `Level` = '%d', `Exp` = '%d', `AdminName` = '%s', `EkstraDil` = '%d', `KasSeviye` = '%d', `KasEXP` = '%d', `DovusStil` = '%d', `MetalAldimi` = '%d', `TirSeviye` = '%d',`TirEXP` = '%d', `SilahSeviye` = '%d', `SilahEXP` = '%d', `rSayi` = '%d', `sSayi` = '%d', `Partner` = '%d', `BizJob` = '%d', `BizRank` = '%d', `TenRengi` = '%s'  WHERE `ID` = '%d'",
	    query,
	    PlayerData[playerid][pWarnings],
	    SQL_ReturnEscaped(PlayerData[playerid][pWarn1]),
	    SQL_ReturnEscaped(PlayerData[playerid][pWarn2]),
	    PlayerData[playerid][pMaskID],
	    PlayerData[playerid][pMask],
	    PlayerData[playerid][pFactionMod],
	    PlayerData[playerid][pCapacity],
	    PlayerData[playerid][pLevel],
	    PlayerData[playerid][pEXP],
	    PlayerData[playerid][pAdminName],
	    PlayerData[playerid][pEkstraDil],
	    PlayerData[playerid][pKasSeviye],
	    PlayerData[playerid][pKasEXP],
	    PlayerData[playerid][pDovus],
	    PlayerData[playerid][pMetalAldimi],
	    PlayerData[playerid][pTirSeviye],
	    PlayerData[playerid][pTirEXP],
	    PlayerData[playerid][pSilahSeviye],
	    PlayerData[playerid][pSilahEXP],
	    PlayerData[playerid][pRaporSayisi],
	    PlayerData[playerid][pSoruSayisi],
	    PlayerData[playerid][pPartner],
	    PlayerData[playerid][pBizJobID],
		PlayerData[playerid][pBizRank],
  		SQL_ReturnEscaped(PlayerData[playerid][pTenRengi]),
		PlayerData[playerid][pID]
	);
	mysql_tquery(g_iHandle, query);

	SQL_SaveAccessories(playerid);
	return 1;
}

SQL_SaveAccessories(playerid)
{
    if (!PlayerData[playerid][pLogged])
		return 0;

	new
	    query[2500];

    format(query, sizeof(query), "UPDATE `characters` SET `ASlotA` = '%d|%d|%d'",
        PlayerData[playerid][pASlot][0],
		PlayerData[playerid][pABone][0],
		PlayerData[playerid][pTSlot][0]
	);
	format(query, sizeof(query), "%s, `ASlotB` = '%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][1],
		PlayerData[playerid][pABone][1],
		PlayerData[playerid][pTSlot][1]
	);
	format(query, sizeof(query), "%s, `ASlotC` = '%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][2],
		PlayerData[playerid][pABone][2],
		PlayerData[playerid][pTSlot][2]
	);
	format(query, sizeof(query), "%s, `ASlotD` = '%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][3],
		PlayerData[playerid][pABone][3],
		PlayerData[playerid][pTSlot][3]
	);
	format(query, sizeof(query), "%s, `ASlotE` = '%d|%d|%d'",
		query,
        PlayerData[playerid][pASlot][4],
		PlayerData[playerid][pABone][4],
		PlayerData[playerid][pTSlot][4]
	);
    format(query, sizeof(query), "%s, `ASlotAPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
		query,
		AccessoryData[playerid][0][0],
		AccessoryData[playerid][0][1],
        AccessoryData[playerid][0][2],
        AccessoryData[playerid][0][3],
        AccessoryData[playerid][0][4],
        AccessoryData[playerid][0][5],
        AccessoryData[playerid][0][6],
        AccessoryData[playerid][0][7],
		AccessoryData[playerid][0][8]
	);

    format(query, sizeof(query), "%s, `ASlotBPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
        query,
		AccessoryData[playerid][1][0],
        AccessoryData[playerid][1][1],
        AccessoryData[playerid][1][2],
        AccessoryData[playerid][1][3],
        AccessoryData[playerid][1][4],
        AccessoryData[playerid][1][5],
        AccessoryData[playerid][1][6],
        AccessoryData[playerid][1][7],
        AccessoryData[playerid][1][8]
	);
	format(query, sizeof(query), "%s, `ASlotCPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AccessoryData[playerid][2][0],
        AccessoryData[playerid][2][1],
        AccessoryData[playerid][2][2],
        AccessoryData[playerid][2][3],
        AccessoryData[playerid][2][4],
        AccessoryData[playerid][2][5],
        AccessoryData[playerid][2][6],
        AccessoryData[playerid][2][7],
        AccessoryData[playerid][2][8]
	);
	format(query, sizeof(query), "%s, `ASlotDPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    query,
		AccessoryData[playerid][3][0],
        AccessoryData[playerid][3][1],
        AccessoryData[playerid][3][2],
        AccessoryData[playerid][3][3],
        AccessoryData[playerid][3][4],
        AccessoryData[playerid][3][5],
        AccessoryData[playerid][3][6],
        AccessoryData[playerid][3][7],
        AccessoryData[playerid][3][8],
        AccessoryData[playerid][3][9]
	);
	format(query, sizeof(query), "%s, `ASlotEPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f' WHERE `ID` = '%d'",
	    query,
		AccessoryData[playerid][4][0],
        AccessoryData[playerid][4][1],
        AccessoryData[playerid][4][2],
        AccessoryData[playerid][4][3],
        AccessoryData[playerid][4][4],
        AccessoryData[playerid][4][5],
        AccessoryData[playerid][4][6],
        AccessoryData[playerid][4][7],
        AccessoryData[playerid][4][8],
        PlayerData[playerid][pID]
	);
	mysql_tquery(g_iHandle, query);
	return 1;
}


stock GetBillboardByID(sqlid)
{
	for (new i = 0; i != MAX_BILLBOARDS; i ++) if (BillBoardData[i][bbExists] && BillBoardData[i][bbID] == sqlid)
	    return i;

	return -1;
}

stock Float:SetPlayerToFacePos(playerid, Float:X, Float:Y)
{
	new
		Float:pX1,
		Float:pY1,
		Float:pZ1,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0.0;

	GetPlayerPos(playerid, pX1, pY1, pZ1);

	if( Y > pY1 ) ang = (-acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);
	else if( Y < pY1 && X < pX1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 450.0);
	else if( Y < pY1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);

	if(X > pX1) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);

	ang += 180.0;

	SetPlayerFacingAngle(playerid, ang);

 	return ang;
}


stock GetInitials(const string[])
{
	new
	    ret[32],
		index = 0;

	for (new i = 0, l = strlen(string); i != l; i ++)
	{
	    if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
			ret[index++] = string[i];
	}
	return ret;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}


stock Float:DistanceCameraTargetToLocation(Float:fCameraX, Float:fCameraY, Float:fCameraZ, Float:fObjectX, Float:fObjectY, Float:fObjectZ, Float:fVectorX, Float:fVectorY, Float:fVectorZ)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:fDistance;

	fDistance = GetDistance(fCameraX, fCameraY, fCameraZ, fObjectX, fObjectY, fObjectZ);

	fX = fVectorX * fDistance + fCameraX;
	fY = fVectorY * fDistance + fCameraY;
	fZ = fVectorZ * fDistance + fCameraZ;

	return floatsqroot((fX - fObjectX) * (fX - fObjectX) + (fY - fObjectY) * (fY - fObjectY) + (fZ - fObjectZ) * (fZ - fObjectZ));
}
forward FlyKontrol(playerid);
public FlyKontrol(playerid)
{
	if(AnimCek(playerid))
	{
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(z > 1.0)
		{
			if(!PosCek(playerid))
			{
			if(!IsPlayerNPC(playerid)) {
			if (!PlayerData[playerid][pSexAnim])
			{
				Kick(playerid);
}
			}
			}
		}
	}
	return 1;
}
forward OnJailAccount(index);
public OnJailAccount(index)
{
	new
		string[128],
		name[24],
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	GetPVarString(index, "OnJailAccount", name, 24);
	//GetPVarString(index, "OnJailAccountReason", reason, 64);

	if(cache_affected_rows(g_iHandle)) {
		format(string, sizeof(string), "%s adlý karakteri baþarýyla hapise yolladýn.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	//	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuyu offline ooc hapse attý.", ReturnName(index, 0), ReturnName(name, 0));


	}
	else {
		format(string, sizeof(string), "Bu hesap geçersiz!", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}

	DeletePVar(index, "OnJailAccount");

	return 1;
}
forward KomutSure(playerid);
public KomutSure(playerid)
{
	if(KomutFloodSistemi[playerid] >= 10)
	{
		SendServerMessage(playerid, "Sunucuda aralýksýz komut kullandýðýn için atýldýn!");
		KickEx(playerid);
	}
	KomutFloodSistemi[playerid] = 0;
	return 1;
}
forward OnBillboardCreated(bizid);
public OnBillboardCreated(bizid)
{
	if (bizid == -1 || !BillBoardData[bizid][bbExists])
	    return 0;

	BillBoardData[bizid][bbID] = cache_insert_id(g_iHandle);
	Billboard_Save(bizid);

	return 1;
}
forward Player_RepairVehicle(playerid); public Player_RepairVehicle(playerid) {
	if(IsPlayerConnected(playerid) && (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)) {
        RepairVehicle(GetPlayerVehicleID(playerid));
        SendServerMessage(playerid, "Aracýnýz kurum aracý ise fatura kurumunuza gönderildi.");
        ShowPlayerFooter(playerid, "Arac ~g~tamir edildi!");

        TogglePlayerControllable(playerid, 1);
	}
	return 1;
}
forward WalkAnim(playerid);
public  WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (GetPlayerWalkingStyle(playerid) == WALK_NORMAL)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_PED)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
 	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	return 1;
}
forward AdminFly(playerid);
public AdminFly(playerid)
{
	if(!IsPlayerConnected(playerid))
		return flying[playerid] = false;

	if(flying[playerid])
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
			new
			    keys,
				ud,
				lr,
				Float:x[2],
				Float:y[2],
				Float:z;

			GetPlayerKeys(playerid, keys, ud, lr);
			GetPlayerVelocity(playerid, x[0], y[0], z);
			if(ud == KEY_UP)
			{
				GetPlayerCameraPos(playerid, x[0], y[0], z);
				GetPlayerCameraFrontVector(playerid, x[1], y[1], z);
    			ApplyAnimation(playerid, "SWIM", "SWIM_crawl", 4.1, 0, 1, 1, 0, 0);
				SetPlayerToFacePos(playerid, x[0] + x[1], y[0] + y[1]);
				SetPlayerVelocity(playerid, x[1], y[1], z);
			}
			else
			SetPlayerVelocity(playerid, 0.0, 0.0, 0.01);
		}
		SetTimerEx("AdminFly", 100, 0, "d", playerid);
	}
	return 0;
}
forward Duman(playerid);
public Duman(playerid)
{
DestroyDynamicObject(NargileAtesleri[playerid][dumanObject]);

	return 0;
}
forward HarvestPlant(playerid, plantid);
public HarvestPlant(playerid, plantid)
{
	PlayerData[playerid][pHarvesting] = 0;

	if (Plant_Nearest(playerid) != plantid || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK || !PlantData[plantid][plantExists])
	    return 0;

	switch (PlantData[plantid][plantType])
	{
	    case 1:
	    {
	        new id = Inventory_Add(playerid, "Marijuana", 1578, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Envanterde boþ slot yok.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tohumlardan %d gram Marijuana elde etti.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
		case 2:
	    {
	        new id = Inventory_Add(playerid, "Kokain", 1575, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Envanterde boþ slot yok.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE,"** %s tohumlardan %d gram Kokain elde etti.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
        case 3:
	    {
	        new id = Inventory_Add(playerid, "Skunk", 1577, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Envanterde boþ slot yok.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tohumlardan %d gram Skunk elde etti.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
	}
	Plant_Delete(plantid);
	return 1;
}

forward Billboard_Load();
public Billboard_Load()
{
    new
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BILLBOARDS)
	{
	    BillBoardData[i][bbExists] = true;
	   	BillBoardData[i][bbID] = cache_get_field_int(i, "bbID");

		cache_get_field_content(i, "bbName", BillBoardData[i][bbName], g_iHandle, 32);
        cache_get_field_content(i, "bbMessage", BillBoardData[i][bbMessage], g_iHandle, 230);

		BillBoardData[i][bbOwner] = cache_get_field_int(i, "bbOwner");
		BillBoardData[i][bbPrice] = cache_get_field_int(i, "bbPrice");
		BillBoardData[i][bbRange] = cache_get_field_int(i, "bbRange");
		BillBoardData[i][bbTime] = cache_get_field_int(i, "bbTime");
		BillBoardData[i][bbPos][0] = cache_get_field_float(i, "bbPosX");
		BillBoardData[i][bbPos][1] = cache_get_field_float(i, "bbPosY");
		BillBoardData[i][bbPos][2] = cache_get_field_float(i, "bbPosZ");
		Billboard_Refresh(i);
	}
	return 1;
}

forward OnViewBillboards(extraid, name[]);
public OnViewBillboards(extraid, name[])
{
	new
	    string[2500],
	    desc[128],
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "Ýlan panosu bulunamadý");

	for (new i = 0; i < rows; i ++) {
	    cache_get_field_content(i, "bbName", desc, g_iHandle, sizeof(desc));

	    //format(string, sizeof(string), "%s{FFFFFF}%s ({FFBF00}%i{FFFFFF})\n", string, desc, i);
	    format(string, sizeof(string), "%s{FFFFFF}Pano ({FFBF00}%i{FFFFFF}) | %s | $%d\n", string, i, desc, BillBoardData[i][bbPrice]);
	}
	format(desc, sizeof(desc), "LSBA: %s", name);
	Dialog_Show(extraid, Billboards, DIALOG_STYLE_LIST, desc, string, "Close", "");
	return 1;
}

forward OnSicilView(playerid, extraid);
public OnSicilView(playerid, extraid)
{
	new
	    string[2500],
		sebep[32],
		uygulayan[32],
		tarih[32],
	    rows,
	    fields,
	    sayi;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "Karaktere dair oyun dýþý sicil bulunamadý.");

	strcat(string, "{FFFFFF}Son 8 adet sicil kayýtlarý:\n\n");
	for (new i = 0; i < rows; i ++) {
		sayi++;
		if(sayi < 8)
		{
		    cache_get_field_content(i, "Sebep", sebep, g_iHandle, sizeof(sebep));
	        cache_get_field_content(i, "Tarih", tarih, g_iHandle, sizeof(tarih));
	        cache_get_field_content(i, "Uygulayan", uygulayan, g_iHandle, sizeof(uygulayan));
	        new tur = cache_get_field_int(i, "Tur"), turstring[32];
	        if(tur == 1) format(turstring, 32, "Yasaklanma");
	        if(tur == 2) format(turstring, 32, "Hapis");
	        new renk[256];
			if(tur == 1) format(renk, 32, "{FF6347}");
	        if(tur == 2) format(renk, 32, "{FF8282}");
		    format(string, sizeof(string), "%s{FFFFFF}(%s)   %s[Tür : %s]      [Uygulayan : %s]     [Sebep: %s]\n", string,  tarih, renk, turstring,uygulayan, sebep);
		}
	}
	new sayistring[128];
	format(sayistring, 128, "\n\n{FFFFFF}Toplam sicil kaydý: {FF6347}%d", sayi);
	strcat(string, sayistring);
	format(tarih, sizeof(tarih), "OOC Sicil: %s", ReturnName(extraid));
	Dialog_Show(playerid, Siciller, DIALOG_STYLE_MSGBOX, tarih, string, "Kapat", "");
	return 1;
}


forward SonAramaKayitlari(playerid);
public SonAramaKayitlari(playerid)
{
	new
	    string[2500],
		tur[32],
		tarih[32],
	    rows,
	    fields,
	    sayi;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "Hatta dair hiç geçmiþ bulunamadý.");

	strcat(string, "{FFFFFF}Son 10 arama kayýtlarý:\n\n");
	for (new i = 0; i < rows; i ++) {
		sayi++;
		if(sayi < 11)
		{
	        cache_get_field_content(i, "Zaman", tarih, g_iHandle, sizeof(tarih));
	        cache_get_field_content(i, "Tip", tur, g_iHandle, sizeof(tur));
	        new numara = cache_get_field_int(i, "Numara");

 			new ad[24];
			for (new j = 0; j != MAX_CONTACTS; j ++) if( ContactData[playerid][j][contactNumber] == numara && ContactData[playerid][j][contactExists]) {
		        format(ad, sizeof(ad), ContactData[playerid][j][contactName]);
				break;
			}

			new goruneceknumara[24];
			if(strlen(ad) > 0)  format(goruneceknumara, 24, ad);
			else format(goruneceknumara, 24, "%d", numara);

		    format(string, sizeof(string), "%s{FFFFFF}(%s) [Tür : %s]  [Kiþi : %s] \n", string,  tarih, tur, goruneceknumara);
		}
	}
	new sayistring[128];
	format(sayistring, 128, "\n\n{FFFFFF}Toplam arama kaydý: {FF6347}%d", sayi);
	strcat(string, sayistring);
	format(tarih, sizeof(tarih), "Arama Kayýtlarý: %s", ReturnName(playerid));
	Dialog_Show(playerid, AramaKayitlari, DIALOG_STYLE_MSGBOX, tarih, string, "Kapat", "");
	return 1;
}


forward IsyeriCalisanlari_f(playerid, id);
public IsyeriCalisanlari_f(playerid, id)
{
	new
	    string[2500],
		name[32],
		rank,
		lastlogin,
		sqlid,
	    rows,
	    fields,
	    sayi;

	cache_get_data(rows, fields, g_iHandle);



	strcat(string, "SQL\tAd\tRütbe\tSon Giriþ\n");
	strcat(string,"{33CC33}{ Çalýþan Al }{FFFFFF}\n");
	for (new i = 0; i < rows; i ++) {
  		if(sayi < 50)
		{
		    cache_get_field_content(i, "Character", name, g_iHandle, sizeof(name));
		    sayi++;

 	        lastlogin = cache_get_field_int(i, "LastLogin");
		    rank = cache_get_field_int(i, "BizRank");
		    sqlid = cache_get_field_int(i, "ID");
      		new rankstring[24], date[6];
	     	format(rankstring, 32, "%s", BizJob_rutbeisim(rank));
		    TimestampToDate(lastlogin, date[0],date[1],date[2],date[3],date[4],date[5]);
			format(string, sizeof(string), "%s{FFFFFF}{FF6347}%d. \t%s\t{FFFFFF}%s\t{FF6347}%02d/%02d/%02d %02d:%02d:%02d\n", string, sqlid, name, rankstring, date[2], date[1],date[0],date[3],date[4],date[5]);
		}
	}
	format(name, sizeof(name), "%s - Çalýþanlar", BusinessData[id][bizName]);
	Dialog_Show(playerid, IsyeriCalisanlari, DIALOG_STYLE_TABLIST_HEADERS, name, string, "Ayarla", "{FF6347}Iptal");
	return 1;
}

forward OfflineBirlikUyeleri(playerid, id);
public OfflineBirlikUyeleri(playerid, id)
{
	new
	    string[2500],
		name[32],
		rank,
		lastlogin,
		sqlid,
	    rows,
	    fields,
	    sayi;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "Hiç çevrimdýþý üye bulunamadý.");

	strcat(string, "SQL\tAd\tRütbe\tSon Giriþ\n");
	for (new i = 0; i < rows; i ++) {
  		if(sayi < 50)
		{
		    cache_get_field_content(i, "Character", name, g_iHandle, sizeof(name));
		    sayi++;

		    new pid = ReturnUser(name);

		    if(pid == INVALID_PLAYER_ID)
		    {
	 	        lastlogin = cache_get_field_int(i, "LastLogin");
		        rank = cache_get_field_int(i, "FactionRank");
	            sqlid = cache_get_field_int(i, "ID");
		        new rankstring[24], date[6];
		        format(rankstring, 32, FactionRanks[id][rank - 1]);
		        TimestampToDate(lastlogin, date[0],date[1],date[2],date[3],date[4],date[5]);
				//if(tur == 1) format(renk, 32, "{FF6347}");
		        //if(tur == 2) format(renk, 32, "{FF8282}");
			    format(string, sizeof(string), "%s{FFFFFF}%d\t{FF6347}%s\t{FFFFFF}%s\t{FF6347}%02d/%02d/%02d %02d:%02d:%02d\n", string, sqlid, name, rankstring, date[2], date[1],date[0],date[3],date[4],date[5]);
			}
		}
	}
	if(sayi == 0) return SendErrorMessage(playerid, "Hiç çevrimdýþý üye bulunamadý.");
	format(name, sizeof(name), "%s - Çevrimdýþý Üyeler", FactionData[id][factionName]);
	Dialog_Show(playerid, OfflineUyeler, DIALOG_STYLE_TABLIST_HEADERS, name, string, "Ayarla", "{FF6347}Iptal");
	return 1;
}

forward StopChatting(playerid);
public StopChatting(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	if (IsValidDynamicObject(objectid))
	    DestroyDynamicObject(objectid);

	return 0;
}

forward RandomFire();
public RandomFire()
{
	for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
	    g_aFireExtinguished[i] = 0;

	    if (IsValidDynamicObject(g_aFireObjects[i]))
	        DestroyDynamicObject(g_aFireObjects[i]);
	}
	switch (random(5))
	{
	    case 0:
	    {
			g_aFireObjects[0] = CreateDynamicObject(18691, 1930.4942, -1784.1799, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1930.5037, -1782.1473, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1930.5136, -1779.6364, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1930.5238, -1777.1058, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1930.5346, -1774.5141, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1930.5428, -1772.4306, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1930.5507, -1770.4219, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1930.5588, -1768.3559, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1929.1459, -1767.9173, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1928.8776, -1769.5853, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1928.8422, -1772.0158, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1928.8189, -1773.6047, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1928.8001, -1774.8883, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1928.7772, -1776.4462, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1928.7534, -1778.0637, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1928.7347, -1779.3225, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1928.7145, -1780.7152, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1928.6938, -1782.1208, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1928.6655, -1784.0491, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1935.3200, -1783.8045, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1935.2098, -1781.6428, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1935.0748, -1778.9934, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1934.9506, -1776.5572, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1934.8343, -1774.2791, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1934.7189, -1772.0156, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1934.6302, -1770.2773, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1934.5228, -1768.1666, 10.7728, 0.0, 0.0, 0.0);
		}
		case 1:
		{
			g_aFireObjects[0] = CreateDynamicObject(18691, 1238.8894, -1563.0980, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1241.6730, -1562.6481, 11.0068, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1243.2508, -1561.0845, 10.9444, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1245.5793, -1560.6265, 10.9450, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1247.4980, -1560.4841, 10.9455, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1249.9790, -1560.3701, 10.9539, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1249.5944, -1562.7432, 11.0053, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1247.4562, -1562.7996, 11.0045, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1245.7386, -1563.1572, 10.9990, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1243.7620, -1563.7636, 10.9896, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1242.2908, -1563.0959, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1242.3502, -1564.7818, 10.9740, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1244.8713, -1564.6507, 10.9760, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1246.8665, -1564.5694, 10.9772, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1249.1672, -1563.8638, 10.9881, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1250.8759, -1563.9959, 10.9861, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1252.2437, -1562.3538, 11.0113, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1252.4475, -1561.7529, 13.6369, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1250.9642, -1561.7822, 13.6519, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1248.5258, -1561.3541, 13.8278, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1245.9611, -1561.1191, 13.5507, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1242.7899, -1561.6608, 13.7519, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1250.3793, -1561.5445, 10.9462, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1252.8653, -1561.6358, 10.9468, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1252.9653, -1563.4675, 10.9942, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1252.5823, -1563.9747, 10.9864, 0.0, 0.0, 0.0);
		}
		case 2:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 1786.4844, -1164.2786, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1787.8876, -1164.3374, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1790.0416, -1164.8181, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1791.7430, -1165.1977, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1793.3637, -1165.5594, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1794.8229, -1165.8847, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1796.5830, -1166.2770, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1798.3182, -1166.6638, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1798.2283, -1166.9202, 22.1465, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1797.1246, -1166.2222, 22.5881, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1796.1480, -1165.5697, 22.5401, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1795.4377, -1165.1295, 22.1495, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1794.7139, -1164.6824, 21.4488, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1789.6914, -1164.0892, 22.3047, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1788.5687, -1163.1995, 22.3698, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1788.0295, -1162.8452, 21.9937, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1786.2319, -1163.1064, 21.8608, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1785.3194, -1163.1263, 21.9294, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1791.5643, -1163.1118, 21.3996, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1791.8800, -1164.3983, 22.2759, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1791.8519, -1165.1618, 22.5094, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1788.8287, -1163.4260, 22.0600, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1790.2512, -1164.0129, 21.2942, 0.0, 0.0, 0.0);
		}
		case 3:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 1315.0238, -1368.2282, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1314.0100, -1368.2265, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1312.6562, -1368.2235, 10.9399, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1311.8308, -1367.5294, 10.9296, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1310.9281, -1367.4926, 10.9273, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1309.7708, -1367.4902, 10.9252, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1308.6425, -1367.4877, 10.9232, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1307.3302, -1368.0213, 10.9332, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1306.0062, -1368.3232, 10.9355, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1304.3460, -1368.3197, 10.9354, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1304.4842, -1369.0036, 10.9451, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1305.8629, -1369.4384, 10.9513, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1307.2315, -1369.3804, 10.9512, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1309.0936, -1369.7593, 10.9550, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1310.8515, -1369.5230, 10.9544, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1312.0820, -1369.2214, 10.9522, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1309.4581, -1367.9462, 13.2241, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1307.8933, -1367.5498, 13.5101, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1307.3311, -1369.9162, 13.0364, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1306.5539, -1370.5288, 12.7001, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1310.9852, -1369.3835, 12.2585, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1310.3361, -1370.6992, 12.9585, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1313.2864, -1370.2733, 10.9708, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1313.3056, -1371.2634, 10.9838, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1311.6168, -1370.8870, 10.9735, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1308.9244, -1371.1181, 10.9726, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1306.5335, -1370.7678, 10.9712, 0.0, 0.0, 0.0);
		}
		case 4:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 997.7821, -910.8650, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 998.0914, -911.5863, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 998.2116, -913.0366, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 998.3492, -914.6963, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 998.4992, -916.5079, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 998.6508, -918.3324, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 998.7961, -920.0861, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 998.9600, -922.0629, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 999.1196, -923.9867, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 999.2616, -925.7003, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 999.4187, -927.5945, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 999.5601, -929.3013, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1000.5933, -931.6047, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1002.6428, -931.3463, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1004.6893, -931.3514, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1007.2104, -931.1424, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1009.8325, -930.9251, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1012.1341, -930.7343, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1014.4911, -930.5388, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1014.4734, -932.3157, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1013.0949, -932.3657, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1011.4746, -932.4245, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1009.7496, -932.4875, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1008.1029, -932.5473, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1006.0109, -932.6234, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1003.9039, -932.7000, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1002.0654, -932.7668, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[27] = CreateDynamicObject(18691, 1002.6585, -933.5130, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[28] = CreateDynamicObject(18691, 1004.5731, -933.4433, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[29] = CreateDynamicObject(18691, 1006.4688, -933.3743, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[30] = CreateDynamicObject(18691, 1008.4611, -933.3016, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[31] = CreateDynamicObject(18691, 1010.4176, -933.2304, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[32] = CreateDynamicObject(18691, 1012.0813, -933.1698, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[33] = CreateDynamicObject(18691, 1013.1374, -933.1314, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[34] = CreateDynamicObject(18691, 1015.3114, -933.0523, 39.5696, 0.0, 0.0, 0.0);
		}
	}
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);

 foreach (new i : Player)
	{
	    if (GetFactionType(i) == FACTION_GANG || (GetFactionType(i) != FACTION_POLICE))
	    {
			Waypoint_Set(i, "", fX, fY, fZ);
	    }
	}
	//CreateExplosion(fX, fY, fZ, 12, 5.0);
	SendFactionMessageEx(FACTION_MEDIC, COLOR_RADIO, "RADYO: %s adlý yerde yangýn çýktý!(Haritada iþaretlendi)", GetLocation(fX, fY, fZ));
	SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "RADYO: %s adlý yerde yangýn çýktý!(Haritada iþaretlendi)", GetLocation(fX, fY, fZ));
	return 1;
}

forward BreakCuffs(playerid, userid);
public BreakCuffs(playerid, userid)
{
	if (PlayerData[playerid][pCuffed] || !IsPlayerSpawnedEx(playerid) || !Inventory_HasItem(playerid, "Crowbar") || !IsPlayerNearPlayer(playerid, userid, 6.0) || !PlayerData[userid][pCuffed])
	    return 1;

	if (random(2))
	{
	    ShowPlayerFooter(playerid, "You have ~r~failed~w~ to pick the cuffs.");
  		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has failed to pick the cuffs.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pCuffed] = 0;
	    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
        SetPlayerCuffed(userid, false);

	    ShowPlayerFooter(playerid, "You have ~g~picked~w~ the cuffs.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has picked the cuffs from %s's wrists.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

forward SpawnTimer(playerid);
public SpawnTimer(playerid)
{
	if (SQL_IsLogged(playerid))
	{
	    if(PlayerData[playerid][pFaction] != -1 && PlayerData[playerid][pOnDuty] && GetFactionType(playerid) != FACTION_NEWS)
	    {
    		SetFactionColor(playerid);
	    }
	    TogglePlayerControllable(playerid, 1);
	    BanKontrol(playerid);
	}
	return 1;
}

forward RemoveAttachedObject(playerid, slot);
public RemoveAttachedObject(playerid, slot)
{
	if (IsPlayerConnected(playerid) && IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
	    RemovePlayerAttachedObject(playerid, slot);
	}
	return 1;
}
forward DelayedKick(playerid);
public DelayedKick(playerid)
{
    Kick(playerid);
    return 1;
}
forward MineTime(playerid);
public MineTime(playerid)
{
	PlayerData[playerid][pMineTime] = 0;
}

forward DestroyBlood(objectid);
public DestroyBlood(objectid)
{
	DestroyDynamicObject(objectid);
}


forward ExpireMarker(playerid);
public ExpireMarker(playerid)
{
	if (!PlayerData[playerid][pMarker])
	    return 0;

    if (GetFactionType(playerid) == FACTION_GANG || (GetFactionType(playerid) != FACTION_GANG && PlayerData[playerid][pOnDuty]))
		SetFactionColor(playerid);

	else SetPlayerColor(playerid, DEFAULT_COLOR);
	return 1;
}
forward EvSilah(playerid);
public EvSilah(playerid)
{
PlayerData[playerid][pEvSilah] = 0;
return 1;
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid) || !SQL_IsLogged(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

forward Advertise(playerid);
public Advertise(playerid)
{
	if (!SQL_IsLogged(playerid) || !strlen(PlayerData[playerid][pAdvertise]))
	    return 0;

	new
	    text[128];

    GiveMoney(playerid, -100);
	strunpack(text, PlayerData[playerid][pAdvertise]);

 	foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	    SendClientMessageEx(i, COLOR_ORANGE, "<LSTV> [Reklam] %s ", text);
		SendClientMessageEx(i, COLOR_ORANGE, "<LSTV> [Reklam] Iletisim: %s Telefon: %d", ReturnName(playerid, 0), PlayerData[playerid][pPhone]); // "{1EFF00}[REKLAM]:{FFFFFF} %s {1EFF00}(( {FFFFFF}%s - %d {1EFF00}))
}
PlayerData[playerid][pAdvertise][0] = 0;
return 1;
}
forward IhbarSifirla(playerid);
public IhbarSifirla(playerid)
{
	if (!SQL_IsLogged(playerid) || !strlen(PlayerData[playerid][pIhbar]))
	    return 0;

	PlayerData[playerid][pAdvertise][0] = 0;
	return 1;
}

forward KickHouse(playerid, id);
public KickHouse(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL || House_Nearest(playerid) != id)
	    return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
	     //   ShowPlayerFooter(playerid, "You have ~r~failed~w~ to kick the door down.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s kapýyý kýrmayý baþaramadý", ReturnName(playerid, 0));
		}
		default:
		{
		    HouseData[id][houseLocked] = 0;
		    House_Save(id);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s kapýyý kýrdý", ReturnName(playerid, 0));
		    //ShowPlayerFooter(playerid, "Press ~y~'F'~w~ to enter the house.");
		}
	}
	return 1;
}
forward GirisYapti(playerid);
public GirisYapti(playerid)
{
PlayerData[playerid][pGirisYapti] = 0;
return 1;
}
forward SpawnOldu(playerid);
public SpawnOldu(playerid)
{
PlayerData[playerid][pSpawnOldu] = 0;
return 1;
}
forward MeslekRespawn(playerid, vehicleid);
public MeslekRespawn(playerid, vehicleid)
{
RespawnVehicle(vehicleid);
SendServerMessage(playerid, "En son bindiðin meslek aracý respawnlandý!");
return 1;
}
forward SilahSikti(playerid);
public SilahSikti(playerid)
{
PlayerData[playerid][pSilahSikti] = 0;
SetTimerEx("SilahSikmadi", 4000, false, "dd", playerid);
return 1;
}
forward SilahSikmadi(playerid);
public SilahSikmadi(playerid)
{
PlayerData[playerid][pSilahSikti] = 1;
return 1;
}
forward KickBusiness(playerid, id);
public KickBusiness(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL || Business_Nearest(playerid) != id)
	    return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
	       // ShowPlayerFooter(playerid, "You have ~r~failed~w~ to kick the door down.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ", ReturnName(playerid, 0));
		}
		default:
		{
		    BusinessData[id][bizLocked] = 0;
		    Business_Save(id);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has successfully kicked the door down.", ReturnName(playerid, 0));
		    ShowPlayerFooter(playerid, "Press ~y~'F'~w~ to enter the business.");
		}
	}
	return 1;
}

forward UpdateBooth(playerid, id);
public UpdateBooth(playerid, id)
{
	if (PlayerData[playerid][pRangeBooth] != id || !g_BoothUsed[id])
	    return 0;

	if (PlayerData[playerid][pTargets] == 10)
	{
	    PlayerData[playerid][pTargets] = 0;

	    switch (PlayerData[playerid][pTargetLevel]++)
	    {
	        case 0:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeaponEx(playerid, 25, 15000);
	            SendServerMessage(playerid, "Bir üst seviyeye yükseldin! (1/5).");
	        }
	        case 1:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeaponEx(playerid, 28, 15000);
	            SendServerMessage(playerid, "Bir üst seviyeye yükseldin! (2/5).");
	        }
	        case 2:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeaponEx(playerid, 29, 15000);
	            SendServerMessage(playerid, "Bir üst seviyeye yükseldin! (3/5).");
	        }
	        case 3:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeaponEx(playerid, 30, 15000);
	            SendServerMessage(playerid, "Bir üst seviyeye yükseldin! (4/5).");
	        }
	        case 4:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeaponEx(playerid, 27, 15000);
	            SendServerMessage(playerid, "Bir üst seviyeye yükseldin! (5/5).");
	        }
	        case 5:
	        {
	            Booth_Leave(playerid);
	            SendServerMessage(playerid, "Atýþ talimini baþarýyla tamamladýn!");
	        }
	    }
	}
	Booth_Refresh(playerid);
	return 1;
}

stock PlayerHasTazer(playerid)
{
	return (GetPlayerWeapon(playerid) == 23 && PlayerData[playerid][pTazer]);
}

stock PlayerHasBeanBag(playerid)
{
	return (GetPlayerWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag]);
}

stock SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:x[2],
	    Float:y[2],
	    Float:z[2],
	    Float:angle;

	GetPlayerPos(targetid, x[0], y[0], z[0]);
	GetPlayerPos(playerid, x[1], y[1], z[1]);

	angle = (180.0 - atan2(x[1] - x[0], y[1] - y[0]));
	SetPlayerFacingAngle(playerid, angle + (5.0 * -1));
}

stock DisableWaypoint(playerid)
{
    if (PlayerData[playerid][pWaypoint])
	{
 		PlayerData[playerid][pWaypoint] = 0;

 		DisablePlayerCheckpoint(playerid);
  		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	return 1;
}

stock TerminateConnection(playerid)
{
if (IsValidDynamic3DTextLabel(pdrozet[playerid]))DestroyDynamic3DTextLabel(pdrozet[playerid]);
PlayerData[playerid][pKonumTime] = 0;
    if (PlayerData[playerid][pDrinking])
	    DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
if(IsValidDynamic3DTextLabel(aDutyText[playerid]))DestroyDynamic3DTextLabel(aDutyText[playerid]);
if (IsValidDynamic3DTextLabel(VipText[playerid]))DestroyDynamic3DTextLabel(VipText[playerid]);
if(IsValidDynamic3DTextLabel(hDutyText[playerid]))DestroyDynamic3DTextLabel(hDutyText[playerid]);
	if (BoomboxData[playerid][boomboxPlaced])
		Boombox_Destroy(playerid);

		if (CadirData[playerid][cadirPlaced])
		Cadir_Destroy(playerid);

	if (TezgahData[playerid][tezgahPlaced])
		Tezgah_Destroy(playerid);

	if (KovaData[playerid][kovaPlaced])
		Kova_Kaldir(playerid);

    if (Bombalar[playerid][bombaPlaced])
		Bomba_Sil(playerid);

	if (PlayerData[playerid][pRangeBooth] != -1)
		Booth_Leave(playerid);

	if (PlayerData[playerid][pFirstAid])
	    KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest])
	    DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pShowFooter])
	    KillTimer(PlayerData[playerid][pFooterTimer]);

	if (PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	    LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);

	if (PlayerData[playerid][pDragged])
	    KillTimer(PlayerData[playerid][pDragTimer]);

	if (PlayerData[playerid][pFreeze])
	    KillTimer(PlayerData[playerid][pFreezeTimer]);
	    
PlayerData[playerid][pAksesuar] = 0;

 foreach (new i : Player)
	{
	    if (PlayerData[i][pPartnerTeklif] == playerid) {
	        PlayerData[i][pPartnerTeklif] = INVALID_PLAYER_ID;
		}
	    if (PlayerData[i][pLastShot] == playerid) {
	        PlayerData[i][pLastShot] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pHouseSeller] == playerid) {
		    PlayerData[i][pHouseSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pHouseOffered] = -1;
		}
		if (PlayerData[i][pBusinessSeller] == playerid) {
		    PlayerData[i][pBusinessSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pBusinessOffered] = -1;
		}
		if (PlayerData[i][pCarSeller] == playerid) {
		    PlayerData[i][pCarSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pCarOffered] = -1;
		}
		if (PlayerData[i][pShakeOffer] == playerid) {
		    PlayerData[i][pShakeOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pShakeType] = 0;
		}
		if (PlayerData[i][pFriskOffer] == playerid) {
		    PlayerData[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pFoodSeller] == playerid) {
		    PlayerData[i][pFoodSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pFoodType] = 0;
		}
		if (PlayerData[i][pFactionOffer] == playerid) {
		    PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pFactionOffered] = -1;
		}
		if (PlayerData[i][pBizJobOffer] == playerid) {
		    PlayerData[i][pBizJobOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pBizJobOffered] = -1;
		}
		if (PlayerData[i][pDraggedBy] == playerid) {
		    KillTimer(PlayerData[i][pDragTimer]);

		    PlayerData[i][pDragged] = 0;
            PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pMDCPlayer] == playerid) {
		    PlayerData[i][pMDCPlayer] = INVALID_PLAYER_ID;
		    PlayerData[i][pTrackTime] = 0;
		}
		if (PlayerData[i][pNewsGuest] == playerid) {
		    PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pGiveItem] == playerid) {
		    PlayerData[i][pGiveItem] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pTakeItems] == playerid) {
		    PlayerData[i][pTakeItems] = INVALID_PLAYER_ID;
		}
	}
 	SQL_SaveCharacter(playerid);
	Report_Clear(playerid);
	Soru_Clear(playerid);
	ResetStatistics(playerid);
	return 1;
}

stock IsTaskCompleted(playerid)
{
	if ((PlayerData[playerid][pTask] > 0) && (PlayerData[playerid][pBankTask] > 0 && PlayerData[playerid][pStoreTask] > 0 && PlayerData[playerid][pTestTask] > 0))
	    return 1;

	return 0;
}

stock IsTaskActive(playerid)
{
	if ((PlayerData[playerid][pTask] > 0) && (!PlayerData[playerid][pBankTask] || !PlayerData[playerid][pStoreTask] || !PlayerData[playerid][pTestTask]))
	    return 1;

	return 0;
}

stock HoldWeapon(playerid, weaponid)
{
	RemovePlayerAttachedObject(playerid, 4);

	PlayerData[playerid][pHoldWeapon] = weaponid;
    PlayerData[playerid][pUsedMagazine] = 0;

	if (weaponid != 0)
	{
		SetPlayerAttachedObject(playerid, 4, GetWeaponModel(weaponid), 6);
  		SetPlayerArmedWeapon(playerid, 0);
	}
	return 1;
}

stock GetWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if (1 <= weaponid <= 46 && PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] == weaponid)
 		return weaponid;

	return 0;
}

stock IsBleedableWeapon(weaponid)
{
	switch (weaponid) {
	    case 4, 8, 9, 22..38: return 1;
	}
	return 0;
}

stock CreateBlood(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetTimerEx("DestroyBlood", 1500, false, "d", CreateDynamicObject(18668, x, y, z - 1.5, 0.0, 0.0, 0.0));

	return 1;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

stock Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

       // GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, GraffitiData[id][graffitiFont], 24, 1, GraffitiData[id][graffitiColor], 0, 0);
	}
	return 1;
}
stock GetPlayerSerial(playerid) {
        gpci(playerid, PlayerSerial, sizeof PlayerSerial);
 	return PlayerSerial;
}
stock IsSprayingInProgress(id)
{
 foreach (new i : Player)
	{
	    if (PlayerData[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

stock Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}
stock Cadir_Nearest(playerid)
{
	for (new i = 0; i < MAX_CADIR; i ++) if (CadirData[i][cadirPlaced] && GetPlayerInterior(playerid) == CadirData[i][cadirInterior] && GetPlayerVirtualWorld(playerid) == CadirData[i][cadirWorld] && IsPlayerInRangeOfPoint(playerid, 3.5, CadirData[i][cadirPos][0], CadirData[i][cadirPos][1], CadirData[i][cadirPos][2])) {
     	return i;
	}
	return -1;
}

stock Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(g_iHandle, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

stock Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = '%s', `graffitiFont` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		SQL_ReturnEscaped(GraffitiData[id][graffitiFont]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");
            format(GraffitiData[i][graffitiFont], 32, "Arial");

			Graffiti_Refresh(i);
			mysql_tquery(g_iHandle, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "[Radar %d]\n{FFFFFF}Hýz Sýnýrý: %.0f kmh", speedid, SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
        SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);

	    if (IsValidDynamicMapIcon(SpeedData[speedid][speedMapIcon]))
		    DestroyDynamicMapIcon(SpeedData[speedid][speedMapIcon]);


//		SpeedData[speedid][speedMapIcon] = CreateDynamicMapIcon(SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 56, 0, 0, 0);

	}
	return 1;
}

stock Speed_Save(speedid)
{
	new
	    query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	 );

	return mysql_tquery(g_iHandle, query);
}

stock Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	    return i;

	return -1;
}

stock Speed_Delete(speedid)
{
    if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(g_iHandle, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

stock Speed_Create(playerid, Float:limit, Float:range)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    SpeedData[i][speedPos][2] = z - 1.2;
	    SpeedData[i][speedPos][3] = angle;

	    Speed_Refresh(i);
	    mysql_tquery(g_iHandle, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
	    return i;
	}
	return -1;
}

stock IsPlayerOnPhone(playerid)
{
	if (PlayerData[playerid][pEmergency] > 0 || PlayerData[playerid][pPlaceAd] > 0 || PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	    return 1;

	return 0;
}

stock FlipVehicle(vehicleid)
{
	new
	    Float:fAngle;

	GetVehicleZAngle(vehicleid, fAngle);

	SetVehicleZAngle(vehicleid, fAngle);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
}

stock StopVehicleRadio(vehicleid)
{
	if ((IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid)) && CoreVehicles[vehicleid][vehRadio])
	{
	    CoreVehicles[vehicleid][vehRadio] = 0;

     foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
			    StopAudioStreamForPlayer(i);
			    PlayerData[i][pPlayRadio] = 0;
			}
	    }
	}
	return 1;
}

stock SetVehicleRadio(vehicleid, url[])
{
	if (IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid))
	{
        CoreVehicles[vehicleid][vehRadio] = 1;
        strpack(CoreVehicles[vehicleid][vehURL], url, 128 char);

        foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
			    PlayerData[i][pPlayRadio] = 1;

			    StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
            }
        }
	}
	return 1;
}


stock ResetVehicle(vehicleid)
{
	if (1 <= vehicleid <= MAX_VEHICLES)
	{
	    if (CoreVehicles[vehicleid][vehSirenOn] && IsValidDynamicObject(CoreVehicles[vehicleid][vehSirenObject]))
	        DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);


	        if (IsValidDynamicObject(CoreVehicles[vehicleid][vehUyusturucuObj])) DestroyDynamicObject(CoreVehicles[vehicleid][vehUyusturucuObj]);



        garbage_AracDurum[vehicleid] = false;
		garbage_AracPlayer[vehicleid] = INVALID_PLAYER_ID;

	    CoreVehicles[vehicleid][vehFuel] = CoreVehicles[vehicleid][vehFuel];
		CoreVehicles[vehicleid][vehWindowsDown] = false;
		CoreVehicles[vehicleid][vehTemporary] = 0;
  		CoreVehicles[vehicleid][vehLoads] = 0;
  		CoreVehicles[vehicleid][vehCimento] = 0;
  		CoreVehicles[vehicleid][vehTasimaci] = 0;
		CoreVehicles[vehicleid][vehLoadType] = 0;
		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		CoreVehicles[vehicleid][vehTrash] = 0;
		if(ZirhliAraclar(vehicleid)) CoreVehicles[vehicleid][vehHasar] = 2000.0;
		else CoreVehicles[vehicleid][vehHasar] = 1000.0;
		CoreVehicles[vehicleid][vehRepairing] = 0;
		if (IsValidDynamicObject(CoreVehicles[vehicleid][vehUyusturucuObj])) DestroyDynamicObject(CoreVehicles[vehicleid][vehUyusturucuObj]);
		CoreVehicles[vehicleid][vehSirenOn] = 0;
		CoreVehicles[vehicleid][vehKereste] = 0;
		CoreVehicles[vehicleid][vehEKacakcilik] = 0;
		CoreVehicles[vehicleid][vehIKacakcilik] = 0;
		CoreVehicles[vehicleid][vehRadar] = false;
		CoreVehicles[vehicleid][vehRadarLimit] = 100;
		KillTimer (timerMDC[vehicleid]);
        timerMDC[vehicleid] = -1;
        Car_LSPDTrunkReset(vehicleid);

	}

	return 1;
}

stock RespawnVehicle(vehicleid)
{
	new id = Car_GetID(vehicleid);

	if (id != -1 && vehicleid != Shamal && vehicleid != Tren)
	    Car_Spawn(id);

	else SetVehicleToRespawn(vehicleid);

	ResetVehicle(vehicleid);
	return 1;
}
stock GetWeaponCount(playerid)
{
	new
		count,
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++)
	{
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon > 0 && ammo > 0) count++;
	}
	return count;
}

stock KampAtesi_ID(playerid)
{
	foreach (new i : Player) if (KampAtesleri[i][atesVarmi] && GetPlayerInterior(playerid) == KampAtesleri[i][atesInterior] && GetPlayerVirtualWorld(playerid) == KampAtesleri[i][atesVW] && IsPlayerInRangeOfPoint(playerid, 30.0, KampAtesleri[playerid][atesPos][0], KampAtesleri[playerid][atesPos][1], KampAtesleri[playerid][atesPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock KampAtesi_Koy(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	GetPlayerPos(playerid, KampAtesleri[playerid][atesPos][0], KampAtesleri[playerid][atesPos][1], KampAtesleri[playerid][atesPos][2]);

	KampAtesleri[playerid][atesVarmi] = true;
	KampAtesleri[playerid][atesInterior] = GetPlayerInterior(playerid);
	KampAtesleri[playerid][atesVW] = GetPlayerVirtualWorld(playerid);
    KampAtesleri[playerid][atesOdunObject] = CreateDynamicObject(19632, KampAtesleri[playerid][atesPos][0], KampAtesleri[playerid][atesPos][1], KampAtesleri[playerid][atesPos][2] - 0.9, 0.0, 0.0, angle, KampAtesleri[playerid][atesVW], KampAtesleri[playerid][atesInterior]);
	return 1;
}

stock KampAtesi_Sil(playerid)
{
	if (KampAtesleri[playerid][atesVarmi])
	{
		if (IsValidDynamicObject(KampAtesleri[playerid][atesOdunObject]))
		    DestroyDynamicObject(KampAtesleri[playerid][atesOdunObject]);

        KampAtesleri[playerid][atesVarmi] = false;
        KampAtesleri[playerid][atesInterior] = 0;
        KampAtesleri[playerid][atesVW] = 0;
	}
	return 1;
}
stock NargileAtesi_ID(playerid)
{
	foreach (new i : Player) if (NargileAtesleri[i][nargileVarmi] && GetPlayerInterior(playerid) == NargileAtesleri[i][nargileInterior] && GetPlayerVirtualWorld(playerid) == NargileAtesleri[i][nargileVW] && IsPlayerInRangeOfPoint(playerid, 30.0, NargileAtesleri[playerid][nargilePos][0], NargileAtesleri[playerid][nargilePos][1], NargileAtesleri[playerid][nargilePos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock NargileAtesi_Koy(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	GetPlayerPos(playerid, NargileAtesleri[playerid][nargilePos][0], NargileAtesleri[playerid][nargilePos][1], NargileAtesleri[playerid][nargilePos][2]);

	NargileAtesleri[playerid][nargileVarmi] = true;
	NargileAtesleri[playerid][nargileInterior] = GetPlayerInterior(playerid);
	NargileAtesleri[playerid][nargileVW] = GetPlayerVirtualWorld(playerid);
    NargileAtesleri[playerid][nargileObject] = CreateDynamicObject(-2000, NargileAtesleri[playerid][nargilePos][0], NargileAtesleri[playerid][nargilePos][1], NargileAtesleri[playerid][nargilePos][2] -0.6, 0.0, 0.0, angle, NargileAtesleri[playerid][nargileVW], NargileAtesleri[playerid][nargileInterior]);
	return 1;
}

stock NargileAtesi_Sil(playerid)
{
	if (NargileAtesleri[playerid][nargileVarmi])
	{
		if (IsValidDynamicObject(NargileAtesleri[playerid][nargileObject]))
		    DestroyDynamicObject(NargileAtesleri[playerid][nargileObject]);

        NargileAtesleri[playerid][nargileVarmi] = false;
        NargileAtesleri[playerid][nargileInterior] = 0;
        NargileAtesleri[playerid][nargileVW] = 0;
	}
	return 1;
}
stock Tezgah_Destroy(playerid)
{
	if (TezgahData[playerid][tezgahPlaced])
	{
		if (IsValidDynamicObject(TezgahData[playerid][tezgahObject]))
		    DestroyDynamicObject(TezgahData[playerid][tezgahObject]);

		if (IsValidDynamic3DTextLabel(TezgahData[playerid][tezgahText3D]))
		    DestroyDynamic3DTextLabel(TezgahData[playerid][tezgahText3D]);

		foreach (new i : Player) if (PlayerData[i][pTezgah] == playerid) {
		    //StopAudioStreamForPlayer(i);
		}
        TezgahData[playerid][tezgahPlaced] = 0;
        TezgahData[playerid][tezgahInterior] = 0;
        //TezgahData[playerid][boomboxYoutube] = 0;
        TezgahData[playerid][tezgahWorld] = 0;
	}
	return 1;
}


stock Boombox_Place(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);

	BoomboxData[playerid][boomboxPlaced] = true;
	BoomboxData[playerid][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxData[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);
    BoomboxData[playerid][boomboxYoutube] = false;
	new string[512];
	new gelensayi = RandomEx(1000, 5000);
	format(string, sizeof(string), "[Müzik Kutusu]\n[Sahip: %s]\n[Boombox ID: %d]", ReturnName(playerid), gelensayi);
    BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);
    BoomboxData[playerid][boomboxText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);

	return 1;
}
stock Cadir_Place(playerid)
{
	new
	    Float:angle;
new gelenint = RandomEx(1000, 5000);
	GetPlayerFacingAngle(playerid, angle);

	GetPlayerPos(playerid, CadirData[playerid][cadirPos][0], CadirData[playerid][cadirPos][1], CadirData[playerid][cadirPos][2]);

	CadirData[playerid][cadirPlaced] = true;
	CadirData[playerid][cadirInterior] = GetPlayerInterior(playerid);
	CadirData[playerid][cadirWorld] = GetPlayerVirtualWorld(playerid);
	CadirData[cadirID][cadirInt] = gelenint;
	new string[512];
	format(string, sizeof(string), "[Çadýr]\n[Sahip: %s]", ReturnName(playerid));
    CadirData[playerid][cadirObject] = CreateDynamicObject(3243, CadirData[playerid][cadirPos][0], CadirData[playerid][cadirPos][1], CadirData[playerid][cadirPos][2] - 0.9, 4.0, 0.0, angle, CadirData[playerid][cadirWorld], CadirData[playerid][cadirInterior]);
    CadirData[playerid][cadirText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, CadirData[playerid][cadirPos][0], CadirData[playerid][cadirPos][1], CadirData[playerid][cadirPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CadirData[playerid][cadirWorld], CadirData[playerid][cadirInterior]);

	return 1;
}
stock Cadir_Gir(playerid)
{
new Float:angle;
GetPlayerFacingAngle(playerid, angle);
GetPlayerPos(playerid, CadirData[playerid][cadirPos][0], CadirData[playerid][cadirPos][1], CadirData[playerid][cadirPos][2]);
SetPlayerVirtualWorld(playerid, CadirData[cadirID][cadirInt]);
return 1;
}
stock Cadir_Destroy(playerid)
{
	if (CadirData[playerid][cadirPlaced])
	{
		if (IsValidDynamicObject(CadirData[playerid][cadirObject]))
		    DestroyDynamicObject(CadirData[playerid][cadirObject]);

		if (IsValidDynamic3DTextLabel(CadirData[playerid][cadirText3D]))
		    DestroyDynamic3DTextLabel(CadirData[playerid][cadirText3D]);

        CadirData[playerid][cadirPlaced] = false;
        CadirData[playerid][cadirInterior] = 0;
        CadirData[playerid][cadirWorld] = 0;
	}
	return 1;
}

stock Tezgah_Place(playerid)
{
new Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	GetPlayerPos(playerid, TezgahData[playerid][tezgahPos][0], TezgahData[playerid][tezgahPos][1], TezgahData[playerid][tezgahPos][2]);

	TezgahData[playerid][tezgahPlaced] = true;
	TezgahData[playerid][tezgahInterior] = GetPlayerInterior(playerid);
	TezgahData[playerid][tezgahWorld] = GetPlayerVirtualWorld(playerid);
    //TezgahData[playerid][boomboxYoutube] = false;
	new string[512];
	new gelensayi = RandomEx(2000, 5000);
	format(string, sizeof(string), "Sosisli Tezgahý\nSahip: %s\nTezgah ID: %d", ReturnName(playerid), gelensayi);
    TezgahData[playerid][tezgahObject] = CreateDynamicObject(1340, TezgahData[playerid][tezgahPos][0], TezgahData[playerid][tezgahPos][1], TezgahData[playerid][tezgahPos][2] - 0.0, 0.0, 0.0, angle, TezgahData[playerid][tezgahWorld], TezgahData[playerid][tezgahInterior]);
    TezgahData[playerid][tezgahText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, TezgahData[playerid][tezgahPos][0], TezgahData[playerid][tezgahPos][1], TezgahData[playerid][tezgahPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, TezgahData[playerid][tezgahWorld], TezgahData[playerid][tezgahInterior]);
	return 1;
}


stock Kova_Koy(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	GetPlayerPos(playerid, KovaData[playerid][kovaPos][0], KovaData[playerid][kovaPos][1], KovaData[playerid][kovaPos][2]);

	KovaData[playerid][kovaPlaced] = true;
	KovaData[playerid][kovaInterior] = GetPlayerInterior(playerid);
	KovaData[playerid][kovaWorld] = GetPlayerVirtualWorld(playerid);

	new string[512];
	format(string, sizeof(string), "[Balýk Kovasý]\n[ %s ]\n{FFFFFF}/kova ile kullanabilirsin.", ReturnName(playerid));
    KovaData[playerid][kovaObject] = CreateDynamicObject(19592, KovaData[playerid][kovaPos][0], KovaData[playerid][kovaPos][1], KovaData[playerid][kovaPos][2] - 0.5, 0.0, 0.0, angle, KovaData[playerid][kovaWorld], KovaData[playerid][kovaInterior]);
    KovaData[playerid][kovaText3D] = CreateDynamic3DTextLabel(string, COLOR_LIGHTBLUE, KovaData[playerid][kovaPos][0], KovaData[playerid][kovaPos][1], KovaData[playerid][kovaPos][2] - 0.3, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, KovaData[playerid][kovaWorld], KovaData[playerid][kovaInterior]);

	return 1;
}

stock Boombox_Nearest(playerid)
{
	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxData[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxData[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock Bomba_Koy(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	GetPlayerPos(playerid, Bombalar[playerid][bombaPos][0], Bombalar[playerid][bombaPos][1], Bombalar[playerid][bombaPos][2]);

	Bombalar[playerid][bombaPlaced] = true;
	Bombalar[playerid][bombaInterior] = GetPlayerInterior(playerid);
	Bombalar[playerid][bombaWorld] = GetPlayerVirtualWorld(playerid);

	Bombalar[playerid][bombaObject] = CreateDynamicObject(363, Bombalar[playerid][bombaPos][0], Bombalar[playerid][bombaPos][1], Bombalar[playerid][bombaPos][2] - 0.9, 0.0, 0.0, angle, Bombalar[playerid][bombaWorld], Bombalar[playerid][bombaInterior]);
	return 1;
}

stock Bomba_Nearest(playerid)
{
	foreach (new i : Player) if (Bombalar[i][bombaPlaced] && GetPlayerInterior(playerid) == Bombalar[i][bombaInterior] && GetPlayerVirtualWorld(playerid) == Bombalar[i][bombaWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, Bombalar[i][bombaPos][0], Bombalar[i][bombaPos][1], Bombalar[i][bombaPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock Boombox_SetURL(playerid, url[])
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
	    strpack(BoomboxData[playerid][boomboxURL], url, 128 char);

	    if(!BoomboxData[playerid][boomboxYoutube]) {
			foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid)
			{
	        	StopAudioStreamForPlayer(i);
	        	PlayAudioStreamForPlayer(i, url, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 30.0, 1);
	        }
		}
	}
	return 1;
}

stock Bomba_Sil(playerid)
{
	if (Bombalar[playerid][bombaPlaced])
	{
		if (IsValidDynamicObject(Bombalar[playerid][bombaObject]))
		    DestroyDynamicObject(Bombalar[playerid][bombaObject]);

        Bombalar[playerid][bombaPlaced] = false;
        Bombalar[playerid][bombaInterior] = 0;
        Bombalar[playerid][bombaWorld] = 0;
	}
	return 1;
}

stock Bomba_Patlat(playerid)
{
	if (Bombalar[playerid][bombaPlaced])
	{
        CreateExplosion(Bombalar[playerid][bombaPos][0], Bombalar[playerid][bombaPos][1], Bombalar[playerid][bombaPos][2],7, 70.0);
		Bomba_Sil(playerid);
	}
	return 1;
}

stock Boombox_Destroy(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		if (IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
		    DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		if (IsValidDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]))
		    DestroyDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]);

		foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxData[playerid][boomboxPlaced] = false;
        BoomboxData[playerid][boomboxInterior] = 0;
        BoomboxData[playerid][boomboxYoutube] = 0;
        BoomboxData[playerid][boomboxWorld] = 0;
	}
	return 1;
}

stock Kova_Kaldir(playerid)
{
	if (KovaData[playerid][kovaPlaced])
	{
		if (IsValidDynamicObject(KovaData[playerid][kovaObject]))
		    DestroyDynamicObject(KovaData[playerid][kovaObject]);

		if (IsValidDynamic3DTextLabel(KovaData[playerid][kovaText3D]))
		    DestroyDynamic3DTextLabel(KovaData[playerid][kovaText3D]);

        KovaData[playerid][kovaPlaced] = false;
        KovaData[playerid][kovaWorld] = 0;
	}
	return 1;
}

stock Taxi_ShowCalls(playerid)
{
    static
	    string[2048];

	string[0] = 0;

	foreach (new i : Player) if (PlayerData[i][pTaxiCalled]) {
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "Aktif taksi çaðrýsý yok.");
	}
	else Dialog_Show(playerid, AcceptTaxi, DIALOG_STYLE_LIST, "Taksi Çaðrýlarý", string, "Kabul", "{FF6347}Iptal");
	return 1;
}

stock IsShipmentAccepted(businessid)
{
	foreach (new i : Player) if (PlayerData[i][pJob] == JOB_COURIER && PlayerData[i][pShipment] == businessid) {
	    return 1;
	}
	return 0;
}

stock CancelShipment(playerid)
{
    PlayerData[playerid][pShipment] = -1;

    if (PlayerData[playerid][pDeliverShipment])
    {
		PlayerData[playerid][pDeliverShipment] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

stock ShowShipments(playerid)
{
    static
	    string[2048],
		type[24];

	string[0] = 0;

	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizShipment] && !IsShipmentAccepted(i))
	{
	    switch (BusinessData[i][bizType]) {
	        case 1: type = "Market Ürünleri";
	        case 2: type = "Silah Parçalarý";
	        case 3: type = "Tekstil Ürünleri";
	        case 4: type = "Yemek Ürünleri";
			case 6: type = "Yakýt/Benzinlik";
			case 7: type = "Mobilya";
		}
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, BusinessData[i][bizName], type);
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "Teslimat kabul eden dükkan yok.");
	}
	else Dialog_Show(playerid, AcceptShipment, DIALOG_STYLE_LIST, "Teslimatlar", string, "Kabul Et", "{FF6347}Iptal");
	return 1;
}

stock GetWheelName(componentid)
{
	new
		name[12];

	enum g_eWheelData {
	    g_eWheelModel,
	    g_eWheelName[12 char]
	};

	new const g_aWheelData[][g_eWheelData] = {
	    {1025, !"Offroad"},
	    {1073, !"Shadow"},
	    {1074, !"Mega"},
	    {1075, !"Rimshine"},
	    {1076, !"Wires"},
	    {1077, !"Classic"},
	    {1078, !"Twist"},
	    {1079, !"Cutter"},
	    {1080, !"Switch"},
	    {1081, !"Grove"},
	    {1082, !"Import"},
	    {1083, !"Dollar"},
	    {1084, !"Trance"},
	    {1085, !"Atomic"},
	    {1096, !"Ahab"},
	    {1097, !"Virtual"},
	    {1098, !"Access"}
	};
	for (new i = 0; i < sizeof(g_aWheelData); i ++) if (g_aWheelData[i][g_eWheelModel] == componentid) {
	    strunpack(name, g_aWheelData[i][g_eWheelName]);

	    return name;
	}
	strunpack(name, !"Unknown");
	return name;
}

stock SetVehicleColor(vehicleid, color1, color2)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carColor1] = color1;
	    CarData[id][carColor2] = color2;
	    Car_Save(id);
	}
	return ChangeVehicleColor(vehicleid, color1, color2);
}

stock SetVehiclePaintjob(vehicleid, paintjobid)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carPaintjob] = paintjobid;
	    Car_Save(id);
	}
	return ChangeVehiclePaintjob(vehicleid, paintjobid);
}

stock SetVehiclePaintjobEx(vehicleid, paintjobid)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carPaintjob] = paintjobid;
	    Car_Save(id);
	}
	return 1;
}

stock RemoveComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	    return 0;

	new
		id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = 0;
	    Car_Save(id);
	}
	return RemoveVehicleComponent(vehicleid, componentid);
}

stock AddComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	    return 0;

	new
		id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = componentid;
        Car_Save(id);
	}
	return AddVehicleComponent(vehicleid, componentid);
}
stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

	PlayerData[playerid][pLoopAnim] = true;
	ShowPlayerFooter(playerid, "Animasyonu durdurmak icin ~y~SPACE~w~ tusuna basin.");

	return 1;
}

stock AnimationCheck(playerid)
{
	return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !IsPlayerFalling(playerid) && !PlayerData[playerid][pKilled] && !PlayerData[playerid][pFreeze] && !PlayerData[playerid][pCuffed] && !PlayerData[playerid][pStunned]  && !PlayerData[playerid][pFirstAid] && !PlayerData[playerid][pCrafting] && PlayerData[playerid][pGraffiti] == -1);
}

stock PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
	    ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

stock Vendor_Create(playerid, type)
{
	for (new i = 0; i != MAX_VENDORS; i ++) if (!VendorData[i][vendorExists])
	{
	    VendorData[i][vendorExists] = true;
	    VendorData[i][vendorType] = type;

	    GetPlayerPos(playerid, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]);
	    GetPlayerFacingAngle(playerid, VendorData[i][vendorPos][3]);

	    VendorData[i][vendorPos][0] = VendorData[i][vendorPos][0] + (1.5 * floatsin(-VendorData[i][vendorPos][3], degrees));
	    VendorData[i][vendorPos][1] = VendorData[i][vendorPos][1] + (1.5 * floatcos(-VendorData[i][vendorPos][3], degrees));

		VendorData[i][vendorInterior] = GetPlayerInterior(playerid);
		VendorData[i][vendorWorld] = GetPlayerVirtualWorld(playerid);

		Vendor_Refresh(i);
		mysql_tquery(g_iHandle, "INSERT INTO `vendors` (`vendorType`) VALUES(0)", "OnVendorCreated", "d", i);
		return i;
	}
	return -1;
}

stock Vendor_Delete(vendorid)
{
	if (vendorid != -1 && VendorData[vendorid][vendorExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `vendors` WHERE `vendorID` = '%d'", VendorData[vendorid][vendorID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
	        DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

		if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
		    DestroyDynamicObject(VendorData[vendorid][vendorObject]);

	    VendorData[vendorid][vendorExists] = false;
	    VendorData[vendorid][vendorType] = 0;
	    VendorData[vendorid][vendorID] = 0;
	}
	return 1;
}

Vendor_Nearest(playerid)
{
    for (new i = 0; i != MAX_VENDORS; i ++) if (VendorData[i][vendorExists] && IsPlayerInRangeOfPoint(playerid, 2.0, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]))
	{
		if (GetPlayerInterior(playerid) == VendorData[i][vendorInterior] && GetPlayerVirtualWorld(playerid) == VendorData[i][vendorWorld])
			return i;
	}
	return -1;
}

stock Vendor_Refresh(vendorid)
{
	if (vendorid != -1 && VendorData[vendorid][vendorExists])
	{
	    if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
	        DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

		if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
		    DestroyDynamicObject(VendorData[vendorid][vendorObject]);

		new
			string[64];

		format(string, sizeof(string), "[Tezgah %d]\n{FFFFFF}'F' ile etkileþime geçebilirsin.", vendorid);
		VendorData[vendorid][vendorText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);

		switch (VendorData[vendorid][vendorType]) {
		    case 1: VendorData[vendorid][vendorObject] = CreateDynamicObject(1340, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], 0.0, 0.0, VendorData[vendorid][vendorPos][3] - 90.0, VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
		    case 2: VendorData[vendorid][vendorObject] = CreateDynamicObject(1209, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2] - 1.0, 0.0, 0.0, VendorData[vendorid][vendorPos][3], VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
		}
	}
	return 1;
}

stock Vendor_Save(vendorid)
{
	new
	    query[300];

	format(query, sizeof(query), "UPDATE `vendors` SET `vendorType` = '%d', `vendorX` = '%.4f', `vendorY` = '%.4f', `vendorZ` = '%.4f', `vendorA` = '%.4f', `vendorInterior` = '%d', `vendorWorld` = '%d' WHERE `vendorID` = '%d'",
        VendorData[vendorid][vendorType],
        VendorData[vendorid][vendorPos][0],
        VendorData[vendorid][vendorPos][1],
        VendorData[vendorid][vendorPos][2],
        VendorData[vendorid][vendorPos][3],
        VendorData[vendorid][vendorInterior],
        VendorData[vendorid][vendorWorld],
        VendorData[vendorid][vendorID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Garbage_Create(playerid, type)
{
	for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (!GarbageData[i][garbageExists])
	{
	    switch (type) {
	        case 1: GarbageData[i][garbageModel] = 1236;
	        case 2: GarbageData[i][garbageModel] = 1300;
	    }
	    GarbageData[i][garbageExists] = true;
	    GarbageData[i][garbageCapacity] = 0;

	    GetPlayerPos(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);
	    GetPlayerFacingAngle(playerid, GarbageData[i][garbagePos][3]);

		switch (type) {
		    case 1: {
		    	GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.8 * floatsin(-GarbageData[i][garbagePos][3], degrees));
			    GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.8 * floatcos(-GarbageData[i][garbagePos][3], degrees));
			}
			case 2: {
		    	GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.0 * floatsin(-GarbageData[i][garbagePos][3], degrees));
			    GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.0 * floatcos(-GarbageData[i][garbagePos][3], degrees));
			}
		}
		GarbageData[i][garbageInterior] = GetPlayerInterior(playerid);
		GarbageData[i][garbageWorld] = GetPlayerVirtualWorld(playerid);

		Garbage_Refresh(i);
		mysql_tquery(g_iHandle, "INSERT INTO `garbage` (`garbageCapacity`) VALUES(0)", "OnGarbageCreated", "d", i);
		return i;
	}
	return -1;
}

stock Garbage_Delete(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `garbage` WHERE `garbageID` = '%d'", GarbageData[garbageid][garbageID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
	        DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		    DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

	    GarbageData[garbageid][garbageExists] = false;
	    GarbageData[garbageid][garbageCapacity] = 0;
	    GarbageData[garbageid][garbageID] = 0;
	}
	return 1;
}

Garbage_Nearest(playerid)
{
    for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && IsPlayerInRangeOfPoint(playerid, 3.0, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]))
	{
		if (GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
			return i;
	}
	return -1;
}


stock Garbage_Refresh(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
	    if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
	        DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		    DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

		new
			string[64];

		format(string, sizeof(string), "[Çöp Kutusu %d]\n{FFFFFF}Doluluk: %d/100", garbageid, GarbageData[garbageid][garbageCapacity]);

		GarbageData[garbageid][garbageText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], GarbageData[garbageid][garbagePos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
		GarbageData[garbageid][garbageObject] = CreateDynamicObject(GarbageData[garbageid][garbageModel], GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], (GarbageData[garbageid][garbageModel] == 1236) ? (GarbageData[garbageid][garbagePos][2] - 0.4) : (GarbageData[garbageid][garbagePos][2] - 0.6), 0.0, 0.0, GarbageData[garbageid][garbagePos][3], GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
	}
	return 1;
}

stock Garbage_Save(garbageid)
{
	new
	    query[300];

	format(query, sizeof(query), "UPDATE `garbage` SET `garbageModel` = '%d', `garbageCapacity` = '%d', `garbageX` = '%.4f', `garbageY` = '%.4f', `garbageZ` = '%.4f', `garbageA` = '%.4f', `garbageInterior` = '%d', `garbageWorld` = '%d' WHERE `garbageID` = '%d'",
        GarbageData[garbageid][garbageModel],
        GarbageData[garbageid][garbageCapacity],
        GarbageData[garbageid][garbagePos][0],
        GarbageData[garbageid][garbagePos][1],
        GarbageData[garbageid][garbagePos][2],
        GarbageData[garbageid][garbagePos][3],
        GarbageData[garbageid][garbageInterior],
        GarbageData[garbageid][garbageWorld],
        GarbageData[garbageid][garbageID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Booth_GetPlayer(id)
{
	foreach (new i : Player) if (PlayerData[i][pRangeBooth] == id) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock Booth_Leave(playerid)
{
	if (PlayerData[playerid][pRangeBooth] != -1)
	{
	    if (IsValidObject(g_BoothObject[PlayerData[playerid][pRangeBooth]])) {
	        DestroyObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

	        g_BoothObject[PlayerData[playerid][pRangeBooth]] = -1;
	    }
    	ResetPlayerWeapons(playerid);
   		SetWeapons(playerid);

		g_BoothUsed[PlayerData[playerid][pRangeBooth]] = false;
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][81]);

		PlayerData[playerid][pRangeBooth] = -1;
  		PlayerData[playerid][pTargets] = 0;
  		PlayerData[playerid][pTargetLevel] = 0;
	}
	return 1;
}


stock Booth_Refresh(playerid)
{
	new id = PlayerData[playerid][pRangeBooth];

	if (id == -1)
	    return 0;

	if (IsValidDynamicObject(g_BoothObject[id])) {
	    DestroyDynamicObject(g_BoothObject[id]);
	}
	g_BoothObject[id] = CreateDynamicObject(1583, arrBoothPositions[id][0] - 5.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], 0.0, 0.0, 90.0);

	return MoveDynamicObject(g_BoothObject[id], arrBoothPositions[id][0] - 1.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], (!PlayerData[playerid][pTargetLevel]) ? (2.0) : (2.0 + (PlayerData[playerid][pTargetLevel] * 1.2)));
}



stock UpdateWeapons(playerid)
{
	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i])
    {
		if ((i == 2 && PlayerData[playerid][pTazer]) || (i == 3 && PlayerData[playerid][pBeanBag]))
		    continue;

        GetPlayerWeaponData(playerid, i, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);

        if (PlayerData[playerid][pGuns][i] != 0 && !PlayerData[playerid][pAmmo][i]) {
            PlayerData[playerid][pGuns][i] = 0;
		}
	}
	return 1;
}

stock Sandik_Olustur(playerid)
{
    new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_SANDIK; i ++) if (!Sandiklar[i][sandikVarmi])
		{
		    Sandiklar[i][sandikVarmi] = true;

		    x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

            Sandiklar[i][sandikPos][0] = x;
            Sandiklar[i][sandikPos][1] = y;
            Sandiklar[i][sandikPos][2] = z;
            Sandiklar[i][sandikPos][3] = angle;

			format(Sandiklar[i][sandikBaslik], 128, "Adsýz Sandýk");
			format(Sandiklar[i][sandikIcerik], 128, "Ýçerik Yok");

            Sandiklar[i][sandikInterior] = GetPlayerInterior(playerid);
            Sandiklar[i][sandikWorld] = GetPlayerVirtualWorld(playerid);
            Sandiklar[i][sandikOy] = 0;

		 	Sandik_Yenile(i);
			mysql_tquery(g_iHandle, "INSERT INTO `sandiklar` (`sandikOy`) VALUES(0)", "OnSandikCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock Sandik_Sil(sandikid)
{
	if (sandikid != -1 && Sandiklar[sandikid][sandikVarmi])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `sandiklar` WHERE `sandikID` = '%d'", Sandiklar[sandikid][sandikID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamicObject(Sandiklar[sandikid][sandikObject]))
	        DestroyDynamicObject(Sandiklar[sandikid][sandikObject]);

	    if (IsValidDynamic3DTextLabel(Sandiklar[sandikid][sandikLabel]))
	        DestroyDynamic3DTextLabel(Sandiklar[sandikid][sandikLabel]);

	    Sandiklar[sandikid][sandikVarmi] = false;
	    Sandiklar[sandikid][sandikID] = 0;
	    format(Sandiklar[sandikid][sandikBaslik], 128, "Adsýz Sandýk");
		format(Sandiklar[sandikid][sandikIcerik], 128, "Ýçerik Yok");
        Sandiklar[sandikid][sandikOy] = 0;
	}
	return 1;
}

stock Fabrika_Sil(fabrikaid)
{
	if (fabrikaid != -1 && Fabrikalar[fabrikaid][fabrikaVarmi])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `fabrikalar` WHERE `fabrikaID` = '%d'", Fabrikalar[fabrikaid][fabrikaID]);
		mysql_tquery(g_iHandle, string);

	    if (IsValidDynamic3DTextLabel(Fabrikalar[fabrikaid][fabrikaText3D]))
	        DestroyDynamic3DTextLabel(Fabrikalar[fabrikaid][fabrikaText3D]);

	    Fabrikalar[fabrikaid][fabrikaVarmi] = false;
	    Fabrikalar[fabrikaid][fabrikaID] = 0;
	}
	return 1;
}
stock Mezar_Sil(mezarid)
{
	if (mezarid != -1 && Mezarlar[mezarid][mezarVarmi])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `mezarlar` WHERE `mezarID` = '%d'", Mezarlar[mezarid][mezarID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamicObject(Mezarlar[mezarid][mezarObject]))
	        DestroyDynamicObject(Mezarlar[mezarid][mezarObject]);

	    if (IsValidDynamic3DTextLabel(Mezarlar[mezarid][mezarText3D]))
	        DestroyDynamic3DTextLabel(Mezarlar[mezarid][mezarText3D]);

	    Mezarlar[mezarid][mezarVarmi] = false;
	    Mezarlar[mezarid][mezarID] = 0;
	}
	return 1;
}
stock Hood_Sil(hoodid)
{
	if (hoodid != -1 && OnayliHoodlar[hoodid][hoodVarmi])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `onaylihoodlar` WHERE `hoodID` = '%d'", OnayliHoodlar[hoodid][hoodID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(OnayliHoodlar[hoodid][hoodText3D]))
		    DestroyDynamic3DTextLabel(OnayliHoodlar[hoodid][hoodText3D]);

		if (IsValidDynamicPickup(OnayliHoodlar[hoodid][hoodPickup]))
		    DestroyDynamicPickup(OnayliHoodlar[hoodid][hoodPickup]);

	    OnayliHoodlar[hoodid][hoodVarmi] = false;
	    OnayliHoodlar[hoodid][hoodID] = 0;
	}
	return 1;
}
Sandik_Yakinmi(playerid)
{
    for (new i = 0; i != MAX_SANDIK; i ++) if (Sandiklar[i][sandikVarmi] && IsPlayerInRangeOfPoint(playerid, 2.5, Sandiklar[i][sandikPos][0], Sandiklar[i][sandikPos][1], Sandiklar[i][sandikPos][2]))
	{
		if (GetPlayerInterior(playerid) == Sandiklar[i][sandikInterior] && GetPlayerVirtualWorld(playerid) == Sandiklar[i][sandikWorld])
			return i;
	}
	return -1;
}

stock Sandik_Yenile(sandikid)
{
	if (sandikid != -1 && Sandiklar[sandikid][sandikVarmi])
	{
	    if (IsValidDynamicObject(Sandiklar[sandikid][sandikObject]))
	        DestroyDynamicObject(Sandiklar[sandikid][sandikObject]);

	    if (IsValidDynamic3DTextLabel(Sandiklar[sandikid][sandikLabel]))
	        DestroyDynamic3DTextLabel(Sandiklar[sandikid][sandikLabel]);

		new
	        string[512];

		format(string, sizeof(string), "[Sandýk %d]\n{FFFFFF}%s\n%s\n{9ACD32}Oy: %s{FF6347}}\noykullan.", sandikid, Sandiklar[sandikid][sandikBaslik], Sandiklar[sandikid][sandikIcerik], FormatNumber(Sandiklar[sandikid][sandikOy], ""));

		Sandiklar[sandikid][sandikObject] = CreateDynamicObject(2461, Sandiklar[sandikid][sandikPos][0], Sandiklar[sandikid][sandikPos][1], Sandiklar[sandikid][sandikPos][2]-1, 0.0, 0.0, Sandiklar[sandikid][sandikPos][3]-1, Sandiklar[sandikid][sandikWorld], Sandiklar[sandikid][sandikInterior]);
        Sandiklar[sandikid][sandikLabel] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, Sandiklar[sandikid][sandikPos][0], Sandiklar[sandikid][sandikPos][1], Sandiklar[sandikid][sandikPos][2]+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Sandiklar[sandikid][sandikWorld], Sandiklar[sandikid][sandikInterior]);
		Sandik_Kaydet(sandikid);
		return 1;
	}
	return 0;
}
stock Sandik_Kaydet(sandikid)
{
	new
	    query[1024];

	format(query, sizeof(query), "UPDATE `sandiklar` SET `sandikX` = '%.4f', `sandikY` = '%.4f', `sandikZ` = '%.4f', `sandikA` = '%.4f', `sandikInterior` = '%d', `sandikWorld` = '%d', `sandikOy` = '%d', `sandikBaslik` = '%s', `sandikIcerik` = '%s' WHERE `sandikID` = '%d'",
	    Sandiklar[sandikid][sandikPos][0],
	    Sandiklar[sandikid][sandikPos][1],
	    Sandiklar[sandikid][sandikPos][2],
	    Sandiklar[sandikid][sandikPos][3],
	    Sandiklar[sandikid][sandikInterior],
	    Sandiklar[sandikid][sandikWorld],
	    Sandiklar[sandikid][sandikOy],
	    Sandiklar[sandikid][sandikBaslik],
	    Sandiklar[sandikid][sandikIcerik],
	    Sandiklar[sandikid][sandikID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock IsVehicleImpounded(vehicleid)
{
	new id = Car_GetID(vehicleid);
 	if (id != -1 && CarData[id][carImpounded] != -1 && CarData[id][carImpoundPrice] > 0)
	    return 1;

	return 0;
}

stock Impound_Delete(impoundid)
{
    if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
	    new
	        query[64];

		format(query, sizeof(query), "DELETE FROM `impoundlots` WHERE `impoundID` = '%d'", ImpoundData[impoundid][impoundID]);
		mysql_tquery(g_iHandle, query);

        if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		    DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

	    if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		    DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && CarData[i][carImpounded] == ImpoundData[impoundid][impoundID]) {
		    CarData[i][carImpounded] = 0;
		    CarData[i][carImpoundPrice] = 0;
		    Car_Save(i);
		}
        ImpoundData[impoundid][impoundExists] = false;
        ImpoundData[impoundid][impoundID] = 0;
	}
	return 1;
}

stock GetImpoundByID(sqlid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && ImpoundData[i][impoundID] == sqlid) {
	    return i;
	}
	return -1;
}

stock Impound_Nearest(playerid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && IsPlayerInRangeOfPoint(playerid, 20.0, ImpoundData[i][impoundLot][0], ImpoundData[i][impoundLot][1], ImpoundData[i][impoundLot][2])) {
	    return i;
	}
	return -1;
}

stock Impound_Create(Float:x, Float:y, Float:z)
{
	for (new i = 0; i != MAX_IMPOUND_LOTS; i ++) if (!ImpoundData[i][impoundExists])
	{
	    ImpoundData[i][impoundExists] = true;
	    ImpoundData[i][impoundLot][0] = x;
	    ImpoundData[i][impoundLot][1] = y;
	    ImpoundData[i][impoundLot][2] = z;
	    ImpoundData[i][impoundRelease][0] = 0.0;
	    ImpoundData[i][impoundRelease][1] = 0.0;
	    ImpoundData[i][impoundRelease][2] = 0.0;

		mysql_tquery(g_iHandle, "INSERT INTO `impoundlots` (`impoundLotX`) VALUES('0.0')", "OnImpoundCreated", "d", i);
		Impound_Refresh(i);

		return i;
	}
	return -1;
}

stock Impound_Refresh(impoundid)
{
	if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
	    new
	        string[64];

		if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		    DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

	    if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		    DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		format(string, sizeof(string), "[Araç Çekme Noktasý %d]\n{FFFFFF}/aracibagla.", impoundid);
        ImpoundData[impoundid][impoundText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2], 20.0);
        ImpoundData[impoundid][impoundPickup] = CreateDynamicPickup(1239, 23, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2]);
	}
	return 1;
}

stock Impound_Save(impoundid)
{
	new
		query[300];

	format(query, sizeof(query), "UPDATE `impoundlots` SET `impoundLotX` = '%.4f', `impoundLotY` = '%.4f', `impoundLotZ` = '%.4f', `impoundReleaseX` = '%.4f', `impoundReleaseY` = '%.4f', `impoundReleaseZ` = '%.4f', `impoundReleaseA` = '%.4f' WHERE `impoundID` = '%d'",
        ImpoundData[impoundid][impoundLot][0],
        ImpoundData[impoundid][impoundLot][1],
        ImpoundData[impoundid][impoundLot][2],
        ImpoundData[impoundid][impoundRelease][0],
        ImpoundData[impoundid][impoundRelease][1],
        ImpoundData[impoundid][impoundRelease][2],
        ImpoundData[impoundid][impoundRelease][3],
        ImpoundData[impoundid][impoundID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Backpack_Items(playerid, id)
{
 	if (id != -1 && BackpackData[id][backpackExists])
 	{
 	    new
	        string[MAX_BACKPACK_CAPACITY * 32],
			count = 0;

	    for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
	    {
	        if (BackpackItems[i][bItemQuantity] == 1)
	            format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);

			else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

			BackpackListed[playerid][count++] = i;
		}
		strcat(string, "Canta Al");

		PlayerData[playerid][pBackpackLoot] = id;
		Dialog_Show(playerid, BackpackLoot, DIALOG_STYLE_LIST, "Sýrtçantasý", string, "Seç", "{FF6347}Iptal");
	}
	return 1;
}

stock Backpack_Open(playerid)
{
	new id = GetPlayerBackpack(playerid);

	if (id != -1)
	{
	    new
	        string[MAX_BACKPACK_CAPACITY * 32],
			count = 0;

		string = "Eþya Ekle\n";

	    for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
	    {
	        if (BackpackItems[i][bItemQuantity] == 1)
	            format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);

			else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

			BackpackListed[playerid][count++] = i;
		}
		Dialog_Show(playerid, Backpack, DIALOG_STYLE_LIST, "Sýrtçantam", string, "Seç", "{FF6347}Iptal");
	}
	return 1;
}

stock Backpack_GetItems(id)
{
	new count;

	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id) {
	    count++;
	}
	return count;
}

stock Backpack_GetFreeID()
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (!BackpackData[i][backpackExists]) {
	    return i;
	}
	return -1;
}

stock Backpack_Refresh(id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
	    if (IsValidDynamicObject(BackpackData[id][backpackObject]))
		    DestroyDynamicObject(BackpackData[id][backpackObject]);

		if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
		    DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

		if (!BackpackData[id][backpackPlayer]) {
	        //BackpackData[id][backpackObject] = CreateDynamicObject(3026, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, -90.0, 0.0, 0.0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
    	   	//BackpackData[id][backpackText3D] = CreateDynamic3DTextLabel("[Sýrt Çantasý]\n{FFFFFF}Çantaya 'N' ile bakabilirsin.", COLOR_DARKBLUE, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
		}
	}
	return 1;
}

stock Backpack_GetItemID(id, name[])
{
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id && !strcmp(BackpackItems[i][bItemName], name, true)) {
	    return i;
	}
	return -1;
}

stock Backpack_GetFreeItem()
{
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (!BackpackItems[i][bItemExists]) {
	    return i;
	}
	return -1;
}

stock Backpack_HasItem(id, name[])
{
	if (id != -1 && BackpackData[id][backpackExists])
		return Backpack_GetItemID(id, name) != -1;

	return 0;
}

stock Backpack_Count(id, name[])
{
	new itemid;

	if (id != -1 && BackpackData[id][backpackExists])
	{
		itemid = Backpack_GetItemID(id, name);

		if (itemid != -1)
		    return BackpackItems[itemid][bItemQuantity];
	}
	return 0;
}

stock Backpack_Add(id, name[], model, quantity = 1)
{
	new
	    query[128];

	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new itemid = Backpack_GetItemID(id, name);

	    if (itemid != -1)
		{
	        format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` + %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
	        mysql_tquery(g_iHandle, query);

			return BackpackItems[itemid][bItemQuantity] += quantity;
		}
		else if ((itemid = Backpack_GetFreeItem()) != -1)
		{
		    format(BackpackItems[itemid][bItemName], 32, name);

		    BackpackItems[itemid][bItemBackpack] = id;
		    BackpackItems[itemid][bItemExists] = true;
		    BackpackItems[itemid][bItemModel] = model;
		    BackpackItems[itemid][bItemQuantity] = quantity;

	        format(query, sizeof(query), "INSERT INTO `backpackitems` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", BackpackData[id][backpackID], name, model, quantity);
	        mysql_tquery(g_iHandle, query, "OnBackpackAdd", "dd", id, itemid);

	        return 1;
		}
	}
	return 0;
}

stock Backpack_Remove(id, name[], quantity = 1)
{
	new
	    query[128];

	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new itemid = Backpack_GetItemID(id, name);

	    if (itemid != -1)
		{
			if (BackpackItems[itemid][bItemQuantity] > 0)
			{
				BackpackItems[itemid][bItemQuantity] -= quantity;
			}
			if (BackpackItems[itemid][bItemQuantity] < 1)
			{
		        format(query, sizeof(query), "DELETE FROM `backpackitems` WHERE `itemID` = '%d'", BackpackItems[itemid][bItemID]);
		        mysql_tquery(g_iHandle, query);

			    BackpackItems[itemid][bItemBackpack] = -1;
			    BackpackItems[itemid][bItemExists] = false;
			    BackpackItems[itemid][bItemModel] = 0;
		    	BackpackItems[itemid][bItemQuantity] = 0;
		    }
			else
			{
                format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` - %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
		        mysql_tquery(g_iHandle, query);
			}
		    return 1;
		}
	}
	return 0;
}

stock GetHouseBackpack(houseid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
	    return i;
	}
	return -1;
}

stock GetVehicleBackpack(carid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
	    return i;
	}
	return -1;
}

stock GetPlayerBackpack(playerid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackPlayer] == PlayerData[playerid][pID]) {
	    return i;
	}
	return -1;
}

stock Backpack_Create(playerid)
{
	new id = Backpack_GetFreeID();

	if (id != -1)
	{
		BackpackData[id][backpackExists] = true;
		BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
		BackpackData[id][backpackHouse] = 0;
		BackpackData[id][backpackVehicle] = 0;
		BackpackData[id][backpackPos][0] = 0.0;
		BackpackData[id][backpackPos][1] = 0.0;
		BackpackData[id][backpackPos][2] = 0.0;

		mysql_tquery(g_iHandle, "INSERT INTO `backpacks` (`backpackInterior`) VALUES(0)", "OnBackpackCreated", "d", id);
		return id;
	}
	return -1;
}

stock Backpack_Delete(id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new
	        str[64];

		format(str, sizeof(str), "DELETE FROM `backpacks` WHERE `backpackID` = '%d'", BackpackData[id][backpackID]);
		mysql_tquery(g_iHandle, str);

		if (IsValidDynamicObject(BackpackData[id][backpackObject]))
		    DestroyDynamicObject(BackpackData[id][backpackObject]);

		if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
		    DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

        BackpackData[id][backpackExists] = false;
        BackpackData[id][backpackID] = 0;
        BackpackData[id][backpackPlayer] = 0;
        BackpackData[id][backpackHouse] = 0;
        BackpackData[id][backpackVehicle] = 0;
	}
	return 1;
}

stock Backpack_Save(id)
{
	new
	    query[256];

    format(query, sizeof(query), "UPDATE `backpacks` SET `backpackPlayer` = '%d', `backpackHouse` = '%d', `backpackVehicle` = '%d', `backpackX` = '%.4f', `backpackY` = '%.4f', `backpackZ` = '%.4f', `backpackInterior` = '%d', `backpackWorld` = '%d' WHERE `backpackID` = '%d'",
        BackpackData[id][backpackPlayer],
        BackpackData[id][backpackHouse],
        BackpackData[id][backpackVehicle],
        BackpackData[id][backpackPos][0],
        BackpackData[id][backpackPos][1],
        BackpackData[id][backpackPos][2],
        BackpackData[id][backpackInterior],
        BackpackData[id][backpackWorld],
        BackpackData[id][backpackID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock StartTutorial(playerid)
{
	TogglePlayerControllable(playerid, 0);
    SetTimerEx("TanitimKontrol", 1000, true, "d", playerid);
    PlayerData[playerid][pTutorial] = 1;
    PlayerData[playerid][pTutorialTime] = 10;

	#if SERVER_CITY == 1
	    JBC_SetPlayerPos(playerid, 1806.737, -2043.505, 54.733);
	    SetPlayerCameraPos(playerid, 1806.737, -2043.505, 24.733);
		SetPlayerCameraLookAt(playerid, 1802.511, -2040.684, 22.996);
	#elseif SERVER_CITY == 2
		JBC_SetPlayerPos(playerid, -2399.519287, 321.964355, 17.035743);
		SetPlayerCameraPos(playerid, -2399.519287, 321.964355, 37.035743);
		SetPlayerCameraLookAt(playerid, -2399.951416, 322.215942, 37.015625);
	#elseif SERVER_CITY == 3
	    JBC_SetPlayerPos(playerid, 1694.187622, 1448.494506, -7.181461);
		SetPlayerCameraPos(playerid, 1694.187622, 1448.494506, 12.818538);
		SetPlayerCameraLookAt(playerid, 1693.687744, 1448.484497, 12.763537);
	#endif

	for (new i = 58; i < 62; i ++) {
	    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	}
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

stock IsValidObjectModel(modelid)
{
	if (modelid < 0 || modelid > 20000)
	    return 0;

    switch (modelid)
	{
		case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
			return 1;
	}
    new const g_arrModelData[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};
 	return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}

forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

stock Gate_Create(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
		    GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = GetPlayerInterior(playerid);
            GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

            GateData[i][gateLinkID] = -1;
            GateData[i][gateOwner] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_tquery(g_iHandle, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(g_iHandle, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

stock Gate_Save(gateid)
{
	new
	    query[1024];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateFaction` = '%d',  `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateFaction],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID]
	);
	format(query, sizeof(query), "%s, `gateOwner` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    query,
	    GateData[gateid][gateOwner],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	return mysql_tquery(g_iHandle, query);
}


stock ChangeName(playerid, name[], bool:logging = true)
{
	new
	    id = PlayerData[playerid][pCharacter] - 1,
		query[160],
		oldname[24];

	GetPlayerName(playerid, oldname, sizeof(oldname));

	if (logging)
	{
	    format(query, sizeof(query), "INSERT INTO `namechanges` (`OldName`, `NewName`, `Date`) VALUES('%s', '%s', '%s')", oldname, name, ReturnDate());
		mysql_tquery(g_iHandle, query);
	}
    format(PlayerCharacters[playerid][id], MAX_PLAYER_NAME + 1, name);
	SetPlayerName(playerid, name);

	format(query, sizeof(query), "UPDATE `characters` SET `Character` = '%s' WHERE `Character` = '%s'", name, oldname);
	mysql_tquery(g_iHandle, query);

	return 1;
}

stock Tax_Percent(price)
{
	return floatround((float(price) / 100) * 85);
}


stock Tax_AddMoney(amount)
{
	g_TaxVault = g_TaxVault + amount;

	Server_Save();

	return 0;
}

stock Tax_AddPercent(price)
{
	new money = (price - Tax_Percent(price));

	g_TaxVault = g_TaxVault + money;

	Server_Save();
	return 1;
}

stock file_parse_int(File:handle, const field[])
{
	new
	    str[16];

	return (file_parse(handle, field, str), strval(str));
}

stock Float:file_parse_float(File:handle, const field[])
{
	new
	    str[16];

	return (file_parse(handle, field, str), floatstr(str));
}

stock file_parse(File:handle, const field[], dest[], size = sizeof(dest))
{
	if (!handle)
	    return 0;

	new
	    str[128],
		pos = strlen(field);

	fseek(handle, 0, seek_start);

	while (fread(handle, str)) if (strfind(str, field, true) == 0 && (str[pos] == '=' || str[pos] == ' '))
	{
	    strmid(dest, str, (str[pos] == '=') ? (pos + 1) : (pos + 3), strlen(str), size);

		if ((pos = strfind(dest, "\r")) != -1)
			dest[pos] = '\0';
   		else if ((pos = strfind(dest, "\n")) != -1)
     		dest[pos] = '\0';

		return 1;
	}
	return 0;
}

cache_get_field_int(row, const field_name[])
{
	new
	    str[12];

	cache_get_field_content(row, field_name, str, g_iHandle, sizeof(str));
	return strval(str);
}

Kupon_Ekle(playerid, odul, yatirilan, macid, tahmin)
{
	new
	    string[1024];


	for (new i = 0; i != MAX_KUPON; i ++)
	{
	    if (!Kuponlar[playerid][i][kuponVarmi])
	    {
		    Kuponlar[playerid][i][kuponVarmi] = true;
		    Kuponlar[playerid][i][kuponYatirilan] = yatirilan;
		    Kuponlar[playerid][i][kuponTahmin] = tahmin;
            Kuponlar[playerid][i][kuponMacID] = macid;
            Kuponlar[playerid][i][kuponOdul] = odul;

		    format(Kuponlar[playerid][i][kuponTarih], 36, ReturnDate());


            format(string, sizeof(string), "INSERT INTO `kuponlar` (`ID`, `kuponMacID`, `kuponTarih`, `kuponOdul`, `kuponYatirilan`, `kuponTahmin`) VALUES('%d', '%d', '%s', '%d', '%d', '%d')",  PlayerData[playerid][pID], macid, Kuponlar[playerid][i][kuponTarih], Kuponlar[playerid][i][kuponOdul], Kuponlar[playerid][i][kuponYatirilan], Kuponlar[playerid][i][kuponTahmin]);
			mysql_tquery(g_iHandle, string, "OnKuponCreated", "dd", playerid, i);
			return i;
		}
	}
	return -1;
}

Kontrakt_Ekle(playerid, miktar, imzalayan, sebep[])
{
	new
	    string[1024];


	for (new i = 0; i != MAX_KONTRAKT; i ++)
	{
	    if (!Kontraktlar[playerid][i][kontraktVarmi])
	    {
		    Kontraktlar[playerid][i][kontraktVarmi] = true;
		    Kontraktlar[playerid][i][kontraktMiktar] = miktar;
            Kontraktlar[playerid][i][kontraktKatil] = -1;

		    format(Kontraktlar[playerid][i][kontraktTarih], 36, ReturnDate());
		    format(Kontraktlar[playerid][i][kontraktSebep], 128, sebep);
            format(Kontraktlar[playerid][i][kontraktImzalayan], 36, ReturnName(imzalayan, 0));

            format(string, sizeof(string), "INSERT INTO `kontraktlar` (`ID`, `kontraktTarih`, `kontraktMiktar`, `kontraktImzalayan`, `kontraktSebep`) VALUES('%d', '%s', '%d', '%s', '%s')",  PlayerData[playerid][pID], Kontraktlar[playerid][i][kontraktTarih], Kontraktlar[playerid][i][kontraktMiktar], Kontraktlar[playerid][i][kontraktImzalayan], Kontraktlar[playerid][i][kontraktSebep]);
			mysql_tquery(g_iHandle, string, "OnKontraktCreated", "dd", playerid, i);
			return i;
		}
	}
	return -1;
}


Hasar_Ekle(playerid, bodypart, Float:hasar, hasarveren, silahid)
{

	for (new i = 0; i != MAX_HASAR; i ++)
	{
	    if (!Hasarlar[playerid][i][hasarVarmi])
	    {
			Hasarlar[playerid][i][hasarVarmi] = true;
		    Hasarlar[playerid][i][hasarBolge] = bodypart;
		    Hasarlar[playerid][i][hasarVeren] = hasarveren;
            Hasarlar[playerid][i][hasarDeger] = hasar;
            Hasarlar[playerid][i][hasarSilah] = silahid;
			return i;
		}
	}
	return -1;
}

Kontrakt_Sil(playerid, kontraktid)
{
	if (kontraktid != -1 && Kontraktlar[playerid][kontraktid][kontraktVarmi] )
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `kontraktlar` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
		mysql_tquery(g_iHandle, string);

 		Kontraktlar[playerid][kontraktid][kontraktVarmi] = false;
   		Kontraktlar[playerid][kontraktid][kontraktMiktar] = 0;

		format(Kontraktlar[playerid][kontraktid][kontraktTarih], 36, "Yok");
  		format(Kontraktlar[playerid][kontraktid][kontraktImzalayan], 36, "Yok");
	}
	return 1;
}


Kupon_Sil(playerid, kuponid)
{
	if (kuponid != -1 && Kuponlar[playerid][kuponid][kuponVarmi] )
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `kuponlar` WHERE `ID` = '%d' AND `kuponID` = '%d'", PlayerData[playerid][pID], Kuponlar[playerid][kuponid][kuponID]);
		mysql_tquery(g_iHandle, string);

        Kuponlar[playerid][kuponid][kuponVarmi] = false;
		Kuponlar[playerid][kuponid][kuponYatirilan] = 0;
		Kuponlar[playerid][kuponid][kuponTahmin] = 0;
        Kuponlar[playerid][kuponid][kuponMacID] = -1;
        Kuponlar[playerid][kuponid][kuponOdul] = 0;
        Kuponlar[playerid][kuponid][kuponID] = 0;
	}
	return 1;
}

Ticket_Add(suspectid, price, reason[])
{
	new
	    string[1024];


	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++)
	{
	    if (!TicketData[suspectid][i][ticketExists])
	    {
		    TicketData[suspectid][i][ticketExists] = true;
		    TicketData[suspectid][i][ticketFee] = price;

		    format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
		    format(TicketData[suspectid][i][ticketReason], 64, reason);

			format(string, sizeof(string), "INSERT INTO `tickets` (`ID`, `ticketFee`, `ticketDate`, `ticketReason`) VALUES('%d', '%d', '%s', '%s')", PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], SQL_ReturnEscaped(reason));
			mysql_tquery(g_iHandle, string, "OnTicketCreated", "dd", suspectid, i);
			return i;
		}
	}
	return -1;
}

Ticket_Remove(playerid, ticketid)
{
	if (ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `tickets` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
		mysql_tquery(g_iHandle, string);

	    TicketData[playerid][ticketid][ticketExists] = false;
	    TicketData[playerid][ticketid][ticketID] = 0;
	    TicketData[playerid][ticketid][ticketFee] = 0;
	}
	return 1;
}

Waypoint_Set(playerid, name[], Float:x, Float:y, Float:z)
{
    format(PlayerData[playerid][pLocation], 32, name);

    PlayerData[playerid][pWaypoint] = 1;
   	PlayerData[playerid][pWaypointPos][0] = x;
    PlayerData[playerid][pWaypointPos][1] = y;
   	PlayerData[playerid][pWaypointPos][2] = z;
    PlayerData[playerid][pCP] = 1;
	SetPlayerCheckpoint(playerid, x, y, z, 3.0);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][69]);

	return 1;
}

Location_Add(playerid, name[], Float:x, Float:y, Float:z)
{
	new
	    query[192];

	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (!LocationData[playerid][i][locationExists])
	{
	    LocationData[playerid][i][locationExists] = true;
	    format(LocationData[playerid][i][locationName], 32, name);

	    LocationData[playerid][i][locationPos][0] = x;
	    LocationData[playerid][i][locationPos][1] = y;
	    LocationData[playerid][i][locationPos][2] = z;

		format(query, sizeof(query), "INSERT INTO `gps` (`ID`, `locationName`, `locationX`, `locationY`, `locationZ`) VALUES('%d', '%s', '%.4f', '%.4f', '%.4f')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), x, y, z);
		mysql_tquery(g_iHandle, query, "OnLocationCreated", "dd", playerid, i);

		return i;
	}
	return -1;
}

Location_GetID(playerid, name[])
{
    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name, true)) {
        return i;
	}
	return -1;
}

Location_Delete(playerid, name[])
{
	new
		query[96];

    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name))
	{
	    LocationData[playerid][i][locationExists] = false;

	    LocationData[playerid][i][locationPos][0] = 0.0;
	    LocationData[playerid][i][locationPos][1] = 0.0;
	    LocationData[playerid][i][locationPos][2] = 0.0;

	    format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d' AND `locationID` = '%d'", PlayerData[playerid][pID], LocationData[playerid][i][locationID]);
	    mysql_tquery(g_iHandle, query);
		return 1;
	}
	return 0;
}

stock JBC_SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, time = 1000)
{
	if (PlayerData[playerid][pFreeze])
	{
	    KillTimer(PlayerData[playerid][pFreezeTimer]);

	    PlayerData[playerid][pFreeze] = 0;
	    TogglePlayerControllable(playerid, 1);
	}
	JBC_SetPlayerPos(playerid, x, y, z + 0.5);
	TogglePlayerControllable(playerid, 0);

	PlayerData[playerid][pFreeze] = 1;
	PlayerData[playerid][pFreezeTimer] = SetTimerEx("SetPlayerToUnfreeze", time, false, "dfff", playerid, x, y, z);
	return 1;
}

forward SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z);
public SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z)
{
	PlayerData[playerid][pFreeze] = 0;

	JBC_SetPlayerPos(playerid, x, y, z);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward RefillUpdate(playerid, vehicleid);
public RefillUpdate(playerid, vehicleid)
{
	if (!PlayerData[playerid][pFuelCan] || GetNearestVehicle(playerid) != vehicleid)
	    return 0;

	CoreVehicles[vehicleid][vehFuel] = (CoreVehicles[vehicleid][vehFuel] + 15 >= 100) ? (100) : (CoreVehicles[vehicleid][vehFuel] + 15);

	PlayerData[playerid][pFuelCan] = 0;
	SendServerMessage(playerid, "Benzin deposu fullendi.");
	return 1;
}

stock EquipWeapon(playerid, weapon[])
{
	if (PlayerData[playerid][pPlayingHours] < 2)
	    return SendErrorMessage(playerid, "Bu iþlemi yapabilmek için iki saat oynama süreniz olmasý gereklidir.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Araçtan inmeniz gerekmektdir.");

	if (!strcmp(weapon, "Colt 45", true))
	{
	    if (!Inventory_HasItem(playerid, "Colt 45"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 22))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Zaten þu anda elinde bir silah var. ('N' tuþu ile býrakabilirsin)");

		HoldWeapon(playerid, 22);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s eline 'Colt 45' adlý silahý alýr.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Silahý 'N' ile envantere býrakabilirsin ya da Þarjör takarak kullanabilirsin.");
	}
	else if (!strcmp(weapon, "Desert Eagle", true))
	{
	    if (!Inventory_HasItem(playerid, "Desert Eagle"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 24))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

	    if (PlayerHasWeapon(playerid, 24))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Zaten þu anda elinde bir silah var ('N' tuþu ile býrakabilirsin).");

		HoldWeapon(playerid, 24);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s eline 'Desert Eagle' adlý silahý alýr.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Silahý 'N' ile envantere býrakabilirsin ya da Þarjör takarak kullanabilirsin.");
	}
	else if (!strcmp(weapon, "Shotgun", true))
	{
	    if (!Inventory_HasItem(playerid, "Shotgun"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 25))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Zaten þu anda elinde bir silah var ('N' tuþu ile býrakabilirsin).");

		HoldWeapon(playerid, 25);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s eline 'Shotgun' adlý silahý alýr.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Silahý 'N' ile envantere býrakabilirsin ya da Þarjör takarak kullanabilirsin.");
	}
	else if (!strcmp(weapon, "Micro SMG", true))
	{
	    if (!Inventory_HasItem(playerid, "Micro SMG"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 28))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Zaten þu anda elinde bir silah var ('N' tuþu ile býrakabilirsin).");

		HoldWeapon(playerid, 28);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s eline 'Micro SMG' adlý silahý alýr.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Silahý 'N' ile envantere býrakabilirsin ya da Þarjör takarak kullanabilirsin.");
	}
	else if (!strcmp(weapon, "Tec-9", true))
	{
	    if (!Inventory_HasItem(playerid, "Tec-9"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 32))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Zaten þu anda elinde bir silah var ('N' tuþu ile býrakabilirsin).");

		HoldWeapon(playerid, 32);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s eline 'Tec-9' adlý silahý alýr.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Silahý 'N' ile envantere býrakabilirsin ya da Þarjör takarak kullanabilirsin.");
	}
	else if (!strcmp(weapon, "MP5", true))
	{
	    if (!Inventory_HasItem(playerid, "MP5"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 29))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Zaten þu anda elinde bir silah var ('N' tuþu ile býrakabilirsin).");

		HoldWeapon(playerid, 29);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s eline 'MP5' adlý silahý alýr.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Silahý 'N' ile envantere býrakabilirsin ya da Þarjör takarak kullanabilirsin.");
	}
	else if (!strcmp(weapon, "AK-47", true))
	{
	    if (!Inventory_HasItem(playerid, "AK-47"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 30))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Zaten þu anda elinde bir silah var ('N' tuþu ile býrakabilirsin).");

		HoldWeapon(playerid, 30);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s eline 'AK-47' adlý silahý alýr.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Silahý 'N' ile envantere býrakabilirsin ya da Þarjör takarak kullanabilirsin.");
	}
	else if (!strcmp(weapon, "Rifle", true))
	{
	    if (!Inventory_HasItem(playerid, "Rifle"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 33))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Zaten þu anda elinde bir silah var ('N' tuþu ile býrakabilirsin).");

		HoldWeapon(playerid, 33);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s eline 'Rifle' adlý silahý alýr.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Silahý 'N' ile envantere býrakabilirsin ya da Þarjör takarak kullanabilirsin.");
	}
	else if (!strcmp(weapon, "Sniper", true))
	{
	    if (!Inventory_HasItem(playerid, "Sniper"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 34))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Zaten þu anda elinde bir silah var ('N' tuþu ile býrakabilirsin).");

		HoldWeapon(playerid, 34);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s eline 'Sniper' adlý silahý alýr.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Silahý 'N' ile envantere býrakabilirsin ya da Þarjör takarak kullanabilirsin.");
	}
	else if (!strcmp(weapon, "Golf Club", true))
	{
	    if (!Inventory_HasItem(playerid, "Golf Club"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 2))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

	    GiveWeaponToPlayer(playerid, 2, 1);

	    Inventory_Remove(playerid, "Golf Club");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has equipped a Golf Club from their inventory.", ReturnName(playerid, 0));
	}
	else if (!strcmp(weapon, "Knife", true))
	{
	    if (!Inventory_HasItem(playerid, "Knife"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 4))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

	    GiveWeaponToPlayer(playerid, 4, 1);

	    Inventory_Remove(playerid, "Knife");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has equipped a Knife from their inventory.", ReturnName(playerid, 0));
	}
	else if (!strcmp(weapon, "Shovel", true))
	{
	    if (!Inventory_HasItem(playerid, "Shovel"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 6))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

	    GiveWeaponToPlayer(playerid, 6, 1);

	    Inventory_Remove(playerid, "Shovel");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has equipped a Shovel from their inventory.", ReturnName(playerid, 0));
	}
    else if (!strcmp(weapon, "Katana", true))
	{
	    if (!Inventory_HasItem(playerid, "Katana"))
	        return SendErrorMessage(playerid, "Bu silaha sahip deðilsin.");

	    if (PlayerHasWeapon(playerid, 8))
	        return SendErrorMessage(playerid, "Zaten bu silaha sahipsin.");

	    GiveWeaponToPlayer(playerid, 8, 1);

	    Inventory_Remove(playerid, "Katana");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has equipped a Katana from their inventory.", ReturnName(playerid, 0));
	}
	return 1;
}

stock SetPlayerInPrison(playerid)
{
	new idx = random(sizeof(g_arrPrisonSpawns));

	JBC_SetPlayerPosEx(playerid, g_arrPrisonSpawns[idx][0], g_arrPrisonSpawns[idx][1], g_arrPrisonSpawns[idx][2] + 0.3);
//	SetPlayerFacingAngle(playerid, g_arrPrisonSpawns[idx][3]);

//	SetPlayerInterior(playerid, 5);
	SetPlayerVirtualWorld(playerid, PRISON_WORLD);
	SetCameraBehindPlayer(playerid);
}

stock ViewCharges(playerid, name[])
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", SQL_ReturnEscaped(name));
	mysql_tquery(g_iHandle, string, "OnViewCharges", "ds", playerid, name);
	return 1;
}

stock AddWarrant(targetid, playerid, const description[])
{
	new
	    string[255];

	format(string, sizeof(string), "INSERT INTO `warrants` (`Suspect`, `Username`, `Date`, `Description`) VALUES('%s', '%s', '%s', '%s')", ReturnName(targetid), ReturnName(playerid), ReturnDate(), SQL_ReturnEscaped(description));
	mysql_tquery(g_iHandle, string);
}

stock AddWarrantEx(targetid, kesen[], const description[])
{
	new
	    string[255];

	format(string, sizeof(string), "INSERT INTO `warrants` (`Suspect`, `Username`, `Date`, `Description`) VALUES('%s', '%s', '%s', '%s')", ReturnName(targetid), kesen, ReturnDate(), SQL_ReturnEscaped(description));
	mysql_tquery(g_iHandle, string);
}

stock GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
	new
	    id = -1;

    if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);
	return 1;
}

stock GetPlayerLocation(playerid)
{
	new
	    Float:fX,
	    Float:fY,
		Float:fZ,
		string[32],
		id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);

	format(string, 32, GetLocation(fX, fY, fZ));
	return string;
}

stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
    enum e_ZoneData
	{
     	e_ZoneName[32 char],
     	Float:e_ZoneArea[6]
	};
	new const g_arrZoneData[][e_ZoneData] =
	{
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
	};
	new
	    name[32] = "San Andreas";

	for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
		strunpack(name, g_arrZoneData[i][e_ZoneName]);

		break;
	}
	return name;
}

stock Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	return GetPlayerDistanceFromPoint(playerid, x, y, z);
}


/*CREATE TABLE `detectors` (
	`detectorID` INT(12) AUTO_INCREMENT,
	`detectorX` FLOAT DEFAULT 0.0,
	`detectorY` FLOAT DEFAULT 0.0,
	`detectorZ` FLOAT DEFAULT 0.0,
	`detectorAngle` FLOAT DEFAULT 0.0,
	`detectorInterior` INT(12) DEFAULT 0,
	`detectorWorld` INT(12) DEFAULT 0,
	PRIMARY KEY(`detectorID`)
);*/

stock Detector_Delete(id)
{
    if (id != -1 && MetalDetectors[id][detectorExists])
	{
	    new
	        query[64];

	    DestroyDynamicObject(MetalDetectors[id][detectorObject][0]);
	    DestroyDynamicObject(MetalDetectors[id][detectorObject][1]);

		format(query, sizeof(query), "DELETE FROM `detectors` WHERE `detectorID` = '%d'", MetalDetectors[id][detectorID]);
		mysql_tquery(g_iHandle, query);

		MetalDetectors[id][detectorID] = 0;
		MetalDetectors[id][detectorExists] = 0;
	}
	return 1;
}

stock Detector_Refresh(id)
{
	if (id != -1 && MetalDetectors[id][detectorExists])
	{
	    MetalDetectors[id][detectorObject][0] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0], MetalDetectors[id][detectorPos][1], MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
		MetalDetectors[id][detectorObject][1] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0] + (1.0 * floatsin(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][1] + (1.0 * floatcos(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
	}
	return 1;
}

stock Detector_Nearest(playerid)
{
    for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (MetalDetectors[i][detectorExists])
	{
	    if (IsPlayerInRangeOfPoint(playerid, 1.0, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]) && GetPlayerInterior(playerid) == MetalDetectors[i][detectorInterior] && GetPlayerVirtualWorld(playerid) == MetalDetectors[i][detectorWorld])
	        return i;
	}
	return -1;
}

stock IsPlayerArmed(playerid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

		if (ammo > 0) {
			switch (weapon) {
			    case 1, 2, 4, 6, 8, 9, 15, 22..38: return 1;
			}
		}
	}
	return 0;
}

stock PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

stock GetNearestPlayerInView(playerid, Float:distance = 2.0)
{
	new
	    Float:fAngle,
		Float:fPosX,
		Float:fPosY,
		Float:fPosZ;

	GetPlayerFacingAngle(playerid, fAngle);
	GetPlayerPos(playerid, fPosX, fPosY, fPosZ);

	fPosX += distance * floatsin(-fAngle, degrees);
	fPosY += distance * floatcos(-fAngle, degrees);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 2.0, fPosX, fPosY, fPosZ)) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock CancelCall(playerid)
{
    if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{

 		PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = INVALID_PLAYER_ID;
   		PlayerData[PlayerData[playerid][pCallLine]][pIncomingCall] = 0;

		KayitYazdir(playerid, PlayerData[playerid][pCallLine], CEVAPSIZ_ARAMA);
		KayitYazdir(PlayerData[playerid][pCallLine], playerid, CEVAPSIZ_ARAMA);
		PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
		PlayerData[playerid][pIncomingCall] = 0;
		SetPVarInt(playerid, "AnkesorludenmiAriyor", 0);
		SetPVarInt(playerid, "Arayanmi", 0);
		konusmasuresi[playerid] = 0;
	}
	return 1;
}

stock PlayReloadAnimation(playerid, weaponid)
{
	switch (weaponid)
	{
	    case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0);
		case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.0, 0, 0, 0, 0, 0);
		case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
		case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
		case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
		case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.0, 0, 0, 0, 0, 0);
		case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

stock LeaveTaxi(playerid, driverid)
{
	if (driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
	{
	    GiveMoney(playerid, -PlayerData[playerid][pTaxiFee]);
   		GiveMoney(driverid, PlayerData[playerid][pTaxiFee]);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s taksi þöförüne $%d verir.", ReturnName(playerid, 0), PlayerData[playerid][pTaxiFee]);

	    PlayerData[playerid][pTaxiFee] = 0;
	    PlayerData[playerid][pTaxiTime] = 0;
	    PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

stock IsFurnitureItem(item[])
{
    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item)) {
        return 1;
	}
	return 0;
}

stock GetFurnitureNameByModel(model)
{
	new
	    name[32];

	for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureModel] == model) {
		strcat(name, g_aFurnitureData[i][e_FurnitureName]);

		break;
	}
	return name;
}

stock PlayerHasWeaponSlot(playerid, slotid)
{
	new
	    weapon,
	    ammo,
		slot;

	for (new i = 0; i < 13; i ++) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);
		slot = g_aWeaponSlots[weapon];
	    if (slot == slotid) return 1;
	}
	return 0;
}

stock PlayerHasWeapon(playerid, weaponid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] == weaponid) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon == weaponid && ammo > 0) return 1;
	}
	return 0;
}

stock IsPumpOccupied(pumpid)
{
	foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID) {
	    if (PlayerData[i][pGasPump] == pumpid) return 1;
	}
	return 0;
}

stock IsWheelModel(modelid)
{
    switch (modelid) {
		case 1025, 1073..1085, 1096..1098: return 1;
	}
    return 0;
}

stock IsNOSCompatible(modelid)
{
	switch (modelid) {
	    case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 0;
	}
    return 1;
}

stock IsLegalComponent(modelid, componentid)
{
    if (IsWheelModel(componentid) || (1086 <= componentid <= 1087) || (componentid >= 1008 && componentid <= 1010))
	{
	    if (!IsNOSCompatible(modelid))
			return 1;
    }
	else
	{
	    for (new i = 0; i < sizeof(g_aLegalMods); i ++)
	    {
	        if (g_aLegalMods[i][0] != modelid)
				continue;

			else for (new l = 1; l < 22; l ++) if (g_aLegalMods[i][l] == componentid) {
			    return 1;
			}
		}
	}
	return 0;
}
SendPlayerToPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if (IsPlayerInAnyVehicle(playerid))
	{
	    SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 2, z);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
	}
	else
		JBC_SetPlayerPos(playerid, x + 1, y, z);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
	PlayerData[playerid][pBusiness] = PlayerData[targetid][pBusiness];
	PlayerData[playerid][pEntrance] = PlayerData[targetid][pEntrance];
	PlayerData[playerid][pHospitalInt]  = PlayerData[targetid][pHospitalInt];
}

StopRefilling(playerid)
{
    PlayerData[playerid][pGasPump] = -1;
    PlayerData[playerid][pGasStation] = -1;
   	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
}

SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] > 0 && PlayerData[playerid][pAmmo][i] > 0) {
	    GivePlayerWeaponEx(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
	}
	return 1;
}

SetAccessories(playerid)
{
    for (new i = 0; i < 5; i ++) {
	  	new slotid = i;
		if(!PlayerData[playerid][pTSlot][slotid])
		{
			RemovePlayerAttachedObject(playerid, slotid);
		}
		else
		{
			SetPlayerAttachedObject(playerid, slotid, PlayerData[playerid][pASlot][slotid], PlayerData[playerid][pABone][slotid], AccessoryData[playerid][slotid][0], AccessoryData[playerid][slotid][1], AccessoryData[playerid][slotid][2], AccessoryData[playerid][slotid][3], AccessoryData[playerid][slotid][4], AccessoryData[playerid][slotid][5], AccessoryData[playerid][slotid][6], AccessoryData[playerid][slotid][7], AccessoryData[playerid][slotid][8]);
		}
	}

	if (Inventory_HasItem(playerid, "Sirtcantasi"))
	{
	    for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS; ++i)
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid, i)) continue;
	 		SetPlayerAttachedObject(playerid, 7, 3026, 1, -0.134207, -0.093048, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		}
	}
	else RemovePlayerAttachedObject(playerid, 7);
}

SQL_LoadCharacter(playerid, characterid)
{
	if (characterid < 1 || characterid > 3)
		return 0;

	new
		query[160];

	format(query, sizeof(query), "UPDATE `characters` SET `LastLogin` = '%d' WHERE `Username` = '%s' AND `Character` = '%s'", gettime(), PlayerData[playerid][pUsername], PlayerCharacters[playerid][characterid - 1]);
	mysql_tquery(g_iHandle, query);

	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][characterid - 1]);
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTER);

	return 1;
}

ShowCharacterMenu(playerid)
{
	if (PlayerData[playerid][pCharacter] != 0)
	{
 		PlayerData[playerid][pCharacter] = 0;

	}
	new dialog[512], string[56];
 	format(string, sizeof string, "%s\n" , (!PlayerCharacters[playerid][0][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][0]));
  	strcat(dialog, string);
    format(string, sizeof string, "%s\n", (!PlayerCharacters[playerid][1][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][1]));
    			strcat(dialog, string);
    			 format(string, sizeof string, "%s", (!PlayerCharacters[playerid][2][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][2]));
    			strcat(dialog, string);
    			ShowPlayerDialog(playerid, DIALOG_KARAKTER, DIALOG_STYLE_LIST, "vBeta - Karakter Seçim Ekraný", dialog, "Sec", "Kapat");

}

GetClosestGarbage(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && GarbageData[i][garbageCapacity] > 0 && GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizType] == type && GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestEntrance(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceType] == type && GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJobPoint(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

/*GetClosestJob(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}*/

GetClosestHospital(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}
IsWeaponModel(model) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    for (new i = 0; i < sizeof(g_aWeaponModels); i ++) if (g_aWeaponModels[i] == model) {
        return 1;
	}
	return 0;
}

GetWeaponModel(weaponid) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    if (1 <= weaponid <= 46)
        return g_aWeaponModels[weaponid];

	return 0;
}

DropPlayerItem(playerid, itemid, quantity = 1)
{
	if (itemid == -1 || !InventoryData[playerid][itemid][invExists])
	    return 0;

    new
		Float:x,
  		Float:y,
    	Float:z,
		Float:angle,
		string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (InventoryData[playerid][itemid][invQuantity] < 2)
	{
		if (!strcmp(string, "Colt 45") && PlayerData[playerid][pHoldWeapon] == 22)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Desert Eagle") && PlayerData[playerid][pHoldWeapon] == 24)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Shotgun") && PlayerData[playerid][pHoldWeapon] == 25)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Micro SMG") && PlayerData[playerid][pHoldWeapon] == 28)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "MP5") && PlayerData[playerid][pHoldWeapon] == 29)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Tec-9") && PlayerData[playerid][pHoldWeapon] == 32)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "AK-47") && PlayerData[playerid][pHoldWeapon] == 30)
			HoldWeapon(playerid, 0);

	 	else if (!strcmp(string, "Rifle") && PlayerData[playerid][pHoldWeapon] == 33)
		 	HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Sniper") && PlayerData[playerid][pHoldWeapon] == 34)
			HoldWeapon(playerid, 0);

	}
	if (!strcmp(string, "Yem") || !strcmp(string, "Ruhsat") || !strcmp(string, "Maymuncuk") || !strcmp(string, "Ehliyet") || !strcmp(string, "Telefon")) return SendErrorMessage(playerid, "Bu eþya türü yere atýlamaz.");
    if (!strcmp(string, "Kaykay")) {
        InfoSkate[playerid][sActive] = false;
        DestroyObject(InfoSkate[playerid][sSkate]);
        RemovePlayerAttachedObject(playerid,INDEX_SKATE);
    }

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	DropItem(string, ReturnName(playerid, 0), InventoryData[playerid][itemid][invModel], quantity, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
 	Inventory_Remove(playerid, string, quantity);

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
 	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s, \"%s\"'ý yere býrakýr.", ReturnName(playerid, 0), string);
	return 1;
}

DropItem(item[], player[], model, quantity, Float:x, Float:y, Float:z, interior, world, weaponid = 0, ammo = 0)
{
	new
	    query[300];


	for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (!DroppedItems[i][droppedModel])
	{

	    format(DroppedItems[i][droppedItem], 32, item);
	    format(DroppedItems[i][droppedPlayer], 24, player);

		DroppedItems[i][droppedModel] = model;
		DroppedItems[i][droppedQuantity] = quantity;
		DroppedItems[i][droppedWeapon] = weaponid;
  		DroppedItems[i][droppedAmmo] = ammo;
		DroppedItems[i][droppedPos][0] = x;
		DroppedItems[i][droppedPos][1] = y;
		DroppedItems[i][droppedPos][2] = z;

		DroppedItems[i][droppedInt] = interior;
		DroppedItems[i][droppedWorld] = world;

		if (IsWeaponModel(model)) {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 93.7, 120.0, 120.0, world, interior);
		} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, 0.0, world, interior);
		}
 	//	DroppedItems[i][droppedText3D] = CreateDynamic3DTextLabel(item, COLOR_CYAN, x, y, z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, world, interior);

		if (strcmp(item, "Demo Soda") != 0)
		{
	 		format(query, sizeof(query), "INSERT INTO `dropped` (`itemName`, `itemPlayer`, `itemModel`, `itemQuantity`, `itemWeapon`, `itemAmmo`, `itemX`, `itemY`, `itemZ`, `itemInt`, `itemWorld`) VALUES('%s', '%s', '%d', '%d', '%d', '%d', '%.4f', '%.4f', '%.4f', '%d', '%d')", item, player, model, quantity, weaponid, ammo, x, y, z, interior, world);
			mysql_tquery(g_iHandle, query, "OnDroppedItem", "d", i);
		}
		return i;
	}
	return -1;
}

Item_Nearest(playerid)
{
    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]))
	{
	    if (GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld])
	        return i;
	}
	return -1;
}

/*Item_SetQuantity(itemid, amount)
{
	new
	    string[64];

	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
	    DroppedItems[itemid][droppedQuantity] = amount;

	    format(string, sizeof(string), "UPDATE `dropped` SET `itemQuantity` = %d WHERE `ID` = '%d'", amount, DroppedItems[itemid][droppedID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}*/

Item_Delete(itemid)
{
    static
	    query[64];

    if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
        DroppedItems[itemid][droppedModel] = 0;
		DroppedItems[itemid][droppedQuantity] = 0;
	    DroppedItems[itemid][droppedPos][0] = 0.0;
	    DroppedItems[itemid][droppedPos][1] = 0.0;
	    DroppedItems[itemid][droppedPos][2] = 0.0;
	    DroppedItems[itemid][droppedInt] = 0;
	    DroppedItems[itemid][droppedWorld] = 0;

	    DestroyDynamicObject(DroppedItems[itemid][droppedObject]);
	    if (IsValidDynamic3DTextLabel(DroppedItems[itemid][droppedText3D]))
		    DestroyDynamic3DTextLabel(DroppedItems[itemid][droppedText3D]);

	    format(query, sizeof(query), "DELETE FROM `dropped` WHERE `ID` = '%d'", DroppedItems[itemid][droppedID]);
	    mysql_tquery(g_iHandle, query);
	}
	return 1;
}

PickupItem(playerid, itemid)
{
	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
	    new id = Inventory_Add(playerid, DroppedItems[itemid][droppedItem], DroppedItems[itemid][droppedModel], DroppedItems[itemid][droppedQuantity]);

	    if (id == -1)
	        return SendErrorMessage(playerid, "Envanterde boþ yer yok.");

	    Item_Delete(itemid);
	}
	return 1;
}

SetFactionMarker(playerid, type, color)
{
    foreach (new i : Player) if (GetFactionType(i) == type) {
    	SetPlayerMarkerForPlayer(i, playerid, color);
	}
	PlayerData[playerid][pMarker] = 1;
	SetTimerEx("ExpireMarker", 300000, false, "d", playerid);
	return 1;
}

Faction_GetName(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		name[32] = "Yok";

 	if (factionid == -1)
	    return name;

	format(name, 32, FactionData[factionid][factionName]);
	return name;
}

Faction_GetDivizyon(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		rank[32] = "Yok";

 	if (factionid == -1)
	    return rank;

    if (PlayerData[playerid][pFactionDivizyon] == 0)
	    return rank;

	format(rank, 32, FactionDivizyon[factionid][PlayerData[playerid][pFactionDivizyon] - 1]);
	return rank;
}

Faction_GetRank(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		rank[32] = "Yok";

 	if (factionid == -1)
	    return rank;

	format(rank, 32, FactionRanks[factionid][PlayerData[playerid][pFactionRank] - 1]);
	return rank;
}

Arrest_Delete(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

        if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "DELETE FROM `arrestpoints` WHERE `arrestID` = '%d'", ArrestData[arrestid][arrestID]);
		mysql_tquery(g_iHandle, string);

		ArrestData[arrestid][arrestExists] = false;
		ArrestData[arrestid][arrestID] = 0;
	}
	return 1;
}

Arrest_Create(Float:x, Float:y, Float:z, interior, world)
{
	for (new i = 0; i < MAX_ARREST_POINTS; i ++) if (!ArrestData[i][arrestExists])
	{
	    ArrestData[i][arrestExists] = true;
	    ArrestData[i][arrestPos][0] = x;
	    ArrestData[i][arrestPos][1] = y;
	    ArrestData[i][arrestPos][2] = z;
	    ArrestData[i][arrestInterior] = interior;
	    ArrestData[i][arrestWorld] = world;

	    mysql_tquery(g_iHandle, "INSERT INTO `arrestpoints` (`arrestInterior`) VALUES(0)", "OnArrestCreated", "d", i);
		Arrest_Refresh(i);
		return i;
	}
	return -1;
}

Arrest_Save(arrestid)
{
	static
	    query[220];

	format(query, sizeof(query), "UPDATE `arrestpoints` SET `arrestX` = '%.4f', `arrestY` = '%.4f', `arrestZ` = '%.4f', `arrestInterior` = '%d', `arrestWorld` = '%d' WHERE `arrestID` = '%d'",
	    ArrestData[arrestid][arrestPos][0],
	    ArrestData[arrestid][arrestPos][1],
	    ArrestData[arrestid][arrestPos][2],
	    ArrestData[arrestid][arrestInterior],
	    ArrestData[arrestid][arrestWorld],
	    ArrestData[arrestid][arrestID]
	);
	return mysql_tquery(g_iHandle, query);
}

Arrest_Refresh(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

		if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "[Kodes %d]\n{FFFFFF}/hapseat", arrestid);

		ArrestData[arrestid][arrestPickup] = CreateDynamicPickup(11749, 23, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
  		ArrestData[arrestid][arrestText3D] = CreateDynamic3DTextLabel(string, COLOR_GRAY, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
	}
	return 1;
}

Rack_Save(rackid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `gunracks` SET `rackHouse` = '%d', `rackX` = '%.4f', `rackY` = '%.4f', `rackZ` = '%.4f', `rackA` = '%.4f', `rackInterior` = '%d', `rackWorld` = '%d', `rackWeapon1` = '%d', `rackWeapon2` = '%d', `rackWeapon3` = '%d', `rackWeapon4` = '%d', `rackAmmo1` = '%d', `rackAmmo2` = '%d', `rackAmmo3` = '%d', `rackAmmo4` = '%d' WHERE `rackID` = '%d'",
	    RackData[rackid][rackHouse],
	    RackData[rackid][rackPos][0],
	    RackData[rackid][rackPos][1],
	    RackData[rackid][rackPos][2],
	    RackData[rackid][rackPos][3],
	    RackData[rackid][rackInterior],
	    RackData[rackid][rackWorld],
	    RackData[rackid][rackWeapons][0],
	    RackData[rackid][rackWeapons][1],
	    RackData[rackid][rackWeapons][2],
	    RackData[rackid][rackWeapons][3],
	    RackData[rackid][rackAmmo][0],
	    RackData[rackid][rackAmmo][1],
	    RackData[rackid][rackAmmo][2],
	    RackData[rackid][rackAmmo][3],
	    RackData[rackid][rackID]
	);
	return mysql_tquery(g_iHandle, query);
}

Rack_Nearest(playerid)
{
	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && IsPlayerInRangeOfPoint(playerid, 3.0, RackData[i][rackPos][0], RackData[i][rackPos][1], RackData[i][rackPos][2]))
	{
		if (GetPlayerInterior(playerid) == RackData[i][rackInterior] && GetPlayerVirtualWorld(playerid) == RackData[i][rackWorld])
		    return i;
	}
	return -1;
}

/*Rack_Count(houseid)
{
	new count;

	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && RackData[i][rackHouse] == HouseData[houseid][houseID]) {
	    count++;
	}
	return count;
}*/

Rack_ShowGuns(playerid, rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    new
	        string[128];

		for (new i = 0; i < 4; i ++)
		{
		    if (!RackData[rackid][rackWeapons][i])
		        format(string, sizeof(string), "%s%d: Boþ Slot\n", string, i);

			else format(string, sizeof(string), "%s%d: %s - %d Mermi\n", string, i, ReturnWeaponName(RackData[rackid][rackWeapons][i]), RackData[rackid][rackAmmo][i]);
		}
		Dialog_Show(playerid, RackWeapons, DIALOG_STYLE_LIST, "Raf", string, "Seç", "{FF6347}Iptal");
	}
	return 1;
}

Rack_Delete(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        string[64];

	    format(string, sizeof(string), "DELETE FROM `gunracks` WHERE `rackID` = '%d'", RackData[rackid][rackID]);
	    mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 5; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
			DestroyDynamicObject(RackData[rackid][rackObjects][i]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		RackData[rackid][rackExists] = false;
		RackData[rackid][rackID] = 0;
		RackData[rackid][rackHouse] = 0;
	}
	return 1;
}

Rack_Create(playerid, houseid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (!RackData[i][rackExists])
		{
		    x += 1.5 * floatsin(-angle, degrees);
		    y += 1.5 * floatcos(-angle, degrees);

		    RackData[i][rackExists] = true;
		    RackData[i][rackHouse] = (houseid == -1) ? (-1) : (HouseData[houseid][houseID]);

		    RackData[i][rackPos][0] = x;
		    RackData[i][rackPos][1] = y;
		    RackData[i][rackPos][2] = z;
		    RackData[i][rackPos][3] = angle;
		    RackData[i][rackInterior] = GetPlayerInterior(playerid);
		    RackData[i][rackWorld] = GetPlayerVirtualWorld(playerid);

		    Rack_Refresh(i);
		    mysql_tquery(g_iHandle, "INSERT INTO `gunracks` (`rackHouse`) VALUES(0)", "OnRackCreated", "d", i);

		    return i;
		}
	}
	return -1;
}

Rack_RefreshGuns(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
    	new
			Float:x,
	        Float:y,
			Float:z;

		z = RackData[rackid][rackPos][2] + 2.19;

		for (new i = 0; i < 4; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][i]);

			RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
		}
		for (new i = 0; i < 4; i ++)
		{
		    if (RackData[rackid][rackWeapons][i])
			{
				x = RackData[rackid][rackPos][0] - (0.2 * floatsin(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatsin(-RackData[rackid][rackPos][3] - 90, degrees)));
				y = RackData[rackid][rackPos][1] - (0.2 * floatcos(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatcos(-RackData[rackid][rackPos][3] - 90, degrees)));

		        RackData[rackid][rackObjects][i] = CreateDynamicObject(GetWeaponModel(RackData[rackid][rackWeapons][i]), x, y, z, 94.7, 93.7, (22 <= RackData[rackid][rackWeapons][i] <= 38) ? (RackData[rackid][rackPos][3] + 90.0) : (RackData[rackid][rackPos][3]), RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
			}
			else
			{
			    RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
			}
			z = z - 0.69;
		}
	}
	return 1;
}

Rack_Refresh(rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        str[64];

		if (IsValidDynamicObject(RackData[rackid][rackObjects][4])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][4]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		format(str, sizeof(str), "[Raf %d]\n{FFFFFF}/raf ile açabilirsin.", rackid);
		RackData[rackid][rackText3D] = CreateDynamic3DTextLabel(str, COLOR_DARKBLUE, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2] + 1.2, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, RackData[rackid][rackWorld], RackData[rackid][rackInterior]);

		Rack_RefreshGuns(rackid);
        RackData[rackid][rackObjects][4] = CreateDynamicObject(2475, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2], 0.0, 0.0, RackData[rackid][rackPos][3], RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
	}
	return 1;
}

forward Detector_Load();
public Detector_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_METAL_DETECTORS)
	{
    	MetalDetectors[i][detectorExists] = 1;
	    MetalDetectors[i][detectorID] = cache_get_field_int(i, "detectorID");
	    MetalDetectors[i][detectorPos][0] = cache_get_field_float(i, "detectorX");
	    MetalDetectors[i][detectorPos][1] = cache_get_field_float(i, "detectorY");
	    MetalDetectors[i][detectorPos][2] = cache_get_field_float(i, "detectorZ");
	    MetalDetectors[i][detectorPos][3] = cache_get_field_float(i, "detectorAngle");
	    MetalDetectors[i][detectorInterior] = cache_get_field_int(i, "detectorInterior");
	    MetalDetectors[i][detectorWorld] = cache_get_field_int(i, "detectorWorld");

		Detector_Refresh(i);
	}
	return 1;
}

forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], g_iHandle, 64);
        cache_get_field_content(i, "graffitiFont", GraffitiData[i][graffitiFont], g_iHandle, 64);

    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_int(i, "graffitiID");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_float(i, "graffitiAngle");
	    GraffitiData[i][graffitiColor] = cache_get_field_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}

forward Speed_Load();
public Speed_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedID] = cache_get_field_int(i, "speedID");
	    SpeedData[i][speedRange] = cache_get_field_float(i, "speedRange");
	    SpeedData[i][speedLimit] = cache_get_field_float(i, "speedLimit");
	    SpeedData[i][speedPos][0] = cache_get_field_float(i, "speedX");
	    SpeedData[i][speedPos][1] = cache_get_field_float(i, "speedY");
	    SpeedData[i][speedPos][2] = cache_get_field_float(i, "speedZ");
	    SpeedData[i][speedPos][3] = cache_get_field_float(i, "speedAngle");

	    Speed_Refresh(i);
	}
	return 1;
}

forward Rack_Load();
public Rack_Load()
{
    static
	    rows,
	    fields,
		str[24];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_WEAPON_RACKS)
	{
	    RackData[i][rackExists] = true;
	    RackData[i][rackID] = cache_get_field_int(i, "rackID");
	    RackData[i][rackHouse] = cache_get_field_int(i, "rackHouse");
     	RackData[i][rackPos][0] = cache_get_field_float(i, "rackX");
        RackData[i][rackPos][1] = cache_get_field_float(i, "rackY");
        RackData[i][rackPos][2] = cache_get_field_float(i, "rackZ");
        RackData[i][rackPos][3] = cache_get_field_float(i, "rackA");
        RackData[i][rackInterior] = cache_get_field_int(i, "rackInterior");
		RackData[i][rackWorld] = cache_get_field_int(i, "rackWorld");

		for (new j = 0; j < 4; j ++) {
		    format(str, 24, "rackWeapon%d", j + 1);
		    RackData[i][rackWeapons][j] = cache_get_field_int(i, str);

            format(str, 24, "rackAmmo%d", j + 1);
		    RackData[i][rackAmmo][j] = cache_get_field_int(i, str);
		}
		Rack_Refresh(i);
	}
	return 1;
}

forward Vendor_Load();
public Vendor_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_VENDORS)
	{
	    VendorData[i][vendorExists] = true;
	    VendorData[i][vendorID] = cache_get_field_int(i, "vendorID");
	    VendorData[i][vendorType] = cache_get_field_int(i, "vendorType");
	    VendorData[i][vendorPos][0] = cache_get_field_float(i, "vendorX");
        VendorData[i][vendorPos][1] = cache_get_field_float(i, "vendorY");
        VendorData[i][vendorPos][2] = cache_get_field_float(i, "vendorZ");
        VendorData[i][vendorPos][3] = cache_get_field_float(i, "vendorA");
        VendorData[i][vendorInterior] = cache_get_field_int(i, "vendorInterior");
		VendorData[i][vendorWorld] = cache_get_field_int(i, "vendorWorld");

		Vendor_Refresh(i);
	}
	return 1;
}

forward Garbage_Load();
public Garbage_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GARBAGE_BINS)
	{
	    GarbageData[i][garbageExists] = true;
	    GarbageData[i][garbageID] = cache_get_field_int(i, "garbageID");
	    GarbageData[i][garbageModel] = cache_get_field_int(i, "garbageModel");
	    GarbageData[i][garbageCapacity] = cache_get_field_int(i, "garbageCapacity");
	    GarbageData[i][garbagePos][0] = cache_get_field_float(i, "garbageX");
        GarbageData[i][garbagePos][1] = cache_get_field_float(i, "garbageY");
        GarbageData[i][garbagePos][2] = cache_get_field_float(i, "garbageZ");
        GarbageData[i][garbagePos][3] = cache_get_field_float(i, "garbageA");
        GarbageData[i][garbageInterior] = cache_get_field_int(i, "garbageInterior");
		GarbageData[i][garbageWorld] = cache_get_field_int(i, "garbageWorld");

		Garbage_Refresh(i);
	}
	return 1;
}
forward Sandik_Yukle();
public Sandik_Yukle()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_SANDIK)
	{
	    Sandiklar[i][sandikVarmi] = true;
	    Sandiklar[i][sandikID] = cache_get_field_int(i, "sandikID");
	    Sandiklar[i][sandikPos][0] = cache_get_field_float(i, "sandikX");
        Sandiklar[i][sandikPos][1] = cache_get_field_float(i, "sandikY");
        Sandiklar[i][sandikPos][2] = cache_get_field_float(i, "sandikZ");
        Sandiklar[i][sandikPos][3] = cache_get_field_float(i, "sandikA");
        Sandiklar[i][sandikInterior] = cache_get_field_int(i, "sandikInterior");
		Sandiklar[i][sandikWorld] = cache_get_field_int(i, "sandikWorld");
        Sandiklar[i][sandikOy] = cache_get_field_int(i, "sandikOy");
        cache_get_field_content(i, "sandikBaslik", Sandiklar[i][sandikBaslik], g_iHandle, 128);
        cache_get_field_content(i, "sandikIcerik", Sandiklar[i][sandikIcerik], g_iHandle, 128);
  		Sandik_Yenile(i);
	}
	return 1;
}

forward Impound_Load();
public Impound_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_IMPOUND_LOTS)
	{
	    ImpoundData[i][impoundExists] = true;
	    ImpoundData[i][impoundID] = cache_get_field_int(i, "impoundID");
	    ImpoundData[i][impoundLot][0] = cache_get_field_float(i, "impoundLotX");
        ImpoundData[i][impoundLot][1] = cache_get_field_float(i, "impoundLotY");
        ImpoundData[i][impoundLot][2] = cache_get_field_float(i, "impoundLotZ");
        ImpoundData[i][impoundRelease][0] = cache_get_field_float(i, "impoundReleaseX");
        ImpoundData[i][impoundRelease][1] = cache_get_field_float(i, "impoundReleaseY");
        ImpoundData[i][impoundRelease][2] = cache_get_field_float(i, "impoundReleaseZ");
        ImpoundData[i][impoundRelease][3] = cache_get_field_float(i, "impoundReleaseA");

		Impound_Refresh(i);
	}
	return 1;
}

forward Backpack_Load();
public Backpack_Load()
{
    static
	    rows,
	    fields,
		str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BACKPACKS)
	{
	    BackpackData[i][backpackExists] = true;
	    BackpackData[i][backpackID] = cache_get_field_int(i, "backpackID");
	    BackpackData[i][backpackPlayer] = cache_get_field_int(i, "backpackPlayer");
	    BackpackData[i][backpackHouse] = cache_get_field_int(i, "backpackHouse");
	    BackpackData[i][backpackVehicle] = cache_get_field_int(i, "backpackVehicle");
	    BackpackData[i][backpackPos][0] = cache_get_field_float(i, "backpackX");
	    BackpackData[i][backpackPos][1] = cache_get_field_float(i, "backpackY");
	    BackpackData[i][backpackPos][2] = cache_get_field_float(i, "backpackZ");
	    BackpackData[i][backpackInterior] = cache_get_field_int(i, "backpackInterior");
	    BackpackData[i][backpackWorld] = cache_get_field_int(i, "backpackWorld");

	    if (!BackpackData[i][backpackPlayer]) {
         Backpack_Refresh(i);
		}
	}
	for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists]) {
		format(str, sizeof(str), "SELECT * FROM `backpackitems` WHERE `ID` = '%d'", BackpackData[i][backpackID]);

		mysql_tquery(g_iHandle, str, "OnLoadBackpack", "d", i);
	}
	return 1;
}

forward Gate_Load();
public Gate_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;

	    GateData[i][gateID] = cache_get_field_int(i, "gateID");
	    GateData[i][gateModel] = cache_get_field_int(i, "gateModel");
	    GateData[i][gateSpeed] = cache_get_field_float(i, "gateSpeed");
	    GateData[i][gateRadius] = cache_get_field_float(i, "gateRadius");
	    GateData[i][gateTime] = cache_get_field_int(i, "gateTime");
	    GateData[i][gateInterior] = cache_get_field_int(i, "gateInterior");
	    GateData[i][gateWorld] = cache_get_field_int(i, "gateWorld");

	    GateData[i][gatePos][0] = cache_get_field_float(i, "gateX");
	    GateData[i][gatePos][1] = cache_get_field_float(i, "gateY");
	    GateData[i][gatePos][2] = cache_get_field_float(i, "gateZ");
	    GateData[i][gatePos][3] = cache_get_field_float(i, "gateRX");
	    GateData[i][gatePos][4] = cache_get_field_float(i, "gateRY");
	    GateData[i][gatePos][5] = cache_get_field_float(i, "gateRZ");

        GateData[i][gateMove][0] = cache_get_field_float(i, "gateMoveX");
	    GateData[i][gateMove][1] = cache_get_field_float(i, "gateMoveY");
	    GateData[i][gateMove][2] = cache_get_field_float(i, "gateMoveZ");
	    GateData[i][gateMove][3] = cache_get_field_float(i, "gateMoveRX");
	    GateData[i][gateMove][4] = cache_get_field_float(i, "gateMoveRY");
	    GateData[i][gateMove][5] = cache_get_field_float(i, "gateMoveRZ");

        GateData[i][gateLinkID] = cache_get_field_int(i, "gateLinkID");
	    GateData[i][gateFaction] = cache_get_field_int(i, "gateFaction");
        GateData[i][gateOwner] = cache_get_field_int(i, "gateOwner");

	    cache_get_field_content(i, "gatePass", GateData[i][gatePass], g_iHandle, 32);

	    GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}


forward Object_Load();
public Object_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_OBJECTS)
	{
	    ObjectData[i][objectVarmi] = true;

	    ObjectData[i][objectID] = cache_get_field_int(i, "objectID");
	    ObjectData[i][objectModel] = cache_get_field_int(i, "objectModel");
	    ObjectData[i][objectOwner] = cache_get_field_int(i, "objectOwner");
	    ObjectData[i][objectInterior] = cache_get_field_int(i, "objectInterior");
	    ObjectData[i][objectWorld] = cache_get_field_int(i, "objectWorld");

	    ObjectData[i][objectPos][0] = cache_get_field_float(i, "objectX");
	    ObjectData[i][objectPos][1] = cache_get_field_float(i, "objectY");
	    ObjectData[i][objectPos][2] = cache_get_field_float(i, "objectZ");
	    ObjectData[i][objectPos][3] = cache_get_field_float(i, "objectRX");
	    ObjectData[i][objectPos][4] = cache_get_field_float(i, "objectRY");
	    ObjectData[i][objectPos][5] = cache_get_field_float(i, "objectRZ");

	    ObjectData[i][objectObject] = CreateDynamicObject(ObjectData[i][objectModel], ObjectData[i][objectPos][0], ObjectData[i][objectPos][1], ObjectData[i][objectPos][2], ObjectData[i][objectPos][3], ObjectData[i][objectPos][4], ObjectData[i][objectPos][5], ObjectData[i][objectWorld], ObjectData[i][objectInterior]);
	}
	return 1;
}


forward Arrest_Load();
public Arrest_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ARREST_POINTS)
	{
	    ArrestData[i][arrestExists] = true;

	    ArrestData[i][arrestID] = cache_get_field_int(i, "arrestID");
	    ArrestData[i][arrestPos][0] = cache_get_field_float(i, "arrestX");
	    ArrestData[i][arrestPos][1] = cache_get_field_float(i, "arrestY");
	    ArrestData[i][arrestPos][2] = cache_get_field_float(i, "arrestZ");
	    ArrestData[i][arrestInterior] = cache_get_field_int(i, "arrestInterior");
	    ArrestData[i][arrestWorld] = cache_get_field_int(i, "arrestWorld");

	    Arrest_Refresh(i);
	}
	return 1;
}

forward Faction_Load();
public Faction_Load()
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_FACTIONS)
	{
	    FactionData[i][factionExists] = true;
	    FactionData[i][factionID] = cache_get_field_int(i, "factionID");

	    cache_get_field_content(i, "factionName", FactionData[i][factionName], g_iHandle, 32);

	    FactionData[i][factionColor] = cache_get_field_int(i, "factionColor");
	    FactionData[i][factionType] = cache_get_field_int(i, "factionType");
	    FactionData[i][factionRanks] = cache_get_field_int(i, "factionRanks");
	    FactionData[i][factionLockerPos][0] = cache_get_field_float(i, "factionLockerX");
	    FactionData[i][factionLockerPos][1] = cache_get_field_float(i, "factionLockerY");
	    FactionData[i][factionLockerPos][2] = cache_get_field_float(i, "factionLockerZ");
	    FactionData[i][factionLockerInt] = cache_get_field_int(i, "factionLockerInt");
	    FactionData[i][factionLockerWorld] = cache_get_field_int(i, "factionLockerWorld");
    	FactionData[i][factionKasaPos][0] = cache_get_field_float(i, "factionKasaX");
	    FactionData[i][factionKasaPos][1] = cache_get_field_float(i, "factionKasaY");
	    FactionData[i][factionKasaPos][2] = cache_get_field_float(i, "factionKasaZ");
	    FactionData[i][factionKasaInt] = cache_get_field_int(i, "factionKasaInt");
	    FactionData[i][factionKasaWorld] = cache_get_field_int(i, "factionKasaWorld");
        FactionData[i][factionKasaMiktar] = cache_get_field_int(i, "factionKasaMiktar");
    	FactionData[i][factionLevel] = cache_get_field_int(i, "factionLevel");
		FactionData[i][factionEXP] = cache_get_field_int(i, "factionEXP");
        FactionData[i][factionOnay] = cache_get_field_int(i, "factionOnay");
        FactionData[i][factionUOnay] = cache_get_field_int(i, "factionUOnay");
        FactionData[i][factionSOnay] = cache_get_field_int(i, "factionSOnay");
       	FactionData[i][factionBAS] = cache_get_field_int(i, "factionBAS");
		FactionData[i][factionBFS] = cache_get_field_int(i, "factionBFS");
		FactionData[i][factionBAS] = cache_get_field_int(i, "factionBAS");
        FactionData[i][factionBKS] = cache_get_field_int(i, "factionBKS");

		//Spawning
		FactionData[i][SpawnX] = cache_get_field_float(i, "SpawnX");
	 	FactionData[i][SpawnY] = cache_get_field_float(i, "SpawnY");
   		FactionData[i][SpawnZ] = cache_get_field_float(i, "SpawnZ");
		FactionData[i][SpawnInterior] = cache_get_field_int(i, "SpawnInterior");
  		FactionData[i][SpawnVW] = cache_get_field_int(i, "SpawnVW");
        FactionData[i][gTip] = cache_get_field_int(i, "gTip");

        cache_get_field_content(i, "factionMOTD", FactionData[i][factionMOTD], g_iHandle, 128);

	    for (new j = 0; j < 24; j ++) {
	        format(str, sizeof(str), "factionSkin%d", j + 1);

	        FactionData[i][factionSkins][j] = cache_get_field_int(i, str);
		}
        for (new j = 0; j < 10; j ++) {
	        format(str, sizeof(str), "factionWeapon%d", j + 1);

	        FactionData[i][factionWeapons][j] = cache_get_field_int(i, str);

	        format(str, sizeof(str), "factionAmmo%d", j + 1);

			FactionData[i][factionAmmo][j] = cache_get_field_int(i, str);
		}
		for (new j = 0; j < 15; j ++) {
		    format(str, sizeof(str), "factionRank%d", j + 1);

		    cache_get_field_content(i, str, FactionRanks[i][j], g_iHandle, 32);
		}
		for (new j = 0; j < 4; j ++) {
		    format(str, sizeof(str), "factionDivizyon%d", j + 1);

		    cache_get_field_content(i, str, FactionDivizyon[i][j], g_iHandle, 32);
		}
		Faction_Refresh(i);
	}
	return 1;
}

Mac_Olustur(Float:oran)
{
	for (new i = 0; i != MAX_MAC; i ++) if (!Maclar[i][macVarmi])
	{
	    new takim = random(sizeof(Takimlar));
		while (Takimlar[takim][takimKullanildimi] == 1)
		{
	        takim = random(sizeof(Takimlar));
		}
		Takimlar[takim][takimKullanildimi] = 1;
		new takim2 = random(20);
		while (Takimlar[takim2][takimKullanildimi] == 1)
		{
	        takim2 = random(sizeof(Takimlar));
		}
  		Takimlar[takim2][takimKullanildimi] = 1;

	    Maclar[i][macVarmi] = true;
	    Maclar[i][macOynandimi] = false;
	    Maclar[i][macTakim1] = takim;
	    Maclar[i][macTakim2] = takim2;
		Maclar[i][macOran] = oran;
		Maclar[i][macTakim1Skor] = 0;
		Maclar[i][macTakim2Skor] = 0;
		new macsure=  gettime() + (10200 * random(3)+1);
		Maclar[i][macZaman] = macsure;
		//printf("%d. %s - %s [Oran: %f]", i, Takimlar[takim][takimAd], Takimlar[takim2][takimAd], oran);
		//MacSonuclat(i);
	    mysql_tquery(g_iHandle, "INSERT INTO `maclar` (`macTakim1Skor`) VALUES(0)", "OnMacCreated", "d", i);
	    return i;
	}
	return -1;
}
forward Mac_Yukle();
public Mac_Yukle()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_MAC)
	{
	    Maclar[i][macVarmi] = true;
	    Maclar[i][macID] = cache_get_field_int(i, "macID");
	    Maclar[i][macOran] = cache_get_field_int(i, "macOran");
	    Maclar[i][macTakim1] = cache_get_field_int(i, "macTakim1");
	    Maclar[i][macTakim2] = cache_get_field_int(i, "macTakim2");
	    Maclar[i][macTakim1Skor] = cache_get_field_int(i, "macTakim1Skor");
	    Maclar[i][macTakim2Skor] = cache_get_field_int(i, "macTakim2Skor");
	    Maclar[i][macZaman] = cache_get_field_int(i, "macZaman");
	    Maclar[i][macOynandimi] = cache_get_field_int(i, "macOynandimi");
	}
	return 1;
}
forward Crate_Load();
public Crate_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_CRATES)
	{
	    CrateData[i][crateExists] = true;
	    CrateData[i][crateID] = cache_get_field_int(i, "crateID");
	    CrateData[i][crateType] = cache_get_field_int(i, "crateType");
	    CrateData[i][cratePos][0] = cache_get_field_float(i, "crateX");
	    CrateData[i][cratePos][1] = cache_get_field_float(i, "crateY");
	    CrateData[i][cratePos][2] = cache_get_field_float(i, "crateZ");
	    CrateData[i][cratePos][3] = cache_get_field_float(i, "crateA");
	    CrateData[i][crateInterior] = cache_get_field_int(i, "crateInterior");
	    CrateData[i][crateWorld] = cache_get_field_int(i, "crateWorld");
		CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;

		Crate_Refresh(i);
	}
	return 1;
}
forward Plant_Load();
public Plant_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DRUG_PLANTS)
	{
	    PlantData[i][plantExists] = true;
	    PlantData[i][plantID] = cache_get_field_int(i, "plantID");
	    PlantData[i][plantType] = cache_get_field_int(i, "plantType");
	    PlantData[i][plantDrugs] = cache_get_field_int(i, "plantDrugs");
	    PlantData[i][plantPos][0] = cache_get_field_float(i, "plantX");
	    PlantData[i][plantPos][1] = cache_get_field_float(i, "plantY");
	    PlantData[i][plantPos][2] = cache_get_field_float(i, "plantZ");
	    PlantData[i][plantPos][3] = cache_get_field_float(i, "plantA");
	    PlantData[i][plantInterior] = cache_get_field_int(i, "plantInterior");
	    PlantData[i][plantWorld] = cache_get_field_int(i, "plantWorld");

		Plant_Refresh(i);
	}
	return 1;
}
forward Job_Load();
public Job_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

    for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_JOBS)
	{
	    JobData[i][jobExists] = true;
	    JobData[i][jobID] = cache_get_field_int(i, "jobID");
	    JobData[i][jobType] = cache_get_field_int(i, "jobType");
	    JobData[i][jobPos][0] = cache_get_field_float(i, "jobPosX");
	    JobData[i][jobPos][1] = cache_get_field_float(i, "jobPosY");
	    JobData[i][jobPos][2] = cache_get_field_float(i, "jobPosZ");
	    JobData[i][jobInterior] = cache_get_field_int(i, "jobInterior");
	    JobData[i][jobWorld] = cache_get_field_int(i, "jobWorld");
        JobData[i][jobPoint][0] = cache_get_field_float(i, "jobPointX");
	    JobData[i][jobPoint][1] = cache_get_field_float(i, "jobPointY");
	    JobData[i][jobPoint][2] = cache_get_field_float(i, "jobPointZ");
	    JobData[i][jobDeliver][0] = cache_get_field_float(i, "jobDeliverX");
	    JobData[i][jobDeliver][1] = cache_get_field_float(i, "jobDeliverY");
	    JobData[i][jobDeliver][2] = cache_get_field_float(i, "jobDeliverZ");
	    JobData[i][jobPointInt] = cache_get_field_int(i, "jobPointInt");
	    JobData[i][jobPointWorld] = cache_get_field_int(i, "jobPointWorld");

 	    Job_Refresh(i);
	}
	return 1;
}

forward Entrance_Load();
public Entrance_Load()
{
    static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ENTRANCES)
	{
	    EntranceData[i][entranceExists] = true;
    	EntranceData[i][entranceID] = cache_get_field_int(i, "entranceID");

		cache_get_field_content(i, "entranceName", EntranceData[i][entranceName], g_iHandle, 32);
		cache_get_field_content(i, "entrancePass", EntranceData[i][entrancePass], g_iHandle, 32);

	    EntranceData[i][entranceIcon] = cache_get_field_int(i, "entranceIcon");
	    EntranceData[i][entranceLocked] = cache_get_field_int(i, "entranceLocked");
	    EntranceData[i][entrancePos][0] = cache_get_field_float(i, "entrancePosX");
	    EntranceData[i][entrancePos][1] = cache_get_field_float(i, "entrancePosY");
	    EntranceData[i][entrancePos][2] = cache_get_field_float(i, "entrancePosZ");
	    EntranceData[i][entrancePos][3] = cache_get_field_float(i, "entrancePosA");
	    EntranceData[i][entranceInt][0] = cache_get_field_float(i, "entranceIntX");
	    EntranceData[i][entranceInt][1] = cache_get_field_float(i, "entranceIntY");
	    EntranceData[i][entranceInt][2] = cache_get_field_float(i, "entranceIntZ");
	    EntranceData[i][entranceInt][3] = cache_get_field_float(i, "entranceIntA");
	    EntranceData[i][entranceInterior] = cache_get_field_int(i, "entranceInterior");
	    EntranceData[i][entranceExterior] = cache_get_field_int(i, "entranceExterior");
	    EntranceData[i][entranceExteriorVW] = cache_get_field_int(i, "entranceExteriorVW");
	    EntranceData[i][entranceType] = cache_get_field_int(i, "entranceType");
	    EntranceData[i][entranceCustom] = cache_get_field_int(i, "entranceCustom");
	    EntranceData[i][entranceWorld] = cache_get_field_int(i, "entranceWorld");
        EntranceData[i][entranceBaglanti] = cache_get_field_int(i, "entranceBaglanti");

		if (EntranceData[i][entranceType] == 3)
		    CreateForklifts(i);

	    Entrance_Refresh(i);
	}
	return 1;
}

forward Fabrika_Yukle();
public Fabrika_Yukle()
{
    static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_FABRIKA)
	{
	    Fabrikalar[i][fabrikaVarmi] = true;
    	Fabrikalar[i][fabrikaID] = cache_get_field_int(i, "fabrikaID");

		cache_get_field_content(i, "fabrikaAd", Fabrikalar[i][fabrikaAd], g_iHandle, 32);
	    Fabrikalar[i][fabrikaPos][0] = cache_get_field_float(i, "fabrikaPosX");
	    Fabrikalar[i][fabrikaPos][1] = cache_get_field_float(i, "fabrikaPosY");
	    Fabrikalar[i][fabrikaPos][2] = cache_get_field_float(i, "fabrikaPosZ");
	    Fabrikalar[i][fabrikaPos][3] = cache_get_field_float(i, "fabrikaPosA");

	    Fabrikalar[i][fabrikaTip] = cache_get_field_int(i, "fabrikaTip");
	    Fabrikalar[i][fabrikaBirlik] = cache_get_field_int(i, "fabrikaBirlik");
	    Fabrikalar[i][fabrikaUretimHizi] = cache_get_field_float(i, "fabrikaUretimHizi");
        Fabrikalar[i][fabrikaTime] = cache_get_field_int(i, "fabrikaTime");

        Fabrikalar[i][fabrikaDepo][0] = cache_get_field_int(i, "fabrikaDepo1");
        Fabrikalar[i][fabrikaDepo][1] = cache_get_field_int(i, "fabrikaDepo2");
        Fabrikalar[i][fabrikaDepo][2] = cache_get_field_int(i, "fabrikaDepo3");
        Fabrikalar[i][fabrikaDepo][3] = cache_get_field_int(i, "fabrikaDepo4");
	    Fabrika_Yenile(i);
	}
	return 1;
}


forward Mezar_Yukle();
public Mezar_Yukle()
{
    static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_MEZAR)
	{
	    Mezarlar[i][mezarVarmi] = true;
    	Mezarlar[i][mezarID] = cache_get_field_int(i, "mezarID");

		cache_get_field_content(i, "mezarAd", Mezarlar[i][mezarAd], g_iHandle, 32);
		cache_get_field_content(i, "mezarTarih", Mezarlar[i][mezarTarih], g_iHandle, 32);
		cache_get_field_content(i, "mezarYazit", Mezarlar[i][mezarYazit], g_iHandle, 128);
		cache_get_field_content(i, "mezarOtopsi", Mezarlar[i][mezarOtopsi], g_iHandle, 32);
	    Mezarlar[i][mezarPos][0] = cache_get_field_float(i, "mezarPosX");
	    Mezarlar[i][mezarPos][1] = cache_get_field_float(i, "mezarPosY");
	    Mezarlar[i][mezarPos][2] = cache_get_field_float(i, "mezarPosZ");
	    Mezarlar[i][mezarPos][3] = cache_get_field_float(i, "mezarPosA");

	    Mezar_Yenile(i);
	}
	return 1;
}
forward Hood_Yukle();
public Hood_Yukle()
{
    static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ONAYLIHOOD)
	{
	    OnayliHoodlar[i][hoodVarmi] = true;
    	OnayliHoodlar[i][hoodID] = cache_get_field_int(i, "hoodID");

		cache_get_field_content(i, "hoodAd", OnayliHoodlar[i][hoodAd], g_iHandle, 32);
		cache_get_field_content(i, "hoodPickup", OnayliHoodlar[i][hoodPickup], g_iHandle, 32);
	    OnayliHoodlar[i][hoodPos][0] = cache_get_field_float(i, "hoodPosX");
	    OnayliHoodlar[i][hoodPos][1] = cache_get_field_float(i, "hoodPosY");
	    OnayliHoodlar[i][hoodPos][2] = cache_get_field_float(i, "hoodPosZ");
	    OnayliHoodlar[i][hoodPos][3] = cache_get_field_float(i, "hoodPosA");

	    Hood_Yenile(i);
	}
	return 1;
}


forward Dropped_Load();
public Dropped_Load()
{
	static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DROPPED_ITEMS)
	{
	    DroppedItems[i][droppedID] = cache_get_field_int(i, "ID");

		cache_get_field_content(i, "itemName", DroppedItems[i][droppedItem], g_iHandle, 32);
		cache_get_field_content(i, "itemPlayer", DroppedItems[i][droppedPlayer], g_iHandle, 24);

		DroppedItems[i][droppedModel] = cache_get_field_int(i, "itemModel");
		DroppedItems[i][droppedQuantity] = cache_get_field_int(i, "itemQuantity");
		DroppedItems[i][droppedWeapon] = cache_get_field_int(i, "itemWeapon");
		DroppedItems[i][droppedAmmo] = cache_get_field_int(i, "itemAmmo");
		DroppedItems[i][droppedPos][0] = cache_get_field_float(i, "itemX");
		DroppedItems[i][droppedPos][1] = cache_get_field_float(i, "itemY");
		DroppedItems[i][droppedPos][2] = cache_get_field_float(i, "itemZ");
		DroppedItems[i][droppedInt] = cache_get_field_int(i, "itemInt");
		DroppedItems[i][droppedWorld] = cache_get_field_int(i, "itemWorld");

		if (IsWeaponModel(DroppedItems[i][droppedModel])) {
    	   	DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 0.0, 0.0, 0.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		}
	//	DroppedItems[i][droppedText3D] = CreateDynamic3DTextLabel(DroppedItems[i][droppedItem], COLOR_CYAN, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
	}
	return 1;
}

forward Haber_Yukle();
public Haber_Yukle()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_HABER)
	{
	    Haberler[i][haberVarmi] = true;
	    Haberler[i][haberID] = cache_get_field_int(i, "haberID");

		cache_get_field_content(i, "haberBaslik", Haberler[i][haberBaslik], g_iHandle, 128);
        cache_get_field_content(i, "haberIcerik", Haberler[i][haberIcerik], g_iHandle, 512);
		cache_get_field_content(i, "haberYazan", Haberler[i][haberYazan], g_iHandle, 24);

		Haberler[i][haberTip] = cache_get_field_int(i, "haberTip");
		Haberler[i][haberOkunma] = cache_get_field_int(i, "haberOkunma");
	}
	return 1;
}


forward Business_Load();
public Business_Load()
{
    static
	    rows,
	    fields,
		str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BUSINESSES)
	{
	    BusinessData[i][bizExists] = true;
	    BusinessData[i][bizID] = cache_get_field_int(i, "bizID");

		cache_get_field_content(i, "bizName", BusinessData[i][bizName], g_iHandle, 32);
        cache_get_field_content(i, "bizMessage", BusinessData[i][bizMessage], g_iHandle, 128);
		cache_get_field_content(i, "isyerisahibi", BusinessData[i][bizOwnerName], g_iHandle, 32);
		cache_get_field_content(i, "bizOrtakName", BusinessData[i][bizOrtakName], g_iHandle, 32);
        cache_get_field_content(i, "bizMusic", BusinessData[i][bizMusic], g_iHandle, 256);
		BusinessData[i][bizOwner] = cache_get_field_int(i, "bizOwner");
		BusinessData[i][bizOrtak] = cache_get_field_int(i, "bizOrtak");
		BusinessData[i][bizType] = cache_get_field_int(i, "bizType");
		BusinessData[i][bizPrice] = cache_get_field_int(i, "bizPrice");
		BusinessData[i][bizPos][0] = cache_get_field_float(i, "bizPosX");
		BusinessData[i][bizPos][1] = cache_get_field_float(i, "bizPosY");
		BusinessData[i][bizPos][2] = cache_get_field_float(i, "bizPosZ");
		BusinessData[i][bizPos][3] = cache_get_field_float(i, "bizPosA");
		BusinessData[i][bizInt][0] = cache_get_field_float(i, "bizIntX");
		BusinessData[i][bizInt][1] = cache_get_field_float(i, "bizIntY");
		BusinessData[i][bizInt][2] = cache_get_field_float(i, "bizIntZ");
		BusinessData[i][bizInt][3] = cache_get_field_float(i, "bizIntA");
		BusinessData[i][bizSpawn][0] = cache_get_field_float(i, "bizSpawnX");
		BusinessData[i][bizSpawn][1] = cache_get_field_float(i, "bizSpawnY");
		BusinessData[i][bizSpawn][2] = cache_get_field_float(i, "bizSpawnZ");
		BusinessData[i][bizSpawn][3] = cache_get_field_float(i, "bizSpawnA");
		BusinessData[i][bizDeliver][0] = cache_get_field_float(i, "bizDeliverX");
		BusinessData[i][bizDeliver][1] = cache_get_field_float(i, "bizDeliverY");
		BusinessData[i][bizDeliver][2] = cache_get_field_float(i, "bizDeliverZ");
		BusinessData[i][bizShipment] = cache_get_field_int(i, "bizShipment");
		BusinessData[i][bizInterior] = cache_get_field_int(i, "bizInterior");
		BusinessData[i][bizExterior] = cache_get_field_int(i, "bizExterior");
		BusinessData[i][bizExteriorVW] = cache_get_field_int(i, "bizExteriorVW");
		BusinessData[i][bizLocked] = cache_get_field_int(i, "bizLocked");
		BusinessData[i][bizVault] = cache_get_field_int(i, "bizVault");
		BusinessData[i][bizProducts] = cache_get_field_int(i, "bizProducts");
        BusinessData[i][bizLoginFee] = cache_get_field_int(i, "bizLoginFee");


		for (new j = 0; j < 20; j ++)
		{
			format(str, 32, "bizPrice%d", j + 1);
			BusinessData[i][bizPrices][j] = cache_get_field_int(i, str);
		}
		Business_Refresh(i);
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists])
	{
		if (BusinessData[i][bizType] == 5) {
			format(str, sizeof(str), "SELECT * FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_tquery(g_iHandle, str, "Business_LoadCars", "d", i);
		}
		else if (BusinessData[i][bizType] == 6) {
			format(str, sizeof(str), "SELECT * FROM `pumps` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_tquery(g_iHandle, str, "Pump_Load", "d", i);
		}
	}
	return 1;
}

forward House_Load();
public House_Load()
{
	static
	    rows,
	    fields,
		str[128];


	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_HOUSES)
	{
		HouseData[i][houseExists] = true;
		HouseData[i][houseLights] = true;

		HouseData[i][houseID] = cache_get_field_int(i, "houseID");
		HouseData[i][houseOwner] = cache_get_field_int(i, "houseOwner");
		HouseData[i][housePrice] = cache_get_field_int(i, "housePrice");

		cache_get_field_content(i, "houseAddress", HouseData[i][houseAddress], g_iHandle, 32);
		cache_get_field_content(i, "evsahibi", HouseData[i][houseOwnerName], g_iHandle, 32);
		HouseData[i][housePos][0] = cache_get_field_float(i, "housePosX");
		HouseData[i][housePos][1] = cache_get_field_float(i, "housePosY");
		HouseData[i][housePos][2] = cache_get_field_float(i, "housePosZ");
		HouseData[i][housePos][3] = cache_get_field_float(i, "housePosA");
		HouseData[i][houseInt][0] = cache_get_field_float(i, "houseIntX");
		HouseData[i][houseInt][1] = cache_get_field_float(i, "houseIntY");
		HouseData[i][houseInt][2] = cache_get_field_float(i, "houseIntZ");
		HouseData[i][houseInt][3] = cache_get_field_float(i, "houseIntA");
  		HouseData[i][houseInterior] = cache_get_field_int(i, "houseInterior");
  		HouseData[i][houseBirlik] = cache_get_field_int(i, "houseBirlik");
		HouseData[i][houseExterior] = cache_get_field_int(i, "houseExterior");
		HouseData[i][houseExteriorVW] = cache_get_field_int(i, "houseExteriorVW");
        HouseData[i][houseLocked] = cache_get_field_int(i, "houseLocked");
        HouseData[i][houseMoney] = cache_get_field_int(i, "houseMoney");

        HouseData[i][houseKiralayan] = cache_get_field_int(i, "houseKiralayan");
	    HouseData[i][houseKiralanabilir] = cache_get_field_int(i, "houseKiralanabilir");
	    HouseData[i][houseKiraZaman] = cache_get_field_int(i, "houseKiraZaman");
	    HouseData[i][houseKiraSure] = cache_get_field_int(i, "houseKiraSure");
	    HouseData[i][houseKiraUcret] = cache_get_field_int(i, "houseKiraUcret");
        HouseData[i][houseAnahtar] = cache_get_field_int(i, "houseAnahtar");
        HouseData[i][houseLevel] = cache_get_field_int(i, "houseLevel");

    	HouseData[i][garajTip] = cache_get_field_int(i, "garajTip");
    	HouseData[i][garajKilit] = cache_get_field_int(i, "garajKilit");
     	HouseData[i][garajPos][0] = cache_get_field_float(i, "garajPosX");
		HouseData[i][garajPos][1] = cache_get_field_float(i, "garajPosY");
		HouseData[i][garajPos][2] = cache_get_field_float(i, "garajPosZ");
		HouseData[i][garajPos][3] = cache_get_field_float(i, "garajPosA");

        HouseData[i][houseGardolap][0] = cache_get_field_int(i, "houseGardolap1");
        HouseData[i][houseGardolap][1] = cache_get_field_int(i, "houseGardolap2");
        HouseData[i][houseGardolap][2] = cache_get_field_int(i, "houseGardolap3");

        for (new j = 0; j < 10; j ++)
		{
            format(str, 24, "houseWeapon%d", j + 1);
            HouseData[i][houseWeapons][j] = cache_get_field_int(i, str);

            format(str, 24, "houseAmmo%d", j + 1);
            HouseData[i][houseAmmo][j] = cache_get_field_int(i, str);
		}


  		House_Refresh(i);
	}
	for (new i = 0; i < MAX_HOUSES; i ++) if (HouseData[i][houseExists]) {
		format(str, sizeof(str), "SELECT * FROM `housestorage` WHERE `ID` = '%d'", HouseData[i][houseID]);

		mysql_tquery(g_iHandle, str, "OnLoadStorage", "d", i);

		format(str, sizeof(str), "SELECT * FROM `furniture` WHERE `ID` = '%d'", HouseData[i][houseID]);

		mysql_tquery(g_iHandle, str, "OnLoadFurniture", "d", i);
	}
	return 1;
}

forward ServerGPS_Load();
public ServerGPS_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_SERVER_LOCATIONS)
	{
		cache_get_field_content(i, "slocName", ServerLocationData[i][slocName], g_iHandle, 32);
		ServerLocationData[i][slocExists] = true;
	    ServerLocationData[i][slocID] = cache_get_field_int(i, "slocID");
	    ServerLocationData[i][slocPos][0] = cache_get_field_float(i, "slocX");
	    ServerLocationData[i][slocPos][1] = cache_get_field_float(i, "slocY");
	    ServerLocationData[i][slocPos][2] = cache_get_field_float(i, "slocZ");
	}
	return 1;
}


stock Car_GetRealID(carid)
{
	if (carid == -1 || !CarData[carid][carExists] || CarData[carid][carVehicle] == INVALID_VEHICLE_ID)
	    return INVALID_VEHICLE_ID;

	return CarData[carid][carVehicle];
}

stock Car_GetID(vehicleid)
{
	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && CarData[i][carVehicle] == vehicleid) {
	    return i;
	}
	return -1;
}

stock Car_Spawn(carid, display = 0)
{
    CarData[carid][carDisplay] = true;
	if (carid != -1 && CarData[carid][carExists])
	{
		if (IsValidVehicle(CarData[carid][carVehicle]))
		    DestroyVehicle(CarData[carid][carVehicle]);

		if (CarData[carid][carColor1] == -1)
		    CarData[carid][carColor1] = random(127);

		if (CarData[carid][carColor2] == -1)
		    CarData[carid][carColor2] = random(127);

		CarData[carid][carVehicle] = CreateVehicle(CarData[carid][carModel], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2], CarData[carid][carPos][3], CarData[carid][carColor1], CarData[carid][carColor2], (CarData[carid][carOwner] != 0) ? (-1) : (1200000));

		if(CarData[carid][carOwner] != 0 && CarData[carid][carMeslek] == -1 && !display && CarData[carid][carKiralik] <= 0 && CarData[carid][carPrice] <= 0)
		{
		    CarData[carid][carDisplay] = true;
		    SetVehicleVirtualWorld(CarData[carid][carVehicle], 0);
		}

		CarLastPos[CarData[carid][carVehicle]][0] = CarData[carid][carPos][0];
		CarLastPos[CarData[carid][carVehicle]][1] = CarData[carid][carPos][1];
		CarLastPos[CarData[carid][carVehicle]][2] = CarData[carid][carPos][2];

		new plaka[24];
		if(CarData[carid][carFaction] == 1)
		{
		    format(plaka, 24, "{3300CC}%s", CarData[carid][carPlaka]);
			SetVehicleNumberPlate(CarData[carid][carVehicle], plaka);
		}
		if(CarData[carid][carFaction] == 4)
		{
		    format(plaka, 24, "{FFFF00}%s", CarData[carid][carPlaka]);
			SetVehicleNumberPlate(CarData[carid][carVehicle], plaka);
		}
		else { SetVehicleNumberPlate(CarData[carid][carVehicle], CarData[carid][carPlaka]); }

		new modelid = GetVehicleModel(CarData[carid][carVehicle]);
		new vehicleid = CarData[carid][carVehicle];
		if (modelid == 601) SetVehicleHealth(vehicleid, 3000);
		/*
		if(CarData[carid][carHurda])
		{
			static
			    tires[4];

			GetVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], tires[3]);
		 	UpdateVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], 15);
		}*/

		if(CarData[carid][carGaleri] && CarData[carid][carPrice] > 0)
		{
		    if(IsValidDynamic3DTextLabel(GaleriLabel[CarData[carid][carVehicle]]))
			DestroyDynamic3DTextLabel(GaleriLabel[CarData[carid][carVehicle]]);

			new galeristr[256];
			format(galeristr, 256, ""G"[ %s ]\n{2ECC71}(%s)", ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(CarData[carid][carPrice]));
	 		GaleriLabel[CarData[carid][carVehicle]] = CreateDynamic3DTextLabelEx(galeristr, -1, 0.0, 0.0, 0.5, 50.0, INVALID_PLAYER_ID, CarData[carid][carVehicle], 1, 50.0);
		}
        if(CarData[carid][carFaction] == 1 && modelid == 560)
		{
				CoreVehicles[vehicleid][vehFlasorObjesi][0] = CreateDynamicObject(19620, -0.06660, 0.15090, 0.85950,   0.00000, 0.00000, 0.00000);
				CoreVehicles[vehicleid][vehFlasorObjesi][1] = CreateDynamicObject(19797, -0.22650, 2.58640, -0.20630,   0.00000, 0.00000, -180.00000);
				CoreVehicles[vehicleid][vehFlasorObjesi][2] = CreateDynamicObject(19797, 0.25350, 2.58640, -0.20630,   0.00000, 180.00000, -180.00000);

				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][0], vehicleid,  -0.06660, 0.15090, 0.85950,   0.00000, 0.00000, 0.00000);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][1], vehicleid, -0.22650, 2.58640, -0.20630,   0.00000, 0.00000, -180.00000);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][2], vehicleid, 0.25350, 2.58640, -0.20630,   0.00000, 180.00000, -180.00000);

	    }
	    /*else if(CarData[carid][carMeslek] == 3)
		{
		CoreVehicles[vehicleid][vehFlasorObjesi][0] = CreateDynamicObject(19308, 10.0, 10.0, 10.0, 0, 0, 0);
		AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][0], vehicleid, -0.0, -0.39, 0.88,   0.0, 0.0, 0.0);
		}*/
       	else if(CarData[carid][carFaction] == 1 && modelid == 482)
		{
		    CoreVehicles[vehicleid][vehFlasorObjesi][0] = CreateDynamicObject(19797, 0.11843, 2.45834, -0.21420,   0.00000, 0.00000, -185.00000);
			CoreVehicles[vehicleid][vehFlasorObjesi][1] = CreateDynamicObject(19797, -0.14151, 2.45042, -0.21420,   0.00000, 0.00000, 185.00000);
			CoreVehicles[vehicleid][vehFlasorObjesi][2] = CreateDynamicObject(19797, -0.42078, 2.42196, -0.21420,   0.00000, 0.00000, 185.00000);
			CoreVehicles[vehicleid][vehFlasorObjesi][3] = CreateDynamicObject(19797, 0.37890, 2.41980, -0.21420,   0.00000, 0.00000, -185.00000);
            CoreVehicles[vehicleid][vehFlasorObjesi][4] = CreateDynamicObject(19620, -0.02100, -2.55000, -0.62090,   -98.00000, 0.00000, -180.00000);
            CoreVehicles[vehicleid][vehFlasorObjesi][5] = CreateDynamicObject(19787, -0.04037, -0.56790, 0.84900,   -90.00000, -90.00000, 0.00000);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][0], vehicleid, 0.11843, 2.45834, -0.21420,   0.00000, 0.00000, -185.00000);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][1], vehicleid, -0.14151, 2.45042, -0.21420,   0.00000, 0.00000, 185.00000);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][2], vehicleid, -0.42078, 2.42196, -0.21420,   0.00000, 0.00000, 185.00000);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][3], vehicleid, 0.37890, 2.41980, -0.21420,   0.00000, 0.00000, -185.00000);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][4], vehicleid, -0.02100, -2.55000, -0.62090,   -98.00000, 0.00000, -180.00000);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][5], vehicleid,  -0.04037, -0.56790, 0.84900,   -90.00000, -90.00000, 0.00000);

	    }
     	else if(CarData[carid][carFaction] == 1 && modelid == 437)
		{
		    CoreVehicles[vehicleid][vehFlasorObjesi][0] = CreateDynamicObject(19419, 0.06280, 4.27780, 2.03430,   0.00000, 0.00000, 0.00000);
			CoreVehicles[vehicleid][vehFlasorObjesi][1] = CreateDynamicObject(19620, -0.01820, 5.53880, -0.16090,   -98.00000, 0.00000, 0.00000);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][0], vehicleid,0.06280, 4.27780, 2.03430,   0.00000, 0.00000, 0.00000);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][1], vehicleid,  -0.01820, 5.53880, -0.16090,   -98.00000, 0.00000, 0.00000);
	    }
	    else if(CarData[carid][carFaction] == 1 && modelid == 541)
		{
		    CoreVehicles[vehicleid][vehFlasorObjesi][0] =CreateDynamicObject(19620, -0.00083, 2.31463, -0.16090,   -100.00000, 0.00000, 0.00000);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehFlasorObjesi][0], vehicleid,-0.00083, 2.31463, -0.16090,   -100.00000, 0.00000, 0.00000);
	    }



        if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
        {
            if (CarData[carid][carPaintjob] != -1)
            {
                ChangeVehiclePaintjob(CarData[carid][carVehicle], CarData[carid][carPaintjob]);
			}
			if (CarData[carid][carLocked])
			{
			    new
					engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
			    SetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			for (new i = 0; i < 14; i ++)
			{
			    if (CarData[carid][carMods][i]) AddVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);
			}
			AracIlan(CarData[carid][carVehicle]);
   			ResetVehicle(CarData[carid][carVehicle]);
			return 1;
		}
	}
	return 0;
}

forward Car_Load();
public Car_Load()
{
	static
	    rows,
	    fields,
		str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_CARS)
	{
	    CarData[i][carExists] = true;
	    CarData[i][carID] = cache_get_field_int(i, "carID");
	    CarData[i][carModel] = cache_get_field_int(i, "carModel");
	    CarData[i][carOwner] = cache_get_field_int(i, "carOwner");
	    CarData[i][carPos][0] = cache_get_field_float(i, "carPosX");
	    CarData[i][carPos][1] = cache_get_field_float(i, "carPosY");
	    CarData[i][carPos][2] = cache_get_field_float(i, "carPosZ");
	    CarData[i][carPos][3] = cache_get_field_float(i, "carPosR");
	    CarData[i][carColor1] = cache_get_field_int(i, "carColor1");
	    CarData[i][carColor2] = cache_get_field_int(i, "carColor2");
	    CarData[i][carPaintjob] = cache_get_field_int(i, "carPaintjob");
	    CarData[i][carLocked] = cache_get_field_int(i, "carLocked");
	    CarData[i][carImpounded] = cache_get_field_int(i, "carImpounded");
	    CarData[i][carImpoundPrice] = cache_get_field_int(i, "carImpoundPrice");
        CarData[i][carFaction] = cache_get_field_int(i, "carFaction");
        CarData[i][carMeslek] = cache_get_field_int(i, "carMeslek");
        CarData[i][carAnahtar] = cache_get_field_int(i, "carAnahtar");
        CarData[i][carKiralik] = cache_get_field_int(i, "carKiralik");
        CarData[i][carKiraZaman] = cache_get_field_int(i, "carKiraZaman");
        CarData[i][carKiraUcret] = cache_get_field_int(i, "carKiraUcret");
        CarData[i][carPrice] = cache_get_field_int(i, "carPrice");
        CarData[i][carBirlik] = cache_get_field_int(i, "carBirlik");
        CarData[i][carDistance] = cache_get_field_int(i, "carDistance");
        cache_get_field_content(i, "carPlaka", CarData[i][carPlaka], g_iHandle, 24);
   		CarData[i][carImmobiliser] = cache_get_field_int(i, "carImmo");
		CarData[i][carKilitSeviye] = cache_get_field_int(i, "carKilitSeviye");
		CarData[i][carAlarm] = cache_get_field_int(i, "carAlarm");
  		CarData[i][carHurda] = cache_get_field_int(i, "carHurda");
        CarData[i][carVergi] = cache_get_field_int(i, "carVergi");

		for (new j = 0; j < 14; j ++)
		{
		    if (j < 5)
		    {
		        format(str, sizeof(str), "carWeapon%d", j + 1);
		        CarData[i][carWeapons][j] = cache_get_field_int(i, str);

		        format(str, sizeof(str), "carAmmo%d", j + 1);
		        CarData[i][carAmmo][j] = cache_get_field_int(i, str);
	        }
	        format(str, sizeof(str), "carMod%d", j + 1);
	        CarData[i][carMods][j] = cache_get_field_int(i, str);
	    }
	    Car_Spawn(i);
	}
	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		format(str, sizeof(str), "SELECT * FROM `carstorage` WHERE `ID` = '%d'", CarData[i][carID]);

		mysql_tquery(g_iHandle, str, "OnLoadCarStorage", "d", i);
	}
	return 1;
}

stock IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}

stock RemoveFromVehicle(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		static
		    Float:fX,
	    	Float:fY,
	    	Float:fZ;

		GetPlayerPos(playerid, fX, fY, fZ);
		JBC_SetPlayerPos(playerid, fX, fY, fZ + 1.5);
	}
	return 1;
}

stock GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
	    return i;
	}
	return -1;
}

stock GetVehicleFromBehind(vehicleid)
{
	static
	    Float:fCoords[7];

	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	for (new i = 1; i != MAX_VEHICLES; i ++) if (i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if (floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
			return i;
	}
	return INVALID_VEHICLE_ID;
}

stock GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}
forward OpenCrate(playerid, crateid);
public OpenCrate(playerid, crateid)
{
	if (Crate_Nearest(playerid) != crateid || !CrateData[crateid][crateExists] || !IsPlayerSpawnedEx(playerid) || !PlayerData[playerid][pOpeningCrate])
	    return 0;

    PlayerData[playerid][pOpeningCrate] = 0;

	ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);

	if (Inventory_Items(playerid) >= MAX_INVENTORY - 4)
	    return SendErrorMessage(playerid, "Envanterde 4 boþ yer olmasý gereklidir.");

//	Inventory_Add(playerid, "Kokain Tohumu", 1575, 20);
	Inventory_Add(playerid, "Marijuana Tohumu", 1578, 20);
	Inventory_Add(playerid, "Skunk Tohumu", 1577, 10);
	Inventory_Add(playerid, "Steroid", 1241, 5);

	Crate_Delete(crateid);
	SendServerMessage(playerid, "Tohumlar envantere eklendi.");
	return 1;
}

forward CraftParts(playerid, crateid);
public CraftParts(playerid, crateid)
{
	if (!CrateData[crateid][crateExists] || !IsPlayerSpawnedEx(playerid) || !PlayerData[playerid][pCrafting])
	    return 0;

    PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pCarryCrate] = -1;

    TogglePlayerControllable(playerid, 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

    RemovePlayerAttachedObject(playerid, 4);
    Log_Write("logs/craft_log.txt", "[%s] %s has crafted a %s crate.", ReturnDate(), ReturnName(playerid, 0), Crate_GetType(CrateData[crateid][crateType]));
    PlayerData[playerid][pOpeningCrate] = false;
	switch (CrateData[crateid][crateType])
	{
	    case 1:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 4)
	            return SendErrorMessage(playerid, "Envanterinde 4 boþ yer olmasý gereklidir.");

			Inventory_Add(playerid, "Golf Club", 333, 1);
			Inventory_Add(playerid, "Knife", 335, 1);
			Inventory_Add(playerid, "Shovel", 337, 1);
			Inventory_Add(playerid, "Katana", 339, 1);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Parcalar envantere eklendi.");
		}
	    case 2:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 2)
	            return SendErrorMessage(playerid, "Envanterinde 2 boþ yer olmasý gereklidir.");

			Inventory_Add(playerid, "Colt 45", 346, 1);
			Inventory_Add(playerid, "Desert Eagle", 348, 1);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Parcalar envantere eklendi.");
		}
		case 3:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 3)
	            return SendErrorMessage(playerid, "Envanterinde 3 boþ yer olmasý gereklidir.");

			Inventory_Add(playerid, "Micro SMG", 352, 1);
			Inventory_Add(playerid, "Tec-9", 372, 1);
			Inventory_Add(playerid, "MP5", 353, 1);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Parcalar envantere eklendi.");
		}
		case 4:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 2)
	            return SendErrorMessage(playerid, "Envanterinde 2 boþ yer olmasý gereklidir.");

			Inventory_Add(playerid, "Shotgun", 349, 1);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Parcalar envantere eklendi.");
		}
		case 5:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 3)
	            return SendErrorMessage(playerid, "Envanterinde 3 boþ yer olmasý gereklidir.");

			Inventory_Add(playerid, "AK-47", 355, 1);
			Inventory_Add(playerid, "Rifle", 357, 1);
			Inventory_Add(playerid, "Sniper", 358 ,1);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Parcalar envantere eklendi.");
		}
	}
	return 1;
}

forward FirstAidUpdate(playerid);
public FirstAidUpdate(playerid)
{
	static
	    Float:health;

	GetPlayerHealth(playerid, health);

    if (!IsPlayerInAnyVehicle(playerid) && GetPlayerAnimationIndex(playerid) != 1508)
    	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

	if (health >= 95.0)
	{
	    CanDegistir(playerid, 100.0);
	    SendServerMessage(playerid, "Ýlkyardým kiti kullanýldý.");

		if (!IsPlayerInAnyVehicle(playerid)) {
	        PlayerData[playerid][pLoopAnim] = true;
			ShowPlayerFooter(playerid, "Animasyonu durdurmak icin ~y~SPACE~w~ tusuna basin.");
		}
        PlayerData[playerid][pBleeding] = 0;
		PlayerData[playerid][pBleedTime] = 0;

		PlayerData[playerid][pFirstAid] = false;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
	else {
	    CanDegistir(playerid, floatadd(health, 4.0));
	}
	return 1;
}

forward RepairCar(playerid, vehicleid);
public RepairCar(playerid, vehicleid)
{
	RepairVehicle(vehicleid);
	GameTextForPlayer(playerid, " ", 1, 3);
    CoreVehicles[vehicleid][vehRepairing] = false;
	PlayerData[playerid][pRepairTime] = gettime() + 60;
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s aracý tamir etti.", ReturnName(playerid, 0));
    SetPVarInt(playerid, "VehicleRepair", 1);
	return 1;
}

forward Business_LoadCars(bizid);
public Business_LoadCars(bizid)
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		DealershipCars[bizid][i][vehID] = cache_get_field_int(i, "vehID");
		DealershipCars[bizid][i][vehModel] = cache_get_field_int(i, "vehModel");
		DealershipCars[bizid][i][vehPrice] = cache_get_field_int(i, "vehPrice");
	}
	return 1;
}
forward OnLoadCCTVs(); public OnLoadCCTVs()
{
	new
		rows = cache_get_row_count(), id, cctvName[MAX_CCTV_NAME];
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			id = Iter_Free(CCTVIter);
			if(id != -1)
			{
				CCTVInfo[id][ID] = cache_get_field_content_int(i, "ID");
				cache_get_field_content(i, "cctv_name", cctvName);
				strcpy(CCTVInfo[id][cctv_Name], cctvName, MAX_CCTV_NAME);

				CCTVInfo[id][cctv_X] = cache_get_field_content_float(i, "cctv_x");
				CCTVInfo[id][cctv_Y] = cache_get_field_content_float(i, "cctv_y");
				CCTVInfo[id][cctv_Z] = cache_get_field_content_float(i, "cctv_z");

				CCTVInfo[id][cctv_rotX] = cache_get_field_content_float(i, "cctv_rot_x");
				CCTVInfo[id][cctv_rotY] = cache_get_field_content_float(i, "cctv_rot_y");
				CCTVInfo[id][cctv_rotZ] = cache_get_field_content_float(i, "cctv_rot_z");

				CCTVInfo[id][cctv_VW] = cache_get_field_content_int(i, "cctv_vw");
				CCTVInfo[id][cctv_Interior] = cache_get_field_content_int(i, "cctv_interior");
				CCTVInfo[id][cctv_Faction] = cache_get_field_content_int(i, "cctv_faction");

				CCTVInfo[id][cctv_Object] = CreateDynamicObject(1886, CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z], CCTVInfo[id][cctv_rotX], CCTVInfo[id][cctv_rotY], CCTVInfo[id][cctv_rotZ], CCTVInfo[id][cctv_VW]);

				Iter_Add(CCTVIter, id);
			}
		}
	}
	printf("[OnLoadCCTVs] They were loaded %d CCTV.", Iter_Count(CCTVIter));
	return 1;
}
forward OnCCTVCreated(id); public OnCCTVCreated(id)
{
	CCTVInfo[id][ID] = cache_insert_id();
	return SaveCCTV(id);
}
forward OnLoadFurniture(houseid);
public OnLoadFurniture(houseid)
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((id = Furniture_GetFreeID()) != -1) {
	    FurnitureData[id][furnitureExists] = true;
	    FurnitureData[id][furnitureHouse] = houseid;

	    cache_get_field_content(i, "furnitureName", FurnitureData[id][furnitureName], g_iHandle, 32);

	    FurnitureData[id][furnitureID] = cache_get_field_int(i, "furnitureID");
	    FurnitureData[id][furnitureModel] = cache_get_field_int(i, "furnitureModel");
	    FurnitureData[id][furniturePos][0] = cache_get_field_float(i, "furnitureX");
	    FurnitureData[id][furniturePos][1] = cache_get_field_float(i, "furnitureY");
	    FurnitureData[id][furniturePos][2] = cache_get_field_float(i, "furnitureZ");
	    FurnitureData[id][furnitureRot][0] = cache_get_field_float(i, "furnitureRX");
	    FurnitureData[id][furnitureRot][1] = cache_get_field_float(i, "furnitureRY");
	    FurnitureData[id][furnitureRot][2] = cache_get_field_float(i, "furnitureRZ");

	    Furniture_Refresh(id);
	}
	return 1;
}

Furniture_GetCount(houseid)
{
	new count;

	for (new i = 0; i < MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
	    count++;
	}
	return count;
}

Furniture_GetFreeID()
{
	for (new i = 0; i != MAX_FURNITURE; i ++) if (!FurnitureData[i][furnitureExists]) {
	    return i;
	}
	return -1;
}

Furniture_Refresh(furnitureid)
{
	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
	    if (IsValidDynamicObject(FurnitureData[furnitureid][furnitureObject]))
	        DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);

	    FurnitureData[furnitureid][furnitureObject] = CreateDynamicObject(
			FurnitureData[furnitureid][furnitureModel],
			FurnitureData[furnitureid][furniturePos][0],
			FurnitureData[furnitureid][furniturePos][1],
			FurnitureData[furnitureid][furniturePos][2],
			FurnitureData[furnitureid][furnitureRot][0],
			FurnitureData[furnitureid][furnitureRot][1],
			FurnitureData[furnitureid][furnitureRot][2],
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID] + 5000,
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseInterior]
		);
	}
	return 1;
}

Furniture_Save(furnitureid)
{
	static
	    string[300];

	format(string, sizeof(string), "UPDATE `furniture` SET `furnitureModel` = '%d', `furnitureName` = '%s', `furnitureX` = '%.4f', `furnitureY` = '%.4f', `furnitureZ` = '%.4f', `furnitureRX` = '%.4f', `furnitureRY` = '%.4f', `furnitureRZ` = '%.4f' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
	    FurnitureData[furnitureid][furnitureModel],
	    FurnitureData[furnitureid][furnitureName],
	    FurnitureData[furnitureid][furniturePos][0],
	    FurnitureData[furnitureid][furniturePos][1],
	    FurnitureData[furnitureid][furniturePos][2],
	    FurnitureData[furnitureid][furnitureRot][0],
	    FurnitureData[furnitureid][furnitureRot][1],
	    FurnitureData[furnitureid][furnitureRot][2],
	    HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID],
	    FurnitureData[furnitureid][furnitureID]
	);
	return mysql_tquery(g_iHandle, string);
}

Furniture_Add(houseid, name[], modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0)
{
	static
	    string[64],
		id = -1;

 	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	if ((id = Furniture_GetFreeID()) != -1)
	{
	    FurnitureData[id][furnitureExists] = true;
	    format(FurnitureData[id][furnitureName], 32, name);

        FurnitureData[id][furnitureHouse] = houseid;
	    FurnitureData[id][furnitureModel] = modelid;
	    FurnitureData[id][furniturePos][0] = x;
	    FurnitureData[id][furniturePos][1] = y;
	    FurnitureData[id][furniturePos][2] = z;
	    FurnitureData[id][furnitureRot][0] = rx;
	    FurnitureData[id][furnitureRot][1] = ry;
	    FurnitureData[id][furnitureRot][2] = rz;

	    Furniture_Refresh(id);

		format(string, sizeof(string), "INSERT INTO `furniture` (`ID`) VALUES(%d)", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string, "OnFurnitureCreated", "d", id);

		return id;
	}
	return -1;
}

Furniture_Delete(furnitureid)
{
	static
	    string[72];

	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
	    format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d' AND `furnitureID` = '%d'", HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID], FurnitureData[furnitureid][furnitureID]);
		mysql_tquery(g_iHandle, string);

		FurnitureData[furnitureid][furnitureExists] = false;
		FurnitureData[furnitureid][furnitureModel] = 0;

		DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);
	}
	return 1;
}

forward OnLoadCarStorage(carid);
public OnLoadCarStorage(carid)
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		CarStorage[carid][i][cItemExists] = true;
		CarStorage[carid][i][cItemID] = cache_get_field_int(i, "itemID");
		CarStorage[carid][i][cItemModel] = cache_get_field_int(i, "itemModel");
		CarStorage[carid][i][cItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, sizeof(str));
		strpack(CarStorage[carid][i][cItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadStorage(houseid);
public OnLoadStorage(houseid)
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		HouseStorage[houseid][i][hItemExists] = true;
		HouseStorage[houseid][i][hItemID] = cache_get_field_int(i, "itemID");
		HouseStorage[houseid][i][hItemModel] = cache_get_field_int(i, "itemModel");
		HouseStorage[houseid][i][hItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, sizeof(str));
		strpack(HouseStorage[houseid][i][hItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadBackpack(id);
public OnLoadBackpack(id)
{
	static
	    rows,
	    fields,
		itemid = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((itemid = Backpack_GetFreeItem()) != -1) {
		BackpackItems[itemid][bItemExists] = true;
		BackpackItems[itemid][bItemBackpack] = id;
		BackpackItems[itemid][bItemID] = cache_get_field_int(i, "itemID");
		BackpackItems[itemid][bItemModel] = cache_get_field_int(i, "itemModel");
		BackpackItems[itemid][bItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", BackpackItems[itemid][bItemName], g_iHandle, 32);
	}
	return 1;
}
SaveCCTV(id)
{
	new query[512];
	mysql_format(handle_mysql, query, sizeof query, "UPDATE `cctv` SET `cctv_name` = '%s', `cctv_faction` = '%d', `cctv_x` = '%f', `cctv_y` = '%f', `cctv_z` = '%f', `cctv_rot_x` = '%f', `cctv_rot_y` = '%f', `cctv_rot_z` = '%f', `cctv_vw` = '%d', `cctv_interior` = '%d' WHERE `ID` = '%d'",
		CCTVInfo[id][cctv_Name],
		CCTVInfo[id][cctv_Faction],
		CCTVInfo[id][cctv_X],
		CCTVInfo[id][cctv_Y],
		CCTVInfo[id][cctv_Z],
		CCTVInfo[id][cctv_rotX],
		CCTVInfo[id][cctv_rotY],
		CCTVInfo[id][cctv_rotZ],
		CCTVInfo[id][cctv_VW],
		CCTVInfo[id][cctv_Interior],
		CCTVInfo[id][ID]);
	mysql_query(handle_mysql, query);
	return 1;
}
CreateCCTV(playerid, name[], factionid)
{
	new id = Iter_Free(CCTVIter);
	if(id != -1)
	{
		new
			Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);

		CCTVInfo[id][cctv_X] = x;
		CCTVInfo[id][cctv_Y] = y;
		CCTVInfo[id][cctv_Z] = z;

		CCTVInfo[id][cctv_rotX] = 0.0;
		CCTVInfo[id][cctv_rotY] = 0.0;
		CCTVInfo[id][cctv_rotZ] = 0.0;

		CCTVInfo[id][cctv_Faction] = factionid;

		CCTVInfo[id][cctv_VW] = GetPlayerVirtualWorld(playerid);
		CCTVInfo[id][cctv_Interior] = GetPlayerInterior(playerid);
		strcpy(CCTVInfo[id][cctv_Name], name, MAX_CCTV_NAME);

		CCTVInfo[id][cctv_Object] = CreateDynamicObject(1886, CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z], CCTVInfo[id][cctv_rotX], CCTVInfo[id][cctv_rotY], CCTVInfo[id][cctv_rotZ], CCTVInfo[id][cctv_VW]);

		Iter_Add(CCTVIter, id);
		mysql_tquery(handle_mysql, "INSERT INTO `cctv` (`cctv_x`) VALUES (0)", "OnCCTVCreated", "d", id);
	}
	return id;
}
DeleteCCTV(playerid, id)
{
	if(!Iter_Contains(CCTVIter, id)) return SendClientMessage(playerid, 0xFF6347FF, "The ID of the typed CCTV is nonexistent. (Use Server ID)");

	new
		query[128], str[128];
	mysql_format(handle_mysql, query, sizeof query, "DELETE FROM `cctv` WHERE `ID` = '%d'", CCTVInfo[id][ID]);
	mysql_query(handle_mysql, query);

	format(str, sizeof str, "AdmCmd: CCTV (ServerID: #%d - DatabaseID: #%d) successfully deleted.", id, CCTVInfo[id][ID]);
	SendClientMessage(playerid, 0xFF6347FF, str);

	CCTVInfo[id][cctv_X] = CCTVInfo[id][cctv_Y] = CCTVInfo[id][cctv_Z] =
	CCTVInfo[id][cctv_rotX] = CCTVInfo[id][cctv_rotY] = CCTVInfo[id][cctv_rotZ] = 0.0;
	CCTVInfo[id][cctv_Object] = DestroyDynamicObject(CCTVInfo[id][cctv_Object]);

	CCTVInfo[id][cctv_VW] = CCTVInfo[id][cctv_Interior] =
	CCTVInfo[id][cctv_Faction] = CCTVInfo[id][ID] = -1;

	Iter_Remove(CCTVIter, id);
	return 1;
}
EditCCTV(playerid, id)
{
	if(!Iter_Contains(CCTVIter, id)) return SendClientMessage(playerid, 0xFF6347FF, "The ID of the typed CCTV is nonexistent. (Use Server ID)");
	if(CCTV_inEditing[playerid]) return SendClientMessage(playerid, 0xFF6347FF, "You're already changing the position of a CCTV.");
	CCTV_inEditing[playerid] = 1;
	CCTV_ID[playerid] = id;
	EditDynamicObject(playerid, CCTVInfo[id][cctv_Object]);

	new str[128];
	format(str, sizeof str, "AdmCmd: You are editing the position of CCTV: Server ID (#%d) - Database ID: (#%d)", id, CCTVInfo[id][ID]);
	SendClientMessage(playerid, 0xFF6347FF, str);
	SendClientMessage(playerid, 0xFF6347FF, "[V:RP] You can complete the editing by pressing the FLOPPY, or cancel by pressing ESC.");
	return 1;
}
CancelEditCCTV(playerid, id)
{
	CCTV_inEditing[playerid] = 0;
	CCTV_ID[playerid] = -1;
	SetDynamicObjectPos(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z]);
	SetDynamicObjectRot(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_rotX], CCTVInfo[id][cctv_rotY], CCTVInfo[id][cctv_rotZ]);
	return 1;
}
ChangeCCTVName(playerid, id, name[])
{
	if(!Iter_Contains(CCTVIter, id)) return SendClientMessage(playerid, 0xFF6347FF, "The ID of the typed CCTV is nonexistent. (Use Server ID)");
	new str[128];
	strcpy(CCTVInfo[id][cctv_Name], name, MAX_CCTV_NAME);
	format(str, sizeof str, "AdmCmd: CCTV (#%d) renamed: %s.", id, name);
	SendClientMessage(playerid, 0xFF6347FF, str);
	return 1;
}
ChangeCCTVFaction(playerid, id, factionid)
{
	if(!Iter_Contains(CCTVIter, id)) return SendClientMessage(playerid, 0xFF6347FF, "The ID of the typed CCTV is nonexistent. (Use Server ID)");
	new str[128];
	format(str, sizeof str, "AdmCmd: Faction of CCTV (#%d) modified faction ID #%d.", id, factionid);
	SendClientMessage(playerid, 0xFF6347FF, str);
	CCTVInfo[id][cctv_Faction] = factionid;
	return 1;
}
MoveCCTV(playerid, id)
{
	if(!Iter_Contains(CCTVIter, id)) return SendClientMessage(playerid, 0xFF6347FF, "The ID of the typed CCTV is nonexistent. (Use Server ID)");
	new
		Float: x, Float: y, Float: z, str[128];
	GetPlayerPos(playerid, x, y, z);

	CCTVInfo[id][cctv_X] = x;
	CCTVInfo[id][cctv_Y] = y + 0.5;
	CCTVInfo[id][cctv_Z] = z;

	CCTVInfo[id][cctv_rotX] = 0.0;
	CCTVInfo[id][cctv_rotY] = 0.0;
	CCTVInfo[id][cctv_rotZ] = 0.0;

	CCTVInfo[id][cctv_VW] = GetPlayerVirtualWorld(playerid);
	CCTVInfo[id][cctv_Interior] = GetPlayerInterior(playerid);
	format(str, sizeof str, "AdmCmd: CCTV (#%d) moved to your current location.", id);
	SendClientMessage(playerid, 0xFF6347FF, str);

	SetDynamicObjectPos(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z]);
	SetDynamicObjectRot(CCTVInfo[id][cctv_Object], CCTVInfo[id][cctv_rotX], CCTVInfo[id][cctv_rotY], CCTVInfo[id][cctv_rotZ]);

	SaveCCTV(id);
	return 1;
}
ShowPlayerCCTVMenu(playerid)
{
	new
		str_long[2048], str[MAX_CCTV_NAME];
	foreach(new i : CCTVIter)
	{
		//if(PLAYER FACTION ID == CCTVInfo[id][cctv_Faction])
		format(str, sizeof str, "%s\n", CCTVInfo[i][cctv_Name]);
		strcat(str_long, str);
	}
	TogglePlayerControllable(playerid, 1);
	Dialog_Show(playerid, DIALOG_SHOW_CCTV, DIALOG_STYLE_LIST, "CCTV", str_long, "Izle", "Cik");
	return 1;
}
PlayerViewCCTV(playerid, id)
{
	new str[128],
		Float: x, Float: y, Float: z, Float: angle;
	inCCTV[playerid] = 1;

	GetPlayerPos(playerid, x, y, z);
	CCTV_oldSkin[playerid] = GetPlayerSkin(playerid);

	CCTV_oldX[playerid] = x;
	CCTV_oldY[playerid] = y;
	CCTV_oldZ[playerid] = z;
	CCTV_oldAngle[playerid] = angle;

	SetPlayerPos(playerid, CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z]);
	SetPlayerVirtualWorld(playerid, 0);
	TogglePlayerSpectating(playerid, 1);
	AttachCameraToDynamicObject(playerid, CCTVInfo[id][cctv_Object]);

	format(str, sizeof str, "%s adlý bölgeyi izlemeye baþladýn!", CCTVInfo[id][cctv_Name]);
	SendClientMessage(playerid, 0xFF6347FF, str);
	SendClientMessage(playerid, 0xFF6347FF, "[V:RP] Çýkmak için /cctvcik");
	return 1;
}
PlayerCancelCCTV(playerid)
{
	TogglePlayerSpectating(playerid, 0);
	SetPlayerPos(playerid, CCTV_oldX[playerid], CCTV_oldY[playerid], CCTV_oldZ[playerid]);
	SetPlayerFacingAngle(playerid, CCTV_oldAngle[playerid]);
	SetPlayerVirtualWorld(playerid, CCTV_oldVW[playerid]);
	SetPlayerInterior(playerid, CCTV_oldInterior[playerid]);
	SetPlayerSkin(playerid, CCTV_oldSkin[playerid]);

	CCTV_oldX[playerid] = CCTV_oldY[playerid] = CCTV_oldZ[playerid] = 0.0;
	CCTV_oldVW[playerid] = CCTV_oldInterior[playerid] = inCCTV[playerid] = 0;
	CCTV_oldSkin[playerid] = -1;
	return 1;
}

House_Save(houseid)
{
	static
	    query[2024];

	format(query, sizeof(query), "UPDATE `houses` SET `houseOwner` = '%d', `housePrice` = '%d', `houseAddress` = '%s', `housePosX` = '%.4f', `housePosY` = '%.4f', `housePosZ` = '%.4f', `housePosA` = '%.4f', `houseIntX` = '%.4f', `houseIntY` = '%.4f', `houseIntZ` = '%.4f', `houseIntA` = '%.4f', `houseInterior` = '%d', `houseExterior` = '%d', `houseExteriorVW` = '%d'",
	    HouseData[houseid][houseOwner],
	    HouseData[houseid][housePrice],
	    SQL_ReturnEscaped(HouseData[houseid][houseAddress]),
	    HouseData[houseid][housePos][0],
	    HouseData[houseid][housePos][1],
	    HouseData[houseid][housePos][2],
	    HouseData[houseid][housePos][3],
	    HouseData[houseid][houseInt][0],
	    HouseData[houseid][houseInt][1],
	    HouseData[houseid][houseInt][2],
	    HouseData[houseid][houseInt][3],
        HouseData[houseid][houseInterior],
        HouseData[houseid][houseExterior],
        HouseData[houseid][houseExteriorVW]
	);
	for (new i = 0; i < 10; i ++) {
		format(query, sizeof(query), "%s, `houseWeapon%d` = '%d', `houseAmmo%d` = '%d'", query, i+1, HouseData[houseid][houseWeapons][i], i +1, HouseData[houseid][houseAmmo][i]);
	}
	format(query, sizeof(query), "%s, `houseLocked` = '%d', `houseMoney` = '%d', `garajTip` = '%d', `garajKilit` = '%d', `garajPosX` = '%.4f', `garajPosY` = '%.4f', `garajPosZ` = '%.4f', `garajPosA` = '%.4f', `houseKiralayan` = '%d', `houseKiralanabilir` = '%d', `houseKiraZaman` = '%d', `houseKiraSure` = '%d', `houseKiraUcret` = '%d', `houseBirlik` = '%d', `houseAnahtar` = '%d', `houseGardolap1` = '%d', `houseGardolap2` = '%d',`houseGardolap3` = '%d',`houseLevel` = '%d' WHERE `houseID` = '%d'",
	    query,
	    HouseData[houseid][houseLocked],
	    HouseData[houseid][houseMoney],
	    HouseData[houseid][garajTip],
	    HouseData[houseid][garajKilit],
        HouseData[houseid][garajPos][0],
	    HouseData[houseid][garajPos][1],
	    HouseData[houseid][garajPos][2],
	    HouseData[houseid][garajPos][3],
	    HouseData[houseid][houseKiralayan],
	    HouseData[houseid][houseKiralanabilir],
	    HouseData[houseid][houseKiraZaman],
	    HouseData[houseid][houseKiraSure],
	    HouseData[houseid][houseKiraUcret],
	    HouseData[houseid][houseBirlik],
	    HouseData[houseid][houseAnahtar],
	    HouseData[houseid][houseGardolap][0],
	    HouseData[houseid][houseGardolap][1],
	    HouseData[houseid][houseGardolap][2],
	    HouseData[houseid][houseLevel],
        HouseData[houseid][houseID]
	);
	format(HouseData[houseid][houseOwnerName], 24, GetHouseOwner(houseid));
	return mysql_tquery(g_iHandle, query);
}

/*House_GetCount(playerid)
{
	new count = 0;

    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && House_IsOwner(playerid, i)) {
	    count++;
	}
	return count;
}*/

KontraktVarmi(playerid)
{
    for (new i = 0; i != MAX_KONTRAKT; i ++) if (Kontraktlar[playerid][i][kontraktVarmi])
	{
	    return 1;
	}
	return 0;
}

House_Inside(playerid)
{
	if (PlayerData[playerid][pHouse] != -1)
	{
	    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseData[i][houseInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

House_GarajInside(playerid)
{
	if (PlayerData[playerid][pHouse] != -1)
	{
	    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == PlayerData[playerid][pHouse] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}

Gate_NearestEx(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, 10, GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}

Arrest_Nearest(playerid)
{
    for (new i = 0; i != MAX_ARREST_POINTS; i ++) if (ArrestData[i][arrestExists] && IsPlayerInRangeOfPoint(playerid, 4.0, ArrestData[i][arrestPos][0], ArrestData[i][arrestPos][1], ArrestData[i][arrestPos][2]))
	{
		if (GetPlayerInterior(playerid) == ArrestData[i][arrestInterior] && GetPlayerVirtualWorld(playerid) == ArrestData[i][arrestWorld])
			return i;
	}
	return -1;
}

Pump_Nearest(playerid)
{
    for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PumpData[i][pumpPos][0], PumpData[i][pumpPos][1], PumpData[i][pumpPos][2]) && PumpData[i][pumpExists]) {
	    return i;
	}
	return -1;
}


Obje_Nearest(playerid)
{
    for (new i = 0; i != MAX_OBJECT; i ++) if (ObjectData[i][objectVarmi] && IsPlayerInRangeOfPoint(playerid, 4.0, ObjectData[i][objectPos][0], ObjectData[i][objectPos][1], ObjectData[i][objectPos][2])) {
	    return i;
	}
	return -1;
}
Plant_Nearest(playerid)
{
    for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PlantData[i][plantPos][0], PlantData[i][plantPos][1], PlantData[i][plantPos][2]))
	{
		if (GetPlayerInterior(playerid) == PlantData[i][plantInterior] && GetPlayerVirtualWorld(playerid) == PlantData[i][plantWorld])
			return i;
	}
	return -1;
}
Plant_Delete(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `plants` WHERE `plantID` = '%d'", PlantData[plantid][plantID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		    DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		    DestroyDynamicObject(PlantData[plantid][plantObject]);

	    PlantData[plantid][plantExists] = false;
		PlantData[plantid][plantID] = 0;
	    PlantData[plantid][plantDrugs] = 0;
	}
	return 1;
}


Plant_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (!PlantData[i][plantExists])
	    {
	        PlantData[i][plantExists] = true;
	        PlantData[i][plantType] = type;
	        PlantData[i][plantDrugs] = 0;

	        PlantData[i][plantPos][0] = x;
	        PlantData[i][plantPos][1] = y;
	        PlantData[i][plantPos][2] = z;
	        PlantData[i][plantPos][3] = angle;
	        PlantData[i][plantInterior] = GetPlayerInterior(playerid);
	        PlantData[i][plantWorld] = GetPlayerVirtualWorld(playerid);

	        mysql_tquery(g_iHandle, "INSERT INTO `plants` (`plantType`) VALUES(0)", "OnPlantCreated", "d", i);
	        Plant_Refresh(i);
	        return i;
		}
	}
	return -1;
}

Plant_MaxGrams(type)
{
	new grams;

	switch (type)
	{
	    case 1: grams = 40; // Marijuana plant
	    case 2: grams = 30; // Cocaine plant
		case 3: grams = 25; // Heroin plant
		default: grams = 0;
	}
	return grams;
}

Plant_Save(plantid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `plants` SET `plantType` = '%d', `plantDrugs` = '%d', `plantX` = '%.4f', `plantY` = '%.4f', `plantZ` = '%.4f', `plantA` = '%.4f', `plantInterior` = '%d', `plantWorld` = '%d' WHERE `plantID` = '%d'",
        PlantData[plantid][plantType],
        PlantData[plantid][plantDrugs],
        PlantData[plantid][plantPos][0],
        PlantData[plantid][plantPos][1],
        PlantData[plantid][plantPos][2],
        PlantData[plantid][plantPos][3],
        PlantData[plantid][plantInterior],
        PlantData[plantid][plantWorld],
        PlantData[plantid][plantID]
	);
	return mysql_tquery(g_iHandle, query);
}

Plant_GetType(type)
{
	static
	    str[16];

    switch (type) {
    	case 1: str = "Marijuana";
    	case 2: str = "Kokain";
	    case 3: str = "Skunk";
	}
	return str;
}

Plant_Refresh(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
	    static
	        string[128];

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		    DestroyDynamicObject(PlantData[plantid][plantObject]);

		if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		    DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		PlantData[plantid][plantObject] = CreateDynamicObject(3409, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2] - 1.80, 0.0, 0.0, PlantData[plantid][plantPos][3], PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);

		format(string, sizeof(string), "[Tohum ID: %d]\n{FFFFFF}Tohum Tür: %s - Büyüme Oraný: %d/%d\n{FFFFFF}'/hasatet'", plantid, Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs], Plant_MaxGrams(PlantData[plantid][plantType]));
  		PlantData[plantid][plantText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2], 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);
	}
	return 1;
}

Crate_Highest(crateid)
{
	new
		Float:height = -1.0,
		id = -1;

    for (new i = 0; i != MAX_CRATES; i ++) if (i != id && CrateData[i][crateExists] && CrateData[i][crateVehicle] == INVALID_VEHICLE_ID && CrateData[i][cratePos][0] == CrateData[crateid][cratePos][0] && CrateData[i][cratePos][1] == CrateData[crateid][cratePos][1] && CrateData[i][cratePos][2] > CrateData[crateid][cratePos][2] && !IsCrateInUse(crateid))
	{
	    if (CrateData[i][cratePos][2] > height)
	    {
	        height = CrateData[i][cratePos][2];
	        id = i;
		}
	}
	return id;
}

Kereste_Birak(playerid, Float:radius = 0.0)
{
    static
		Float:x,
		Float:y,
		Float:z,
		Float:angle,
		id = -1;

	if ((id = PlayerData[playerid][pKereste]) != -1 && Keresteler[PlayerData[playerid][pKereste]][keresteVarmi])
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		if (radius != 0.0) {
		    x += radius * floatsin(-angle, degrees);
		    y += radius * floatcos(-angle, degrees);
		}
		Keresteler[id][keresteX] = x;
		Keresteler[id][keresteY] = y;
		Keresteler[id][keresteZ] = z-0.5;
		Keresteler[id][keresteA] = angle;
		Kereste_Yenile(id);
	}
	PlayerData[playerid][pKereste] = -1;
	RemovePlayerAttachedObject(playerid, 4);
	return 1;
}


Kereste_Highest(keresteid)
{
	new
		Float:height = -1.0,
		id = -1;

    for (new i = 0; i != MAX_KERESTE; i ++) if (i != id && Keresteler[i][keresteVarmi] && Keresteler[i][keresteVehicle] == INVALID_VEHICLE_ID && Keresteler[i][keresteX]  == Keresteler[keresteid][keresteX]  && Keresteler[i][keresteY]  == Keresteler[keresteid][keresteY]  && Keresteler[i][keresteZ] > Keresteler[keresteid][keresteZ])
	{
	    if (Keresteler[i][keresteZ] > height)
	    {
	        height = Keresteler[i][keresteZ];
	        id = i;
		}
	}
	return id;
}
ATM_Nearest(playerid)
{
    for (new i = 0; i != MAX_ATM_MACHINES; i ++) if (ATMData[i][atmExists] && IsPlayerInRangeOfPoint(playerid, 2.5, ATMData[i][atmPos][0], ATMData[i][atmPos][1], ATMData[i][atmPos][2]))
	{
		if (GetPlayerInterior(playerid) == ATMData[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMData[i][atmWorld])
			return i;
	}
	return -1;
}

Crate_Nearest(playerid, Float:radius = 2.5)
{
	if (PlayerData[playerid][pCarryCrate] != -1 && CrateData[PlayerData[playerid][pCarryCrate]][crateExists])
	    return PlayerData[playerid][pCarryCrate];

    for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && IsPlayerInRangeOfPoint(playerid, radius, CrateData[i][cratePos][0], CrateData[i][cratePos][1], CrateData[i][cratePos][2]))
	{
		if (GetPlayerInterior(playerid) == CrateData[i][crateInterior] && GetPlayerVirtualWorld(playerid) == CrateData[i][crateWorld])
			return i;
	}
	return -1;
}

House_Nearest(playerid)
{
    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]))
	{
		if (GetPlayerInterior(playerid) == HouseData[i][houseExterior] && GetPlayerVirtualWorld(playerid) == HouseData[i][houseExteriorVW])
			return i;
	}
	return -1;
}

House_GarajaYakinMi(playerid)
{
    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && IsPlayerInRangeOfPoint(playerid, 4.0, HouseData[i][garajPos][0], HouseData[i][garajPos][1], HouseData[i][garajPos][2]))
	{
		return i;
	}
	return -1;
}

House_Refresh(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
		if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		    DestroyDynamicPickup(HouseData[houseid][housePickup]);

		if (IsValidDynamic3DTextLabel(HouseData[houseid][garajText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][garajText3D]);

		if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		    DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

		if (IsValidDynamicPickup(HouseData[houseid][garajPickup]))
		    DestroyDynamicPickup(HouseData[houseid][garajPickup]);

		static
		    string[1024],
			durum[64];

		if (!HouseData[houseid][houseOwner]) {
			format(string, sizeof(string), "{FFFFFF}SATILIK EV!\n\n[Fiyat: {2ECC71}%s {9ACD32}]\n[Konum: {FFFFFF}%s {9ACD32}]", FormatNumber(HouseData[houseid][housePrice]), HouseData[houseid][houseAddress]);
            HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
		else {
			if (!HouseData[houseid][houseLocked]) format(durum, 64, "{FFFFFF}Durum: {00FF9A}Açýk{FFFFFF}");
			else format(durum, 64, "{FFFFFF}Durum: {FF0000}Kapalý{FFFFFF}");
  			if (HouseData[houseid][houseBirlik] == -1) {
				//format(string, sizeof(string), "{FFFF00}[%d seviye]\n\n[Sahip: {FFFFFF}%s {9ACD32}]\n[Adres: {FFFFFF}%s {9ACD32}]\n[Durum: %s {9ACD32}]", HouseData[houseid][houseLevel], HouseData[houseid][houseOwnerName], HouseData[houseid][houseAddress], durum);
				format(string, sizeof(string), "{FFFFFF}[{FFBE00}EV{FFFFFF}]\nSahip: %s\nMülk ID: %d\n%s",HouseData[houseid][houseOwnerName], houseid , durum);
				if(HouseData[houseid][houseKiralanabilir] && HouseData[houseid][houseKiralayan] == -1) strcat(string, "\n{FF00EA}Bu ev kiralýða açýk durumda.");
			}
			else {
			    if(GetFactionByID(HouseData[houseid][houseBirlik]) != -1) {
					//format(string, sizeof(string), "{FFFF00}[%d seviye]\n\n[Sahip Birlik ID: {FFFFFF}#%d {9ACD32}]\n[Adres: {FFFFFF}%s {9ACD32}]\n[Durum: %s {9ACD32}]", HouseData[houseid][houseLevel], GetFactionByID(HouseData[houseid][houseBirlik]), HouseData[houseid][houseAddress], durum);
					format(string, sizeof(string), "{54A8C4}(Interior: %d)\n{54A8C4}Mülk (ID: %d)\n{54A8C4}(Ev Birlik ID: %d)\n{54A8C4}(Adres: %s)\n{54A8C4}%s", HouseData[houseid][houseLevel], houseid, GetFactionByID(HouseData[houseid][houseBirlik]), HouseData[houseid][houseAddress], durum);
				} else {
                    HouseData[houseid][houseBirlik] = -1;
					House_Refresh(houseid);
				}
			}
			HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
		if (HouseData[houseid][garajTip] >= 1) {
			format(string, sizeof(string), "{9ACD32}[Bu garaj %d nolu eve ait.]\n {FFFFFF}Girmek için 'N' tuþuna basýn!", houseid);
            HouseData[houseid][garajText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, HouseData[houseid][garajPos][0], HouseData[houseid][garajPos][1], HouseData[houseid][garajPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,0);
            HouseData[houseid][garajPickup] = CreateDynamicPickup(2485, 23, HouseData[houseid][garajPos][0], HouseData[houseid][garajPos][1], HouseData[houseid][garajPos][2], 0,0);
		}
		if (!HouseData[houseid][houseOwner]) {

		    HouseData[houseid][housePickup] = CreateDynamicPickup(1273, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
        	//HouseData[houseid][houseMapIcon] = CreateDynamicMapIcon(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], (HouseData[houseid][houseOwner] != 0) ? (32) : (31), 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
		else if (HouseData[houseid][houseBirlik] != -1) {
		    HouseData[houseid][housePickup] = CreateDynamicPickup(1272, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
       		//HouseData[houseid][houseMapIcon] = CreateDynamicMapIcon(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 19, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
		else if (HouseData[houseid][houseOwner]) {
		    HouseData[houseid][housePickup] = CreateDynamicPickup(19523, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
       		//HouseData[houseid][houseMapIcon] = CreateDynamicMapIcon(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], (HouseData[houseid][houseOwner] != 0) ? (32) : (31), 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
	}
	return 1;
}




Car_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (CarData[i][carExists] && CarData[i][carOwner] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}

House_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_HOUSES; i ++)
	{
		if (HouseData[i][houseExists] && House_IsOwner(playerid, i))
   		{
   		    count++;
		}
	}
	return count;
}

Business_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_BUSINESSES; i ++)
	{
		if (BusinessData[i][bizExists] && Business_IsOwner(playerid, i))
   		{
   		    count++;
		}
	}
	return count;
}

Car_IsOwner(playerid, carid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((CarData[carid][carExists] && CarData[carid][carOwner] != 0) && CarData[carid][carOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}



Car_Anahtar(playerid, carid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if (CarData[carid][carAnahtar] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

House_Anahtar(playerid, houseid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if (HouseData[houseid][houseAnahtar] == PlayerData[playerid][pID])
		return 1;

	return 0;
}


Car_Birlik(playerid, carid)
{
    if(PlayerData[playerid][pFaction] == -1 || carid == -1) return 0;
    if (CarData[carid][carFaction] == 5 && CarData[carid][carBirlik] == FactionData[PlayerData[playerid][pFaction]][factionID])
		return 1;

	return 0;
}


Car_Meslek(playerid, carid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if (CarData[carid][carMeslek] == PlayerData[playerid][pJob])
		return 1;

	return 0;
}

Car_WeaponStorage(playerid, carid)
{
    if (!CarData[carid][carExists] || CarData[carid][carLocked])
	    return 0;

    static
	    string[164];

	string[0] = 0;

	for (new i = 0; i < 3; i ++)
	{
	    if (22 <= CarData[carid][carWeapons][i] <= 38)
	        format(string, sizeof(string), "%s%s - Mermi: %d\n", string, ReturnWeaponName(CarData[carid][carWeapons][i]), CarData[carid][carAmmo][i]);

		else
		    format(string, sizeof(string), "%s%s\n", string, (CarData[carid][carWeapons][i]) ? (ReturnWeaponName(CarData[carid][carWeapons][i])) : ("Bos Slot"));
	}
	Dialog_Show(playerid, Trunk, DIALOG_STYLE_LIST, "Araba Bagaj", string, "Seç", "{FF6347}Iptal");
	return 1;
}
Car_ShowTrunk(playerid, carid)
{
	static
	    string[MAX_CAR_STORAGE * 32],
		name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        format(string, sizeof(string), "%sBoþ Slot\n", string);

		else {
			strunpack(name, CarStorage[carid][i][cItemName]);

			if (CarStorage[carid][i][cItemQuantity] == 1) {
                format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, CarStorage[carid][i][cItemQuantity]);
		}
	}
	strcat(string, "Silahlar");

	PlayerData[playerid][pStorageSelect] = 0;
	Dialog_Show(playerid, CarStorage, DIALOG_STYLE_LIST, "Bagaj", string, "Seç", "{FF6347}Iptal");
	return 1;
}

Car_LSPDTrunk(playerid, carid)
{
	static
	    string[5 * 32];

    string[0] = 0;
    strcat(string, "Ad\tMermi\n");
	for (new i = 0; i < 5; i ++)
	{
	    if (CruiserData[carid][i][KalanMermi] <= 0)
	        format(string, sizeof(string), "%sBoþ Slot\n", string);

		else {
			if (CruiserData[carid][i][KalanMermi] == 1) {
                format(string, sizeof(string), "%s%s\n", string, CruiserData[carid][i][SlotAdi]);
			}
			else format(string, sizeof(string), "%s%s\t%d\n", string, CruiserData[carid][i][SlotAdi], CruiserData[carid][i][KalanMermi]);
		}
	}
	if(!Beanbag[carid])
	    strcat(string, "Beanbag Yuvasý {2ECC71}(Boþ)\n");
    else
	    strcat(string, "Beanbag Yuvasý {FF0000}(Dolu)\n");

    if(!CelikYelek[carid])
	    strcat(string, "Çelik Yelek Yuvasý {FF0000}(Boþ)\n");
    else
	    strcat(string, "Çelik Yelek Yuvasý {2ECC71}(Dolu)\n");

	if(!AgriKesici[carid])
	    strcat(string, "Aðrý Kesici {FF0000}(Var)\n");
    else
	    strcat(string, "Aðrý Kesici {2ECC71}(Yok)\n");

	SetPVarInt(playerid, "BBI", carid);
	Dialog_Show(playerid, LSPDCruiser, DIALOG_STYLE_TABLIST_HEADERS, "LSPD Cruiser - Silah Deposu", string, "Seç", "{FF6347}Iptal");
	return 1;
}


stock IsNearFactionLocker(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
	    return 0;

	if (IsPlayerInRangeOfPoint(playerid, 3.0, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2]) && GetPlayerInterior(playerid) == FactionData[factionid][factionLockerInt] && GetPlayerVirtualWorld(playerid) == FactionData[factionid][factionLockerWorld])
	    return 1;

	return 0;
}


stock KasayaYakinmi(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
	    return 0;

	if (IsPlayerInRangeOfPoint(playerid, 3.0, FactionData[factionid][factionKasaPos][0], FactionData[factionid][factionKasaPos][1], FactionData[factionid][factionKasaPos][2]) && GetPlayerInterior(playerid) == FactionData[factionid][factionKasaInt] && GetPlayerVirtualWorld(playerid) == FactionData[factionid][factionKasaWorld])
	    return 1;

	return 0;
}

stock GetBizByID(sqlid)
{
	for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == sqlid)
	    return i;

	return -1;
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
	    return i;

	return -1;
}

stock GetBizVWByID(sqlid)
{
	for (new i = 0; i != MAX_BUSÝNESS; i ++) if (BusinessData[i][bizExists] && FactionData[i][factionID] == sqlid)
	    return i;

	return -1;
}

stock MacID(sqlid)
{
	for (new i = 0; i != MAX_MAC; i ++) if (Maclar[i][macID] == sqlid)
	    return i;

	return -1;
}

IsyeriDegistir(playerid, id)
{
	if (id != -1 && BusinessData[id][bizExists])
	{
		PlayerData[playerid][pBizJob] = id;
		PlayerData[playerid][pBizJobID] = BusinessData[id][bizID];
		SQL_SaveCharacter(playerid);
	}
	return 1;
}
SetFaction(playerid, id)
{
	if (id != -1 && FactionData[id][factionExists])
	{
		PlayerData[playerid][pFaction] = id;
		PlayerData[playerid][pFactionID] = FactionData[id][factionID];
	}
	return 1;
}

SetFactionColor(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid != -1)
	{
		SetPlayerColor(playerid, RemoveAlpha(FactionData[factionid][factionColor]));
	} else {
	    SetPlayerColor(playerid, DEFAULT_COLOR);
	}
	return 0;
}

Faction_Update(factionid)
{
	if (factionid != -1 || FactionData[factionid][factionExists])
	{
	    foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
 			if (GetFactionType(i) == FACTION_GANG || (GetFactionType(i) != FACTION_GANG && PlayerData[i][pOnDuty]))
			 	SetFactionColor(i);
		}
	}
	return 1;
}

Faction_Refresh(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    if (FactionData[factionid][factionLockerPos][0] != 0.0 && FactionData[factionid][factionLockerPos][1] != 0.0 && FactionData[factionid][factionLockerPos][2] != 0.0)
	    {
		    static
		        string[128];

			if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
			    DestroyDynamicPickup(FactionData[factionid][factionPickup]);


			if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
			    DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

			FactionData[factionid][factionPickup] = CreateDynamicPickup(1239, 23, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);

			format(string, sizeof(string), "[Dolap %d]\n{FFFFFF}/dolap ile açabilirsin.", factionid);
	  		FactionData[factionid][factionText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], 5.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);
   		}
    	if (FactionData[factionid][factionKasaPos][0] != 0.0 && FactionData[factionid][factionKasaPos][1] != 0.0 && FactionData[factionid][factionKasaPos][2] != 0.0)
	    {
		    static
		        string[128];

			if (IsValidDynamicPickup(FactionData[factionid][factionKasa]))
			    DestroyDynamicPickup(FactionData[factionid][factionKasa]);

			if (IsValidDynamic3DTextLabel(FactionData[factionid][factionTextKasa]))
			    DestroyDynamic3DTextLabel(FactionData[factionid][factionTextKasa]);

			FactionData[factionid][factionKasa] = CreateDynamicPickup(1550, 23, FactionData[factionid][factionKasaPos][0], FactionData[factionid][factionKasaPos][1], FactionData[factionid][factionKasaPos][2], FactionData[factionid][factionKasaWorld], FactionData[factionid][factionKasaInt]);

			format(string, sizeof(string), "[Kasa %d]\n{FFFFFF}/kasaac ile açabilirsin.", factionid);
	  		FactionData[factionid][factionTextKasa] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, FactionData[factionid][factionKasaPos][0], FactionData[factionid][factionKasaPos][1], FactionData[factionid][factionKasaPos][2], 5.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, FactionData[factionid][factionKasaWorld], FactionData[factionid][factionKasaInt]);
   		}
	}

	return 1;
}

forward GymExp(playerid, kazanc);
stock GymExp(playerid, kazanc)
{
    GymButton[playerid] = 0; GymLoop[playerid] = 0; GymPointvariable[playerid] = 0; GymPointX[playerid] = 0;
    IsEquipmentUsed[MyEquipment[playerid]] = 0; MyEquipment[playerid] = 0;
	PlayerData[playerid][pKasEXP] = PlayerData[playerid][pKasEXP] + kazanc;
	ShowPlayerFooter(playerid, "~g~+~r~KAS EXP!");
	if(PlayerData[playerid][pKasSeviye] != 20 && PlayerData[playerid][pKasEXP] >= PlayerData[playerid][pKasSeviye]*1000)
	{
        PlayerData[playerid][pKasSeviye]++;
        PlayerData[playerid][pKasEXP] = 0;
		SendServerMessage(playerid, "Kas seviyen deðiþti! (Yeni kas seviye: %d)", PlayerData[playerid][pKasSeviye]);
	}
	return 1;
}
//====================================[EV SÝSTEMÝ]=========================================//
new
	EVTimer = -1,
 	EVData[MAX_EVS][e_EV],
	Iterator: EVs<MAX_EVS>,
	Iterator: EVKeys[MAX_PLAYERS]<MAX_EVS>,
	InEV[MAX_PLAYERS] = {INVALID_EV_ID, ...},
	SelectMode[MAX_PLAYERS] = {SELECT_MODE_NONE, ...},
	LastVisitedEV[MAX_PLAYERS] = {INVALID_EV_ID, ...},
	ListPage[MAX_PLAYERS] = {0, ...},
	bool: EditingFurniture[MAX_PLAYERS] = {false, ...};

new
    EVInteriors[][e_interior] = {
    // int name, x, y, z, intid
		{"Interior 1", 2233.4900, -1114.4435, 1050.8828, 5},
		{"Interior 2", 2196.3943, -1204.1359, 1049.0234, 6},
		{"Interior 3", 2318.1616, -1026.3762, 1050.2109, 9},
		{"Interior 4", 421.8333, 2536.9814, 10.0000, 10},
		{"Interior 5", 225.5707, 1240.0643, 1082.1406, 2},
		{"Interior 6", 2496.2087, -1692.3149, 1014.7422, 3},
		{"Interior 7", 226.7545, 1114.4180, 1080.9952, 5},
		{"Interior 8", 2269.9636, -1210.3275, 1047.5625, 10}
    };

new
	EVFurnitures[][e_furnituredata] = {
	// modelid, furniture name, price
	    {3111, "Building Plan", 500},
	    {2894, "Book", 20},
	    {2277, "Cat Picture", 100},
	    {1753, "Leather Couch", 150},
	    {1703, "Black Couch", 200},
	    {1255, "Lounger", 75},
	    {19581, "Frying Pan", 10},
	    {19584, "Sauce Pan", 12},
	    {19590, "Woozie's Sword", 1000},
	    {19525, "Wedding Cake", 50},
	    {1742, "Bookshelf", 80},
	    {1518, "TV 1", 130},
	    {19609, "Drum Kit", 500},
		{19787, "Small LCD TV", 2000},
		{19786, "Big LCD TV", 4000},
		{2627, "Treadmill", 130}
	};

new
	SAZones[][e_sazone] = {
		{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
		{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
		{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
		{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
		{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
		{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
		{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
		{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
		{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
		{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
		{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
		{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
		{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
		{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
		{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
		{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
		{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
		{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
		{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
		{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
		{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
		{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
		{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
		{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
		{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
		{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
		{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
		{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
		{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
		{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
		{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
		{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
		{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
		{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
		{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
		{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
		{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
		{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
		{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
		{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
		{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
		{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
		{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
		{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
		{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
		{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
		{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
		{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
		{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
		{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
		{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
		{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
		{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
		{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
		{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
		{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
		{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
		{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
		{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
		{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
		{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
		{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
		{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
		{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
		{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
		{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
		{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
		{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
		{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
		{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
		{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
		{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
		{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
		{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
		{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
		{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
		{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
		{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
		{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
		{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
		{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
		{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
		{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
		{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
		{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
		{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
		{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
		{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
		{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
		{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
		{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
		{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
		{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
		{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
		{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
		{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
		{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
		{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
		{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
		{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
		{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
		{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
		{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
		{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
		{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
		{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
		{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
		{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
		{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
		{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
		{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
		{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
		{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
		{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
		{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
		{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
		{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
		{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
		{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
		{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
		{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
		{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
		{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
		{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
		{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
		{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
		{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
		{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
		{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
		{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
		{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
		{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
		{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
		{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
		{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
		{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
		{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
		{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
		{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
		{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
		{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
		{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
		{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
		{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
		{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
		{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
		{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
		{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
		{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
		{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
		{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
		{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
		{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
		{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
		{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
		{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
		{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
		{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
		{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
		{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
		{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
		{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
		{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
		{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
		{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
		{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
		{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
		{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
		{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
		{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
		{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
		{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
		{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
		{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
		{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
		{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
		{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
		{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
		{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
		{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
		{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
		{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
		{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
		{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
		{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
		{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
		{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
		{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
		{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
		{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
		{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
		{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
		{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
		{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
		{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
		{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
		{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
		{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
		{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
		{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
		{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
		{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
		{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
		{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
		{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
		{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
		{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
		{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
		{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
		{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
		{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
		{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
		{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
		{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
		{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
		{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
		{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
		{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
		{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
		{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
		{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
		{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
		{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
		{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
		{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
		{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
		{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
		{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
		{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
		{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
		{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
		{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
		{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
		{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
		{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
		{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
		{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
		{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
		{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
		{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
		{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
		{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
		{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
		{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
		{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
		{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
		{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
		{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
		{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
		{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
		{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
		{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
		{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
		{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
		{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
		{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
		{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
		{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
		{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
		{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
		{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
		{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
		{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
		{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
		{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
		{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
		{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
		{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
		{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
		{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
		{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
		{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
		{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
		{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
		{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
		{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
		{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
		{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
		{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
		{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
		{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
		{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
		{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
		{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
		{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
		{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
		{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
		{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
		{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
		{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
		{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
		{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
		{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
		{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
		{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
		{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
		{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
		{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
		{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
		{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
		{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
		{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
		{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
		{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
		{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
		{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
		{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
		{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
		{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
		{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
		{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
		{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
		{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
		{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
		{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
		{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
		{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
		{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
		{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
		{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
		{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
		{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
		{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
		{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
		{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
		{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
		{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
		{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
		{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
		{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
		{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
		{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
		{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
		{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
		{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
		{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
		{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
		{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
		{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
		{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
		{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
		{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
		{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
		{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
		{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
		{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
		{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
		{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
		{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
		{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
		{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
		{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
		{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
		{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
		{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
		{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
		{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
		{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
		{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
		{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
		{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
		{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
		{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
		{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
		{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
	};

new
	LockNames[4][32] = {"{2ECC71}Not Locked", "{E74C3C}Password Locked", "{E74C3C}Requires Keys", "{E74C3C}Owner Only"},
	TransactionNames[2][16] = {"{E74C3C}Taken", "{2ECC71}Added"};

stock LoadEVKeys(playerid)
{
    Iter_Clear(EVKeys[playerid]);

    new query[72];
    mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM EVkeys WHERE Player='%e'", Player_GetName(playerid));
	mysql_tquery(g_iHandle, query, "GiveEVKeys", "i", playerid);
	return 1;
}

stock GetZoneName(Float: x, Float: y, Float: z)
{
	new zone[28];
 	for(new i = 0; i < sizeof(SAZones); i++)
 	{
		if(x >= SAZones[i][SAZONE_AREA][0] && x <= SAZones[i][SAZONE_AREA][3] && y >= SAZones[i][SAZONE_AREA][1] && y <= SAZones[i][SAZONE_AREA][4] && z >= SAZones[i][SAZONE_AREA][2] && z <= SAZones[i][SAZONE_AREA][5])
		{
		    strcat(zone, SAZones[i][SAZONE_NAME]);
		    return zone;
		}
	}

	strcat(zone, "Unknown");
	return zone;
}

stock GetCityName(Float: x, Float: y, Float: z)
{
	new city[28];
	for(new i = 356; i < sizeof(SAZones); i++)
	{
		if(x >= SAZones[i][SAZONE_AREA][0] && x <= SAZones[i][SAZONE_AREA][3] && y >= SAZones[i][SAZONE_AREA][1] && y <= SAZones[i][SAZONE_AREA][4] && z >= SAZones[i][SAZONE_AREA][2] && z <= SAZones[i][SAZONE_AREA][5])
		{
		    strcat(city, SAZones[i][SAZONE_NAME]);
		    return city;
		}
	}

	strcat(city, "San Andreas");
	return city;
}

stock convertNumber(value)
{
	// http://forum.sa-mp.com/showthread.php?p=843781#post843781
    new string[24];
    format(string, sizeof(string), "%d", value);

    for(new i = (strlen(string) - 3); i > (value < 0 ? 1 : 0) ; i -= 3)
    {
        strins(string[i], ",", 0);
    }

    return string;
}

stock RemovePlayerWeapon(playerid, weapon)
{
    new weapons[13], ammo[13];
    for(new i; i < 13; i++) GetPlayerWeaponData(playerid, i, weapons[i], ammo[i]);
    ResetPlayerWeapons(playerid);
    for(new i; i < 13; i++)
    {
        if(weapons[i] == weapon) continue;
        GivePlayerWeapon(playerid, weapons[i], ammo[i]);
    }

    return 1;
}

/*stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float: a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}*/
stock SendToEV(playerid, id)
{
    if(!Iter_Contains(EVs, id)) return 0;
    SetPVarInt(playerid, "EVPickupCooldown", gettime() + EV_COOLDOWN);
    InEV[playerid] = id;
	SetPlayerVirtualWorld(playerid, id);
 	SetPlayerInterior(playerid, EVInteriors[ EVData[id][Interior] ][intID]);
  	SetPlayerPos(playerid, EVInteriors[ EVData[id][Interior] ][intX], EVInteriors[ EVData[id][Interior] ][intY], EVInteriors[ EVData[id][Interior] ][intZ]);

	new string[128];
	format(string, sizeof(string), "Welcome to %s's EV, %s{FFFFFF}!", EVData[id][Owner], EVData[id][Name]);
	SendClientMessage(playerid, 0xFFFFFFFF, string);

	if(!strcmp(EVData[id][Owner], Player_GetName(playerid)))
	{
		EVData[id][LastEntered] = gettime();
		EVData[id][Save] = true;
		SendClientMessage(playerid, 0xFFFFFFFF, "Use {3498DB}/EV {FFFFFF}to open the EV menu.");
	}

	if(EVData[id][LockMode] == LOCK_MODE_NOLOCK && LastVisitedEV[playerid] != id)
	{
	    new query[128];
	    mysql_format(g_iHandle, query, sizeof(query), "INSERT INTO EVvisitors SET EVID=%d, Visitor='%e', Date=UNIX_TIMESTAMP()", id, Player_GetName(playerid));
		mysql_tquery(g_iHandle, query, "", "");
		LastVisitedEV[playerid] = id;
	}

	return 1;
}

stock ShowEVMenu(playerid)
{
	if(strcmp(EVData[ InEV[playerid] ][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");

	new string[256], id = InEV[playerid];
	format(string, sizeof(string), "EV Name: %s\nPassword: %s\nLock: %s\nEV Safe {2ECC71}(TL%s)\nFurnitures\nGuns\nVisitors\nKeys\nKick Everybody\nSell EV", EVData[id][Name], EVData[id][Password], LockNames[ EVData[id][LockMode] ], convertNumber(EVData[id][SafeMoney]));
	ShowPlayerDialog(playerid, DIALOG_EV_MENU, DIALOG_STYLE_LIST, EVData[id][Name], string, "Select", "Close");
	return 1;
}

stock ResetEV(id)
{
    if(!Iter_Contains(EVs, id)) return 0;
	format(EVData[id][Name], MAX_EV_NAME, "EV For Sale");
	format(EVData[id][Owner], MAX_PLAYER_NAME, "-");
	format(EVData[id][Password], MAX_EV_PASSWORD, "-");
	EVData[id][LockMode] = LOCK_MODE_NOLOCK;
	EVData[id][SalePrice] = EVData[id][SafeMoney] = EVData[id][LastEntered] = 0;
    EVData[id][Save] = true;

    new label[200];
    format(label, sizeof(label), "{2ECC71}EV For Sale (ID: %d)\n{FFFFFF}%s\n{F1C40F}Price: {2ECC71}TL%s", id, EVInteriors[ EVData[id][Interior] ][IntName], convertNumber(EVData[id][Price]));
	UpdateDynamic3DTextLabelText(EVData[id][EVLabel], 0xFFFFFFFF, label);
	Streamer_SetIntData(STREAMER_TYPE_PICKUP, EVData[id][EVPickup], E_STREAMER_MODEL_ID, 1273);
	Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, EVData[id][EVIcon], E_STREAMER_TYPE, 31);

    foreach(new i : Player)
    {
        if(InEV[i] == id)
        {
            SetPVarInt(i, "EVPickupCooldown", gettime() + EV_COOLDOWN);
        	SetPlayerVirtualWorld(i, 0);
	        SetPlayerInterior(i, 0);
	        SetPlayerPos(i, EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ]);
	        InEV[i] = INVALID_EV_ID;
        }

        if(Iter_Contains(EVKeys[i], id)) Iter_Remove(EVKeys[i], id);
   	}

    new query[64], data[e_furniture];
    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVguns WHERE EVID=%d", id);
    mysql_tquery(g_iHandle, query, "", "");

    for(new i, maxval = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= maxval; ++i)
    {
        if(!IsValidDynamicObject(i)) continue;
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
		if(data[SQLID] > 0 && data[EVID] == id) DestroyDynamicObject(i);
    }

    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVfurnitures WHERE EVID=%d", id);
    mysql_tquery(g_iHandle, query, "", "");

    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVvisitors WHERE EVID=%d", id);
    mysql_tquery(g_iHandle, query, "", "");

    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVkeys WHERE EVID=%d", id);
    mysql_tquery(g_iHandle, query, "", "");

    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVsafelogs WHERE EVID=%d", id);
    mysql_tquery(g_iHandle, query, "", "");
	return 1;
}

stock SaveEV(id)
{
    if(!Iter_Contains(EVs, id)) return 0;
	new query[256];
	mysql_format(g_iHandle, query, sizeof(query), "UPDATE EVs SET EVName='%e', EVOwner='%e', EVPassword='%e', EVSalePrice=%d, EVLock=%d, EVMoney=%d, LastEntered=%d WHERE ID=%d",
	EVData[id][Name], EVData[id][Owner], EVData[id][Password], EVData[id][SalePrice], EVData[id][LockMode], EVData[id][SafeMoney], EVData[id][LastEntered], id);
	mysql_tquery(g_iHandle, query, "", "");
	EVData[id][Save] = true;
	return 1;
}

stock UpdateEVLabel(id)
{
	if(!Iter_Contains(EVs, id)) return 0;
	new label[256];
	if(!strcmp(EVData[id][Owner], "-")) {
		format(label, sizeof(label), "{2ECC71}EV For Sale (ID: %d)\n{FFFFFF}%s\n{F1C40F}Price: {2ECC71}TL%s", id, EVInteriors[ EVData[id][Interior] ][IntName], convertNumber(EVData[id][Price]));
	}else{
		if(EVData[id][SalePrice] > 0) {
		    format(label, sizeof(label), "{E67E22}%s's EV For Sale (ID: %d)\n{FFFFFF}%s\n{FFFFFF}%s\n{F1C40F}Price: {2ECC71}TL%s", EVData[id][Owner], id, EVData[id][Name], EVInteriors[ EVData[id][Interior] ][IntName], convertNumber(EVData[id][SalePrice]));
		}else{
			format(label, sizeof(label), "{E67E22}%s's EV (ID: %d)\n{FFFFFF}%s\n{FFFFFF}%s\n%s\n{FFFFFF}%s", EVData[id][Owner], id, EVData[id][Name], EVInteriors[ EVData[id][Interior] ][IntName], LockNames[ EVData[id][LockMode] ], EVData[id][Address]);
		}
	}

	UpdateDynamic3DTextLabelText(EVData[id][EVLabel], 0xFFFFFFFF, label);
	return 1;
}

stock EV_PlayerInit(playerid)
{
    InEV[playerid] = LastVisitedEV[playerid] = INVALID_EV_ID;
    ListPage[playerid] = SelectMode[playerid] = SELECT_MODE_NONE;
    EditingFurniture[playerid] = false;
    LoadEVKeys(playerid);
	return 1;
}

stock OwnedEVs(playerid)
{
	#if LIMIT_PER_PLAYER != 0
    new count;

	foreach(new i : EVs) if(!strcmp(EVData[i][Owner], Player_GetName(playerid), true)) count++;
	return count;
	#else
	return 0;
	#endif
}

forward ResetAndSaveEVs();
forward LoadEVs();
forward LoadFurnitures();
forward GiveEVKeys(playerid);
forward EVSaleMoney(playerid);

public ResetAndSaveEVs()
{
	foreach(new i : EVs)
	{
	    if(EVData[i][LastEntered] > 0 && gettime()-EVData[i][LastEntered] > 604800) ResetEV(i);
	    if(EVData[i][Save]) SaveEV(i);
	}

	return 1;
}

public LoadEVs()
{
	new rows = cache_num_rows();
 	if(rows)
  	{
   		new id, loaded, for_sale, label[256];
		while(loaded < rows)
		{
  			id = cache_get_field_content_int(loaded, "ID");
	    	cache_get_field_content(loaded, "EVName", EVData[id][Name], .max_len = MAX_EV_NAME);
		    cache_get_field_content(loaded, "EVOwner", EVData[id][Owner], .max_len = MAX_PLAYER_NAME);
		    cache_get_field_content(loaded, "EVPassword", EVData[id][Password], .max_len = MAX_EV_PASSWORD);
		    EVData[id][EVX] = cache_get_field_content_float(loaded, "EVX");
		    EVData[id][EVY] = cache_get_field_content_float(loaded, "EVY");
		    EVData[id][EVZ] = cache_get_field_content_float(loaded, "EVZ");
		    EVData[id][Price] = cache_get_field_content_int(loaded, "EVPrice");
		    EVData[id][SalePrice] = cache_get_field_content_int(loaded, "EVSalePrice");
		    EVData[id][Interior] = cache_get_field_content_int(loaded, "EVInterior");
		    EVData[id][LockMode] = cache_get_field_content_int(loaded, "EVLock");
		    EVData[id][SafeMoney] = cache_get_field_content_int(loaded, "EVMoney");
		    EVData[id][LastEntered] = cache_get_field_content_int(loaded, "LastEntered");
			format(EVData[id][Address], MAX_EV_ADDRESS, "%d, %s, %s", id, GetZoneName(EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ]), GetCityName(EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ]));

	        if(strcmp(EVData[id][Owner], "-")) {
	            if(EVData[id][SalePrice] > 0) {
	                for_sale = 1;
				    format(label, sizeof(label), "{E67E22}%s's EV For Sale (ID: %d)\n{FFFFFF}%s\n{FFFFFF}%s\n{F1C40F}Price: {2ECC71}TL%s", EVData[id][Owner], id, EVData[id][Name], EVInteriors[ EVData[id][Interior] ][IntName], convertNumber(EVData[id][SalePrice]));
				}else{
				    for_sale = 0;
					format(label, sizeof(label), "{E67E22}%s's EV (ID: %d)\n{FFFFFF}%s\n{FFFFFF}%s\n%s\n{FFFFFF}%s", EVData[id][Owner], id, EVData[id][Name], EVInteriors[ EVData[id][Interior] ][IntName], LockNames[ EVData[id][LockMode] ], EVData[id][Address]);
				}
			}else{
			    for_sale = 1;
         		format(label, sizeof(label), "{2ECC71}EV For Sale (ID: %d)\n{FFFFFF}%s\n{F1C40F}Price: {2ECC71}TL%s", id, EVInteriors[ EVData[id][Interior] ][IntName], convertNumber(EVData[id][Price]));
	        }

			EVData[id][EVPickup] = CreateDynamicPickup((!for_sale) ? 19522 : 1273, 1, EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ]);
			EVData[id][EVIcon] = CreateDynamicMapIcon(EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ], (!for_sale) ? 32 : 31, 0);
			EVData[id][EVLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ]+0.35, 15.0, .testlos = 1);
			Iter_Add(EVs, id);
		    loaded++;
	    }

	    printf(" [EV System] Loaded %d EVs.", loaded);
	}

	return 1;
}

public LoadFurnitures()
{
	new rows = cache_num_rows();
 	if(rows)
  	{
   		new id, loaded, data[e_furniture];
     	while(loaded < rows)
      	{
       		data[SQLID] = cache_get_field_content_int(loaded, "ID");
         	data[EVID] = cache_get_field_content_int(loaded, "EVID");
         	data[ArrayID] = cache_get_field_content_int(loaded, "FurnitureID");
          	data[furnitureX] = cache_get_field_content_float(loaded, "FurnitureX");
           	data[furnitureY] = cache_get_field_content_float(loaded, "FurnitureY");
            data[furnitureZ] = cache_get_field_content_float(loaded, "FurnitureZ");
            data[furnitureRX] = cache_get_field_content_float(loaded, "FurnitureRX");
            data[furnitureRY] = cache_get_field_content_float(loaded, "FurnitureRY");
            data[furnitureRZ] = cache_get_field_content_float(loaded, "FurnitureRZ");

			id = CreateDynamicObject(
   				EVFurnitures[ data[ArrayID] ][ModelID],
       			data[furnitureX], data[furnitureY], data[furnitureZ],
          		data[furnitureRX], data[furnitureRY], data[furnitureRZ],
				cache_get_field_content_int(loaded, "FurnitureVW"), cache_get_field_content_int(loaded, "FurnitureInt")
			);

			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, data);
   			loaded++;
 		}

 		printf(" [EV System] Loaded %d furnitures.", loaded);
   	}

	return 1;
}

public GiveEVKeys(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	new rows = cache_num_rows();
 	if(rows)
  	{
   		new loaded;
     	while(loaded < rows)
      	{
       		Iter_Add(EVKeys[playerid], cache_get_field_content_int(loaded, "EVID"));
   			loaded++;
 		}
   	}

	return 1;
}

public EVSaleMoney(playerid)
{
    new rows = cache_num_rows();
 	if(rows)
  	{
   		new new_owner[MAX_PLAYER_NAME], price, string[128];
		for(new i; i < rows; i++)
		{
	    	cache_get_field_content(i, "NewOwner", new_owner);
		    price = cache_get_field_content_int(i, "Price");

			format(string, sizeof(string), "You sold a EV to %s for TL%s. (Transaction ID: #%d)", new_owner, convertNumber(price), cache_get_field_content_int(i, "ID"));
			SendClientMessage(playerid, -1, string);
			GiveMoney(playerid, price);
	    }

		new query[128];
	    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVsales WHERE OldOwner='%e'", Player_GetName(playerid));
	    mysql_tquery(g_iHandle, query, "", "");
	}

	return 1;
}

CMD:renkler(playerid, params[]) // CMD'Lerdne boþ bir yere knk
{
	ShowCarColorList(playerid,0,"Araç Renkleri","Kapat","");
	return 1;
}

CMD:pdgaraj(playerid, params[])
{

    if(!IsPlayerInRangeOfPoint(playerid, 4.1, 1588.4139,-1633.5620,13.3828))
        return SendErrorMessage(playerid, "LSPD garaj giriþine yakýn deðilsiniz.");

    if (GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "Bu komudu sadece Polisler kullanabilir.");

    if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    new vehicleid = GetPlayerVehicleID(playerid);

    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    JBC_SetPlayerPos(playerid, 2302.4751,2496.8899,3.2734);
    SetTimerEx("pdgarajtp", 2000, false, "ddd", playerid, vehicleid, GetPlayerVehicleSeat(playerid));
    ObjeleriYukle(playerid);
    return 1;
}

forward pdgarajtp(playerid, arac, koltuk);
public pdgarajtp(playerid, arac, koltuk)
{
    foreach(new i : Player) if(GetPlayerVehicleID(i) == arac) { PutPlayerInVehicle(i, arac, GetPlayerVehicleSeat(i)); }
    PutPlayerInVehicle(playerid, arac, koltuk);
	SetVehiclePos(arac, 2302.4751,2496.8899,3.2734);
    return 1;
}

CMD:pdgarajcik(playerid, params[])
{

    if(!IsPlayerInRangeOfPoint(playerid, 4.1, 2300.1941,2498.4851,3.2734))
        return SendErrorMessage(playerid, "LSPD garaj giriþine yakýn deðilsiniz.");

    if (GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "Bu komudu sadece Polisler kullanabilir.");

    if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    new vehicleid = GetPlayerVehicleID(playerid);

    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    JBC_SetPlayerPos(playerid, 1588.4139,-1633.5620,13.3828);
    SetTimerEx("pdgarajtp1", 2000, false, "ddd", playerid, vehicleid, GetPlayerVehicleSeat(playerid));
    ObjeleriYukle(playerid);
    return 1;
}

forward pdgarajtp1(playerid, arac, koltuk);
public pdgarajtp1(playerid, arac, koltuk)
{
    foreach(new i : Player) if(GetPlayerVehicleID(i) == arac) { PutPlayerInVehicle(i, arac, GetPlayerVehicleSeat(i)); }
    PutPlayerInVehicle(playerid, arac, koltuk);
    SetVehiclePos(arac, 1588.4139,-1633.5620,13.3828);
    return 1;
}

/*CMD:petmenu(playerid, params[])
{
if (PlayerData[playerid][pLevel] < 5)
		{
		    SendClientMessage(playerid,  COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Pet Sistemini 5 Level olmadan kullanamassýnýz!");
		    return 0;
		}

	   		 new dialog[512], string[56];
			if(strlen(PapaganInfo[playerid][papagan->Name]) < 1)
			{
			    format(string, sizeof string, "{27ae60}Kurt Köpeði satin al ($%d)\n", PAPAGAN_FIYAT);
			    strcat(dialog, string);
			    format(string, sizeof string, "{27ae60}Pitbull satin al ($%d)\n", PAPAGAN_FIYAT);
			    strcat(dialog, string);
			     format(string, sizeof string, "{27ae60}Sibirya kurdu satin al ($%d)\n", PAPAGAN_FIYAT);
			    strcat(dialog, string);
			     format(string, sizeof string, "{27ae60}Süs köpeði satin al ($%d)\n", PAPAGAN_FIYAT);
			    strcat(dialog, string);
			     format(string, sizeof string, "{27ae60}Doberman satin al ($%d)\n", PAPAGAN_FIYAT);
			    strcat(dialog, string);
			    format(string, sizeof string, "{27ae60}Kedi satin al ($%d)", PAPAGAN_FIYAT);
			    strcat(dialog, string);
			    ShowPlayerDialog(playerid, DIALOG_PAPAGAN, DIALOG_STYLE_LIST, "Pet Menü", dialog, "Sec", "Kapat");
		    }
		    if(strlen(PapaganInfo[playerid][papagan->Name]) > 0)
		    {
		        format(string, sizeof string, "Pet %s\n", (PapaganInfo[playerid][papagan->Called] == false) ? ("Cagir") : ("Gonder"));
			    strcat(dialog, string);
			    format(string, sizeof string, "Petin ismini deðiþtir ($%d)\n", PAPAGAN_NICK_FIYAT);
			    strcat(dialog, string);
			    strcat(dialog, "Emir ver! 'Gel' \n");
			    strcat(dialog, "Emir ver! 'Kos' \n");
			    strcat(dialog, "Mama Çeþitleri\n");
			    strcat(dialog, "Doðaya Sal (Pet Satilir)\n");
			    format(string, sizeof string, "%s Yonetim", PapaganInfo[playerid][papagan->Name]);
			    ShowPlayerDialog(playerid, DIALOG_PAPAGAN_YONETIM, DIALOG_STYLE_LIST, string, dialog, "Sec", "Kapat");
		    }
   return 1;
}*/
CMD:odakilit(playerid, params[])
{
	new ko = Otel_KiraladigiOda(playerid);
    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 2238.9555,-1170.6721,1029.7968) || OtelOdalari[ko][odaKiralayan] != PlayerData[playerid][pID] || ko == -1 || ko+500 != GetPlayerVirtualWorld(playerid))
        return SendErrorMessage(playerid, "Odanýzda deðilsiniz.");

	if(OtelOdalari[ko][odaKilit])
	{
	    OtelOdalari[ko][odaKilit] = false;
	    ShowPlayerFooter(playerid, "Kilit ~g~acildi~w~!");
	}
	else {
	    ShowPlayerFooter(playerid, "Kilit ~r~kapandi~w~!");
	    OtelOdalari[ko][odaKilit] = true;
	}
	return 1;
}

CMD:odaiptal(playerid, params[])
{
	new ko = Otel_KiraladigiOda(playerid);

    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 2238.9555,-1170.6721,1029.7968) || OtelOdalari[ko][odaKiralayan] != PlayerData[playerid][pID] || ko == -1 || ko+500 != GetPlayerVirtualWorld(playerid))
        return SendErrorMessage(playerid, "Odanýzda deðilsiniz.");

	Otel_OdaKapat(ko);
	SendServerMessage(playerid, "Anlaþma feshedildi.");
	return 1;
}

CMD:odacik(playerid, params[])
{

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2238.9555,-1170.6721,1029.7968) || GetPlayerVirtualWorld(playerid) < 500 || GetPlayerVirtualWorld(playerid) > 599)
        return SendErrorMessage(playerid, "Otel odasýnýn kapýsýnda deðilsiniz.");

    SetPlayerVirtualWorld(playerid, 1);
    SetPlayerInterior(playerid, 0);
    JBC_SetPlayerPos(playerid, 1714.9365,3300.3415,1204.8129);
    ObjeleriYukle(playerid);

	return 1;
}
CMD:posyazdir(playerid, params[])
{
	new Float:pos[4];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	SendServerMessage(playerid, "%.4f,%.4f,%.4f,%.4f", pos[0], pos[1], pos[2], pos[3]);
	return 1;
}

/*
CMD:paintball(playerid, params[])
{
	if (PlayerData[playerid][pTutorial] || PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawnedEx(playerid) || PlayerData[playerid][pCuffed])
	    return 1;


	if(!IsPlayerInRangeOfPoint(playerid, 6.0, PB_X, PB_Y, PB_Z)) return SendErrorMessage(playerid, "Paintball alanýnda deðilsin.");
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçta bu komutu kullanamazsýnýz.");
 	new string[1024], durum[256], veri[7][256];
	strcat(string, "Ad\tKatýlým\n");

	for(new i=0; i != MAX_PAINTBALL_ODA; i++) if(Paintball[i][odaVarmi])
	{
        format(veri[1], 24, "%d. %s", i, Paintball[i][odaAdi]);
	    format(veri[2], sizeof(veri), "%d/10", Paintball_Katilimci(i));
		format(durum, sizeof(durum), "{FF6347}%s\t%s\n", veri[1], veri[2]);
	    strcat(string, durum);
	}

    strcat(string, "{33CC33}Yeni oyun kur! [$50]");
    return Dialog_Show(playerid, Paintball, DIALOG_STYLE_TABLIST_HEADERS, "{2F4F4F}Paintball", string, "Tamam", "Kapat");
}
*/
CMD:pbayar(playerid, params[])
{
	if (PlayerData[playerid][pTutorial] || PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawnedEx(playerid) || PlayerData[playerid][pCuffed])
	    return 1;

    if(!IsPlayerInRangeOfPoint(playerid, 6.0, PB_X, PB_Y, PB_Z)) return SendErrorMessage(playerid, "Paintball alanýnda deðilsin.");
	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçta bu komutu kullanamazsýnýz.");
	if(PlayerData[playerid][pPaintball] == -1) return SendErrorMessage(playerid, "Sahibi olduðun oda yok.");
 	new id = PaintballOdasiVarmi(playerid), string[1024], durum[256], veri[256];
	strcat(string, "Ýþlem\tDurum\n");
	if(Paintball[id][odaSahip] == playerid) strcat(string, "{FF6347}Oyunu Baþlat\n");
	strcat(string, "{FF6347}Odadan Ayrýl\n");
	format(durum, sizeof(durum), "{FFFFFF}Oda NO:\t{33CC33}%d\n", id);
	strcat(string, durum);
	format(durum, sizeof(durum), "[+] {FFFFFF}Oda Adý:\t{33CC33}%s\n", Paintball[id][odaAdi]);
	strcat(string, durum);
	if(strlen(Paintball[id][odaSifre]) > 0) format(veri, sizeof(veri), Paintball[id][odaSifre]);
	else format(veri, sizeof(veri), "Hayýr");
	format(durum, sizeof(durum), "[+] {FFFFFF}Oda Þifresi:\t{33CC33}%s\n", Paintball[id][odaSifre]);
	strcat(string, durum);
	if(Paintball[id][odaTur] == 0) format(veri, sizeof(veri), "Belirlenmemiþ");
	if(Paintball[id][odaTur] == 1) format(veri, sizeof(veri), "DM");
	if(Paintball[id][odaTur] == 2) format(veri, sizeof(veri), "TDM");
	format(durum, sizeof(durum), "[+] {FFFFFF}Oda Türü:\t{33CC33}%s\n", veri);
	strcat(string, durum);
	format(durum, sizeof(durum), "{FFFFFF}Katýlýmcý Sayýsý:\t{33CC33}%d/10\n", Paintball_Katilimci(id));
	strcat(string, durum);
    return Dialog_Show(playerid, PaintballAyar, DIALOG_STYLE_TABLIST_HEADERS, "{2F4F4F}Paintball Oda Ayar", string, "Tamam", "Kapat");
}

CMD:pbcik(playerid, params[])
{
	if (PlayerData[playerid][pTutorial] || PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawnedEx(playerid) || PlayerData[playerid][pCuffed])
	    return 1;

	if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçta bu komutu kullanamazsýnýz.");
	if(PlayerData[playerid][pPaintball] == -1) return SendErrorMessage(playerid, "Sahibi olduðun oda yok.");

	Paintball_Ayril(playerid);
 	return 1;
}
Dialog:BahisTur(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(listitem == 0)
		{
			Dialog_Show(playerid, SupremeKazanc, DIALOG_STYLE_INPUT, "Kumarhane", "100$ ile 1000$ arasýnda bir miktar belirtiniz!", "Oyna", "Ýptal");
		}
		if(listitem == 1)
		{
			Dialog_Show(playerid, TekCiftOyna, DIALOG_STYLE_INPUT, "Kumarhane", "100$ ile 1000$ arasýnda bir miktar belirtiniz!", "Oyna", "Ýptal");
		}
	}
	return 1;
}
Dialog:DIALOG_SHOW_CCTV(playerid, response, lisitem, inputtext[])
{
	if(!response) return 1;
	PlayerViewCCTV(playerid, lisitem);
	return 1;
}
Dialog:SupremeKazanc(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(PlayerData[playerid][pMoney] < 100) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
		if(strval(inputtext) < 100 || strval(inputtext) > 1000) return Dialog_Show(playerid, SupremeKazanc, DIALOG_STYLE_INPUT, "Kumarhane", "100$ ile 1000$ arasýnda bir miktar belirtiniz!", "Oyna", "Ýptal");
		PlayerData[playerid][BahisPara] = strval(inputtext);
		new sayi = RandomEx(1,6);
		new oyuncusayi = RandomEx(1,6);

		if(sayi == oyuncusayi)
		{
  			SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
			SendServerMessage(playerid, "Kurpiyer bir zar attý ve {FF0000}%d {FFFFFF}geldi.", sayi);
			SendServerMessage(playerid, "Bir zar attýn ve {FF0000}%d {FFFFFF}geldi.", oyuncusayi);
			SendServerMessage(playerid, "Hiç bir kazanan olmadý!", PlayerData[playerid][BahisPara]);
			SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
		}
		else if(sayi > oyuncusayi)
		{
		    SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
			SendServerMessage(playerid, "Kurpiyer bir zar attý ve {FF0000}%d {FFFFFF}geldi.", sayi);
			SendServerMessage(playerid, "Bir zar attýn ve {FF0000}%d {FFFFFF}geldi.", oyuncusayi);
			SendServerMessage(playerid, "Üzgünüm, {338833}%d $ {FFFFFF}kaybettin.", PlayerData[playerid][BahisPara]);
			SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
			GiveMoney(playerid, -PlayerData[playerid][BahisPara]);
		}
		else
		{
		    SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
			SendServerMessage(playerid, "Kurpiyer bir zar attý ve {FF0000}%d {FFFFFF}geldi.", sayi);
			SendServerMessage(playerid, "Bir zar attýn ve {FF0000}%d {FFFFFF}geldi.", oyuncusayi);
			SendServerMessage(playerid, "Tebrikler, {338833}%d $ {FFFFFF}kazandýnýz!", PlayerData[playerid][BahisPara] * 2);
			SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
			GiveMoney(playerid, PlayerData[playerid][BahisPara]);
		}
	}
	return 1;
}

Dialog:TekCiftOyna(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(PlayerData[playerid][pMoney] < 100) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
	    if(strval(inputtext) < 100 || strval(inputtext) > 1000) return Dialog_Show(playerid, BahisOyna, DIALOG_STYLE_INPUT, "Kumarhane", "Oynamak için 100$ ile 1000$ arasýnda bir miktar giriniz!", "Oyna", "Iptal");
		new str[256], string[1024];
		PlayerData[playerid][BahisPara] = strval(inputtext);
		format(str, sizeof(str), "{FFFFFF}Bahise verdiðiniz miktar;{37C43A}%d$", PlayerData[playerid][BahisPara]);
		strcat(string, "{FFFFFF}Tek\n{FFFFFF}Çift");
		Dialog_Show(playerid, TekCiftKazanc, DIALOG_STYLE_LIST, str, string, "Seç", "Iptal");
	}
	return 1;
}
Dialog:TekCiftKazanc(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(listitem == 0) // tek
		{
		    new sayi = RandomEx(1,6);

			if(sayi == 1)
			{
				GiveMoney(playerid, PlayerData[playerid][BahisPara]); // bahise verdi?i parann iki katy
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve C%d {FFFFFF}geldi. Tebrikler {FF0000}%d$ {FFFFFF}kazandýnýz!", sayi, PlayerData[playerid][BahisPara] * 2);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
			if(sayi == 2)
			{
				GiveMoney(playerid, -PlayerData[playerid][BahisPara]); // para gider
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d geldi. Üzgünüm, {FF0000}%d$ kaybettiniz!", sayi, PlayerData[playerid][BahisPara]);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
			if(sayi == 3)
			{
				GiveMoney(playerid, PlayerData[playerid][BahisPara]); // bahise verdi?i parann iki katy
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d {FFFFFF}geldi. Tebrikler {FF0000}%d$ {FFFFFF}kazandýnýz!", sayi, PlayerData[playerid][BahisPara] * 2);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
			if(sayi == 4)
			{
				GiveMoney(playerid, -PlayerData[playerid][BahisPara]); // para gider
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d {FFFFFF}geldi. Üzgünüm, {FF0000}%d$ {FFFFFF}kaybettiniz!", sayi, PlayerData[playerid][BahisPara]);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
			if(sayi == 5)
			{
				GiveMoney(playerid, PlayerData[playerid][BahisPara]); // bahise verdi?i parann iki katy
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d {FFFFFF}geldi. Tebrikler {FF0000}%d$ {FFFFFF}kazandýnýz!", sayi, PlayerData[playerid][BahisPara] * 2);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
			if(sayi == 6)
			{
				GiveMoney(playerid, -PlayerData[playerid][BahisPara]); // para gider
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d {FFFFFF}geldi. Üzgünüm, {FF0000}%d$ {FFFFFF}kaybettiniz!", sayi, PlayerData[playerid][BahisPara]);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
		}
		if(listitem == 1) // çift
		{
		    new sayi = RandomEx(1,6);

			if(sayi == 1)
			{
				GiveMoney(playerid, -PlayerData[playerid][BahisPara]); // para gider
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d {FFFFFF}geldi. Üzgünüm, {FF0000}%d$ {FFFFFF}kaybettiniz!", sayi, PlayerData[playerid][BahisPara]);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
			if(sayi == 2)
			{
				GiveMoney(playerid, PlayerData[playerid][BahisPara]); // bahise verdi?i parann iki katy
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d {FFFFFF}geldi. Tebrikler {FF0000}%d$ {FFFFFF}kazandýnýz!", sayi, PlayerData[playerid][BahisPara] * 2);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
			if(sayi == 3)
			{
				GiveMoney(playerid, -PlayerData[playerid][BahisPara]); // para gider
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d {FFFFFF}geldi. Üzgünüm, {FF0000}%d$ {FFFFFF}kaybettiniz!", sayi, PlayerData[playerid][BahisPara]);
			 	SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
			if(sayi == 4)
			{
				GiveMoney(playerid, PlayerData[playerid][BahisPara]); // bahise verdi?i parann iki katy
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d {FFFFFF}geldi. Tebrikler {FF0000}%d$ {FFFFFF}kazandýnýz!", sayi, PlayerData[playerid][BahisPara] * 2);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
			if(sayi == 5)
			{
				GiveMoney(playerid, -PlayerData[playerid][BahisPara]); // para gider
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d {FFFFFF}geldi. Üzgünüm, {FF0000}%d$ {FFFFFF}kaybettiniz!", sayi, PlayerData[playerid][BahisPara]);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
			if(sayi == 6)
			{
				GiveMoney(playerid, PlayerData[playerid][BahisPara]); // bahise verdi?i parann iki katy
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				SendServerMessage(playerid, "Kurpiyer bir zar attý ve {338833}%d {FFFFFF}geldi. Tebrikler {FF0000}%d$ {FFFFFF}kazandýnýz!", sayi, PlayerData[playerid][BahisPara] * 2);
				SendServerMessage(playerid,"{528b8b}-------------------------------------------------------------------------");
				PlayerData[playerid][BahisPara] = 0;
			}
		}
	}
	return 1;
}

Dialog:RutbeYetkilendirmesi(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new factionid = PlayerData[playerid][pFaction];
		if (!strcmp(inputtext, "Birlikten Atma Seviyesi"))
		{
			new str[256];
			format(str, 256, "{FFFFFF}Birliðinizde hangi seviyenin oyuncu atma yetkisi olacaðýný yazýn:\nÞu anki minimum seviye: {228B22}%d", FactionData[factionid][factionBKS]);
		    Dialog_Show(playerid, BKS, DIALOG_STYLE_INPUT, "{72C425}» Birlikten Atma Seviyesini Deðiþtir", str, "Ayarla", "{FF6347}<< Geri");
		}
		if (!strcmp(inputtext, "Birliðe Alma Seviyesi"))
		{
			new str[256];
			format(str, 256, "{FFFFFF}Birliðinizde hangi seviyenin oyuncu alma yetkisi olacaðýný yazýn:\nÞu anki minimum seviye: {228B22}%d", FactionData[factionid][factionBAS]);
		    Dialog_Show(playerid, BAS, DIALOG_STYLE_INPUT, "{72C425}» Birliðe Alma Seviyesini Deðiþtir", str, "Ayarla", "{FF6347}<< Geri");
		}
		if (!strcmp(inputtext, "OOC Kanal Seviyesi"))
		{
			new str[256];
			format(str, 256, "{FFFFFF}Birliðinizde hangi seviyenin OOC chat kanalýný kullanma yetkisi olacaðýný yazýn:\nÞu anki minimum seviye: {228B22}%d", FactionData[factionid][factionBFS]);
		    Dialog_Show(playerid, BFS, DIALOG_STYLE_INPUT, "{72C425}» OOC Kanal Seviyesini Deðiþtir", str, "Ayarla", "{FF6347}<< Geri");
		}
		if (!strcmp(inputtext, "Birlik Aracý Yapma Seviyesi"))
		{
			new str[256];
			format(str, 256, "{FFFFFF}Birliðinizde hangi seviyenin kiþisel araçlarýný birlik aracý yapabileceðini yazýn:\nÞu anki minimum seviye: {228B22}%d", FactionData[factionid][factionBCS]);
		    Dialog_Show(playerid, BCS, DIALOG_STYLE_INPUT, "{72C425}» Birlik Aracý Yapma Seviyesini Deðiþtir", str, "Ayarla", "{FF6347}<< Geri");
		}
	}
	return 1;
}

Dialog:BirliktenAyril(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if (PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "Herhangi bir birlik üyesi deðilsin.");
		if (GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL )
		{
			ZirhDegistir(playerid, 0);
			ResetWeapons(playerid);
		}
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RED, "BÝRLÝK: %s birlikten ayrýldý.", ReturnName(playerid, 0));
        //SendServerMessage(playerid, "\"%s\" adlý birlikten ayrýldýn. (Rütbe %d).", Faction_GetName(playerid), PlayerData[playerid][pFactionRank]);
		ResetFaction(playerid);
	}
	return 1;
}

Dialog:PaintballTeam(playerid, response, listitem, inputtext[]) {
    new id = PlayerData[playerid][pPaintball];
	if (response)
	{
	    if(Paintball_Team_A(id) > Paintball_Team_B(id))
		{
		    Dialog_Show(playerid, PaintballTeam, DIALOG_STYLE_MSGBOX, "Takým Seçimi", "{FFFFFF}Hangi takýmý seçmek istiyorsun?\n\n {FF6347}A Takýmý\n{007FFF} B Takýmý", "A", "B");
			SendErrorMessage(playerid, "Bu takým dolu!");
			return 1;
		}
        PlayerData[playerid][pPaintballTeam] = 0;
		SetPlayerTeam(playerid, 1);
		SendServerMessage(playerid, "'A' takýmýna katýldýnýz.");
	}
	else
	{
	    if(Paintball_Team_B(id) > Paintball_Team_A(id))
		{
		    Dialog_Show(playerid, PaintballTeam, DIALOG_STYLE_MSGBOX, "Takým Seçimi", "{FFFFFF}Hangi takýmý seçmek istiyorsun?\n\n {FF6347}A Takýmý\n{007FFF} B Takýmý", "A", "B");
			SendErrorMessage(playerid, "Bu takým dolu!");
			return 1;
		}
        PlayerData[playerid][pPaintballTeam] = 1;
		SetPlayerTeam(playerid, 2);
		SendServerMessage(playerid, "'B' takýmýna katýldýnýz.");
	}
	Paintball_TDMSpawn(playerid);
	return 1;
}

Dialog:FabrikaDepo(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new fabrikaid = GetPVarInt(playerid, "FabrikaIDDepo");
	    if(strfind(inputtext, "Para", true) != -1) {
	        if(Fabrikalar[fabrikaid][fabrikaDepo][0] <= 0) return SendErrorMessage(playerid, "Seçtiðiniz mal depoda yok.");
	        new miktar = Fabrikalar[fabrikaid][fabrikaDepo][0];
	        Fabrikalar[fabrikaid][fabrikaDepo][0] = 0;
			GiveMoney(playerid, miktar);
	        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_GREEN, "BÝRLÝK: %s adlý oyuncu fabrika deposundan %s aldý.", ReturnName(playerid, 0), FormatNumber(miktar));
	    }
	    if(strfind(inputtext, "Eroin", true) != -1) {
	        if(Fabrikalar[fabrikaid][fabrikaDepo][1] <= 0) return SendErrorMessage(playerid, "Seçtiðiniz mal depoda yok.");
	        new miktar = Fabrikalar[fabrikaid][fabrikaDepo][1];
	        Fabrikalar[fabrikaid][fabrikaDepo][1] = 0;
			Inventory_Add(playerid, "Eroin", 1577, miktar);
	        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_GREEN, "BÝRLÝK: %s adlý oyuncu fabrika deposundan %d eroin aldý.", ReturnName(playerid, 0), miktar);
	    }
	    if(strfind(inputtext, "Kokain", true) != -1) {
	        if(Fabrikalar[fabrikaid][fabrikaDepo][2] <= 0) return SendErrorMessage(playerid, "Seçtiðiniz mal depoda yok.");
	        new miktar = Fabrikalar[fabrikaid][fabrikaDepo][2];
	        Fabrikalar[fabrikaid][fabrikaDepo][2] = 0;
			Inventory_Add(playerid, "Kokain", 1575, miktar);
	        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_GREEN, "BÝRLÝK: %s adlý oyuncu fabrika deposundan %d kokain aldý.", ReturnName(playerid, 0), miktar);
	    }
	    if(strfind(inputtext, "Marijuana", true) != -1) {
	        if(Fabrikalar[fabrikaid][fabrikaDepo][3] <= 0) return SendErrorMessage(playerid, "Seçtiðiniz mal depoda yok.");
	        new miktar = Fabrikalar[fabrikaid][fabrikaDepo][3];
	        Fabrikalar[fabrikaid][fabrikaDepo][3] = 0;
            Inventory_Add(playerid, "Marijuana", 1578, miktar);
	        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_GREEN, "BÝRLÝK: %s adlý oyuncu fabrika deposundan %d marijuana aldý.", ReturnName(playerid, 0), miktar);
	    }
	}
	return 1;
}

Dialog:PaintballAyar(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new id = PlayerData[playerid][pPaintball];
	    if(strfind(inputtext, "Oyunu Baþlat", true) != -1)
	    {
	        if(Paintball_Katilimci(id) < 2) return SendErrorMessage(playerid, "Oyunu baþlatabilmek için en az 2 katýlýmcý gerek.");
	        if(Paintball[id][odaTur] == 0) return SendErrorMessage(playerid, "Önce oyun türü seçmeniz gerekmektedir.");
	        if(Paintball[id][odaDurum] == 2) return SendErrorMessage(playerid, "Oyun zaten baþlamýþ.");
	        Paintball_Baslat(id);
		}
		if(strfind(inputtext, "Oyundan Ayrýl", true) != -1) return cmd_pbcik(playerid, "\1");
		if(strfind(inputtext, "Oda Adý", true) != -1)
	    {
	        if(PlayerData[playerid][pPaintball] == -1 || Paintball[PlayerData[playerid][pPaintball]][odaSahip] != playerid) return SendErrorMessage(playerid, "Oda sahibi deðilsin.");
			Dialog_Show(playerid, PaintballOdaAdi, DIALOG_STYLE_INPUT, "{2F4F4F}Paintball Oda Adý Ayarla", "{FFFFFF}Ayarlamak istediðiniz oda adýný lütfen girin:\n(Max. 24 karakter)", "Ayarla", "<< Geri");
		}
		if(strfind(inputtext, "Oda Þifresi", true) != -1)
	    {
	        if(PlayerData[playerid][pPaintball] == -1 || Paintball[PlayerData[playerid][pPaintball]][odaSahip] != playerid) return SendErrorMessage(playerid, "Oda sahibi deðilsin.");
	        Dialog_Show(playerid, PaintballOdaSifre, DIALOG_STYLE_INPUT, "{2F4F4F}Paintball Oda Þifresi Ayarla", "{FFFFFF}Ayarlamak istediðiniz oda þifresini lütfen girin:\n(Max. 24 karakter)\n\nÞifre kalksýn istiyorsanýz boþluða 'yok' yazýn.", "Ayarla", "<< Geri");
		}
		if(strfind(inputtext, "Oda Türü", true) != -1)
	    {
	        if(PlayerData[playerid][pPaintball] == -1 || Paintball[PlayerData[playerid][pPaintball]][odaSahip] != playerid) return SendErrorMessage(playerid, "Oda sahibi deðilsin.");
	        Dialog_Show(playerid, PaintballOdaTur, DIALOG_STYLE_LIST, "{2F4F4F}Paintball Oda Türü Ayarla", "{FFFFFF}DM ( Herkes tek )\nTDM ( Takým Savaþý )", "Ayarla", "<< Geri");
		}
	}
	return 1;
}

Dialog:PaintballOdaAdi(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new id = PlayerData[playerid][pPaintball];

	    if (isnull(inputtext)) SendErrorMessage(playerid, "Oda adý boþ kalamaz!");
		if (strlen(inputtext) > 24)
		    return SendErrorMessage(playerid, "Oda adý 24 karakterden uzun olamaz.");

		format(Paintball[id][odaAdi], 24, inputtext);
        Paintball_MesajYolla(id, COLOR_HOSPITAL, "PAINTBALL: {FFFFFF}%s adlý oda sahibi oda adýný '%s' olarak deðiþtirdi.", ReturnName(playerid, 0), Paintball[id][odaAdi]);
        cmd_pbayar(playerid, "\1");
	}
	else cmd_pbayar(playerid, "\1");
	return 1;
}

Dialog:PaintballOdaSifre(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new id = PlayerData[playerid][pPaintball];

        if (!strcmp(inputtext, "yok", true))
		{
			format(Paintball[id][odaSifre], 24, "");
			Paintball_MesajYolla(id, COLOR_HOSPITAL, "PAINTBALL: {FFFFFF}%s adlý oda sahibi oda þifresini kaldýrdý.", ReturnName(playerid, 0));
		}
	    if (isnull(inputtext)) SendErrorMessage(playerid, "Þifre boþ kalamaz!");

		if (strlen(inputtext) > 24)
		    return SendErrorMessage(playerid, "Þifre adý 24 karakterden uzun olamaz.");

		format(Paintball[id][odaSifre], 24, inputtext);
        Paintball_MesajYolla(id, COLOR_HOSPITAL, "PAINTBALL: {FFFFFF}%s adlý oda sahibi oda þifresini deðiþtirdi.", ReturnName(playerid, 0));
        cmd_pbayar(playerid, "\1");
	}
	else cmd_pbayar(playerid, "\1");
	return 1;
}

Dialog:ObjeMenu(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if(PlayerData[playerid][pJailTime] > 0) return SendErrorMessage(playerid, "Hapisteyken bu iþlemi kullanamazsýnýz.");
	    new notreal[128], idx, baslik[256], string[1024];
		notreal = strtok(inputtext, idx);
		PlayerData[playerid][pEditingObject] = strval(notreal);
		format(baslik, sizeof(baslik), "{ED4D18}#%d - Obje Düzenleme", strval(notreal));
		strcat(string, "Ýþlem\tDurum\n");
		strcat(string, " Lokasyon Deðiþtir (Önünüze koyar)\t\n");
		strcat(string, " Pozisyon Ayarla\n");
		strcat(string, " Model Deðiþtir\n");
		Dialog_Show(playerid, ObjeDuzenle, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Seç", "<< Geri");
	}
	return 1;
}


Dialog:ModSil(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new notreal[128], idx, cid, carid = Car_GetID(GetPlayerVehicleID(playerid));
		notreal = strtok(inputtext, idx);
		new componentid = strval(notreal);
		if(!strcmp(inputtext, "Boþ", true)) return SendErrorMessage(playerid, "Bu slotta hiç modifiye yok.");
		for (new i = 0; i < 14; i ++)   if(CarData[carid][carMods][i] == componentid) {
			cid = i;
			break;
		}
     RemoveVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][cid]);
	    CarData[carid][carMods][cid] = 0;
	    SendServerMessage(playerid, "%d. nolu slottaki modifikasyon kaldýrýldý.", cid);
	}
	return 1;
}

Dialog:CarDisplay(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		new vehicleid = strval(notreal), carid = Car_GetID(vehicleid);

		if(CarData[carid][carDisplay])
		{
			if(!IsPlayerInVehicle(playerid, CarData[carid][carVehicle])) return SendErrorMessage(playerid, "Aracýnýzda deðilsiniz.");
		    SetPlayerCheckpoint(playerid, CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2], 5.0);
		    SendServerMessage(playerid, "Park alaný haritada belirtildi.");
			SetPVarInt(playerid, "CarDisplay", carid);
		}
		else
		{
		    CarData[carid][carDisplay] = true;
		    SendServerMessage(playerid, "Araç çýkartýldý.");
      		SetVehicleVirtualWorld(vehicleid, 0);
		}
	}
	return 1;
}
Dialog:GateMenu(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if(PlayerData[playerid][pJailTime] > 0) return SendErrorMessage(playerid, "Hapisteyken bu iþleni kullanamazsýnýz.");
	    new notreal[128], idx, baslik[256], durum[256], string[1024];
		notreal = strtok(inputtext, idx);
		PlayerData[playerid][pEditingGate] = strval(notreal);
		format(baslik, sizeof(baslik), "{ED4D18}#%d - Gate Düzenleme", strval(notreal));
		strcat(string, "Ýþlem\tDurum\n");
		strcat(string, " Þifreyi Deðiþtir\t\n");
		strcat(string, " Lokasyon Deðiþtir (Önünüze koyar)\t\n");
		strcat(string, " Pozisyon Ayarla\t\n");
		strcat(string, " Açýlacaðý Yeri Ayarla\t\n");
		if (GateData[strval(notreal)][gateFaction] != -1) format(durum, 256, "{2ECC71}[ Birlik Kapýsý ]");
		else format(durum, 256, "{FF0000}[Birlik Kapýsý Deðil]");
		format(string, sizeof(string), "%s Birlik Kapýsý Yap\t%s\n", string, durum);
		Dialog_Show(playerid, GateDuzenle, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Seç", "<< Geri");
	}
	return 1;
}


Dialog:IsyeriCalisanlari(playerid, response, listitem, inputtext[]) {
	if (response)
	{

	    if(strfind(inputtext, "Çalýþan Al", true) != -1)
		{
            SendServerMessage(playerid, "Davet modu aktif, TAB'dan (skor tablosu) davet etmek istediðin oyuncunun üstüne týkla!");
			SetPVarInt(playerid, "CDM", 1);
	    }
		{
		    new notreal[128], idx, baslik[256], string[1024];
			notreal = strtok(inputtext, idx);
			SetPVarInt(playerid, "OfflineSQLID", strval(notreal));
			format(baslik, sizeof(baslik), "{ED4D18}#%d - %s", strval(notreal), SQLName(strval(notreal)));
			strcat(string, "Ýþlem\tDurum\n");
			strcat(string, " Çalýþaný At\t\n");
			strcat(string, " Görev Deðiþtir\t\n");
			Dialog_Show(playerid, IsyeriCalisanDuzenle, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Seç", "{FF6347}Iptal");
		}
	}
	return 1;
}


Dialog:OfflineUyeler(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new notreal[128], idx, baslik[256], string[1024];
		notreal = strtok(inputtext, idx);
		SetPVarInt(playerid, "OfflineSQLID", strval(notreal));
		format(baslik, sizeof(baslik), "{ED4D18}#%d - %s", strval(notreal), SQLName(strval(notreal)));
		strcat(string, "Ýþlem\tDurum\n");
		strcat(string, " Birlikten At\t\n");
		strcat(string, " Rütbe Deðiþtir\t\n");
		if (GetFactionType(playerid) != FACTION_GANG)
		{
		   	strcat(string, " Divizyon Deðiþtir\t\n");
	    }
		Dialog_Show(playerid, OfflineUyeDuzenle, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Seç", "{FF6347}Iptal");
	}
	return 1;
}

Dialog:OfflineUyeDuzenle(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new sqlid = GetPVarInt(playerid, "OfflineSQLID");
		if(listitem == 0)
		{
        	new query[256];
	    	format(query, sizeof(query), "UPDATE `characters` SET `Faction` = -1 WHERE `ID` = '%d'", sqlid);
			mysql_tquery(g_iHandle, query);
		 	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RED, "BÝRLÝK: %s, %s oyuncusunu birlikten çýkarttý.", ReturnName(playerid, 0), SQLName(sqlid));
		}
		if(listitem == 1)
		{
			PlayerData[playerid][pOffRank] = true;
			Faction_RutbeDegistir(playerid, PlayerData[playerid][pFaction]);
		}
		if(listitem == 2)
		{
			PlayerData[playerid][pOffDivizyon] = true;
			Faction_DivizyonDegistir(playerid, PlayerData[playerid][pFaction]);
		}
	}
	return 1;
}

Dialog:IsyeriCalisanDuzenle(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new sqlid = GetPVarInt(playerid, "OfflineSQLID"), pid = ReturnUser(SQLName(sqlid));

		if(listitem == 0)
		{
			if(pid == INVALID_PLAYER_ID)
			{
	        	new query[256];
		    	format(query, sizeof(query), "UPDATE `characters` SET `BizJob` = -1 WHERE `ID` = '%d'", sqlid);
				mysql_tquery(g_iHandle, query);
				SendServerMessage(playerid, "%s iþyerinden atýldý.", SQLName(sqlid));
			} else {
				PlayerData[pid][pBizJob] = -1; PlayerData[pid][pBizRank] = 1;
				SendServerMessage(pid, "%s seni iþyerinin çalýþanlýðýndan çýkardý.", ReturnName(playerid));
				SendServerMessage(playerid, "%s adlý kiþiyi iþyeri çalýþanlýðýndan çýkardýnýz.", ReturnName(pid, 0));
				SQL_SaveCharacter(pid);
			}
		}
		if(listitem == 1)
		{
			if(pid == INVALID_PLAYER_ID)
			{
	        	new query[256];
		    	format(query, sizeof(query), "UPDATE `businesses` SET `bizOrtak` = 0 WHERE `ID` = '%d'", sqlid);
				mysql_tquery(g_iHandle, query);
				//SendServerMessage(playerid, "%s ortaklýktan atýldý.", SQLName(sqlid));
			} else {
				for (new id = 0; id < MAX_BUSINESSES; id ++) if (Business_IsOwner(playerid, id))
                {
				BusinessData[id][bizOrtak] = 0;
				PlayerData[pid][pBizJob] = -1; PlayerData[pid][pBizRank] = 1;
				PlayerData[pid][pBizJobID] = 0;
				format(BusinessData[id][bizOrtakName], 32, "Yok");
				Business_Save(id);
				Business_Refresh(id);
				//ShowPlayerFooter(playerid, "Isyeri Ortakliktan kovdun!");
				//ShowPlayerFooter(pid, "Isyeri Ortakliktan kovuldun!");
				SQL_SaveCharacter(pid);
			    }
			}
		}
		if(listitem == 2)
		{
		    new string[512];
		    strcat(string, "Eleman\n");
		    strcat(string, "Satýþ Sorumlusu\n");
		    strcat(string, "Güvenlik Görevlisi\n");
		    strcat(string, "Müdür\n");
	      	strcat(string, "DJ\n");
			if(BusinessData[GetPVarInt(playerid, "KAI")][bizType] == 9) strcat(string, "DJ\n");
			Dialog_Show(playerid, GorevSec, DIALOG_STYLE_LIST, "{ED4D18} > Görev Seçimi", string, "Deðiþtir", "{FF6347}Iptal");
		}
	}
	return 1;
}


Dialog:GorevSec(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new sqlid = GetPVarInt(playerid, "OfflineSQLID"), pid = ReturnUser(SQLName(sqlid));
		if(pid == INVALID_PLAYER_ID)
		{
	       	new query[256];
	    	format(query, sizeof(query), "UPDATE `characters` SET `BizRank` = %d WHERE `ID` = '%d'", listitem+1, sqlid);
			mysql_tquery(g_iHandle, query);
			SendServerMessage(playerid, "%s adlý kiþinin iþyerindeki görevini '%s' olarak deðiþtirdiniz.", SQLName(sqlid),BizJob_rutbeisim(listitem+1));
		} else {
			PlayerData[pid][pBizRank] = listitem+1;
			SendServerMessage(pid, "%s, iþyerindeki görevini '%s' olarak deðiþtirdi.", ReturnName(playerid), BizJob_rutbeisim(listitem+1));
			SendServerMessage(playerid, "%s adlý kiþinin iþyerindeki görevini '%s' olarak deðiþtirdiniz.", ReturnName(pid, 0),BizJob_rutbeisim(listitem+1));
            SQL_SaveCharacter(pid);
		}
	}
	return 1;
}

Dialog:ObjeModelDegistir(playerid, response, listitem, inputtext[]) {
	if(response)
	{
	    new id = PlayerData[playerid][pEditingObject];
		new modelid = strval(inputtext);

		if (modelid < 0 || modelid > 20000)
			return SendErrorMessage(playerid, "Geçersiz Model ID'sý.");

		ObjectData[id][objectModel] = modelid;
		DestroyDynamicObject(ObjectData[id][objectObject]);
		ObjectData[id][objectObject] = CreateDynamicObject(ObjectData[id][objectModel], ObjectData[id][objectPos][0], ObjectData[id][objectPos][1], ObjectData[id][objectPos][2], ObjectData[id][objectPos][3], ObjectData[id][objectPos][4], ObjectData[id][objectPos][5], ObjectData[id][objectWorld], ObjectData[id][objectInterior]);

		SendServerMessage(playerid, "Obje Model ID'sý %d olarak ayarlandý.", modelid);
		Object_Save(id);
	}
	return 1;
}


Dialog:GateSifreDegistir(playerid, response, listitem, inputtext[]) {
	if(response)
	{
	    new id = PlayerData[playerid][pEditingGate];

		if (isnull(inputtext))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, inputtext);
		SendServerMessage(playerid, "Gate þifreniz ayarlandý.");
		Gate_Save(id);
	}
	return 1;
}

Dialog:GateDuzenle(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new id = PlayerData[playerid][pEditingGate];
		if(listitem == 0)
		{
		    new baslik[256];
		    format(baslik, sizeof(baslik), "{ED4D18}#%d - Gate Þifre Düzenleme", id);
			Dialog_Show(playerid, GateSifreDegistir, DIALOG_STYLE_INPUT, baslik, "{FFFFFF}Lütfen yeni þifrenizi yazýn;\n\nUYARI: Eðer þifre olmamasýný istiyorsanýz boþ býrakýn.", "Ayarla", "{FF6347}Iptal");
		}
		if(listitem == 1)
		{
	 		static
			    Float:x,
			    Float:y,
			    Float:z,
			    Float:angle;

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);

			x += 3.0 * floatsin(-angle, degrees);
			y += 3.0 * floatcos(-angle, degrees);

			GateData[id][gatePos][0] = x;
			GateData[id][gatePos][1] = y;
			GateData[id][gatePos][2] = z;
			GateData[id][gatePos][3] = 0.0;
			GateData[id][gatePos][4] = 0.0;
			GateData[id][gatePos][5] = angle;

			SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
			SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

			GateData[id][gateOpened] = false;
			Gate_Save(id);
            SendServerMessage(playerid, "%d nolu garaj kapýnýz önünüze taþýndý.", id);
		}
		if(listitem == 2)
		{
  			ResetEditing(playerid);
		   	EditDynamicObject(playerid, GateData[id][gateObject]);

			PlayerData[playerid][pEditGate] = id;
			PlayerData[playerid][pEditType] = 1;
			SendServerMessage(playerid, "%d nolu garaj kapýnýzý düzenlemeye baþladýnýz.", id);
		}
		if(listitem == 3)
		{
		    ResetEditing(playerid);
		   	EditDynamicObject(playerid, GateData[id][gateObject]);

			PlayerData[playerid][pEditGate] = id;
			PlayerData[playerid][pEditType] = 2;
            SendServerMessage(playerid, "%d nolu garaj kapýnýzýn açýlacaðý yeri düzenlemeye baþladýnýz.", id);
		}
		if(listitem == 4)
		{
		     if (GateData[id][gateFaction] == -1)
	         {
	            if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "Birliðiniz yok.");
	            if(GetFactionType(playerid) != 5) return SendErrorMessage(playerid, "Devlet kurumlarýna kapý ekleyemezsiniz.");
				GateData[id][gateFaction] = FactionData[PlayerData[playerid][pFaction]][factionID];
	            SendServerMessage(playerid, "Kapý birliðinizle paylaþýldý.");
	            Gate_Save(id);
			 }
			 else {
			    GateData[id][gateFaction] = -1;
			    SendServerMessage(playerid, "Kapý artýk birliðinizle paylaþýlmayacak.");
			    Gate_Save(id);
			 }
		}
	}
	return 1;
}

Dialog:ObjeDuzenle(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    //if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendErrorMessage(playerid, "Bu objeyi sadece dýþarýda düzenleyebilirsin.");
		new id = PlayerData[playerid][pEditingObject];
		if(listitem == 0)
		{
	 		static
			    Float:x,
			    Float:y,
			    Float:z,
			    Float:angle;

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);

			x += 3.0 * floatsin(-angle, degrees);
			y += 3.0 * floatcos(-angle, degrees);

			ObjectData[id][objectPos][0] = x;
			ObjectData[id][objectPos][1] = y;
			ObjectData[id][objectPos][2] = z;
			ObjectData[id][objectPos][3] = 0.0;
			ObjectData[id][objectPos][4] = 0.0;
			ObjectData[id][objectPos][5] = angle;

			SetDynamicObjectPos(ObjectData[id][objectObject], x, y, z);
			SetDynamicObjectRot(ObjectData[id][objectObject], 0.0, 0.0, angle);

			Object_Save(id);
            SendServerMessage(playerid, "%d nolu objeniz önünüze taþýndý.", id);
		}
		if(listitem == 1)
		{
  			ResetEditing(playerid);
		   	EditDynamicObject(playerid, ObjectData[id][objectObject]);

			PlayerData[playerid][pEditObject] = id;
			SendServerMessage(playerid, "%d nolu objenizi düzenlemeye baþladýnýz.", id);
		}
		if(listitem == 2)
		{
		    new baslik[256];
		    format(baslik, sizeof(baslik), "{ED4D18}#%d - Obje Model Düzenleme", id);
			Dialog_Show(playerid, ObjeModelDegistir, DIALOG_STYLE_INPUT, baslik, "{FFFFFF}Lütfen yeni Model ID yazýn;", "Ayarla", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:Maclar(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		PlayerData[playerid][pMacID] = strval(notreal);
		Dialog_Show(playerid, MacMenu, DIALOG_STYLE_LIST, "Maç Menü", "Maç Bilgileri\nKupon Yaz", "Seç", "<< Geri");
	}
	return 1;
}

Dialog:MacMenu(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new macid = PlayerData[playerid][pMacID], macidex = MacID(PlayerData[playerid][pMacID]), baslik[124];
		format(baslik, sizeof(baslik), "#%d | %s - %s", macid, Takimlar[Maclar[macidex][macTakim1]][takimAd], Takimlar[Maclar[macidex][macTakim2]][takimAd]);
	    if(!listitem)
		{
		    new string[1024], durum[256], date[6];
			format(durum, sizeof(durum), "{FFFFFF}Maç NO: {2ECC71}%d\n", macid);
			strcat(string, durum);
			format(durum, sizeof(durum), "{FFFFFF}Ev Sahibi Takým: {2ECC71}%s\n",  Takimlar[Maclar[macidex][macTakim1]][takimAd]);
			strcat(string, durum);
			format(durum, sizeof(durum), "{FFFFFF}Misafir Takým: {2ECC71}%s\n",  Takimlar[Maclar[macidex][macTakim2]][takimAd]);
			strcat(string, durum);
			TimestampToDate(Maclar[macidex][macZaman], date[0],date[1],date[2],date[3],date[4],date[5]);
			format(durum, sizeof(durum), "{FFFFFF}Oynanacak Tarih: {2ECC71}%02d/%02d/%02d %02d:%02d:%02d\n", date[2], date[1],date[0],date[3],date[4],date[5]);
			strcat(string, durum);
			Dialog_Show(playerid, MacBilgileri, DIALOG_STYLE_MSGBOX, baslik, string, "Tamam", "<< Geri");
		}
		if(listitem)
		{
            Dialog_Show(playerid, BahisMiktari, DIALOG_STYLE_INPUT, baslik, "Ne kadar bahis yatýrmak istiyorsunuz?\n\nUYARI: Bahis miktarý en az %s en fazla %s olabilir.", "Devam", "{FF6347}Iptal", FormatNumber(MIN_BAHIS), FormatNumber(MAX_BAHIS));
		}
	}
	return 1;
}

Dialog:BahisMiktari(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new macid = PlayerData[playerid][pMacID], macidex = MacID(PlayerData[playerid][pMacID]), baslik[124];

	    if(Maclar[macidex][macOynandimi] || !Maclar[macidex][macVarmi]) return SendErrorMessage(playerid, "%d %d", macid, macidex);

		format(baslik, sizeof(baslik), "#%d | %s - %s", macid, Takimlar[Maclar[macidex][macTakim1]][takimAd], Takimlar[Maclar[macidex][macTakim2]][takimAd]);
		new miktar = strval(inputtext);
		if(isnull(inputtext)) return SendErrorMessage(playerid, "Geçersiz miktar");
		if(miktar < MIN_BAHIS || miktar > MAX_BAHIS) return SendErrorMessage(playerid, "En az %s, en fazla %s bahis koyabilirsiniz.", FormatNumber(MIN_BAHIS), FormatNumber(MAX_BAHIS));
		if(GetMoney(playerid) < miktar) return SendErrorMessage(playerid, "Bu kadar paranýz yok.");
		PlayerData[playerid][pKuponMiktar] = miktar;
		new odul = KuponOraniHesapla(PlayerData[playerid][pKuponMiktar],  Maclar[macidex][macOran]);
		SendServerMessage(playerid, "Kupon miktarý belirlendi, %s koyup eðer tutarsa %s alacaksýnýz.", FormatNumber(PlayerData[playerid][pKuponMiktar]), FormatNumber(odul));
		Dialog_Show(playerid, SkorTahmin, DIALOG_STYLE_LIST, baslik, "{FFFFFF}[A] %s kazanýr.\n{FF6347}[X] Berabere\n{FFFFFF}[B] %s kazanýr.", "Devam", "{FF6347}Iptal", Takimlar[Maclar[macidex][macTakim1]][takimAd], Takimlar[Maclar[macidex][macTakim2]][takimAd]);
	}
	return 1;
}

Dialog:SkorTahmin(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new macid = PlayerData[playerid][pMacID], macidex = MacID(PlayerData[playerid][pMacID]);

	    if(Maclar[macidex][macOynandimi] || !Maclar[macidex][macVarmi]) return 1;

		if(GetMoney(playerid) < PlayerData[playerid][pKuponMiktar]) return SendErrorMessage(playerid, "Kupon paranýz yok.");

		new odul = KuponOraniHesapla(PlayerData[playerid][pKuponMiktar],  Maclar[macidex][macOran]);
		if (Kupon_Ekle(playerid, odul, PlayerData[playerid][pKuponMiktar], macid, listitem+1) != -1)
		{
		    GiveMoney(playerid, -PlayerData[playerid][pKuponMiktar]);
	    	SendServerMessage(playerid, "%s - %s maçýna %s koyup kupon yaptýnýz, eðer tutarsa %s alacaksýnýz.", Takimlar[Maclar[macidex][macTakim1]][takimAd], Takimlar[Maclar[macidex][macTakim2]][takimAd], FormatNumber(PlayerData[playerid][pKuponMiktar]), FormatNumber(odul));
		}
        else SendErrorMessage(playerid, "Maksimum kupon limitine ulaþmýþsýn.");
	}
	return 1;
}

Dialog:PaintballOdaTur(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new id = PlayerData[playerid][pPaintball];
		if(listitem == 0)
		{
		    Paintball[id][odaTur] = 1;
		    Paintball_MesajYolla(id, COLOR_HOSPITAL, "PAINTBALL: {FFFFFF}%s adlý oda sahibi oda türünü 'DM' olarak deðiþtirdi.", ReturnName(playerid, 0));
		}
		if(listitem == 1)
		{
		    Paintball[id][odaTur] = 2;
		    Paintball_MesajYolla(id, COLOR_HOSPITAL, "PAINTBALL: {FFFFFF}%s adlý oda sahibi oda türünü 'TDM' olarak deðiþtirdi.", ReturnName(playerid, 0));
		}
	}
	else cmd_pbayar(playerid, "\1");
}
stock GetPlayerLastName(playerid, soyad[], nm = 0)
{
    new
		namestring[2][MAX_PLAYER_NAME];

	if(nm) {
		new	name[MAX_PLAYER_NAME];

	    GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	    split(name, namestring, '_');
	} else {
	    split(soyad, namestring, '_');
	}
	return namestring[1];
}

Dialog:Paintball(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		if(strfind(inputtext, "Yeni oyun kur! [$50]", true) != -1)
	    {
	        if(PlayerData[playerid][pPaintball] != -1) return SendErrorMessage(playerid, "Þu anda herhangi bir odadasýn.");
			for(new i=0; i != MAX_PAINTBALL_ODA; i++) if(!Paintball[i][odaVarmi]) {
  				format(Paintball[i][odaAdi], 24, "Adsýz Oda");
				format(Paintball[i][odaSifre], 24, "");
				Paintball[i][odaVarmi] = true;
				Paintball[i][odaSahip] = playerid;
				Paintball[i][odaTur] = 0;
				Paintball[i][odaSure] = 0;
				Paintball[i][odaDurum] = PB_BEKLIYOR;
				PlayerData[playerid][pPaintball] = i;
				break;
			}
            SendServerMessage(playerid, "Oyun kuruldu, '/pbayar' yazarak odanýn ayarlarýný yapabilirsin.");
            return 1;
	    }
		new id = listitem;
		if(!Paintball[id][odaVarmi] || Paintball[id][odaDurum] == PB_BASLADI) return SendErrorMessage(playerid, "Oyun baþlamýþ veya bu oda artýk bulunmuyor.");
		if(Paintball_Katilimci(id) > 10) return SendErrorMessage(playerid, "Oyun dolu, en fazla 10 kiþi katýlabilir.");
		if(PlayerData[playerid][pPaintball] == id) return cmd_pbayar(playerid, "\1");
		PlayerData[playerid][pPaintball] = id;
  		Paintball_MesajYolla(id, COLOR_HOSPITAL, "PAINTBALL: {FFFFFF}%s adlý kiþi oyuna katýldý.", ReturnName(playerid, 0));
		cmd_pbayar(playerid, "\1");
	}
	return 1;
}

/*CMD:tanitimgec(playerid, params[])
{

    for (new j = 58; j < 62; j ++) {
		 PlayerTextDrawHide(playerid,  PlayerData[playerid][pTextdraws][j]);
	}
	SetDefaultSpawn(playerid);

	PlayerData[playerid][pCreated] = 1;
	PlayerData[playerid][pTask] = 1;

	PlayerData[playerid][pTutorial] = 0;
	PlayerData[playerid][pTutorialTime] = 0;
    SendClientMessage(playerid,  COLOR_LIGHTRED, "[*]:{FFFFFF} Varna Roleplay ekibini tercih ettiðiniz için teþekkürler.");
    SendClientMessage(playerid,  COLOR_LIGHTRED, "[*]:{FFFFFF} Oyun içinde yardýma ihtiyacýn olursa '/destek' komutunu kullanabilirsin.");
    SendServerMessage(playerid,  "GPS Cihazý envanterinize ekledik ilk olarak Binco'ya gidip yeni (0.3 DL mod) kýyafetleri denemeye ne dersin?!");
Inventory_Add(playerid, "GPS Cihazi", 18875);
	return 1;
}*/

CMD:yetenek(playerid, params[])
{
	new str[256], string[1024];
	strcat(string, "{DC143C}>{FFF8DC} Silah Kaçakçýlýðý Seviyeniz: %d\n");
	strcat(string, "{DC143C}>{FFF8DC} Çimento Taþýmacýlýðý Tur: %d\n");
	strcat(string, "{DC143C}>{FFF8DC} Silah Kaçakçýlýðý EXP: %d/%d\n");
	strcat(string, "\n\n");
	strcat(string, "{DC143C}>{FFF8DC} Kas Seviyeniz: %d\n");
	strcat(string, "{DC143C}>{FFF8DC} Kas EXP: %d/%d\n");
	strcat(string, "\n\n");

	format(str, sizeof(str), string,
	PlayerData[playerid][pSilahSeviye],
	PlayerData[playerid][pCimentoSkill],
	PlayerData[playerid][pSilahEXP],
	PlayerData[playerid][pSilahSeviye]*25,
	PlayerData[playerid][pKasSeviye],
	PlayerData[playerid][pKasEXP],
	PlayerData[playerid][pKasSeviye]*1000
	);

	Dialog_Show(playerid, yetenekler, DIALOG_STYLE_MSGBOX, "Yetenek Bilgileri", str, "Tamam", "");
	return 1;
}

/*"
CMD:tohumal(playerid, params[])
{
	new Float:pos[3];
	GetActorPos(""""""tohumact, pos[0], pos[1], pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2]))
		return SendErrorMessage(playerid, "Tohum alabileceðin biryere yakýn deðilsin.");

	if (GetFactionType(playerid) != FACTION_GANG && FactionData[PlayerData[playerid][pFaction]][gTip] != GTIP_CETE )
	    return SendErrorMessage(playerid, "Çete tipi bir birliðin üyesi deðilsin.");

	if(!FactionData[PlayerData[playerid][pFaction]][factionOnay]) return SendErrorMessage(playerid, "Bulunduðunuz birlik onaylý deðil.");
	Dialog_Show(playerid, tohumal, DIALOG_STYLE_MSGBOX, "Tohum Al", "Sandýk Fiyatý = $7500 (Tüm Tohumlar Ýçinde) \nSandýk önünüzde spawn olacaktýr, bu sandýðý\naçabilmek için levyeniz olmasý gerekmektedir, levyeniz varsa '/levye' \nkomutunu kullanabilirsiniz.\n\nAlmak istiyor musunuz?", "Al", "{FF6347}Iptal");

	return 1;
}
*/

Faction_Save(factionid)
{
	static
	    query[6100];

	format(query, sizeof(query), "UPDATE `factions` SET `factionName` = '%s', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d', `factionLockerX` = '%.4f', `factionLockerY` = '%.4f', `factionLockerZ` = '%.4f', `factionLockerInt` = '%d', `factionLockerWorld` = '%d', `SpawnX` = '%f', `SpawnY` = '%f', `SpawnZ` = '%f', `SpawnInterior` = '%d', `SpawnVW` = '%d', `gTip` = '%d'",
		SQL_ReturnEscaped(FactionData[factionid][factionName]),
		FactionData[factionid][factionColor],
		FactionData[factionid][factionType],
		FactionData[factionid][factionRanks],
		FactionData[factionid][factionLockerPos][0],
		FactionData[factionid][factionLockerPos][1],
		FactionData[factionid][factionLockerPos][2],
		FactionData[factionid][factionLockerInt],
		FactionData[factionid][factionLockerWorld],
		FactionData[factionid][SpawnX],
		FactionData[factionid][SpawnY],
		FactionData[factionid][SpawnZ],
		FactionData[factionid][SpawnInterior],
		FactionData[factionid][SpawnVW],
		FactionData[factionid][gTip]
	);
	format(query, sizeof(query), "%s, `factionKasaX` = '%.4f', `factionKasaY` = '%.4f', `factionKasaZ` = '%.4f', `factionKasaInt` = '%d', `factionKasaWorld` = '%d', `factionKasaMiktar` = '%d', `factionBKS` = '%d', `factionBAS` = '%d', `factionBFS` = '%d', `factionBCS` = '%d', `factionLevel` = '%d', `factionEXP` = '%d', `factionOnay` = '%d', `factionSOnay` = '%d', `factionUOnay` = '%d'",
		query,
		FactionData[factionid][factionKasaPos][0],
		FactionData[factionid][factionKasaPos][1],
		FactionData[factionid][factionKasaPos][2],
		FactionData[factionid][factionKasaInt],
		FactionData[factionid][factionKasaWorld],
		FactionData[factionid][factionKasaMiktar],
		FactionData[factionid][factionBKS],
		FactionData[factionid][factionBAS],
		FactionData[factionid][factionBFS],
		FactionData[factionid][factionBCS],
		FactionData[factionid][factionLevel],
		FactionData[factionid][factionEXP],
		FactionData[factionid][factionOnay],
		FactionData[factionid][factionSOnay],
		FactionData[factionid][factionUOnay]
	);
	format(query, sizeof(query), "%s, `factionMOTD` = '%s'",
		query,
		SQL_ReturnEscaped(FactionData[factionid][factionMOTD])
	);
	for (new i = 0; i < 10; i ++)
	{
	    if (i < 8)
			format(query, sizeof(query), "%s, `factionSkin%d` = '%d', `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i+1, FactionData[factionid][factionSkins][i], i+1, FactionData[factionid][factionWeapons][i], i+1, FactionData[factionid][factionAmmo][i]);

		else
			format(query, sizeof(query), "%s, `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionWeapons][i], i+1, FactionData[factionid][factionAmmo][i]);
	}
	format(query, sizeof(query), "%s WHERE `factionID` = '%d'",
		query,
		FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

Mac_Kaydet(macid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `maclar` SET `macOran` = '%f', `macTakim1` = '%d', `macTakim1Skor` = '%d', `macTakim2` = '%d', `macTakim2Skor` = '%d', `macZaman` = '%d', `macOynandimi` = '%d'",
		Maclar[macid][macOran],
		Maclar[macid][macTakim1],
		Maclar[macid][macTakim1Skor],
		Maclar[macid][macTakim2],
		Maclar[macid][macTakim2Skor],
		Maclar[macid][macZaman],
		Maclar[macid][macOynandimi]
	);
	format(query, sizeof(query), "%s WHERE `macID` = '%d'",
		query,
		Maclar[macid][macID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Faction_SaveRanks(factionid)
{
	static
	    query[798];

	format(query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%s', `factionRank2` = '%s', `factionRank3` = '%s', `factionRank4` = '%s', `factionRank5` = '%s', `factionRank6` = '%s', `factionRank7` = '%s', `factionRank8` = '%s', `factionRank9` = '%s', `factionRank10` = '%s', `factionRank11` = '%s', `factionRank12` = '%s', `factionRank13` = '%s', `factionRank14` = '%s', `factionRank15` = '%s' WHERE `factionID` = '%d'",
	    SQL_ReturnEscaped(FactionRanks[factionid][0]),
	    SQL_ReturnEscaped(FactionRanks[factionid][1]),
	    SQL_ReturnEscaped(FactionRanks[factionid][2]),
	    SQL_ReturnEscaped(FactionRanks[factionid][3]),
	    SQL_ReturnEscaped(FactionRanks[factionid][4]),
	    SQL_ReturnEscaped(FactionRanks[factionid][5]),
	    SQL_ReturnEscaped(FactionRanks[factionid][6]),
	    SQL_ReturnEscaped(FactionRanks[factionid][7]),
	    SQL_ReturnEscaped(FactionRanks[factionid][8]),
	    SQL_ReturnEscaped(FactionRanks[factionid][9]),
	    SQL_ReturnEscaped(FactionRanks[factionid][10]),
	    SQL_ReturnEscaped(FactionRanks[factionid][11]),
	    SQL_ReturnEscaped(FactionRanks[factionid][12]),
	    SQL_ReturnEscaped(FactionRanks[factionid][13]),
	    SQL_ReturnEscaped(FactionRanks[factionid][14]),
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}


stock Faction_SaveDivizyon(factionid)
{
	static
	    query[768];

	format(query, sizeof(query), "UPDATE `factions` SET `factionDivizyon1` = '%s', `factionDivizyon2` = '%s', `factionDivizyon3` = '%s', `factionDivizyon4` = '%s' WHERE `factionID` = '%d'",
	    FactionDivizyon[factionid][0],
	    FactionDivizyon[factionid][1],
	    FactionDivizyon[factionid][2],
	    FactionDivizyon[factionid][3],
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

Faction_Delete(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(g_iHandle, string);

		format(string, sizeof(string), "UPDATE `characters` SET `Faction` = '-1' WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(g_iHandle, string);

  foreach (new i : Player)
		{
			if (PlayerData[i][pFaction] == factionid) {
		    	PlayerData[i][pFaction] = -1;
		    	PlayerData[i][pFactionID] = -1;
		    	PlayerData[i][pFactionRank] = -1;
			}
			if (PlayerData[i][pFactionEdit] == factionid) {
			    PlayerData[i][pFactionEdit] = -1;
			}
		}
		if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
  			DestroyDynamicPickup(FactionData[factionid][factionPickup]);

		if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
  			DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

	    FactionData[factionid][factionExists] = false;
	    FactionData[factionid][factionType] = 0;
	    FactionData[factionid][factionID] = 0;
	}
	return 1;
}

stock GetFactionType(playerid)
{
	if (PlayerData[playerid][pFaction] == -1)
	    return 0;

	return (FactionData[PlayerData[playerid][pFaction]][factionType]);
}

Faction_Divizyon(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < 4; i ++)
		    format(string, sizeof(string), "%s{59DC1C}%d: {FFFFFF}%s\n", string, i + 1, FactionDivizyon[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, DivizyonDuzenle, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Düzenle", "{FF6347}Iptal");
	}
	return 1;
}

Faction_ShowRanks(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
		    format(string, sizeof(string), "%s{59DC1C}%d: {FFFFFF}%s\n", string, i + 1, FactionRanks[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Düzenle", "{FF6347}Iptal");
	}
	return 1;
}

Faction_RutbeDegistir(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
		    format(string, sizeof(string), "%s{59DC1C}%d: {FFFFFF}%s\n", string, i + 1, FactionRanks[factionid][i]);

		Dialog_Show(playerid, RutbeSec, DIALOG_STYLE_LIST, "Rütbe Düzenleme", string, "Deðiþtir", "{FF6347}Iptal");
	}
	return 1;
}


Faction_DivizyonDegistir(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		    string[640];

		string[0] = 0;
		strcat(string, "Divizyondan Çýkar\n");
		for (new i = 0; i < 4; i ++)
		    format(string, sizeof(string), "%s{59DC1C}%d: {FFFFFF}%s\n", string, i + 1, FactionDivizyon[factionid][i]);

		Dialog_Show(playerid, DivizyonSec, DIALOG_STYLE_LIST, "Divizyon Düzenleme", string, "Deðiþtir", "{FF6347}Iptal");
	}
	return 1;
}



Faction_OnaysizBirlikOlustur(name[], type)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (!FactionData[i][factionExists])
	{
	    format(FactionData[i][factionName], 32, name);
        FactionData[i][factionMOTD][0] = '\0';

        FactionData[i][factionExists] = true;
        FactionData[i][factionColor] = 0xFFFFFF00;
        FactionData[i][factionType] = 5;
        FactionData[i][factionRanks] = 10;
        FactionData[i][gTip] = type;
        FactionData[i][factionLockerPos][0] = 0.0;
        FactionData[i][factionLockerPos][1] = 0.0;
        FactionData[i][factionLockerPos][2] = 0.0;
        FactionData[i][factionLockerInt] = 0;
        FactionData[i][factionLockerWorld] = 0;
        FactionData[i][factionOnay] = false;
        FactionData[i][factionBAS] = 9;
        FactionData[i][factionBKS] = 9;
        FactionData[i][factionBFS] = 1;
        FactionData[i][factionBCS] = 1;
        FactionData[i][factionLevel] = 1;
        FactionData[i][factionEXP] = 0;
        FactionData[i][factionKasaPos][0] = 0.0;
        FactionData[i][factionKasaPos][1] = 0.0;
        FactionData[i][factionKasaPos][2] = 0.0;
        for (new j = 0; j < 24; j ++) {
            FactionData[i][factionSkins][j] = 0;
        }
        for (new j = 0; j < 10; j ++) {
            FactionData[i][factionWeapons][j] = 0;
            FactionData[i][factionAmmo][j] = 0;
	    }
	    for (new j = 0; j < 15; j ++) {
			format(FactionRanks[i][j], 32, "Rank %d", j + 1);
	    }
	    mysql_tquery(g_iHandle, "INSERT INTO `factions` (`factionType`) VALUES(5)", "OnFactionCreated", "d", i);
	    return i;
	}
	return -1;
}

Faction_Create(name[], type)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (!FactionData[i][factionExists])
	{
	    format(FactionData[i][factionName], 32, name);
        FactionData[i][factionMOTD][0] = '\0';

        FactionData[i][factionExists] = true;
        FactionData[i][factionColor] = 0xFFFFFF00;
        FactionData[i][factionType] = type;
        FactionData[i][factionRanks] = 5;
        FactionData[i][gTip] = 0;
        FactionData[i][factionLockerPos][0] = 0.0;
        FactionData[i][factionLockerPos][1] = 0.0;
        FactionData[i][factionLockerPos][2] = 0.0;
        FactionData[i][factionLockerInt] = 0;
        FactionData[i][factionLockerWorld] = 0;
        FactionData[i][factionKasaPos][0] = 0.0;
        FactionData[i][factionKasaPos][1] = 0.0;
        FactionData[i][factionKasaPos][2] = 0.0;
        for (new j = 0; j < 24; j ++) {
            FactionData[i][factionSkins][j] = 0;
        }
        for (new j = 0; j < 10; j ++) {
            FactionData[i][factionWeapons][j] = 0;
            FactionData[i][factionAmmo][j] = 0;
	    }
	    for (new j = 0; j < 15; j ++) {
			format(FactionRanks[i][j], 32, "Rank %d", j + 1);
	    }
   		for (new j = 0; j < 4; j ++) {
			format(FactionDivizyon[i][j], 32, "Yok");
	    }
	    mysql_tquery(g_iHandle, "INSERT INTO `factions` (`factionType`) VALUES(0)", "OnFactionCreated", "d", i);
	    return i;
	}
	return -1;
}
Crate_Refresh(crateid)
{
	if (crateid != -1 && CrateData[crateid][crateExists])
	{
	    static
			string[128];

		if (IsValidDynamicObject(CrateData[crateid][crateObject]))
		    DestroyDynamicObject(CrateData[crateid][crateObject]);

		if (IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
		    DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

		CrateData[crateid][crateObject] = CreateDynamicObject(964, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2], 0.0, 0.0, CrateData[crateid][cratePos][3], CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);

		if (CrateData[crateid][crateType] != 6) {
			format(string, sizeof(string), "[Sandýk %d]\n{FFFFFF}%s Parçalarý (Kaldýrmak için 'F' basýn)", crateid, Crate_GetType(CrateData[crateid][crateType]));
		}
		else {
		    format(string, sizeof(string), "[Sandýk %d]\n{FFFFFF}Uyuþturucu Tohumlarý (Kaldýrmak için 'F' basýn)", crateid);
		}
  		CrateData[crateid][crateText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2] + 0.5, 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);
	}
	return 1;
}

Crate_Delete(crateid)
{
	if (crateid != -1 && CrateData[crateid][crateExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `crates` WHERE `crateID` = '%d'", CrateData[crateid][crateID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
		    DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

		if (IsValidDynamicObject(CrateData[crateid][crateObject]))
		    DestroyDynamicObject(CrateData[crateid][crateObject]);

		foreach (new i : Player) if (PlayerData[i][pCarryCrate] == crateid) {
		    PlayerData[i][pCarryCrate] = -1;

		    RemovePlayerAttachedObject(i, 4);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
		}
	    CrateData[crateid][crateExists] = false;
	    CrateData[crateid][crateID] = 0;
	    CrateData[crateid][crateVehicle] = INVALID_VEHICLE_ID;
	}
	return 1;
}

Crate_Drop(playerid, Float:radius = 0.0)
{
    static
		Float:x,
		Float:y,
		Float:z,
		Float:angle,
		id = -1;

	if ((id = PlayerData[playerid][pCarryCrate]) != -1 && CrateData[id][crateExists])
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		if (radius != 0.0) {
		    x += radius * floatsin(-angle, degrees);
		    y += radius * floatcos(-angle, degrees);
		}
		CrateData[id][cratePos][0] = x;
		CrateData[id][cratePos][1] = y;
		CrateData[id][cratePos][2] = z - 0.9;
		CrateData[id][cratePos][3] = angle;
		CrateData[id][crateInterior] = GetPlayerInterior(playerid);
		CrateData[id][crateWorld] = GetPlayerVirtualWorld(playerid);

		Crate_Refresh(id);
		Crate_Save(id);
	}
	PlayerData[playerid][pCarryCrate] = -1;
	RemovePlayerAttachedObject(playerid, 4);
	return 1;
}

Crate_Save(crateid)
{
	static
	    query[255];

	format(query, sizeof(query), "UPDATE `crates` SET `crateType` = '%d', `crateX` = '%.4f', `crateY` = '%.4f', `crateZ` = '%.4f', `crateA` = '%.4f', `crateInterior` = '%d', `crateWorld` = '%d' WHERE `crateID` = '%d'",
	    CrateData[crateid][crateType],
	    CrateData[crateid][cratePos][0],
	    CrateData[crateid][cratePos][1],
	    CrateData[crateid][cratePos][2],
	    CrateData[crateid][cratePos][3],
	    CrateData[crateid][crateInterior],
	    CrateData[crateid][crateWorld],
	    CrateData[crateid][crateID]
	);
	return mysql_tquery(g_iHandle, query);
}

Crate_GetType(type)
{
	static
	    str[24];

	switch (type) {
	    case 1: str = "Melee";
	    case 2: str = "Pistol";
	    case 3: str = "SMG";
	    case 4: str = "Shotgun";
	    case 5: str = "Rifle";
	    case 6: str = "Tohum";
	    default: str = "Yok";
	}
	return str;
}

Crate_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	    {
         	if (Crate_Nearest(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            CrateData[i][crateExists] = true;
            CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
            CrateData[i][crateType] = type;

			CrateData[i][cratePos][0] = x;
   			CrateData[i][cratePos][1] = y;
            CrateData[i][cratePos][2] = z - 0.9;
            CrateData[i][cratePos][3] = angle;

            CrateData[i][crateInterior] = GetPlayerInterior(playerid);
            CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

            mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
            Crate_Refresh(i);
            return i;
		}
	}
	return -1;
}

Job_Save(jobid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `jobs` SET `jobType` = '%d', `jobPosX` = '%.4f', `jobPosY` = '%.4f', `jobPosZ` = '%.4f', `jobInterior` = '%d', `jobWorld` = '%d', `jobPointX` = '%.4f', `jobPointY` = '%.4f', `jobPointZ` = '%.4f', `jobDeliverX` = '%.4f', `jobDeliverY` = '%.4f', `jobDeliverZ` = '%.4f', `jobPointInt` = '%d', `jobPointWorld` = '%d' WHERE `jobID` = '%d'",
	    JobData[jobid][jobType],
	    JobData[jobid][jobPos][0],
	    JobData[jobid][jobPos][1],
	    JobData[jobid][jobPos][2],
	    JobData[jobid][jobInterior],
	    JobData[jobid][jobWorld],
	    JobData[jobid][jobPoint][0],
	    JobData[jobid][jobPoint][1],
	    JobData[jobid][jobPoint][2],
	    JobData[jobid][jobDeliver][0],
	    JobData[jobid][jobDeliver][1],
	    JobData[jobid][jobDeliver][2],
	    JobData[jobid][jobPointInt],
	    JobData[jobid][jobPointWorld],
	    JobData[jobid][jobID]
	);
	return mysql_tquery(g_iHandle, query);
}

Job_GetName(type)
{
	static
	    str[64];

	switch (type)
	{
	    case 1: str = "Tasimacilik";
		case 2: str = "Mekanik";
		case 3: str = "Taksi Soforlugu";
		case 4: str = "Cargo Unloader";
		case 5: str = "Madenci";
		case 6: str = "Gida Saticisi";
		case 7: str = "Copculuk";
		case 8: str = "Paket Tasiyicisi";
		case 9: str = "Silah Kacakciligi";
		case 10: str = "Tir Soforlugu";
		case 11: str = "Otobus Soforlugu";
		case 12: str = "Pizzaci";
		case 13: str = "Ciftcilik";
		case 14: str = "Odunculuk";
		case 15: str = "Temizlik Soforu";
		case 16: str = "Elektronik Kacakciligi";
		case 17: str = "Icki Kacakciligi";
		case 18: str = "Cimento Tasimaciligi";
		case 19: str = "Taþýmacýlýk Þirketi";
		case 20: str = "Uyuþturucu Kaçakçýlýðý";
		case 21: str = "Ýnþaat Görevlisi";
	    default: str = "Yok";
	}
	return str;
}

Billboard_Save(bbid)
{
	static query[2048];
	format(query, sizeof(query), "UPDATE `billboards` SET `bbName` = '%s', `bbMessage` = '%s', `bbOwner` = '%d', `bbPrice` = '%d', `bbRange` = '%d', `bbTime` = '%d', `bbPosX` = '%.4f', `bbPosY` = '%.4f', `bbPosZ` = '%.4f' WHERE `bbID` = '%d'",
	  	SQL_ReturnEscaped(BillBoardData[bbid][bbName]),
	  	SQL_ReturnEscaped(BillBoardData[bbid][bbMessage]),
	  	BillBoardData[bbid][bbOwner],
	 	BillBoardData[bbid][bbPrice],
	  	BillBoardData[bbid][bbRange],
	  	BillBoardData[bbid][bbTime],
	  	BillBoardData[bbid][bbPos][0],
	  	BillBoardData[bbid][bbPos][1],
	  	BillBoardData[bbid][bbPos][2],
	  	BillBoardData[bbid][bbID]
 	);
 	return mysql_tquery(g_iHandle, query);
}

Billboard_Refresh(bizid)
{
	if (bizid != -1 && BillBoardData[bizid][bbExists])
	{
		if (IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
		    DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

		static
		    string[128];

		if (!BillBoardData[bizid][bbOwner]) {
			format(string, sizeof(string), "[%i] - [%s]\n%s", bizid, FormatNumber(BillBoardData[bizid][bbPrice]), BillBoardData[bizid][bbName]);
            BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, COLOR_RED, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
		else if (BillBoardData[bizid][bbOwner]) {
			format(string, sizeof(string), "[%i]\n%s\n%s", bizid, BillBoardData[bizid][bbName], BillBoardData[bizid][bbMessage]);
            BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, COLOR_RED, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
	}
	return 1;
}

/*Billboard_Create(playerid, price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAX_BILLBOARDS; i ++)
		{
	    	if (!BillBoardData[i][bbExists])
		    {
    	        BillBoardData[i][bbExists] = true;
        	    BillBoardData[i][bbOwner] = 0;
            	BillBoardData[i][bbPrice] = price;
            	BillBoardData[i][bbRange] = 10;
                BillBoardData[i][bbTime] = 0;

				format(BillBoardData[i][bbName], 32, "Adsýz Billboard");

    	        BillBoardData[i][bbPos][0] = x;
    	        BillBoardData[i][bbPos][1] = y;
    	        BillBoardData[i][bbPos][2] = z;

				Billboard_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `billboards` (`bbOwner`) VALUES(0)", "OnBillboardCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Billboard_Delete(bizid)
{
	if (bizid != -1 && BillBoardData[bizid][bbExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `billboards` WHERE `bbID` = '%d'", BillBoardData[bizid][bbID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
		    DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

	    BillBoardData[bizid][bbExists] = false;
	    BillBoardData[bizid][bbOwner] = 0;
	    BillBoardData[bizid][bbID] = 0;
	}
	return 1;
}*/

Job_Refresh(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
	    for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
		    	DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
		    	DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		static
		    string[90];

        if (IsValidDynamicMapIcon(JobData[jobid][jobMapIcon]))
	    	DestroyDynamicMapIcon(JobData[jobid][jobMapIcon]);

		format(string, sizeof(string), "[%s]\n{FFFFFF}'/meslek katil'", Job_GetName(JobData[jobid][jobType]));

		if (JobData[jobid][jobType] == 1) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Taþýmacýlýk]\n{FFFFFF}/teslimatbasla ile yükleyebilirsin.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 5) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Kazý Alaný]\n{FFFFFF}/maden ile iþe baþla.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Maden Teslim]\n{FFFFFF}Çýkan madenleri buraya koy.", COLOR_DARKBLUE, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
		else if (JobData[jobid][jobType] == 7) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Çöp Boþaltma Noktasý]\n{FFFFFF}/copbosalt", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1264, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 8) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Kutu Alým Noktasý]\n{FFFFFF}/yukle yazarak kutuyu yükleyebilirsiniz.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Kutu Teslim Noktasý]\n{FFFFFF}Kutularý buraya teslim edebilirsiniz.", COLOR_DARKBLUE, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
        else if (JobData[jobid][jobType] == 9) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Metal Alým]\n{FFFFFF}/metalal ile alabilirsin.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Metal Teslim]\n{FFFFFF}/metalteslim", COLOR_DARKBLUE, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
		else if (JobData[jobid][jobType] == 10) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Týr Þöförlüðü]\n{FFFFFF}'/yukal' yazarak yük alabilirsiniz.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

            JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Týr Þöförlüðü]\n{FFFFFF}'/yukteslim' ile teslim edebilirsiniz.", COLOR_DARKBLUE, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
		else if (JobData[jobid][jobType] == 12) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Pizzacý Ýþbaþý]\n{FFFFFF}'/pisbasi' yazarak iþbaþý yapabilirsiniz.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 14) {
		    JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Odun Teslim]\n{FFFFFF}/odunteslim", COLOR_DARKBLUE, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
		JobData[jobid][jobText3D][0] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
        JobData[jobid][jobPickups][0] = CreateDynamicPickup(1210, 23, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
        //JobData[jobid][jobMapIcon] = CreateDynamicMapIcon(JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], 51, 0, JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
	}
	return 1;
}

Job_Delete(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `jobs` WHERE `jobID` = '%d'", JobData[jobid][jobID]);
		mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
		    	DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
		    	DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		JobData[jobid][jobExists] = false;
	    JobData[jobid][jobType] = 0;
	    JobData[jobid][jobID] = 0;
	}
	return 1;
}

Job_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++)
		{
	    	if (!JobData[i][jobExists])
	    	{
	        	JobData[i][jobExists] = true;
	        	JobData[i][jobType] = type;

				JobData[i][jobPos][0] = x;
	        	JobData[i][jobPos][1] = y;
	        	JobData[i][jobPos][2] = z;
	        	JobData[i][jobPoint][0] = 0.0;
	        	JobData[i][jobPoint][1] = 0.0;
	        	JobData[i][jobPoint][2] = 0.0;
	        	JobData[i][jobDeliver][0] = 0.0;
	        	JobData[i][jobDeliver][1] = 0.0;
	        	JobData[i][jobDeliver][2] = 0.0;

	        	JobData[i][jobInterior] = GetPlayerInterior(playerid);
	        	JobData[i][jobWorld] = GetPlayerVirtualWorld(playerid);

                JobData[i][jobPointInt] = 0;
                JobData[i][jobPointWorld] = 0;

	        	Job_Refresh(i);
	        	mysql_tquery(g_iHandle, "INSERT INTO `jobs` (`jobInterior`) VALUES(0)", "OnJobCreated", "d", i);

	        	return i;
	        }
	    }
	}
	return -1;
}

Car_Create(ownerid, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, type = 0)
{
    for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (!CarData[i][carExists])
   		{
   		    if (color1 == -1)
   		        color1 = random(127);

			if (color2 == -1)
			    color2 = random(127);

   		    CarData[i][carExists] = true;
            CarData[i][carModel] = modelid;
            CarData[i][carOwner] = ownerid;

            CarData[i][carPos][0] = x;
            CarData[i][carPos][1] = y;
            CarData[i][carPos][2] = z;
            CarData[i][carPos][3] = angle;

            CarData[i][carColor1] = color1;
            CarData[i][carColor2] = color2;
            CarData[i][carPaintjob] = -1;
            CarData[i][carLocked] = false;
            CarData[i][carImpounded] = -1;
            CarData[i][carDistance] = 0;
            CarData[i][carImpoundPrice] = 0;
            CarData[i][carImmobiliser] = 1;
            CarData[i][carKilitSeviye] = 1;
            CarData[i][carAlarm] = false;
            CarData[i][carFaction] = type;
            CarData[i][carAnahtar] = -1;
            CarData[i][carBirlik] = -1;
			CarData[i][carKiralik] = 0;
			CarData[i][carKiraUcret] = 0;
			CarData[i][carPrice] = 0;
			CarData[i][carVergi] = 0;
            CarData[i][carMeslek] = -1;
            PlakaOlustur(CarData[i][carVehicle]);

            for (new j = 0; j < 14; j ++)
			{
                if (j < 5)
				{
                    CarData[i][carWeapons][j] = 0;
                    CarData[i][carAmmo][j] = 0;
                }
                CarData[i][carMods][j] = 0;
            }

    		CarData[i][carVehicle] = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);

            if (CarData[i][carVehicle] != INVALID_VEHICLE_ID) {
                ResetVehicle(CarData[i][carVehicle]);
            }
            RespawnVehicle(CarData[i][carVehicle]);
            mysql_tquery(g_iHandle, "INSERT INTO `cars` (`carModel`) VALUES(0)", "OnCarCreated", "d", i);
            return i;
		}
	}
	return -1;
}

Car_Delete(carid)
{
    if (carid != -1 && CarData[carid][carExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `cars` WHERE `carID` = '%d'", CarData[carid][carID]);
		mysql_tquery(g_iHandle, string);

		if (IsValidVehicle(CarData[carid][carVehicle]))
			DestroyVehicle(CarData[carid][carVehicle]);

		for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
		    Backpack_Delete(i);
		}
		Car_RemoveAllItems(carid);

        CarData[carid][carExists] = false;
	    CarData[carid][carID] = 0;
	    CarData[carid][carOwner] = 0;
	    CarData[carid][carVehicle] = 0;
	}
	return 1;
}

Car_Save(carid)
{
	static
	    query[6000];

	if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
	{
	    for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
	    }
	}
	format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d'",
        CarData[carid][carModel],
        CarData[carid][carOwner],
        CarData[carid][carPos][0],
        CarData[carid][carPos][1],
        CarData[carid][carPos][2],
        CarData[carid][carPos][3],
        CarData[carid][carColor1],
        CarData[carid][carColor2],
        CarData[carid][carPaintjob],
        CarData[carid][carLocked]
	);
	format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d', `carDistance` = '%d', `carImmo` = '%d', `carKilitSeviye` = '%d', `carAlarm` = '%d', `carHurda` = '%d', `carVergi` = '%d'",
		query,
		CarData[carid][carMods][0],
		CarData[carid][carMods][1],
		CarData[carid][carMods][2],
		CarData[carid][carMods][3],
		CarData[carid][carMods][4],
		CarData[carid][carMods][5],
		CarData[carid][carMods][6],
		CarData[carid][carMods][7],
		CarData[carid][carMods][8],
		CarData[carid][carMods][9],
		CarData[carid][carMods][10],
		CarData[carid][carMods][11],
		CarData[carid][carMods][12],
		CarData[carid][carMods][13],
		CarData[carid][carDistance],
		CarData[carid][carImmobiliser],
		CarData[carid][carKilitSeviye],
		CarData[carid][carAlarm],
		CarData[carid][carHurda],
		CarData[carid][carVergi]
	);
	format(query, sizeof(query), "%s, `carImpounded` = '%d', `carImpoundPrice` = '%d', `carFaction` = '%d', `carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carWeapon4` = '%d', `carWeapon5` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d', `carAmmo4` = '%d', `carAmmo5` = '%d', `carAnahtar` = '%d', `carMeslek` = '%d', `carKiralik` = '%d', `carKiraUcret` = '%d', `carKiraZaman` = '%d', `carBirlik` = '%d', `carPrice` = '%d', `carPlaka` = '%s' WHERE `carID` = '%d'",
		query,
		CarData[carid][carImpounded],
		CarData[carid][carImpoundPrice],
		CarData[carid][carFaction],
		CarData[carid][carWeapons][0],
		CarData[carid][carWeapons][1],
		CarData[carid][carWeapons][2],
		CarData[carid][carWeapons][3],
		CarData[carid][carWeapons][4],
		CarData[carid][carAmmo][0],
		CarData[carid][carAmmo][1],
		CarData[carid][carAmmo][2],
		CarData[carid][carAmmo][3],
		CarData[carid][carAmmo][4],
		CarData[carid][carAnahtar],
		CarData[carid][carMeslek],
		CarData[carid][carKiralik],
		CarData[carid][carKiraUcret],
		CarData[carid][carKiraZaman],
		CarData[carid][carBirlik],
		CarData[carid][carPrice],
		CarData[carid][carPlaka],
		CarData[carid][carID]
	);
	return mysql_tquery(g_iHandle, query);
}

Entrance_Delete(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `entrances` WHERE `entranceID` = '%d'", EntranceData[entranceid][entranceID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		    DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);

		if (EntranceData[entranceid][entranceType] == 3)
		    DestroyForklifts(entranceid);

	    EntranceData[entranceid][entranceExists] = false;
	    EntranceData[entranceid][entranceID] = 0;
	}
	return 1;
}

Entrance_Save(entranceid)
{
	static
	    query[1024];

	format(query, sizeof(query), "UPDATE `entrances` SET `entranceName` = '%s', `entrancePass` = '%s', `entranceIcon` = '%d', `entranceLocked` = '%d', `entrancePosX` = '%.4f', `entrancePosY` = '%.4f', `entrancePosZ` = '%.4f', `entrancePosA` = '%.4f', `entranceIntX` = '%.4f', `entranceIntY` = '%.4f', `entranceIntZ` = '%.4f', `entranceIntA` = '%.4f', `entranceInterior` = '%d', `entranceExterior` = '%d', `entranceExteriorVW` = '%d', `entranceType` = '%d'",
	    SQL_ReturnEscaped(EntranceData[entranceid][entranceName]),
	    SQL_ReturnEscaped(EntranceData[entranceid][entrancePass]),
	    EntranceData[entranceid][entranceIcon],
	    EntranceData[entranceid][entranceLocked],
	    EntranceData[entranceid][entrancePos][0],
	    EntranceData[entranceid][entrancePos][1],
	    EntranceData[entranceid][entrancePos][2],
	    EntranceData[entranceid][entrancePos][3],
	    EntranceData[entranceid][entranceInt][0],
	    EntranceData[entranceid][entranceInt][1],
	    EntranceData[entranceid][entranceInt][2],
	    EntranceData[entranceid][entranceInt][3],
	    EntranceData[entranceid][entranceInterior],
	    EntranceData[entranceid][entranceExterior],
	    EntranceData[entranceid][entranceExteriorVW],
	    EntranceData[entranceid][entranceType]
	);
	format(query, sizeof(query), "%s, `entranceCustom` = '%d', `entranceWorld` = '%d', `entranceBaglanti` = '%d' WHERE `entranceID` = '%d'",
	    query,
	    EntranceData[entranceid][entranceCustom],
	    EntranceData[entranceid][entranceWorld],
	    EntranceData[entranceid][entranceBaglanti],
	    EntranceData[entranceid][entranceID]
	);
	return mysql_tquery(g_iHandle, query);
}


Fabrika_Kaydet(fabrikaid)
{
	static
	    query[1024];

	format(query, sizeof(query), "UPDATE `fabrikalar` SET `fabrikaAd` = '%s', `fabrikaTip` = '%d', `fabrikaPosX` = '%.4f', `fabrikaPosY` = '%.4f', `fabrikaPosZ` = '%.4f', `fabrikaUretimHizi` = '%f', `fabrikaBirlik` = '%d', `fabrikaTime` = '%d', `fabrikaDepo1` = '%d', `fabrikaDepo2` = '%d', `fabrikaDepo3` = '%d', `fabrikaDepo4` = '%d'",
	    SQL_ReturnEscaped(Fabrikalar[fabrikaid][fabrikaAd]),
	    Fabrikalar[fabrikaid][fabrikaTip],
	    Fabrikalar[fabrikaid][fabrikaPos][0],
	    Fabrikalar[fabrikaid][fabrikaPos][1],
	    Fabrikalar[fabrikaid][fabrikaPos][2],
	    Fabrikalar[fabrikaid][fabrikaUretimHizi],
	    Fabrikalar[fabrikaid][fabrikaBirlik],
	    Fabrikalar[fabrikaid][fabrikaTime],
	    Fabrikalar[fabrikaid][fabrikaDepo][0],
	    Fabrikalar[fabrikaid][fabrikaDepo][1],
	    Fabrikalar[fabrikaid][fabrikaDepo][2],
	    Fabrikalar[fabrikaid][fabrikaDepo][3]
	);
	format(query, sizeof(query), "%s WHERE `fabrikaID` = '%d'",
	    query,
	    Fabrikalar[fabrikaid][fabrikaID]
	);
	return mysql_tquery(g_iHandle, query);
}

Mezar_Kaydet(mezarid)
{
	static
	    query[1024];

	format(query, sizeof(query), "UPDATE `mezarlar` SET `mezarAd` = '%s', `mezarTarih` = '%s', `mezarYazit` = '%s', `mezarOtopsi` = '%s', `mezarPosX` = '%.4f', `mezarPosY` = '%.4f', `mezarPosZ` = '%.4f', `mezarPosA` = '%.4f'",
	    SQL_ReturnEscaped(Mezarlar[mezarid][mezarAd]),
	    SQL_ReturnEscaped(Mezarlar[mezarid][mezarTarih]),
	    SQL_ReturnEscaped(Mezarlar[mezarid][mezarYazit]),
	    SQL_ReturnEscaped(Mezarlar[mezarid][mezarOtopsi]),
	    Mezarlar[mezarid][mezarPos][0],
	    Mezarlar[mezarid][mezarPos][1],
	    Mezarlar[mezarid][mezarPos][2],
	    Mezarlar[mezarid][mezarPos][3]
	);
	format(query, sizeof(query), "%s WHERE `mezarID` = '%d'",
	    query,
	    Mezarlar[mezarid][mezarID]
	);
	return mysql_tquery(g_iHandle, query);
}
Hood_Kaydet(hoodid)
{
	static
	    query[1024];

	format(query, sizeof(query), "UPDATE `onaylihoodlar` SET `hoodAd` = '%s', `hoodPickup` = '%d', `hoodPosX` = '%.4f', `hoodPosY` = '%.4f', `hoodPosZ` = '%.4f', `hoodPosA` = '%.4f'",
	    SQL_ReturnEscaped(OnayliHoodlar[hoodid][hoodAd]),
		OnayliHoodlar[hoodid][hoodPickup],
	    OnayliHoodlar[hoodid][hoodPos][0],
	    OnayliHoodlar[hoodid][hoodPos][1],
	    OnayliHoodlar[hoodid][hoodPos][2],
	    OnayliHoodlar[hoodid][hoodPos][3]
	);
	format(query, sizeof(query), "%s WHERE `hoodID` = '%d'",
	    query,
	    OnayliHoodlar[hoodid][hoodID]
	);
	return mysql_tquery(g_iHandle, query);
}


IsPlayerNearMine(playerid)
{
	new
	    id = -1;

	if ((id = Job_NearestPoint(playerid, 10.0)) != -1 && JobData[id][jobType] == 5)
		return 1;

	return 0;
}

IsPlayerNearArrest(playerid)
{
	new
	    id = Arrest_Nearest(playerid);

	return (id != -1);
}

IsPlayerInCityHall(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 4)
	    return 1;

	return 0;
}

IddaaBayidemi(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 6)
	    return 1;

	return 0;
}


IsPlayerInWarehouse(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 3)
	    return 1;

	return 0;
}

Entrance_Inside(playerid)
{
	if (PlayerData[playerid][pEntrance] != -1)
	{
	    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == PlayerData[playerid][pEntrance] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld])
	        return i;
	}
	return -1;
}


Entrance_GetLink(playerid)
{
	if (GetPlayerVirtualWorld(playerid) > 0)
	{
	    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == GetPlayerVirtualWorld(playerid) - 7000)
			return EntranceData[i][entranceID];
	}
	return -1;
}

Entrance_Nearest(playerid)
{
    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
	{
		if (GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
			return i;
	}
	return -1;
}

Job_NearestPoint(playerid, Float:radius = 4.0)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, radius, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2])) {
		return i;
	}
	return -1;
}

Job_Nearest(playerid)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, 2.5, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]))
	{
		if (GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
			return i;
	}
	return -1;
}

Entrance_Refresh(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		    DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);
		new string[256];
        format(string, sizeof(string), "{f5f629}[Bina]\nAd: {FFFFFF}%s\n{f5f629}Kilit Durumu: %s", EntranceData[entranceid][entranceName],(EntranceData[entranceid][entranceLocked]) ? ("{FF0000}Kilitli") : ("{2ECC71}Kilitsiz"));
		EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2]+0.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
        EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(19197, 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);

	//	if (EntranceData[entranceid][entranceIcon] != 0)
	//		EntranceData[entranceid][entranceMapIcon] = CreateDynamicMapIcon(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceIcon], 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
	}
	return 1;
}

Mezar_Yenile(mezarid)
{
	if (mezarid != -1 && Mezarlar[mezarid][mezarVarmi])
	{
		if (IsValidDynamic3DTextLabel(Mezarlar[mezarid][mezarText3D]))
		    DestroyDynamic3DTextLabel(Mezarlar[mezarid][mezarText3D]);

		if (IsValidDynamicObject(Mezarlar[mezarid][mezarObject]))
		    DestroyDynamicObject(Mezarlar[mezarid][mezarObject]);

		new string[1024];
		format(string,sizeof(string),"\
				"G"["M"Mezar Taþý %d"G"] \n\
				"G"Ad: "B"%s \n\
				"G"Ölüm Tarihi: "B"%s \n\
				"G"Yazýt: "B"%s \n\
				"G"Otopsi: "B"%s \
		",mezarid, Mezarlar[mezarid][mezarAd],  Mezarlar[mezarid][mezarTarih],  Mezarlar[mezarid][mezarYazit], Mezarlar[mezarid][mezarOtopsi]);

		Mezarlar[mezarid][mezarText3D] = CreateDynamic3DTextLabel(string, COLOR_RED, Mezarlar[mezarid][mezarPos][0], Mezarlar[mezarid][mezarPos][1]+0.5, Mezarlar[mezarid][mezarPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
  		Mezarlar[mezarid][mezarObject] = CreateDynamicObject(19339, Mezarlar[mezarid][mezarPos][0], Mezarlar[mezarid][mezarPos][1], Mezarlar[mezarid][mezarPos][2]-0.5, 0.0, 0.0, Mezarlar[mezarid][mezarPos][3], 0, 0);
  	}
	return 1;
}
Hood_Yenile(hoodid)
{
	if (hoodid != -1 && OnayliHoodlar[hoodid][hoodVarmi])
	{
		if (IsValidDynamic3DTextLabel(OnayliHoodlar[hoodid][hoodText3D]))
		    DestroyDynamic3DTextLabel(OnayliHoodlar[hoodid][hoodText3D]);

		if (IsValidDynamicPickup(OnayliHoodlar[hoodid][hoodPickup]))
		    DestroyDynamicPickup(OnayliHoodlar[hoodid][hoodPickup]);

		new string[1024];
		format(string,sizeof(string),"\
				"G"[Onaylý Hood %d] \n\
				Birlik Ad: %s \n\
		",hoodid, OnayliHoodlar[hoodid][hoodAd],  OnayliHoodlar[hoodid][hoodAd]);

        OnayliHoodlar[hoodid][hoodPickup] = CreateDynamicPickup(1313, 23, OnayliHoodlar[hoodid][hoodPos][0], OnayliHoodlar[hoodid][hoodPos][1], OnayliHoodlar[hoodid][hoodPos][2], 0, 0);
		OnayliHoodlar[hoodid][hoodText3D] = CreateDynamic3DTextLabel(string, COLOR_BLUE, OnayliHoodlar[hoodid][hoodPos][0], OnayliHoodlar[hoodid][hoodPos][1]+0.5, OnayliHoodlar[hoodid][hoodPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

  	}
	return 1;
}


Fabrika_Yenile(fabrikaid)
{
	if (fabrikaid != -1 && Fabrikalar[fabrikaid][fabrikaVarmi])
	{
		if (IsValidDynamic3DTextLabel(Fabrikalar[fabrikaid][fabrikaText3D]))
		    DestroyDynamic3DTextLabel(Fabrikalar[fabrikaid][fabrikaText3D]);

		if (IsValidDynamicPickup(Fabrikalar[fabrikaid][fabrikaPickup]))
		    DestroyDynamicPickup(Fabrikalar[fabrikaid][fabrikaPickup]);

		if (IsValidDynamicMapIcon(Fabrikalar[fabrikaid][fabrikaMapIcon]))
		    DestroyDynamicMapIcon(Fabrikalar[fabrikaid][fabrikaMapIcon]);

		Fabrikalar[fabrikaid][fabrikaText3D] = CreateDynamic3DTextLabel(Fabrikalar[fabrikaid][fabrikaAd], COLOR_DARKBLUE, Fabrikalar[fabrikaid][fabrikaPos][0], Fabrikalar[fabrikaid][fabrikaPos][1], Fabrikalar[fabrikaid][fabrikaPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
        Fabrikalar[fabrikaid][fabrikaPickup] = CreateDynamicPickup(1254, 23, Fabrikalar[fabrikaid][fabrikaPos][0], Fabrikalar[fabrikaid][fabrikaPos][1], Fabrikalar[fabrikaid][fabrikaPos][2], 0, 0);
		Fabrikalar[fabrikaid][fabrikaMapIcon] = CreateDynamicMapIcon(Fabrikalar[fabrikaid][fabrikaPos][0], Fabrikalar[fabrikaid][fabrikaPos][1], Fabrikalar[fabrikaid][fabrikaPos][2], 11, 0, 0,0 );
        new tip[256], birlikad[256];
  		new sahipbirlik = GetFactionByID(Fabrikalar[fabrikaid][fabrikaBirlik]);
		if(Fabrikalar[fabrikaid][fabrikaBirlik] != -1) format(birlikad, sizeof(birlikad), "%s", FactionData[sahipbirlik][factionName]);
		else format(birlikad, sizeof(birlikad), "Yok");
		if(Fabrikalar[fabrikaid][fabrikaTip] == 1) format(tip, sizeof(tip), "Atýk Fabrikasý");
        if(Fabrikalar[fabrikaid][fabrikaTip] == 2) format(tip, sizeof(tip), "Tohum Fabrikasý");
		new label[1024];
		format(label, sizeof(label), "{FF6347}[ %s ]\n{FFEA47}Ele Geçiren: {FFFFFF}%s\n{FFEA47}Tip: {FFFFFF}%s\n{FFEA47}Üretim Hýzý: {FFFFFF}%.2f", Fabrikalar[fabrikaid][fabrikaAd], birlikad, tip, Fabrikalar[fabrikaid][fabrikaUretimHizi]);
		UpdateDynamic3DTextLabelText(Fabrikalar[fabrikaid][fabrikaText3D], COLOR_WHITE, label);
	}
	return 1;
}

DestroyForklifts(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			DestroyVehicle(EntranceData[entranceid][entranceForklift][i]);

        	EntranceData[entranceid][entranceForklift][i] = INVALID_VEHICLE_ID;
        }
        return 1;
	}
	return 0;
}

CreateForklifts(entranceid)
{
    if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
        //EntranceData[entranceid][entranceForklift][0] = CreateVehicle(530,1300.6760,5.8440,1000.7919,180.2377,114,1,-1); // forklift 1
		//EntranceData[entranceid][entranceForklift][1] = CreateVehicle(530,1303.4263,5.8919,1000.7883,181.4835,119,1,-1); // forklift 2
		//EntranceData[entranceid][entranceForklift][2] = CreateVehicle(530,1305.7365,5.7953,1000.7904,179.7971,122,1,-1); // forklift 3
		//EntranceData[entranceid][entranceForklift][3] = CreateVehicle(530,1308.2925,-8.6468,1000.7963,89.4510,4,1,-1); // forklift 4
		//EntranceData[entranceid][entranceForklift][4] = CreateVehicle(530,1308.2974,-10.9627,1000.7974,91.8611,13,1,-1); // forklift 5
		//EntranceData[entranceid][entranceForklift][5] = CreateVehicle(530,1308.3057,-13.6396,1000.7997,90.6285,110,1,-1); // forklift 6
		//EntranceData[entranceid][entranceForklift][6] = CreateVehicle(530,1308.2751,-16.5108,1000.7980,90.2175,111,1,-1); // forklift 7

		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			SetVehicleVirtualWorld(EntranceData[entranceid][entranceForklift][i], EntranceData[entranceid][entranceWorld]);
			LinkVehicleToInterior(EntranceData[entranceid][entranceForklift][i], 18);

			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehFuel] = 100;
			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehLoadType] = 0;
		}
	}
	return 1;
}


Fabrika_Olustur(playerid, name[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_FABRIKA; i ++)
		{
	    	if (!Fabrikalar[i][fabrikaVarmi])
		    {
    	        Fabrikalar[i][fabrikaVarmi] = true;

        	    Fabrikalar[i][fabrikaBirlik] = -1;
                Fabrikalar[i][fabrikaTip] = 0;
				Fabrikalar[i][fabrikaUretimHizi] = 1.5;

				format(Fabrikalar[i][fabrikaAd], 32, name);

    	        Fabrikalar[i][fabrikaPos][0] = x;
    	        Fabrikalar[i][fabrikaPos][1] = y;
    	        Fabrikalar[i][fabrikaPos][2] = z;
    	        Fabrikalar[i][fabrikaPos][3] = angle;

				Fabrika_Yenile(i);
				mysql_tquery(g_iHandle, "INSERT INTO `fabrikalar` (`fabrikaTip`) VALUES(0)", "OnFabrikaCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Mezar_Olustur(playerid, ad[], yazit[], otopsi[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_MEZAR; i ++)
		{
	    	if (!Mezarlar[i][mezarVarmi])
		    {
            	x += 1.0 * floatsin(-angle, degrees);
				y += 1.0 * floatcos(-angle, degrees);

    	        Mezarlar[i][mezarVarmi] = true;
    	        Mezarlar[i][mezarPos][0] = x;
    	        Mezarlar[i][mezarPos][1] = y;
    	        Mezarlar[i][mezarPos][2] = z;
    	        Mezarlar[i][mezarPos][3] = angle;
				format(Mezarlar[i][mezarAd], 32, ad);
				format(Mezarlar[i][mezarTarih], 32, ReturnDate());
				format(Mezarlar[i][mezarYazit], 128, yazit);
				format(Mezarlar[i][mezarOtopsi], 32, otopsi);
				Mezar_Yenile(i);
				mysql_tquery(g_iHandle, "INSERT INTO `mezarlar` (`mezarAd`) VALUES('Yok')", "OnMezarCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Hood_Olustur(playerid, ad[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_ONAYLIHOOD; i ++)
		{
	    	if (!OnayliHoodlar[i][hoodVarmi])
		    {
            	x += 1.0 * floatsin(-angle, degrees);
				y += 1.0 * floatcos(-angle, degrees);

    	        OnayliHoodlar[i][hoodVarmi] = true;
    	        OnayliHoodlar[i][hoodPos][0] = x;
    	        OnayliHoodlar[i][hoodPos][1] = y;
    	        OnayliHoodlar[i][hoodPos][2] = z;
    	        OnayliHoodlar[i][hoodPos][3] = angle;
				format(OnayliHoodlar[i][hoodAd], 32, ad);
				Hood_Yenile(i);
				mysql_tquery(g_iHandle, "INSERT INTO `onaylihoodlar` (`hoodAd`) VALUES('Yok')", "OnHoodCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Entrance_Create(playerid, name[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!EntranceData[i][entranceExists])
		    {
    	        EntranceData[i][entranceExists] = true;
        	    EntranceData[i][entranceIcon] = 0;
        	    EntranceData[i][entranceType] = 0;
        	    EntranceData[i][entranceCustom] = 0;
        	    EntranceData[i][entranceLocked] = 0;

				format(EntranceData[i][entranceName], 32, name);
				EntranceData[i][entrancePass][0] = 0;

    	        EntranceData[i][entrancePos][0] = x;
    	        EntranceData[i][entrancePos][1] = y;
    	        EntranceData[i][entrancePos][2] = z;
    	        EntranceData[i][entrancePos][3] = angle;

                EntranceData[i][entranceInt][0] = x;
                EntranceData[i][entranceInt][1] = y;
                EntranceData[i][entranceInt][2] = z + 10000;
                EntranceData[i][entranceInt][3] = 0.0000;

				EntranceData[i][entranceInterior] = 0;
				EntranceData[i][entranceExterior] = GetPlayerInterior(playerid);
				EntranceData[i][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

				Entrance_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `entrances` (`entranceType`) VALUES(0)", "OnEntranceCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}



AktorEkle(ad[], skin, Float:x, Float:y, Float:z, Float:a, interior = 0, world = 0)
{
	for (new i = 0; i != MAX_DYNAMIC_ACTORS; i ++)
	{
 		if (!Actors[i][actorVarmi])
		{
		    Actors[i][actorVarmi] = true;
            Actors[i][actorReal] = CreateActor(skin, x, y, z, a);
            new labelformat[240];
            format(labelformat, 240, "{FFFFFF} [{FFD700}%s{FFFFFF}] \n{FFFFFF} [Giriþ için {66CDAA}'ALT'{FFFFFF} tuþuna basýn{FFFFFF}]", ad); // aktör alt tuþu
            Actors[i][actorLabel] = CreateDynamic3DTextLabel(labelformat, 0x5959ACFF, x, y, z+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, world, -1);
            Actors[i][actorSkin] = skin;
            Actors[i][actorPos][0] = x;
            Actors[i][actorPos][1] = y;
            Actors[i][actorPos][2] = z;
            Actors[i][actorPos][3] = a;
            Actors[i][actorWorld] = world;
            Actors[i][actorInterior] = interior;
            //SetActorInterior(Actors[i][actorReal], -1);
            SetActorVirtualWorld(Actors[i][actorReal], world);
           	format(Actors[i][actorAd], 32, ad);
			return i;
		}
	}
	return -1;
}

KomutEkle(ad[], tanim[], katagori, olusum = -1)
{
	for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
	{
 		if (!Komutlar[i][komutVarmi])
		{
		    Komutlar[i][komutVarmi] = true;
            Komutlar[i][komutKatagori] = katagori;
            Komutlar[i][komutOlusum] = olusum;
           	format(Komutlar[i][komutAd], 24, ad);
           	format(Komutlar[i][komutTanim], 256, tanim);
			return i;
		}
	}
	return -1;
}



Business_RemoveVehicle(bizid, modelid)
{
	static
	    query[128];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (DealershipCars[bizid][i][vehModel] == modelid)
	{
	    DealershipCars[bizid][i][vehModel] = 0;
	    DealershipCars[bizid][i][vehPrice] = 0;

	    format(query, sizeof(query), "DELETE FROM `dealervehicles` WHERE `ID` = '%d' AND `vehID` = '%d'", BusinessData[bizid][bizID], DealershipCars[bizid][i][vehID]);
		mysql_tquery(g_iHandle, query);

		return 1;
	}
	return 0;
}

Business_AddVehicle(bizid, modelid, price)
{
	static
	    query[128];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (!DealershipCars[bizid][i][vehModel])
	{
	    DealershipCars[bizid][i][vehModel] = modelid;
	    DealershipCars[bizid][i][vehPrice] = price;

	    format(query, sizeof(query), "INSERT INTO `dealervehicles` (`ID`, `vehModel`, `vehPrice`) VALUES('%d', '%d', '%d')", BusinessData[bizid][bizID], modelid, price);
	    mysql_tquery(g_iHandle, query, "OnDealerCarCreated", "dd", bizid, i);

	    return 1;
	}
	return 0;
}

Business_CarMenu(playerid, bizid)
{
	new string[2056];
	string[0] = 0;
    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (DealershipCars[bizid][i][vehModel]) {
			format(string, sizeof(string), "%s%d\n~g~%s\n", string, DealershipCars[bizid][i][vehModel], FormatNumber(DealershipCars[bizid][i][vehPrice]));
		}
	}
    ShowPlayerDialog(playerid, MODEL_SELECTION_BUY_CAR, DIALOG_STYLE_PREVMODEL, "Arac Satinalma", string, "Sec", "Iptal");
    return 1;
}

Business_EditCars(playerid, bizid)
{
	new string[2056];
	string[0] = 0;
    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (DealershipCars[bizid][i][vehModel]) {
			format(string, sizeof(string), "%s%d\n~g~%s\n", string, DealershipCars[bizid][i][vehModel], FormatNumber(DealershipCars[bizid][i][vehPrice]));
		}
	}
    ShowPlayerDialog(playerid, MODEL_SELECTION_DEALER, DIALOG_STYLE_PREVMODEL, "Bayi Araclari", string, "Sec", "Iptal");
	return 1;
}

forward Pump_Load(bizid);
public Pump_Load(bizid)
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if ((id = Pump_GetFreeID()) != -1)
	{
	    PumpData[id][pumpExists] = true;
	    PumpData[id][pumpBusiness] = bizid;
	    PumpData[id][pumpID] = cache_get_field_int(i, "pumpID");
	    PumpData[id][pumpPos][0] = cache_get_field_float(i, "pumpPosX");
	    PumpData[id][pumpPos][1] = cache_get_field_float(i, "pumpPosY");
	    PumpData[id][pumpPos][2] = cache_get_field_float(i, "pumpPosZ");
	    PumpData[id][pumpPos][3] = cache_get_field_float(i, "pumpPosA");
	    PumpData[id][pumpFuel] = cache_get_field_int(i, "pumpFuel");

	    PumpData[id][pumpObject] = CreateDynamicObject(1676, PumpData[id][pumpPos][0], PumpData[id][pumpPos][1], PumpData[id][pumpPos][2], 0.0, 0.0, PumpData[id][pumpPos][3]);
	    Pump_Refresh(id);
	}
	return 1;
}

Pump_GetFreeID()
{
	for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (!PumpData[i][pumpExists]) {
	    return i;
	}
	return -1;
}

Pump_Delete(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d' AND `pumpID` = '%d'", BusinessData[PumpData[pumpid][pumpBusiness]][bizID], PumpData[pumpid][pumpID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
		    DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		foreach (new i : Player) if (PlayerData[i][pGasPump] == pumpid) {
		    StopRefilling(i);
		}
	    PumpData[pumpid][pumpExists] = false;
	    PumpData[pumpid][pumpFuel] = 0;
	}
	return 1;
}

Pump_Create(playerid, bizid)
{
    static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle,
		string[64],
		id = -1;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		if ((id = Pump_GetFreeID()) != -1)
  		{
	        x += 5.0 * floatsin(-angle, degrees);
	        y += 5.0 * floatcos(-angle, degrees);

			PumpData[id][pumpExists] = true;
			PumpData[id][pumpBusiness] = bizid;
			PumpData[id][pumpPos][0] = x;
			PumpData[id][pumpPos][1] = y;
			PumpData[id][pumpPos][2] = z;
			PumpData[id][pumpPos][3] = angle;
            PumpData[id][pumpFuel] = 2000;
			PumpData[id][pumpObject] = CreateDynamicObject(1676, x, y, z, 0.0, 0.0, angle);

			format(string, sizeof(string), "INSERT INTO `pumps` (`ID`) VALUES(%d)", BusinessData[bizid][bizID]);
			mysql_tquery(g_iHandle, string, "OnPumpCreated", "d", id);
			return id;
		}
	}
	return -1;
}

Pump_Refresh(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
	    static
	        string[128];

		//format(string, sizeof(string), "{FFFFFF}[{FFD700}Benzin Ýstasyonu{FFFFFF}]\n[/arac benzin]");

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
            DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(string, 0xFFB400FF, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 15.0);
        PumpData[pumpid][pumpObject] = CreateDynamicObject(1676, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 0.0, 0.0, PumpData[pumpid][pumpPos][3]);
	}
	return 1;
}

Pump_Save(pumpid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `pumps` SET `pumpPosX` = '%.4f', `pumpPosY` = '%.4f', `pumpPosZ` = '%.4f', `pumpPosA` = '%.4f', `pumpFuel` = '%d' WHERE `ID` = '%d' AND `pumpID` = '%d'",
	    PumpData[pumpid][pumpPos][0],
	    PumpData[pumpid][pumpPos][1],
	    PumpData[pumpid][pumpPos][2],
		PumpData[pumpid][pumpPos][3],
	    PumpData[pumpid][pumpFuel],
	    BusinessData[PumpData[pumpid][pumpBusiness]][bizID],
	    PumpData[pumpid][pumpID]
	);
	return mysql_tquery(g_iHandle, query);
}

House_Create(playerid, address[], price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!HouseData[i][houseExists])
		    {
    	        HouseData[i][houseExists] = true;
        	    HouseData[i][houseOwner] = 0;
            	HouseData[i][housePrice] = price;
            	HouseData[i][houseMoney] = 0;

				format(HouseData[i][houseAddress], 32, address);

    	        HouseData[i][housePos][0] = x;
    	        HouseData[i][housePos][1] = y;
    	        HouseData[i][housePos][2] = z;
    	        HouseData[i][housePos][3] = angle;


                HouseData[i][garajTip] = 0;
                HouseData[i][garajPos][0] = 0;
    	        HouseData[i][garajPos][1] = 0;
    	        HouseData[i][garajPos][2] = 0;
    	        HouseData[i][garajPos][3] = 0;

                HouseData[i][houseInt][0] = 244.0710;
                HouseData[i][houseInt][1] = 304.9403;
                HouseData[i][houseInt][2] = 999.1484;
                HouseData[i][houseInt][3] = 270.0000;

            	HouseData[i][houseBirlik] = -1;

		        HouseData[i][houseKiralayan] = -1;
			    HouseData[i][houseKiralanabilir] = false;
			    HouseData[i][houseKiraZaman] = 0;
			    HouseData[i][houseKiraSure] = 0;
			    HouseData[i][houseKiraUcret] = 0;
                HouseData[i][houseAnahtar] = -1;
                HouseData[i][houseLevel] = 1;

				HouseData[i][houseInterior] = 1;
				HouseData[i][houseExterior] = GetPlayerInterior(playerid);
				HouseData[i][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

				HouseData[i][houseLights] = true;
				HouseData[i][houseLocked] = false;

				House_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `houses` (`houseOwner`) VALUES(0)", "OnHouseCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

House_RemoveFurniture(houseid)
{
	if (HouseData[houseid][houseExists])
	{
	    static
	        string[64];

	    for (new i = 0; i != MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
	        FurnitureData[i][furnitureExists] = false;
	        FurnitureData[i][furnitureModel] = 0;
            FurnitureData[i][furnitureHouse] = -1;

	        DestroyDynamicObject(FurnitureData[i][furnitureObject]);
		}
		format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

House_Delete(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `houses` WHERE `houseID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		    DestroyDynamicPickup(HouseData[houseid][housePickup]);

		if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		    DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

        for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
		    Backpack_Delete(i);
		}
		House_RemoveFurniture(houseid);
		House_RemoveAllItems(houseid);

	    HouseData[houseid][houseExists] = false;
	    HouseData[houseid][houseOwner] = 0;
	    HouseData[houseid][houseID] = 0;
	}
	return 1;
}

House_IsOwner(playerid, houseid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((HouseData[houseid][houseExists] && HouseData[houseid][houseOwner] != 0) && HouseData[houseid][houseOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

/*House_Birlik(playerid, houseid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((HouseData[houseid][houseExists] && HouseData[houseid][houseOwner] != 0) && HouseData[houseid][houseBirlik] == PlayerData[playerid][pFactionID])
		return 1;

	return 0;
}*/


Business_ProductMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	static
	    string[800];

	switch (BusinessData[bizid][bizType])
	{
	    case 1, 6:
	    {
			format(string, sizeof(string), "Sprey - %s\nSu Þiþesi - %s\nSoda Þiþesi - %s\nKaykay - %s\nBenzin Kutusu - %s\nLevye - %s\nMaske - %s\nÝlkyardým Çantasý - %s\nBeyzbol Sopasý - %s\nDondurulmuþ Pizza - %s\nDondurulmuþ Burger - %s\nZar - %s\nSigara - %s\nÝp - %s\nGöz Baðý - %s\nKalas - %s\nIstaka - %s\nNargile - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7]),
				FormatNumber(BusinessData[bizid][bizPrices][8]),
				FormatNumber(BusinessData[bizid][bizPrices][9]),
				FormatNumber(BusinessData[bizid][bizPrices][10]),
				FormatNumber(BusinessData[bizid][bizPrices][11]),
				FormatNumber(BusinessData[bizid][bizPrices][12]),
				FormatNumber(BusinessData[bizid][bizPrices][13]),
				FormatNumber(BusinessData[bizid][bizPrices][14]),
                FormatNumber(BusinessData[bizid][bizPrices][15]),
                FormatNumber(BusinessData[bizid][bizPrices][16]),
                FormatNumber(BusinessData[bizid][bizPrices][17]),
                FormatNumber(BusinessData[bizid][bizPrices][18]),
                FormatNumber(BusinessData[bizid][bizPrices][19]),
                FormatNumber(BusinessData[bizid][bizPrices][20])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Ürün Düzenle", string, "Düzenle", "{FF6347}Iptal");
		}
		case 2:
	    {
			format(string, sizeof(string), "Þarjör - %s\nMermi - %s\nColt 45 - %s\nRemington 870 - %s\nMuþta - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Ürün Düzenle", string, "Düzenle", "{FF6347}Iptal");
		}
		case 3:
	    {
			format(string, sizeof(string), "Kýyafetler - %s\nAksesuarlar - $50",
				FormatNumber(BusinessData[bizid][bizPrices][0])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Ürün Düzenle", string, "Düzenle", "{FF6347}Iptal");
		}
		case 4:
	    {
			format(string, sizeof(string), "Su - %s\nSoda - %s\nPatates Kýzartmasý - %s\nKüçük Boy Menü - %s\nOrta Boy Menü - %s\nBüyük Boy Menü - %s\nSalata - %s",
    			FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Ürün Düzenle", string, "Düzenle", "{FF6347}Iptal");
		}
		case 7:
	    {
	        string[0] = 0;

	        for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
	            format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
			}
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Ürün Düzenle", string, "Düzenle", "{FF6347}Iptal");
		}
		case 8:
	    {
	      	format(string, sizeof(string), "Akýllý Telefon - %s\nGPS Cihazý - %s\nPortatif Radyo (Telsiz) - %s\nMüzik Kutusu (Boombox) - %s\nKamera(/kamerasatinal) - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Düzenle", "{FF6347}Iptal");
		}
		case 9:
	    {
   			format(string, sizeof(string), "Bira - %s\nViski - %s\nTekila - %s\nÞarap - %s\nVotka - %s\nÞampanya - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Düzenle", "{FF6347}Iptal");
		}
	}
	return 1;
}
Business_PurchaseMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	static
	    string[512];

	switch (BusinessData[bizid][bizType])
	{
	    case 1, 6:
	    {
   			format(string, sizeof(string), "Su Þiþesi\t%s\nSoda Þiþesi\t%s\nBenzin Kutusu\t%s\nLevye\t%s\nMaske\t%s\nBeyzbol Sopasý\t%s\nDondurulmuþ Pizza\t%s\nDondurulmuþ Burger\t%s\nZar\t%s\nSigara\t%s\nÝp\t%s\nGöz Baðý\t%s\nKalas\t%s\nIstaka\t%s\nNargile\t%s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7]),
				FormatNumber(BusinessData[bizid][bizPrices][8]),
				FormatNumber(BusinessData[bizid][bizPrices][9]),
				FormatNumber(BusinessData[bizid][bizPrices][10]),
				FormatNumber(BusinessData[bizid][bizPrices][11]),
                FormatNumber(BusinessData[bizid][bizPrices][12]),
                FormatNumber(BusinessData[bizid][bizPrices][13]),
                FormatNumber(BusinessData[bizid][bizPrices][14]),
                FormatNumber(BusinessData[bizid][bizPrices][15]),
                FormatNumber(BusinessData[bizid][bizPrices][16])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST, BusinessData[bizid][bizName], string, "Satýnal", "{FF6347}Iptal");
		}
		case 2:
	    {
			format(string, sizeof(string), "Þarjör\t%s\nMermi\t%s\nColt 45\t%s\nRemington 870\t%s\nMuþta\t%s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST, BusinessData[bizid][bizName], string, "Satýnal", "{FF6347}Iptal");
		}
		case 3:
	    {
   			format(string, sizeof(string), "Kýyafetler - 100$\nAksesuarlar - 50$",
				FormatNumber(BusinessData[bizid][bizPrices][0])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Satýnal", "{FF6347}Iptal");
		}
		case 4:
		{
            format(string, sizeof(string), "Su\t%s\nSoda\t%s\nPatates Kýzartmasý\t%s\nKüçük Boy Menü\t%s\nOrta Boy Menü\t%s\nBüyük Boy Menü\t%s\nSalata\t%s",
		    	FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST, BusinessData[bizid][bizName], string, "Satýnal", "{FF6347}Iptal");
		}
		case 7:
	    {
	        string[0] = 0;

	        for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
         	   format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
			}
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST, BusinessData[bizid][bizName], string, "Satýnal", "{FF6347}Iptal");
		}
		case 8:
	    {
	      	format(string, sizeof(string), "Akýllý Telefon\t%s\nGPS Cihazý\t%s\nPortatif Radyo (Telsiz)\t%s\nMüzik Kutusu (Boombox)\t%s\nKamera(/kamerasatinal) - %s\nMaymuncuk(25.000$)",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST, BusinessData[bizid][bizName], string, "Satýnal", "{FF6347}Iptal");
		}
		case 9:
	    {
	      	format(string, sizeof(string), "Bira\t%s\nViski\t%s\nTekila\t%s\nÞarap\t%s\nVotka\t%s\nÞampanya\t%s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST, BusinessData[bizid][bizName], string, "Satýnal", "{FF6347}Iptal");
		}
	}
	return 1;
}

Business_Save(bizid)
{
	static
	    query[3500];

	format(query, sizeof(query), "UPDATE `businesses` SET `bizName` = '%s', `bizMessage` = '%s', `bizOrtakName` = '%s', `bizOwner` = '%d', `bizOrtak` = '%d', `bizType` = '%d', `bizPrice` = '%d', `bizPosX` = '%.4f', `bizPosY` = '%.4f', `bizPosZ` = '%.4f', `bizPosA` = '%.4f', `bizIntX` = '%.4f', `bizIntY` = '%.4f', `bizIntZ` = '%.4f', `bizIntA` = '%.4f', `bizInterior` = '%d', `bizExterior` = '%d', `bizExteriorVW` = '%d', `bizLocked` = '%d', `bizVault` = '%d', `bizProducts` = '%d'",
		SQL_ReturnEscaped(BusinessData[bizid][bizName]),
		SQL_ReturnEscaped(BusinessData[bizid][bizMessage]),
		SQL_ReturnEscaped(BusinessData[bizid][bizOrtakName]),
		BusinessData[bizid][bizOwner],
		BusinessData[bizid][bizOrtak],
		BusinessData[bizid][bizType],
		BusinessData[bizid][bizPrice],
		BusinessData[bizid][bizPos][0],
		BusinessData[bizid][bizPos][1],
		BusinessData[bizid][bizPos][2],
		BusinessData[bizid][bizPos][3],
		BusinessData[bizid][bizInt][0],
		BusinessData[bizid][bizInt][1],
		BusinessData[bizid][bizInt][2],
		BusinessData[bizid][bizInt][3],
		BusinessData[bizid][bizInterior],
		BusinessData[bizid][bizExterior],
		BusinessData[bizid][bizExteriorVW],
		BusinessData[bizid][bizLocked],
		BusinessData[bizid][bizVault],
		BusinessData[bizid][bizProducts]
	);
	for (new i = 0; i < 20; i ++) {
		format(query, sizeof(query), "%s, `bizPrice%d` = '%d'", query, i + 1, BusinessData[bizid][bizPrices][i]);
	}
	format(query, sizeof(query), "%s, `bizSpawnX` = '%.4f', `bizSpawnY` = '%.4f', `bizSpawnZ` = '%.4f', `bizSpawnA` = '%.4f', `bizDeliverX` = '%.4f', `bizDeliverY` = '%.4f', `bizDeliverZ` = '%.4f', `bizShipment` = '%d', `bizLoginFee` = '%d' WHERE `bizID` = '%d'",
		query,
		BusinessData[bizid][bizSpawn][0],
		BusinessData[bizid][bizSpawn][1],
		BusinessData[bizid][bizSpawn][2],
		BusinessData[bizid][bizSpawn][3],
		BusinessData[bizid][bizDeliver][0],
		BusinessData[bizid][bizDeliver][1],
		BusinessData[bizid][bizDeliver][2],
		BusinessData[bizid][bizShipment],
		BusinessData[bizid][bizLoginFee],
		BusinessData[bizid][bizID]
	);
	format(BusinessData[bizid][bizOwnerName], 24, GetBusinessOwner(bizid));
	return mysql_tquery(g_iHandle, query);
}

Haber_Kaydet(haberid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `haberler` SET `haberBaslik` = '%s', `haberIcerik` = '%s', `haberYazan` = '%s', `haberTip` = '%d', `haberOkunma` = '%d' WHERE `haberID` = '%d'",
		SQL_ReturnEscaped(Haberler[haberid][haberBaslik]),
		SQL_ReturnEscaped(Haberler[haberid][haberIcerik]),
		SQL_ReturnEscaped(Haberler[haberid][haberYazan]),
		Haberler[haberid][haberTip],
		Haberler[haberid][haberOkunma],
		Haberler[haberid][haberID]
	);
	return mysql_tquery(g_iHandle, query);
}

Business_Inside(playerid)
{
	if (PlayerData[playerid][pBusiness] != -1)
	{
	    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == PlayerData[playerid][pBusiness] && GetPlayerInterior(playerid) == BusinessData[i][bizInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

Car_Inside(playerid)
{
	new carid;

	if (IsPlayerInAnyVehicle(playerid) && (carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1)
	    return carid;

	return -1;
}

Car_Nearest(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		if (IsPlayerInRangeOfPoint(playerid, 4.7, fX, fY, fZ)) {
		    return i;
		}
	}
	return -1;
}


Car_NearestEx(playerid, Float:radius=4.0)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		if (IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ)) {
		    return i;
		}
	}
	return -1;
}

Business_NearestDeliver(playerid)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, 5.0, BusinessData[i][bizDeliver][0], BusinessData[i][bizDeliver][1], BusinessData[i][bizDeliver][2])) {
        return i;
	}
	return -1;
}

Business_Nearest(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]))
	{
		if (GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
			return i;
	}
	return -1;
}

Business_Refresh(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

        if (IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

		static
		    string[512],
		    durum[24];

		if (!BusinessData[bizid][bizOwner]) {
			format(string, sizeof(string), "{FFFFFF}[{07b24f}SATILIK{FFFFFF}]\n{07b24f}Ýþyeri\nFiyat: %s \nÝþyeri Adý: %s ", FormatNumber(BusinessData[bizid][bizPrice]), BusinessData[bizid][bizName]);
            BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
            BusinessData[bizid][bizPickup] = CreateDynamicPickup(19470, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1] , BusinessData[bizid][bizPos][2] - 0.7, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else {
			if (!BusinessData[bizid][bizLocked]) format(durum, 24, "{2ECC71}AÇIK");
			else format(durum, 24, "{FF0000}KAPALI");
			new bizowner[24];
			if(BusinessData[bizid][bizOwner] == 99999999)
			{
			    format(bizowner, 24, "Devlet");
			} else format(bizowner, 24, "%s", BusinessData[bizid][bizOwnerName]);
			new bizortak[24];
			if (!BusinessData[bizid][bizOrtak]) {
			    format(bizortak, 24, "Yok");
			} else format(bizortak, 24, "%s", BusinessData[bizid][bizOrtakName]);
			format(string, sizeof(string), "[%s{FFFFFF}]\n%s\n Sahibi: %s", durum, BusinessData[bizid][bizName], bizowner);
            BusinessData[bizid][bizPickup] = CreateDynamicPickup(1272, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
			if(BusinessData[bizid][bizLoginFee] > 0)
			{
			    new girisfe[256];
				format(girisfe, 256, "\nGiriþ:%s", FormatNumber(BusinessData[bizid][bizLoginFee]));
				strcat(string, girisfe);
			}
			BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string,COLOR_DARKBLUE, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		if (BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0)
		{

		}
	}
	return 1;
}

Business_Create(playerid, type, price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!BusinessData[i][bizExists])
		    {
    	        BusinessData[i][bizExists] = true;
        	    BusinessData[i][bizOwner] = 0;
        	    BusinessData[i][bizOrtak] = 0;
            	BusinessData[i][bizPrice] = price;
            	BusinessData[i][bizType] = type;
                BusinessData[i][bizLoginFee] = 0;
				format(BusinessData[i][bizName], 32, "Ýþyeri");
				format(BusinessData[i][bizOrtakName], 32, "Yok");
                format(BusinessData[i][bizMusic], 256, "");
    	        BusinessData[i][bizPos][0] = x;
    	        BusinessData[i][bizPos][1] = y;
    	        BusinessData[i][bizPos][2] = z;
    	        BusinessData[i][bizPos][3] = angle;

    	        BusinessData[i][bizSpawn][0] = x;
    	        BusinessData[i][bizSpawn][1] = y;
    	        BusinessData[i][bizSpawn][2] = z;
    	        BusinessData[i][bizSpawn][3] = angle;

    	        BusinessData[i][bizDeliver][0] = 0.0;
    	        BusinessData[i][bizDeliver][1] = 0.0;
    	        BusinessData[i][bizDeliver][2] = 0.0;

				if (type == 1) {
                	BusinessData[i][bizInt][0] = -27.3074;
                	BusinessData[i][bizInt][1] = -30.8741;
                	BusinessData[i][bizInt][2] = 1003.5573;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 4;

					BusinessData[i][bizPrices][0] = 100;
		            BusinessData[i][bizPrices][1] = 300;
		            BusinessData[i][bizPrices][2] = 3;
		            BusinessData[i][bizPrices][3] = 7;
		            BusinessData[i][bizPrices][4] = 400;
		            BusinessData[i][bizPrices][5] = 150;
		            BusinessData[i][bizPrices][6] = 45;
		            BusinessData[i][bizPrices][7] = 200;
		            BusinessData[i][bizPrices][8] = 50;
		            BusinessData[i][bizPrices][9] = 250;
		            BusinessData[i][bizPrices][10] = 100;
		            BusinessData[i][bizPrices][11] = 15;
		            BusinessData[i][bizPrices][12] = 35;
                    BusinessData[i][bizPrices][13] = 40;
                    BusinessData[i][bizPrices][14] = 15;
                    BusinessData[i][bizPrices][15] = 15;
                    BusinessData[i][bizPrices][16] = 100;
                    BusinessData[i][bizPrices][17] = 100;
                    BusinessData[i][bizPrices][18] = 50;
                    BusinessData[i][bizPrices][19] = 50;
				}
				else if (type == 2) {
                	BusinessData[i][bizInt][0] = 316.3963;
                	BusinessData[i][bizInt][1] = -169.8375;
                	BusinessData[i][bizInt][2] = 999.6010;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 6;

                    BusinessData[i][bizPrices][0] = 50;
					BusinessData[i][bizPrices][1] = 100;
		            BusinessData[i][bizPrices][2] = 100;
		            BusinessData[i][bizPrices][3] = 400;
		            BusinessData[i][bizPrices][4] = 500;
		            BusinessData[i][bizPrices][5] = 100;
		            BusinessData[i][bizPrices][6] = 50;
		            BusinessData[i][bizPrices][7] = 50;
		            BusinessData[i][bizPrices][8] = 50;
				}
				else if (type == 3) {
                	BusinessData[i][bizInt][0] = 161.4801;
                	BusinessData[i][bizInt][1] = -96.5368;
                	BusinessData[i][bizInt][2] = 1001.8047;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 18;

					BusinessData[i][bizPrices][0] = 50;
		            BusinessData[i][bizPrices][1] = 15;
					}
				else if (type == 4) {
                	BusinessData[i][bizInt][0] = 363.3402;
                	BusinessData[i][bizInt][1] = -74.6679;
                	BusinessData[i][bizInt][2] = 1001.5078;
                	BusinessData[i][bizInt][3] = 315.0000;
					BusinessData[i][bizInterior] = 10;

					BusinessData[i][bizPrices][0] = 2;
		            BusinessData[i][bizPrices][1] = 5;
		            BusinessData[i][bizPrices][2] = 5;
		            BusinessData[i][bizPrices][3] = 10;
		            BusinessData[i][bizPrices][4] = 10;
		            BusinessData[i][bizPrices][5] = 15;
		            BusinessData[i][bizPrices][6] = 10;
				}
				else if (type == 5) {
				    BusinessData[i][bizInt][0] = 1494.5612;
	            	BusinessData[i][bizInt][1] = 1304.2061;
	            	BusinessData[i][bizInt][2] = 1093.2891;
	            	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 3;
				}
				else if (type == 6) {
                	BusinessData[i][bizInt][0] = -27.3383;
                	BusinessData[i][bizInt][1] = -57.6909;
                	BusinessData[i][bizInt][2] = 1003.5469;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 6;

					BusinessData[i][bizPrices][0] = 75;
		            BusinessData[i][bizPrices][1] = 115;
		            BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 90;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 90;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 150;
                    BusinessData[i][bizPrices][12] = 50;
                    BusinessData[i][bizPrices][13] = 40;
		            BusinessData[i][bizPrices][14] = 5;
		            BusinessData[i][bizPrices][15] = 10;
		            BusinessData[i][bizPrices][16] = 5;
				}
				else if (type == 7) {
					BusinessData[i][bizInt][0] = -2240.4954;
   					BusinessData[i][bizInt][1] = 128.3774;
			   		BusinessData[i][bizInt][2] = 1035.4210;
      				BusinessData[i][bizInt][3] = 270.0000;
					BusinessData[i][bizInterior] = 6;

					BusinessData[i][bizPrices][0] = 75;
		            BusinessData[i][bizPrices][1] = 115;
		            BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 95;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 100;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 190;
		            BusinessData[i][bizPrices][12] = 150;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
		            BusinessData[i][bizPrices][15] = 5;
		            BusinessData[i][bizPrices][16] = 10;
		            BusinessData[i][bizPrices][17] = 5;
				}
				else if (type == 8) {
				    BusinessData[i][bizInt][0] = 1004.19;
   					BusinessData[i][bizInt][1] = 52.3467;
			   		BusinessData[i][bizInt][2] = 55.4;
      				BusinessData[i][bizInt][3] = 270.0000;
					BusinessData[i][bizInterior] = 0;

					BusinessData[i][bizPrices][0] = 200;
		            BusinessData[i][bizPrices][1] = 300;
		            BusinessData[i][bizPrices][2] = 200;
		            BusinessData[i][bizPrices][3] = 500;
		            BusinessData[i][bizPrices][4] = 150;
				}
				else if (type == 9) {
					BusinessData[i][bizInt][0] = 825.3185;
	   				BusinessData[i][bizInt][1] = 1493.1661;
				   	BusinessData[i][bizInt][2] = 1001.0859;
	      			BusinessData[i][bizInt][3] = 273.9297;
		            BusinessData[i][bizPrices][0] = 10;
		            BusinessData[i][bizPrices][1] = 10;
		            BusinessData[i][bizPrices][2] = 10;
		            BusinessData[i][bizPrices][3] = 10;
		            BusinessData[i][bizPrices][4] = 10;
		            BusinessData[i][bizPrices][5] = 10;
				}
				BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
				BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

				BusinessData[i][bizLocked] = true;
				BusinessData[i][bizVault] = 0;
				BusinessData[i][bizProducts] = 100;
				BusinessData[i][bizShipment] = 0;

				Business_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `businesses` (`bizOwner`) VALUES(0)", "OnBusinessCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

stock Business_RemoveCars(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
	{
	    static
	        string[32];

		for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
		{
  			DealershipCars[bizid][i][vehModel] = 0;
    		DealershipCars[bizid][i][vehPrice] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

stock Business_RemovePumps(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 6)
	{
	    static
	        string[32];

	    foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasStation] == bizid)
	    {
	        StopRefilling(i);
	    }
		for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == bizid)
		{
  			DestroyDynamicObject(PumpData[i][pumpObject]);
			if (IsValidDynamic3DTextLabel(PumpData[i][pumpText3D]))
		    DestroyDynamic3DTextLabel(PumpData[i][pumpText3D]);


		    PumpData[i][pumpExists] = 0;
		    PumpData[i][pumpFuel] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

Business_Delete(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `businesses` WHERE `bizID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);

		foreach (new i : Player) if (PlayerData[i][pShipment] == bizid) {
			PlayerData[i][pShipment] = -1;
			PlayerData[i][pDeliverShipment] = 0;

			DisablePlayerCheckpoint(i);
		}
        if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

		Business_RemovePumps(bizid);
		Business_RemoveCars(bizid);

	    BusinessData[bizid][bizExists] = false;
	    BusinessData[bizid][bizOwner] = 0;
	    BusinessData[bizid][bizID] = 0;
	}
	return 1;
}

Haber_Sil(haberid)
{
	if (haberid != -1 && Haberler[haberid][haberVarmi])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `haberler` WHERE `haberID` = '%d'", Haberler[haberid][haberID]);
		mysql_tquery(g_iHandle, string);

	    Haberler[haberid][haberVarmi] = false;
	    Haberler[haberid][haberTip] = 0;
	    Haberler[haberid][haberID] = 0;
	}
	return 1;
}

Business_IsOwner(playerid, bizid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] == 99999999 && PlayerData[playerid][pAdmin] > 0)
		return 1;

    if ((BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] != 0) && BusinessData[bizid][bizOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}
Business_IsOrtak(playerid, bizid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] == 99999999 && PlayerData[playerid][pAdmin] > 0)
		return 1;

    if ((BusinessData[bizid][bizExists] && BusinessData[bizid][bizOrtak] != 0) && BusinessData[bizid][bizOrtak] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

forward OpenInventory(playerid);
public OpenInventory(playerid)
{
    if (!IsPlayerConnected(playerid) || !PlayerData[playerid][pCharacter])
	    return 0;

	static
	    string[2056];

	string[0] = 0;
    for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
	{
 		if (InventoryData[playerid][i][invExists]) {
 		 new name[48];
			strunpack(name, InventoryData[playerid][i][invItem]);
   			format(string, sizeof(string), "%s - Adet:{38BE29}%d\n", name, /*InventoryData[playerid][i][invModel]*/ InventoryData[playerid][i][invQuantity]);
		}
	}
	PlayerData[playerid][pStorageSelect] = 0;
	return ShowPlayerDialog(playerid, MODEL_SELECTION_INVENTORY, DIALOG_STYLE_LIST, "Envanter", string, "Sec", "Iptal");
}
forward SelectTD(playerid);
public SelectTD(playerid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	return SelectTextDraw(playerid, -1);
}

ReturnDate()
{
	static
	    date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}

ReturnVehicleHealth(vehicleid)
{
	if (!IsValidVehicle(vehicleid))
	    return 0;

	static
	    Float:amount;

	GetVehicleHealth(vehicleid, amount);
	return floatround(amount, floatround_round);
}

KuponOraniHesapla(yatirilan, Float:oran)
{
	return floatround((yatirilan * oran), floatround_round);
}
forward SetHealth(playerid, Float:health);
public SetHealth(playerid, Float:health) {
    SetPlayerHealth(playerid, health);
    return 1;
}

CanDegistir(playerid, Float:amount)
{
	PlayerData[playerid][pHealth] = amount;
	SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
    return SetHealth(playerid, amount);
}

ZirhDegistir(playerid, Float:amount)
{
	PlayerData[playerid][pArmorStatus] = amount;
    return SetPlayerArmour(playerid, amount);
}

ReturnArmour(playerid)
{
	static
	    Float:amount;

	GetPlayerArmour(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnHealth(playerid)
{
	static
	    Float:amount;

	GetPlayerHealth(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnName(playerid, underscore=1)
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (!underscore) {
	    for (new i = 0, len = strlen(name); i < len; i ++) {
	        if (name[i] == '_') name[i] = ' ';
		}
	}

	if (PlayerData[playerid][pMaskOn])
	   format(name, sizeof(name), "Bilinmeyen_#%d", PlayerData[playerid][pMaskID]);

	return name;
}

stock ReturnIP(playerid)
{
	static
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

ShowStatsForPlayer(playerid, targetid)
{
    new
	    account[24],
	    origin[32],
	    aclik[24],
	    meslek[32],
	    birlikid[32],
		count;

	for (new i = 0; i < MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
	    count++;
	}
	if (PlayerData[targetid][pAdmin] > 0) account = "~r~Admin";
 	else if (PlayerData[targetid][pTester] > 0) account = "~y~Tester";
	else account = "Player";

	format(origin, 32, "%s", PlayerData[targetid][pOrigin]);
	format(birlikid, 32, "%d", FactionData[factionID]);
    format(meslek, 32, "%s", Job_GetName(PlayerData[targetid][pJob]));
    //aclik
    if(PlayerData[targetid][pHunger] > 95) aclik = "Harika";
		else if (PlayerData[targetid][pHunger] > 51 && PlayerData[targetid][pHunger] < 76) aclik = "Ýyi";
		else if (PlayerData[targetid][pHunger] <= 50 && PlayerData[targetid][pHunger] > 25) aclik = "Aç";
		else if (PlayerData[targetid][pHunger] <= 25)  aclik = "Cok Aç";
		else aclik = "Bug Olustu";
  	//

	if (strlen(PlayerData[targetid][pOrigin]) > 16)
		strcat(origin, "...");

	if (strlen(Job_GetName(PlayerData[targetid][pJob])) > 10)
		strcat(meslek, "...");

	new coordsstring[128];
	new olusumadi[128];
	if(PlayerData[targetid][pFaction] == -1) format(olusumadi, 24, "Yok");
	else format(olusumadi, 128, FactionData[PlayerData[targetid][pFaction]][factionName]);

	new factionrutbe[128];
	if(PlayerData[targetid][pFactionRank] == -1) format(olusumadi, 24, "Yok");
	else format(factionrutbe, 128, FactionData[PlayerData[targetid][pFactionRank]][factionRanks]);


        new string2[256],years,months,days,hourss,minutess;
        getdate(years, months, days), gettime(hourss, minutess);
        format(string2, sizeof string2, "%d/%s%d/%s%d - %s%d:%s%d", days, ((months < 10) ? ("0") : ("")), months, (years < 10) ? ("0") : (""), years, (hourss < 10) ? ("0") : (""), hourss, (minutess < 10) ? ("0") : (""), minutess);

    new pmdurumu[24];
 	if (!PlayerData[targetid][pDisablePM]) format(pmdurumu, 24, "Açýk");
 	else format(pmdurumu, 24, "Kapalý");

 	new bagisci[24];
 	if (!PlayerData[targetid][pBagisci]) format(bagisci, 24, "Hayir");
 	else format(bagisci, 24, "Evet");

	new vipdurum[24];
 	if (!PlayerData[targetid][pQuantumVip]) format(vipdurum, 24, "Quantum VIP");
 	if (!PlayerData[targetid][pGoldVip]) format(vipdurum, 24, "Gold VIP");
 	if (!PlayerData[targetid][pSilverVip]) format(vipdurum, 24, "Silver VIP");
 	else format(vipdurum, 24, "Oyuncu");

 	new birlikdurumu[24];
 	if (!PlayerData[targetid][pDisableFaction]) format(birlikdurumu, 24, "Açýk");
 	else format(birlikdurumu, 24, "Kapalý");
 	
 	new pasaport[24];
 	if (!PlayerData[targetid][pPasaport]) format(pasaport, 24, "Yok");
 	else format (pasaport, 24, "Var");

    	new tvdurumu[24];
    if (!PlayerData[targetid][pDisableBC]) format(tvdurumu, 24, "Açýk");
 	else format(tvdurumu, 24, "Kapalý");


	format(coordsstring, sizeof(coordsstring),"[____________[ %s ] - [ %s ]___________]",ReturnName(targetid),string2);
	SendClientMessage(playerid, COLOR_DARKGREEN, coordsstring);
	format(coordsstring, sizeof(coordsstring),"Karakter> Cinsiyet[%s] Doðum[%s] Uyruk[%s] Ten[%s]",(PlayerData[targetid][pGender] == 2) ? ("Kadin") : ("Erkek"), PlayerData[targetid][pBirthdate], origin, PlayerData[playerid][pTenRengi] );
	SendClientMessage(playerid, COLOR_GRAD1, coordsstring);
	format(coordsstring, sizeof(coordsstring),"Karakter> Level[%d] EXP[%d/%d] Pasaport[%s] Yonetici[%d seviye]", PlayerData[targetid][pLevel],PlayerData[targetid][pEXP], PlayerData[targetid][pLevel]*4, pasaport,PlayerData[targetid][pAdmin] );
	SendClientMessage(playerid, COLOR_GRAD2, coordsstring);
	format(coordsstring, sizeof(coordsstring),"Hesap> Forum[%s] Para[%s] Banka[%s] PayDay[%ddk]", PlayerData[targetid][pForumNick], FormatNumber(PlayerData[targetid][pMoney]), FormatNumber(PlayerData[targetid][pBankMoney]), PlayerData[targetid][pMinutes] );
	SendClientMessage(playerid, COLOR_GRAD1, coordsstring);
	format(coordsstring, sizeof(coordsstring),"Hesap> TelNo[%d] Envanter[%d/%d] Oynama Saati[%d]", PlayerData[targetid][pPhone], count, MAX_INVENTORY, PlayerData[targetid][pPlayingHours] );
	SendClientMessage(playerid, COLOR_GRAD2, coordsstring);
	format(coordsstring, sizeof(coordsstring),"Birlik/Meslek> Birlik[%s] Meslek[%s]", olusumadi, meslek);
	SendClientMessage(playerid, COLOR_GRAD1, coordsstring);
	format(coordsstring, sizeof(coordsstring),"Diðer> PM[%s] TV[%s] FactionChat[%s]", pmdurumu, tvdurumu, birlikdurumu );
	SendClientMessage(playerid, COLOR_GRAD1, coordsstring);
	format(coordsstring, sizeof(coordsstring),"[____________[ %s ] - [ %s ]___________]",ReturnName(targetid),string2);
	SendClientMessage(playerid, COLOR_DARKGREEN, coordsstring);
	

	return 1;
}


Blacklist_Add(ip[], username[], serial[], banner[], reason[], sure = 0)
{
	static
	    string[512];

	format(string, sizeof(string), "INSERT INTO `blacklist` (`IP`, `Username`, `Serial`, `BannedBy`, `Reason`, `Date`, `UnbanTime`) VALUES('%s', '%s', '%s', '%s', '%s', '%s', '%d')",
		SQL_ReturnEscaped(ip),
		SQL_ReturnEscaped(username),
   		SQL_ReturnEscaped(serial),
		SQL_ReturnEscaped(banner),
		SQL_ReturnEscaped(reason),
		ReturnDate(),
		sure
	);
	mysql_tquery(g_iHandle, string);
}

Blacklist_Remove(username[])
{
	static
	    string[128];

	format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(username));
    mysql_tquery(g_iHandle, string);
}

Blacklist_RemoveIP(ip[])
{
	static
	    string[128];

    format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `IP` = '%s'", SQL_ReturnEscaped(ip));
    mysql_tquery(g_iHandle, string);
}

stock Inventory_Clear(playerid)
{
	static
	    string[64];

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (InventoryData[playerid][i][invExists])
	    {
	        InventoryData[playerid][i][invExists] = 0;
	        InventoryData[playerid][i][invModel] = 0;
	        InventoryData[playerid][i][invQuantity] = 0;
		}
	}
	format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
	return mysql_tquery(g_iHandle, string);
}

stock Inventory_Set(playerid, item[], model, amount)
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid == -1 && amount > 0)
		Inventory_Add(playerid, item, model, amount);

	else if (amount > 0 && itemid != -1)
	    Inventory_SetQuantity(playerid, item, amount);

	else if (amount < 1 && itemid != -1)
	    Inventory_Remove(playerid, item, -1);

	return 1;
}

stock Inventory_GetItemID(playerid, item[])
{
	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (!InventoryData[playerid][i][invExists])
	        continue;

		if (!strcmp(InventoryData[playerid][i][invItem], item)) return i;
	}
	return -1;
}

stock Inventory_GetFreeID(playerid)
{
	if (Inventory_Items(playerid) >= PlayerData[playerid][pCapacity])
		return -1;

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (!InventoryData[playerid][i][invExists])
	        return i;
	}
	return -1;
}

stock Inventory_Items(playerid)
{
    new count;

    for (new i = 0; i != MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
        count++;
	}
	return count;
}

stock Inventory_Count(playerid, item[])
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid != -1)
	    return InventoryData[playerid][itemid][invQuantity];

	return 0;
}

stock Inventory_HasItem(playerid, item[])
{
	return (Inventory_GetItemID(playerid, item) != -1);
}

stock Inventory_SetQuantity(playerid, item[], quantity)
{
	new
	    itemid = Inventory_GetItemID(playerid, item),
	    string[128];

	if (itemid != -1)
	{
	    format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	    mysql_tquery(g_iHandle, string);

	    InventoryData[playerid][itemid][invQuantity] = quantity;
	}
	return 1;
}

stock Inventory_Add(playerid, item[], model, quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = Inventory_GetFreeID(playerid);

	    if (itemid != -1)
	    {
	        InventoryData[playerid][itemid][invExists] = true;
	        InventoryData[playerid][itemid][invModel] = model;
	        InventoryData[playerid][itemid][invQuantity] = quantity;

	        strpack(InventoryData[playerid][itemid][invItem], item, 32 char);

			if (strcmp(item, "Demo Soda") != 0)
			{
				format(string, sizeof(string), "INSERT INTO `inventory` (`ID`, `invItem`, `invModel`, `invQuantity`) VALUES('%d', '%s', '%d', '%d')", PlayerData[playerid][pID], item, model, quantity);
				mysql_tquery(g_iHandle, string, "OnInventoryAdd", "dd", playerid, itemid);
			}
	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` + %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	    mysql_tquery(g_iHandle, string);

	    InventoryData[playerid][itemid][invQuantity] += quantity;
	}
	return itemid;
}

stock Inventory_Remove(playerid, item[], quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid != -1)
	{
	    if (InventoryData[playerid][itemid][invQuantity] > 0)
	    {
	        InventoryData[playerid][itemid][invQuantity] -= quantity;
		}
		if (quantity == -1 || InventoryData[playerid][itemid][invQuantity] < 1)
		{
		    InventoryData[playerid][itemid][invExists] = false;
		    InventoryData[playerid][itemid][invModel] = 0;
		    InventoryData[playerid][itemid][invQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d' AND `invID` = '%d'", PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && InventoryData[playerid][itemid][invQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` - %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

stock RemoveAlpha(color) {
    return (color & ~0xFF);
}

stock Urun_Kontrol(playerid, item[])
{
	return (Urun_UrunIDcek(playerid, item) != -1);
}

stock Urun_UrunIDcek(playerid, item[])
{
	for (new i = 0; i < MAX_URUN; i ++)
	{
	    if (!UrunData[playerid][i][urunVarmi])
	        continue;

		if (!strcmp(UrunData[playerid][i][urunAd], item)) return i;
	}
	return -1;
}

stock Urun_Sil(playerid, item[], miktar = 1)
{
	new
		itemid = Urun_UrunIDcek(playerid, item),
		string[128];

	if (itemid != -1)
	{
  		if (UrunData[playerid][itemid][urunMiktar] > 0)
	    {
	        UrunData[playerid][itemid][urunMiktar] -= miktar;
		}
		if (miktar == -1 || UrunData[playerid][itemid][urunMiktar] < 1)
		{
		    UrunData[playerid][itemid][urunVarmi] = false;
		    UrunData[playerid][itemid][urunMiktar] = 0;

		    format(string, sizeof(string), "DELETE FROM `urunler` WHERE `urunSahip` = '%d' AND `urunID` = '%d'", PlayerData[playerid][pID], UrunData[playerid][itemid][urunID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (miktar != -1 && UrunData[playerid][itemid][urunMiktar] > 0)
		{
			format(string, sizeof(string), "UPDATE `urunler` SET `urunMiktar` = `urunMiktar` - %d WHERE `urunSahip` = '%d' AND `urunID` = '%d'", miktar, PlayerData[playerid][pID], UrunData[playerid][itemid][urunID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

stock CancelDrivingTest(playerid)
{
	if (PlayerData[playerid][pDrivingTest])
	{
		DisablePlayerCheckpoint(playerid);
		DestroyVehicle(PlayerData[playerid][pTestCar]);
  		PlayerData[playerid][pDrivingTest] = false;
	}
	return 1;
}

stock House_WeaponStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	static
	    string[320];

	string[0] = 0;

	for (new i = 0; i < 10; i ++)
	{
	    if (!HouseData[houseid][houseWeapons][i])
	        format(string, sizeof(string), "%sBoþ Slot\n", string);

		else
			format(string, sizeof(string), "%s%s (Mermi: %d)\n", string, ReturnWeaponName(HouseData[houseid][houseWeapons][i]), HouseData[houseid][houseAmmo][i]);
	}
	Dialog_Show(playerid, HouseWeapons, DIALOG_STYLE_LIST, "Silahlar", string, "Seç", "{FF6347}Iptal");
	return 1;
}

stock House_ShowItems(playerid, houseid)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	static
	    string[MAX_HOUSE_STORAGE * 32],
		name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        format(string, sizeof(string), "%sBoþ Slot\n", string);

		else {
			strunpack(name, HouseStorage[houseid][i][hItemName]);

			if (HouseStorage[houseid][i][hItemQuantity] == 1) {
			    format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, HouseStorage[houseid][i][hItemQuantity]);
		}
	}
	Dialog_Show(playerid, HouseItems, DIALOG_STYLE_LIST, "Item Storage", string, "Seç", "{FF6347}Iptal");
	return 1;
}

stock House_OpenStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		items[2],
		string[MAX_HOUSE_STORAGE * 32];

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++) if (HouseStorage[houseid][i][hItemExists]) {
	    items[0]++;
	}
	for (new i = 0; i < 10; i ++) if (HouseData[houseid][houseWeapons][i]) {
	    items[1]++;
	}
		format(string, sizeof(string), "Eþya Deposu (%d/%d)\nSilah Kasasý", items[0], MAX_HOUSE_STORAGE);

	Dialog_Show(playerid, HouseStorage, DIALOG_STYLE_LIST, "Depo", string, "Seç", "{FF6347}Iptal");
	return 1;
}

stock House_GetItemID(houseid, item[])
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        continue;

		if (!strcmp(HouseStorage[houseid][i][hItemName], item)) return i;
	}
	return -1;
}

stock House_GetFreeID(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        return i;
	}
	return -1;
}

stock House_AddItem(houseid, item[], model, quantity = 1, slotid = -1)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		itemid = House_GetItemID(houseid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = House_GetFreeID(houseid);

	    if (itemid != -1)
	    {
	        if (slotid != -1)
	            itemid = slotid;

	        HouseStorage[houseid][itemid][hItemExists] = true;
	        HouseStorage[houseid][itemid][hItemModel] = model;
	        HouseStorage[houseid][itemid][hItemQuantity] = quantity;

	        strpack(HouseStorage[houseid][itemid][hItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `housestorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", HouseData[houseid][houseID], item, model, quantity);
			mysql_tquery(g_iHandle, string, "OnStorageAdd", "dd", houseid, itemid);

	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
	    mysql_tquery(g_iHandle, string);

	    HouseStorage[houseid][itemid][hItemQuantity] += quantity;
	}
	return itemid;
}

stock House_RemoveItem(houseid, item[], quantity = 1)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		itemid = House_GetItemID(houseid, item),
		string[128];

	if (itemid != -1)
	{
	    if (HouseStorage[houseid][itemid][hItemQuantity] > 0)
	    {
	        HouseStorage[houseid][itemid][hItemQuantity] -= quantity;
		}
		if (quantity == -1 || HouseStorage[houseid][itemid][hItemQuantity] < 1)
		{
		    HouseStorage[houseid][itemid][hItemExists] = false;
		    HouseStorage[houseid][itemid][hItemModel] = 0;
		    HouseStorage[houseid][itemid][hItemQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `housestorage` WHERE `ID` = '%d' AND `itemID` = '%d'", HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && HouseStorage[houseid][itemid][hItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

House_RemoveAllItems(houseid)
{
	static
	    query[64];

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++) {
        HouseStorage[houseid][i][hItemExists] = false;
        HouseStorage[houseid][i][hItemModel] = 0;
        HouseStorage[houseid][i][hItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `housestorage` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
	mysql_tquery(g_iHandle, query);

	for (new i = 0; i < 10; i ++) {
	    HouseData[houseid][houseWeapons][i] = 0;
	    HouseData[houseid][houseAmmo][i] = 0;
	}
	return 1;
}

stock Car_GetItemID(carid, item[])
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        continue;

		if (!strcmp(CarStorage[carid][i][cItemName], item)) return i;
	}
	return -1;
}

stock Car_GetFreeID(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        return i;
	}
	return -1;
}

stock Car_AddItem(carid, item[], model, quantity = 1, slotid = -1)
{
    if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	new
		itemid = Car_GetItemID(carid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = Car_GetFreeID(carid);

	    if (itemid != -1)
	    {
	        if (slotid != -1)
	            itemid = slotid;

	        CarStorage[carid][itemid][cItemExists] = true;
	        CarStorage[carid][itemid][cItemModel] = model;
	        CarStorage[carid][itemid][cItemQuantity] = quantity;

	        strpack(CarStorage[carid][itemid][cItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `carstorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", CarData[carid][carID], item, model, quantity);
			mysql_tquery(g_iHandle, string, "OnCarStorageAdd", "dd", carid, itemid);

	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
	    mysql_tquery(g_iHandle, string);

	    CarStorage[carid][itemid][cItemQuantity] += quantity;
	}
	return itemid;
}

stock Car_RemoveItem(carid, item[], quantity = 1)
{
    if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	new
		itemid = Car_GetItemID(carid, item),
		string[128];

	if (itemid != -1)
	{
	    if (CarStorage[carid][itemid][cItemQuantity] > 0)
	    {
	        CarStorage[carid][itemid][cItemQuantity] -= quantity;
		}
		if (quantity == -1 || CarStorage[carid][itemid][cItemQuantity] < 1)
		{
		    CarStorage[carid][itemid][cItemExists] = false;
		    CarStorage[carid][itemid][cItemModel] = 0;
		    CarStorage[carid][itemid][cItemQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `carstorage` WHERE `ID` = '%d' AND `itemID` = '%d'", CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && CarStorage[carid][itemid][cItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

Car_RemoveAllItems(carid)
{
	static
	    query[64];

	for (new i = 0; i != MAX_CAR_STORAGE; i ++) {
        CarStorage[carid][i][cItemExists] = false;
        CarStorage[carid][i][cItemModel] = 0;
        CarStorage[carid][i][cItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `carstorage` WHERE `ID` = '%d'", CarData[carid][carID]);
	mysql_tquery(g_iHandle, query);

	for (new i = 0; i < 5; i ++) {
	    CarData[carid][carWeapons][i] = 0;
	    CarData[carid][carAmmo][i] = 0;
	}
	return 1;
}


FormatNumber(number, prefix[] = "$")
{
	static
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

ResetFaction(playerid)
{
	if(GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid) != FACTION_NEWS)
	{
	    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	    ResetWeapons(playerid);
		SetPlayerColor(playerid, DEFAULT_COLOR);
		ZirhDegistir(playerid, 0);
	}
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionID] = -1;
    PlayerData[playerid][pFactionRank] = 0;
    PlayerData[playerid][pFactionDivizyon] = 0;
    OlusumAksesuariSil(playerid);
   	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i))
	{
		CarData[i][carBirlik] = -1;
		CarData[i][carFaction] = 0;

	}
	return 1;
}

forward DragUpdate(playerid, targetid);
public DragUpdate(playerid, targetid)
{
	if (PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 1.0 * floatsin(-fAngle, degrees);
		fY -= 1.0 * floatcos(-fAngle, degrees);

		JBC_SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

StopDragging(playerid)
{
	if (PlayerData[playerid][pDragged])
	{
	    PlayerData[playerid][pDragged] = 0;
		PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[playerid][pDragTimer]);
	}
	return 1;
}

ResetEditing(playerid)
{
    if (PlayerData[playerid][pEditFurniture] != -1)
		Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	if (PlayerData[playerid][pEditPump] != -1)
	{
		Pump_Refresh(PlayerData[playerid][pEditPump]);
		PlayerData[playerid][pGasStation] = -1;
	}
	PlayerData[playerid][pEditType] = 0;
 	PlayerData[playerid][pEditGate] = -1;
 	PlayerData[playerid][pEditObject] = -1;
 	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	return 1;
}

ResetPlayer(playerid)
{
	if (PlayerData[playerid][pDrinking])
	    DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

    if (PlayerData[playerid][pFirstAid])
	    KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest])
	    DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pWaypoint])
	{
        PlayerData[playerid][pWaypoint] = 0;
        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	foreach (new i : Player) if (PlayerData[i][pDraggedBy] == playerid) {
	    StopDragging(i);
	}
	if (PlayerData[playerid][pDragged]) {
	    StopDragging(playerid);
	}
    PlayerData[playerid][pHospital] = -1;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pCookingHouse] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pGasStation] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = -1;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pAdTime] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMinedRock] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pSorting] = -1;
	PlayerData[playerid][pSortCrate] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pMaskOn] = 0;
	PlayerData[playerid][pHideTags] = 0;
	PlayerData[playerid][pCuffed] = 0;
	PlayerData[playerid][pGraffiti] = -1;
	PlayerData[playerid][pGraffitiTime] = 0;
	PlayerData[playerid][pPicking] = 0;
	PlayerData[playerid][pPickSure] = 0;
	PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;
	PlayerData[playerid][pImmobing] = 0;
	PlayerData[playerid][pImmobSure] = 0;
	PlayerData[playerid][pImmobCar] = -1;
	PlayerData[playerid][pImmobTime] = 0;
	PlayerData[playerid][pYukseltilenArac] = -1;
    PlayerData[playerid][pYukseltmeUcret] = 0;

	if (Inventory_HasItem(playerid, "Mask")) {
	    Inventory_Remove(playerid, "Mask");
	}

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, " ", 1, 3);

	HidePlayerFooter(playerid);
	HoldWeapon(playerid, 0);
}

ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
		PlayerData[playerid][pGuns][i] = 0;
		PlayerData[playerid][pAmmo][i] = 0;
	}
	return 1;
}


ResetWeapon(playerid, weaponid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
	    if (PlayerData[playerid][pGuns][i] != weaponid) {
	        GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
		}
		else {
            PlayerData[playerid][pGuns][i] = 0;
            PlayerData[playerid][pAmmo][i] = 0;
	    }
	}
	return 1;
}


GiveWeaponToPlayer(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;

	PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] += ammo;
	PlayerData[playerid][pGercekSilah] = 1;
	return GivePlayerWeaponEx(playerid, weaponid, ammo);
}


GiveMoney(playerid, amount)
{
	PlayerData[playerid][pMoney] += amount;
	GivePlayerMoney(playerid, amount);
	return 1;
}

GetPlayerSQLID(playerid)
{
	return (PlayerData[playerid][pID]);
}

GetMoney(playerid)
{
	return (PlayerData[playerid][pMoney]);
}

IsValidPlayerName(const str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] >= '0' && str[i] <= '9') || (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z'))
	        continue;

		if (str[i] == '_' || str[i] == '$' || str[i] == '@' || str[i] == '[' || str[i] == ']')
		    continue;

		else
		    return 0;
	}
	return 1;
}

IsAnIP(str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] < '0' || str[i] > '9') && str[i] != '.')
	        return 0;

	    if (0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
	        return 0;
	}
	return 1;
}

Report_GetCount(playerid)
{
	new count;

    for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
	    {
	        count++;
		}
	}
	return count;
}

Report_Clear(playerid)
{
    for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
	    {
	        Report_Remove(i);
		}
	}
	return 1;
}

Report_Add(playerid, const text[], type = 1)
{
	for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (!ReportData[i][rExists])
	    {
	        ReportData[i][rExists] = true;
	        ReportData[i][rType] = type;
	        ReportData[i][rPlayer] = playerid;

	        strpack(ReportData[i][rText], text, 128 char);
			return i;
		}
	}
	return -1;
}

Report_Remove(reportid)
{
	if (reportid != -1 && ReportData[reportid][rExists])
	{
	    ReportData[reportid][rExists] = false;
	    ReportData[reportid][rPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}



/*Soru_GetCount(playerid) // sorularý sayýn algoritma
{
	new count;

    for (new i = 0; i != MAX_SORU; i ++)
	{
	    if (Sorular[i][rExists] && Sorular[i][rPlayer] == playerid)
	    {
	        count++;
		}
	}
	return count;
}*/

Soru_Clear(playerid)
{
    for (new i = 0; i != MAX_SORU; i ++)
	{
	    if (Sorular[i][rExists] && Sorular[i][rPlayer] == playerid)
	    {
	        Soru_Remove(i);
		}
	}
	return 1;
}

/*Soru_Add(playerid, const text[], type = 1) // soru ekleme algoritmasý
{
	for (new i = 0; i != MAX_SORU; i ++)
	{
	    if (!Sorular[i][rExists])
	    {
	        Sorular[i][rExists] = true;
	        Sorular[i][rType] = type;
	        Sorular[i][rPlayer] = playerid;

	        strpack(Sorular[i][rText], text, 128 char);
			return i;
		}
	}
	return -1;
}*/

Soru_Remove(Soruid)
{
	if (Soruid != -1 && Sorular[Soruid][rExists])
	{
	    Sorular[Soruid][rExists] = false;
	    Sorular[Soruid][rPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

_Kick(playerid)
{
	if(IsPlayerNPC(playerid))
	    return 1;

	return Kick(playerid);
}
KickEx(playerid)
{
	SQL_SaveCharacter(playerid);
	SetTimerEx("KickTimer", 200, false, "d", playerid);
	return 1;
}

forward KickTimer(playerid);
public KickTimer(playerid)
{
	return _Kick(playerid);
}

stock SetDefaultSpawn(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	if(PlayerData[playerid][pSpawnPoint] == 0) // Market St. Default Spawn
	{
	    JBC_SetPlayerPos(playerid, 823.7743,-1341.5541,13.5161);
	    SetPlayerFacingAngle(playerid, 4.4132);
	}
	if(PlayerData[playerid][pSpawnPoint] == 1) // Faction
	{
	    new faction = PlayerData[playerid][pFactionID];
	    if(PlayerData[playerid][pFactionID] == -1)
	    {
	        SendErrorMessage(playerid, "You've been set to civilian spawn.");
	        JBC_SetPlayerPos(playerid, 1813.00, -1369.88, 15.08);
	    	SetPlayerFacingAngle(playerid, 0.0);
		}
		JBC_SetPlayerPos(playerid,FactionData[faction][SpawnX],FactionData[faction][SpawnY],FactionData[faction][SpawnZ]);
		SetPlayerInterior(playerid,FactionData[faction][SpawnInterior]);
		SetPlayerVirtualWorld(playerid, FactionData[faction][SpawnVW]);
	}
	if(PlayerData[playerid][pSpawnPoint] == 2)
	{
	    JBC_SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
	    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
	}

	/*#if SERVER_CITY == 1
	    JBC_SetPlayerPos(playerid, 1642.1957, -2334.4849, 13.5469);
	    SetPlayerFacingAngle(playerid, 0.0);
	#elseif SERVER_CITY == 2
		JBC_SetPlayerPos(playerid, -2425.5615, 337.5465, 37.0018);
		SetPlayerFacingAngle(playerid, 238.0);
	#elseif SERVER_CITY == 3
	    JBC_SetPlayerPos(playerid, 1675.7245, 1447.8938, 10.7866);
	    SetPlayerFacingAngle(playerid, 270.0);
	#endif*/

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

stock RespawnPlayer(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
        new
		    Float:x,
		    Float:y,
	    	Float:z;

	    GetPlayerPos(playerid, x, y, z);
	    JBC_SetPlayerPos(playerid, x, y, z + 1);
	}
	SpawnPlayer(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetDefaultSpawn(playerid);
	return 1;
}

stock IsPlayerIdle(playerid) {
	new
	    index = GetPlayerAnimationIndex(playerid);

	return ((index == 1275) || (1181 <= index <= 1192));
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}




stock IsPlayerSpawnedEx(playerid)
{
	if (playerid < 0 || playerid >= MAX_PLAYERS)
	    return 0;

	return (!PlayerData[playerid][pKilled]) && (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_NONE && GetPlayerState(playerid) != PLAYER_STATE_WASTED);
}

stock GetVehicleMaxSeats(vehicleid)
{
    static const g_arrMaxSeats[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new
	    model = GetVehicleModel(vehicleid);

	if (400 <= model <= 611)
	    return g_arrMaxSeats[model - 400];

	return 0;
}

stock GetNearestVehicle(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

stock IsPlayerNearBoot(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}

stock IsPlayerNearHood(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ);
}


stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendNearbyMessageEx(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (!PlayerData[i][pDisableOOC] && IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 foreach (new i : Player)
	{
		if (!PlayerData[i][pDisableOOC] && IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendAdminAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1  && PlayerData[i][pAdminChat]) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pAdminChat]) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendTesterMessage(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if ((!PlayerData[i][pDisableTester]) && (PlayerData[i][pTester] >= 1 || PlayerData[i][pAdmin] > 0)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
 foreach (new i : Player)
	{
		if ((!PlayerData[i][pDisableTester]) && (PlayerData[i][pTester] >= 1 || PlayerData[i][pAdmin] > 0)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionMessageEx(type, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}


stock SendShamalMessage(string[])
{
 	foreach (new i : Player)
	{
 		if(IsPlayerInRangeOfPoint(i, 50.0, 3.1347,23.0074,1199.5937))
			SendClientMessage(i, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

stock SendTrainMessage(string[])
{
 	foreach (new i : Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 50.0, -357.5095, 3415.0078, 1032.7606))
			SendClientMessage(i, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

stock SendFactionMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendVehicleMessage(vehicleid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
 		SendClientMessage(i, color, string);
	}
	return 1;
}

stock SendRadioMessage(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Telsiz") && PlayerData[i][pChannel] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Telsiz") && PlayerData[i][pChannel] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	/*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

stock SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[512];

	/*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 2)
	{
	    SendClientMessageToAll(color, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessageToAll(color, str);

		#emit RETN
	}
	return 1;
}

stock Log_Write(const path[], const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    File:file,
	    string[1024]
	;
	if ((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	    if (!fexist(string))
	        return printf("** Warning: Directory \"%s\" doesn't exist.", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if (!file)
	    return 0;

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);

	return 1;
}

IsValidRoleplayName(const name[]) {
	if (!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
	        return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		    return 0;
	}
	return 1;
}

CreateTextDraws(playerid) {





Giris[playerid] = CreatePlayerTextDraw(playerid, 324, 207, "mdl-2002:giris");



Statement[playerid] = CreatePlayerTextDraw(playerid, 172.000000, 398.125000, "You have successfully ~g~purchased~w~ a house");
	PlayerTextDrawLetterSize(playerid, Statement[playerid], 0.377500, 1.337500);
	PlayerTextDrawAlignment(playerid, Statement[playerid], 1);
	PlayerTextDrawColor(playerid, Statement[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Statement[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Statement[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Statement[playerid], 51);
	PlayerTextDrawFont(playerid, Statement[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Statement[playerid], 1);

BlackTD[playerid][0] = CreatePlayerTextDraw(playerid, -20.000000, 2.000000, "|");
        PlayerTextDrawUseBox(playerid, BlackTD[playerid][0], 1);
       PlayerTextDrawBoxColor(playerid, BlackTD[playerid][0], 0x000000ff);
        PlayerTextDrawTextSize(playerid, BlackTD[playerid][0], 660.000000, 22.000000);
        PlayerTextDrawAlignment(playerid, BlackTD[playerid][0], 0);
        PlayerTextDrawBackgroundColor(playerid, BlackTD[playerid][0], 0x000000ff);
        PlayerTextDrawFont(playerid, BlackTD[playerid][0], 3);
        PlayerTextDrawLetterSize(playerid, BlackTD[playerid][0], 1.000000, 52.200000);
        PlayerTextDrawColor(playerid, BlackTD[playerid][0], 0x000000ff);
        PlayerTextDrawSetOutline(playerid, BlackTD[playerid][0], 1);
        PlayerTextDrawSetProportional(playerid, BlackTD[playerid][0], 1);
        PlayerTextDrawSetShadow(playerid, BlackTD[playerid][0], 1);



BlackTD[playerid][1] = CreatePlayerTextDraw(playerid, -20.000000 ,2.000000, "|");
        PlayerTextDrawUseBox(playerid, BlackTD[playerid][1], 1);
       PlayerTextDrawBoxColor(playerid, BlackTD[playerid][1], 0x000000ff);
        PlayerTextDrawTextSize(playerid, BlackTD[playerid][1], 660.000000, 22.000000);
        PlayerTextDrawAlignment(playerid, BlackTD[playerid][1], 0);
        PlayerTextDrawBackgroundColor(playerid, BlackTD[playerid][1], 0x000000ff);
        PlayerTextDrawFont(playerid, BlackTD[playerid][1], 3);
        PlayerTextDrawLetterSize(playerid, BlackTD[playerid][1], 1.000000, 52.200000);
        PlayerTextDrawColor(playerid, BlackTD[playerid][1], 0x000000ff);
        PlayerTextDrawSetOutline(playerid, BlackTD[playerid][1], 1);
        PlayerTextDrawSetProportional(playerid, BlackTD[playerid][1], 1);
        PlayerTextDrawSetShadow(playerid, BlackTD[playerid][1], 1);

	AracKumanda[playerid][0] = CreatePlayerTextDraw(playerid, 536.442443, 174.250000, "box");
	PlayerTextDrawLetterSize(playerid, AracKumanda[playerid][0], 0.000000, 6.954612);
	PlayerTextDrawTextSize(playerid, AracKumanda[playerid][0], 578.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, AracKumanda[playerid][0], 1);
	PlayerTextDrawColor(playerid, AracKumanda[playerid][0], 255);
	PlayerTextDrawUseBox(playerid, AracKumanda[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, AracKumanda[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, AracKumanda[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, AracKumanda[playerid][0], 255);
	PlayerTextDrawFont(playerid, AracKumanda[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, AracKumanda[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][0], 0);

	AracKumanda[playerid][1] = CreatePlayerTextDraw(playerid, 553.777832, 119.416725, "box");
	PlayerTextDrawLetterSize(playerid, AracKumanda[playerid][1], 0.000000, 7.048316);
	PlayerTextDrawTextSize(playerid, AracKumanda[playerid][1], 561.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, AracKumanda[playerid][1], 1);
	PlayerTextDrawColor(playerid, AracKumanda[playerid][1], -1061109505);
	PlayerTextDrawUseBox(playerid, AracKumanda[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, AracKumanda[playerid][1], -1061109505);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, AracKumanda[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, AracKumanda[playerid][1], 255);
	PlayerTextDrawFont(playerid, AracKumanda[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, AracKumanda[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][1], 0);

	new kumandastr[24];
	format(kumandastr, 24, "%c~n~%c", '/', '/');
	AracKumanda[playerid][2] = CreatePlayerTextDraw(playerid, 559.399658, 113.583320, kumandastr);
	PlayerTextDrawLetterSize(playerid, AracKumanda[playerid][2], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, AracKumanda[playerid][2], 1);
	PlayerTextDrawColor(playerid, AracKumanda[playerid][2], -1061109505);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, AracKumanda[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, AracKumanda[playerid][2], 255);
	PlayerTextDrawFont(playerid, AracKumanda[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, AracKumanda[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][2], 0);

	AracKumanda[playerid][3] = CreatePlayerTextDraw(playerid, 559.399719, 138.083282, kumandastr);
	PlayerTextDrawLetterSize(playerid, AracKumanda[playerid][3], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, AracKumanda[playerid][3], 1);
	PlayerTextDrawColor(playerid, AracKumanda[playerid][3], -1061109505);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, AracKumanda[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, AracKumanda[playerid][3], 255);
	PlayerTextDrawFont(playerid, AracKumanda[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, AracKumanda[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][3], 0);

	AracKumanda[playerid][4] = CreatePlayerTextDraw(playerid, 559.399597, 155.583282, kumandastr);
	PlayerTextDrawLetterSize(playerid, AracKumanda[playerid][4], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, AracKumanda[playerid][4], 1);
	PlayerTextDrawColor(playerid, AracKumanda[playerid][4], -1061109505);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, AracKumanda[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, AracKumanda[playerid][4], 255);
	PlayerTextDrawFont(playerid, AracKumanda[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, AracKumanda[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][4], 0);

	AracKumanda[playerid][5] = CreatePlayerTextDraw(playerid, 545.175964, 177.166580, "LD_POOL:ball");
	PlayerTextDrawLetterSize(playerid, AracKumanda[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, AracKumanda[playerid][5], 26.000000, 29.000000);
	PlayerTextDrawAlignment(playerid, AracKumanda[playerid][5], 1);
	PlayerTextDrawColor(playerid, AracKumanda[playerid][5], -1061109505);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, AracKumanda[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, AracKumanda[playerid][5], 255);
	PlayerTextDrawFont(playerid, AracKumanda[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, AracKumanda[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][5], 0);

	AracKumanda[playerid][6] = CreatePlayerTextDraw(playerid, 554.246215, 223.833251, "BAGAJ");
	PlayerTextDrawLetterSize(playerid, AracKumanda[playerid][6], 0.134348, 0.754166);
	PlayerTextDrawAlignment(playerid, AracKumanda[playerid][6], 1);
	PlayerTextDrawColor(playerid, AracKumanda[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, AracKumanda[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, AracKumanda[playerid][6], 255);
	PlayerTextDrawFont(playerid, AracKumanda[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, AracKumanda[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][6], 0);

	AracKumanda[playerid][7] = CreatePlayerTextDraw(playerid, 554.246093, 210.416610, "KILIT");
	PlayerTextDrawLetterSize(playerid, AracKumanda[playerid][7], 0.134348, 0.754166);
	PlayerTextDrawAlignment(playerid, AracKumanda[playerid][7], 1);
	PlayerTextDrawColor(playerid, AracKumanda[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, AracKumanda[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, AracKumanda[playerid][7], 255);
	PlayerTextDrawFont(playerid, AracKumanda[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, AracKumanda[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][7], 0);

	AracKumanda[playerid][8] = CreatePlayerTextDraw(playerid, 545.175720, 210.416687, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, AracKumanda[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, AracKumanda[playerid][8], 6.000000, 7.000000);
	PlayerTextDrawAlignment(playerid, AracKumanda[playerid][8], 1);
	PlayerTextDrawColor(playerid, AracKumanda[playerid][8], 16711935);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, AracKumanda[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, AracKumanda[playerid][8], 255);
	PlayerTextDrawFont(playerid, AracKumanda[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, AracKumanda[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][8], 0);

	AracKumanda[playerid][9] = CreatePlayerTextDraw(playerid, 545.644226, 224.999984, "LD_POOL:BALL");
	PlayerTextDrawLetterSize(playerid, AracKumanda[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, AracKumanda[playerid][9], 6.000000, 7.000000);
	PlayerTextDrawAlignment(playerid, AracKumanda[playerid][9], 1);
	PlayerTextDrawColor(playerid, AracKumanda[playerid][9], -16776961);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, AracKumanda[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, AracKumanda[playerid][9], 255);
	PlayerTextDrawFont(playerid, AracKumanda[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, AracKumanda[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, AracKumanda[playerid][9], 0);

//ALT TEXTDRAW CODED GRATEX


/*TDEditor_Hud[playerid][0] = CreatePlayerTextDraw(playerid, 447.866699, 375.370025, "mdl-2005:NCTaJu");
PlayerTextDrawLetterSize(playerid, TDEditor_Hud[playerid][0], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, TDEditor_Hud[playerid][0], 193.000000, 72.000000);
PlayerTextDrawAlignment(playerid, TDEditor_Hud[playerid][0], 1);
PlayerTextDrawColor(playerid, TDEditor_Hud[playerid][0], -1179649);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][0], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_Hud[playerid][0], 0);
PlayerTextDrawBackgroundColor(playerid, TDEditor_Hud[playerid][0], 255);
PlayerTextDrawFont(playerid, TDEditor_Hud[playerid][0], 4);
PlayerTextDrawSetProportional(playerid, TDEditor_Hud[playerid][0], 0);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][0], 0);
*/
TDEditor_Hud[playerid][1] = CreatePlayerTextDraw(playerid, 594.768188, 5.001629, "~y~FPS:~w~30~n~~b~Ping:~w~30");
PlayerTextDrawLetterSize(playerid, TDEditor_Hud[playerid][1], 0.217998, 0.987496);
PlayerTextDrawAlignment(playerid, TDEditor_Hud[playerid][1], 1);
PlayerTextDrawColor(playerid, TDEditor_Hud[playerid][1], -1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][1], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_Hud[playerid][1], 1);
PlayerTextDrawBackgroundColor(playerid, TDEditor_Hud[playerid][1], 255);
PlayerTextDrawFont(playerid, TDEditor_Hud[playerid][1], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_Hud[playerid][1], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][1], 0);

/*TDEditor_Hud[playerid][2] = CreatePlayerTextDraw(playerid, 492.499450, 432.450012, "10");
PlayerTextDrawLetterSize(playerid, TDEditor_Hud[playerid][2], 0.178499, 0.993331);
PlayerTextDrawAlignment(playerid, TDEditor_Hud[playerid][2], 3);
PlayerTextDrawColor(playerid, TDEditor_Hud[playerid][2], -16776961);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][2], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_Hud[playerid][2], 1);
PlayerTextDrawBackgroundColor(playerid, TDEditor_Hud[playerid][2], 255);
PlayerTextDrawFont(playerid, TDEditor_Hud[playerid][2], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_Hud[playerid][2], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][2], 0);

TDEditor_Hud[playerid][3] = CreatePlayerTextDraw(playerid, 497.000427, 408.816711, "23/04/2010 23:00_______________(0)Marco_Scaglione");
PlayerTextDrawLetterSize(playerid, TDEditor_Hud[playerid][3], 0.152500, 0.999166);
PlayerTextDrawAlignment(playerid, TDEditor_Hud[playerid][3], 1);
PlayerTextDrawColor(playerid, TDEditor_Hud[playerid][3], -1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][3], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_Hud[playerid][3], 1);
PlayerTextDrawBackgroundColor(playerid, TDEditor_Hud[playerid][3], 255);
PlayerTextDrawFont(playerid, TDEditor_Hud[playerid][3], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_Hud[playerid][3], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][3], 0);

TDEditor_Hud[playerid][4] = CreatePlayerTextDraw(playerid, 512.899353, 432.766632, "10");
PlayerTextDrawLetterSize(playerid, TDEditor_Hud[playerid][4], 0.178499, 0.993331);
PlayerTextDrawAlignment(playerid, TDEditor_Hud[playerid][4], 3);
PlayerTextDrawColor(playerid, TDEditor_Hud[playerid][4], -2139062017);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][4], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_Hud[playerid][4], 1);
PlayerTextDrawBackgroundColor(playerid, TDEditor_Hud[playerid][4], 255);
PlayerTextDrawFont(playerid, TDEditor_Hud[playerid][4], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_Hud[playerid][4], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][4], 0);

TDEditor_Hud[playerid][5] = CreatePlayerTextDraw(playerid, 543.491882, 432.766632, "13/dk");
PlayerTextDrawLetterSize(playerid, TDEditor_Hud[playerid][5], 0.178499, 0.993331);
PlayerTextDrawAlignment(playerid, TDEditor_Hud[playerid][5], 3);
PlayerTextDrawColor(playerid, TDEditor_Hud[playerid][5], 16711935);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][5], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_Hud[playerid][5], 1);
PlayerTextDrawBackgroundColor(playerid, TDEditor_Hud[playerid][5], 255);
PlayerTextDrawFont(playerid, TDEditor_Hud[playerid][5], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_Hud[playerid][5], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][5], 0);

TDEditor_Hud[playerid][6] = CreatePlayerTextDraw(playerid, 561.692199, 432.816650, "1");
PlayerTextDrawLetterSize(playerid, TDEditor_Hud[playerid][6], 0.178499, 0.993331);
PlayerTextDrawAlignment(playerid, TDEditor_Hud[playerid][6], 3);
PlayerTextDrawColor(playerid, TDEditor_Hud[playerid][6], -5963521);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][6], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_Hud[playerid][6], 1);
PlayerTextDrawBackgroundColor(playerid, TDEditor_Hud[playerid][6], 255);
PlayerTextDrawFont(playerid, TDEditor_Hud[playerid][6], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_Hud[playerid][6], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][6], 0); */



/*TDEditor_Hud[playerid][19] = CreatePlayerTextDraw(playerid, 8.000000, 320.083374, "");
PlayerTextDrawLetterSize(playerid, TDEditor_Hud[playerid][19], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, TDEditor_Hud[playerid][19], 63.000000, 44.000000);
PlayerTextDrawAlignment(playerid, TDEditor_Hud[playerid][19], 1);
PlayerTextDrawColor(playerid, TDEditor_Hud[playerid][19], -1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][19], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_Hud[playerid][19], 0);
PlayerTextDrawBackgroundColor(playerid, TDEditor_Hud[playerid][19], -256);
PlayerTextDrawFont(playerid, TDEditor_Hud[playerid][19], 5);
PlayerTextDrawSetProportional(playerid, TDEditor_Hud[playerid][19], 0);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][19], 0);
PlayerTextDrawSetPreviewModel(playerid, TDEditor_Hud[playerid][19], 330);
PlayerTextDrawSetPreviewRot(playerid, TDEditor_Hud[playerid][19], 0.000000, 0.000000, 46.000000, 1.000000);*/

/*TDEditor_Hud[playerid][20] = CreatePlayerTextDraw(playerid, 44.899841, 322.566711, "Frekans_:_0_Slot:_0");
PlayerTextDrawLetterSize(playerid, TDEditor_Hud[playerid][20], 0.173500, 0.825829);
PlayerTextDrawAlignment(playerid, TDEditor_Hud[playerid][20], 1);
PlayerTextDrawColor(playerid, TDEditor_Hud[playerid][20], -1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][20], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_Hud[playerid][20], 1);
PlayerTextDrawBackgroundColor(playerid, TDEditor_Hud[playerid][20], 255);
PlayerTextDrawFont(playerid, TDEditor_Hud[playerid][20], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_Hud[playerid][20], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_Hud[playerid][20], 0);*/
// ALT TEXTDRAW GRATEX SON

TDEditor_TD[playerid][0] = CreatePlayerTextDraw(playerid, 160.000000, 118.833389, "_");
PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][0], 0.385499, 18.516649);
PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][0], 488.000000, 0.000000);
PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][0], 1);
PlayerTextDrawColor(playerid, TDEditor_TD[playerid][0], 16777215);
PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][0], 1);
PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][0], -67);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][0], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][0], 0);
PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][0], 255);
PlayerTextDrawFont(playerid, TDEditor_TD[playerid][0], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][0], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][0], 0);

TDEditor_TD[playerid][1] = CreatePlayerTextDraw(playerid, 158.500000, 286.250183, "_");
PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][1], 0.473499, -0.068334);
PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][1], 492.000000, 0.000000);
PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][1], 1);
PlayerTextDrawColor(playerid, TDEditor_TD[playerid][1], -1);
PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][1], 1);
PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][1], 4287487);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][1], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][1], 0);
PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][1], 255);
PlayerTextDrawFont(playerid, TDEditor_TD[playerid][1], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][1], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][1], 0);

TDEditor_TD[playerid][2] = CreatePlayerTextDraw(playerid, 158.500000, 122.333496, "_");
PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][2], 0.109498, 17.816661);
PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][2], 160.000000, 0.000000);
PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][2], 1);
PlayerTextDrawColor(playerid, TDEditor_TD[playerid][2], -1);
PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][2], 1);
PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][2], 4287487);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][2], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][2], 0);
PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][2], 255);
PlayerTextDrawFont(playerid, TDEditor_TD[playerid][2], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][2], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][2], 0);

TDEditor_TD[playerid][3] = CreatePlayerTextDraw(playerid, 267.500000, 117.083358, "Gelismis_Karakter_Paneli");
PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][3], 0.305000, 1.244163);
PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][3], 1);
PlayerTextDrawColor(playerid, TDEditor_TD[playerid][3], -1);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][3], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][3], 1);
PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][3], 255);
PlayerTextDrawFont(playerid, TDEditor_TD[playerid][3], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][3], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][3], 0);

TDEditor_TD[playerid][4] = CreatePlayerTextDraw(playerid, 492.000000, 124.666824, "_");
PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][4], 0.109498, 17.816661);
PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][4], 492.000000, 0.000000);
PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][4], 1);
PlayerTextDrawColor(playerid, TDEditor_TD[playerid][4], -1);
PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][4], 1);
PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][4], 4287487);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][4], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][4], 0);
PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][4], 255);
PlayerTextDrawFont(playerid, TDEditor_TD[playerid][4], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][4], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][4], 0);

TDEditor_TD[playerid][5] = CreatePlayerTextDraw(playerid, 158.500000, 115.916831, "_");
PlayerTextDrawLetterSize(playerid, TDEditor_TD[playerid][5], 0.458996, 1.302494);
PlayerTextDrawTextSize(playerid, TDEditor_TD[playerid][5], 492.000000, 0.000000);
PlayerTextDrawAlignment(playerid, TDEditor_TD[playerid][5], 1);
PlayerTextDrawColor(playerid, TDEditor_TD[playerid][5], -1);
PlayerTextDrawUseBox(playerid, TDEditor_TD[playerid][5], 1);
PlayerTextDrawBoxColor(playerid, TDEditor_TD[playerid][5], 4287487);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][5], 0);
PlayerTextDrawSetOutline(playerid, TDEditor_TD[playerid][5], 0);
PlayerTextDrawBackgroundColor(playerid, TDEditor_TD[playerid][5], 255);
PlayerTextDrawFont(playerid, TDEditor_TD[playerid][5], 1);
PlayerTextDrawSetProportional(playerid, TDEditor_TD[playerid][5], 1);
PlayerTextDrawSetShadow(playerid, TDEditor_TD[playerid][5], 0);

LoginTD[playerid][0] = CreatePlayerTextDraw(playerid, 175.900146, 256.833007, "LD_POOL:ball");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][0], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][0], 77.000000, 13.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][0], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][0], 6946815);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][0], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][0], 0);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][0], 255);
PlayerTextDrawFont(playerid, LoginTD[playerid][0], 4);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][0], 0);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][0], 0);

LoginTD[playerid][1] = CreatePlayerTextDraw(playerid, 287.400146, 255.766281, "LD_POOL:ball");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][1], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][1], 77.000000, 13.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][1], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][1], 6946815);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][1], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][1], 0);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][1], 255);
PlayerTextDrawFont(playerid, LoginTD[playerid][1], 4);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][1], 0);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][1], 0);

LoginTD[playerid][2] = CreatePlayerTextDraw(playerid, 391.700622, 255.766326, "LD_POOL:ball");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][2], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][2], 77.000000, 13.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][2], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][2], 6946815);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][2], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][2], 0);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][2], 255);
PlayerTextDrawFont(playerid, LoginTD[playerid][2], 4);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][2], 0);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][2], 0);






LoginTD[playerid][7] = CreatePlayerTextDraw(playerid, 181.000000, 153.833282, "Karakter_Slot");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][7], 0.180500, 1.214999);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][7], 240.000000, 0.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][7], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][7], -1);
PlayerTextDrawUseBox(playerid, LoginTD[playerid][7], 1);
PlayerTextDrawBoxColor(playerid, LoginTD[playerid][6], 150);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][7], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][7], 1);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][7], 255);
PlayerTextDrawFont(playerid, LoginTD[playerid][7], 1);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][7], 1);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][7], 0);

LoginTD[playerid][8] = CreatePlayerTextDraw(playerid, 288.500000, 153.833282, "Karakter_Slot");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][8], 0.180500, 1.214999);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][8], 355.000000, 0.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][8], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][8], -1);
PlayerTextDrawUseBox(playerid, LoginTD[playerid][8], 1);
PlayerTextDrawBoxColor(playerid, LoginTD[playerid][6], 150);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][8], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][8], 1);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][8], 255);
PlayerTextDrawFont(playerid, LoginTD[playerid][8], 1);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][8], 1);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][8], 0);


LoginTD[playerid][9] = CreatePlayerTextDraw(playerid, 399.000000, 154.416595, "Karakter_Slot");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][9], 0.180500, 1.264999);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][9], 462.000000, 0.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][9], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][9], -1);
PlayerTextDrawUseBox(playerid, LoginTD[playerid][9], 1);
PlayerTextDrawBoxColor(playerid, LoginTD[playerid][6], 150);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][9], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][9], 1);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][9], 255);
PlayerTextDrawFont(playerid, LoginTD[playerid][9], 1);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][9], 1);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][9], 0);

LoginTD[playerid][10] = CreatePlayerTextDraw(playerid, 167.000000, 171.333374, "");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][10], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][10], 90.000000, 90.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][10], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][10], -1);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][10], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][10], 0);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][10], 0);
PlayerTextDrawFont(playerid, LoginTD[playerid][10], 5);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][10], 0);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][10], 0);
PlayerTextDrawSetPreviewModel(playerid, LoginTD[playerid][10], 0);
PlayerTextDrawSetPreviewRot(playerid, LoginTD[playerid][10], 0.000000, 0.000000, 26.000000, 0.837245);

LoginTD[playerid][11] = CreatePlayerTextDraw(playerid, 279.500000, 171.916748, "");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][11], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][11], 90.000000, 90.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][11], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][11], -1);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][11], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][11], 0);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][11], 0);
PlayerTextDrawFont(playerid, LoginTD[playerid][11], 5);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][11], 0);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][11], 0);
PlayerTextDrawSetPreviewModel(playerid, LoginTD[playerid][11], 0);
PlayerTextDrawSetPreviewRot(playerid, LoginTD[playerid][11], 0.000000, 0.000000, 26.000000, 0.837245);

LoginTD[playerid][12] = CreatePlayerTextDraw(playerid, 383.500000, 170.750076, "");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][12], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][12], 90.000000, 90.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][12], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][12], -1);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][12], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][12], 0);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][12], 0);
PlayerTextDrawFont(playerid, LoginTD[playerid][12], 5);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][12], 0);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][12], 0);
PlayerTextDrawSetPreviewModel(playerid, LoginTD[playerid][12], 0);
PlayerTextDrawSetPreviewRot(playerid, LoginTD[playerid][12], 0.000000, 0.000000, 26.000000, 0.837245);



LoginTD[playerid][13] = CreatePlayerTextDraw(playerid, 206.000000, 277.500030, "LD_BEAT:circle");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][13], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][13], 17.000000, 18.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][13], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][13], -1);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][13], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][13], 0);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][13], 255);
PlayerTextDrawFont(playerid, LoginTD[playerid][13], 4);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][13], 0);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][13], 0);
PlayerTextDrawSetSelectable(playerid, LoginTD[playerid][13], true);

LoginTD[playerid][14] = CreatePlayerTextDraw(playerid, 318.000000, 276.916687, "LD_BEAT:circle");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][14], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][14], 17.000000, 18.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][14], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][14], -1);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][14], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][14], 0);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][14], 255);
PlayerTextDrawFont(playerid, LoginTD[playerid][14], 4);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][14], 0);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][14], 0);
PlayerTextDrawSetSelectable(playerid, LoginTD[playerid][14], true);

LoginTD[playerid][15] = CreatePlayerTextDraw(playerid, 426.000000, 276.916717, "LD_BEAT:circle");
PlayerTextDrawLetterSize(playerid, LoginTD[playerid][15], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, LoginTD[playerid][15], 17.000000, 18.000000);
PlayerTextDrawAlignment(playerid, LoginTD[playerid][15], 1);
PlayerTextDrawColor(playerid, LoginTD[playerid][15], -1);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][15], 0);
PlayerTextDrawSetOutline(playerid, LoginTD[playerid][15], 0);
PlayerTextDrawBackgroundColor(playerid, LoginTD[playerid][15], 255);
PlayerTextDrawFont(playerid, LoginTD[playerid][15], 4);
PlayerTextDrawSetProportional(playerid, LoginTD[playerid][15], 0);
PlayerTextDrawSetShadow(playerid, LoginTD[playerid][15], 0);
PlayerTextDrawSetSelectable(playerid, LoginTD[playerid][15], true);



CharacterView[playerid][3] = CreatePlayerTextDraw(playerid, 167.000000, 171.333374, "");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][3], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, CharacterView[playerid][3], 90.000000, 90.000000);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][3], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][3], -1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][3], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][3], 0);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][3], 0);
PlayerTextDrawFont(playerid, CharacterView[playerid][3], 5);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][3], 0);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][3], 0);
PlayerTextDrawSetPreviewModel(playerid, CharacterView[playerid][3], 0);
PlayerTextDrawSetPreviewRot(playerid, CharacterView[playerid][3], 0.000000, 0.000000, 26.000000, 0.837245);






CharacterView[playerid][5] = CreatePlayerTextDraw(playerid, 379.000000, 278.500030, "LD_BEAT:right");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][5], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, CharacterView[playerid][5], 27.000000, 29.000000);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][5], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][5], -1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][5], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][5], 0);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][5], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][5], 4);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][5], 0);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][5], 0);
PlayerTextDrawSetSelectable(playerid, CharacterView[playerid][5], true);


CharacterView[playerid][7] = CreatePlayerTextDraw(playerid, 286.000000, 200.999984, "Dogum Tarihi: ~g~Fasf");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][7], 0.252000, 1.074999);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][7], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][7], -1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][7], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][7], 1);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][7], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][7], 1);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][7], 1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][7], 0);

CharacterView[playerid][8] = CreatePlayerTextDraw(playerid, 286.000000, 211.499969, "Dogum Tarihi: ~g~Fasf");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][8], 0.252000, 1.074999);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][8], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][8], -1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][8], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][8], 1);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][8], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][8], 1);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][8], 1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][8], 0);

CharacterView[playerid][16] = CreatePlayerTextDraw(playerid, 286.000000, 222.100616, "Dogum Tarihi: ~g~Fasf");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][16], 0.252000, 1.074999);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][16], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][16], -1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][16], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][16], 1);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][16], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][16], 1);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][16], 1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][16], 0);

CharacterView[playerid][9] = CreatePlayerTextDraw(playerid, 286.000000, 232.801269, "Dogum Tarihi: ~g~Fasf");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][9], 0.252000, 1.074999);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][9], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][9], -1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][9], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][9], 1);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][9], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][9], 1);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][9], 1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][9], 0);

	CharacterView[playerid][10] = CreatePlayerTextDraw(playerid, 286.000000, 222.100616, "Dogum Tarihi: ~g~Fasf");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][10], 0.252000, 1.074999);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][10], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][10], -1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][10], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][10], 1);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][10], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][10], 1);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][10], 1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][10], 0);

CharacterView[playerid][11] = CreatePlayerTextDraw(playerid, 261.000000, 278.316772, "LD_BEAT:left");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][11], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, CharacterView[playerid][11], 27.000000, 29.000000);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][11], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][11], -1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][11], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][11], 0);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][11], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][11], 4);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][11], 0);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][11], 0);
PlayerTextDrawSetSelectable(playerid, CharacterView[playerid][11], true);


CharacterView[playerid][12] = CreatePlayerTextDraw(playerid, 379.000000, 278.500030, "LD_BEAT:right");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][12], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, CharacterView[playerid][12], 27.000000, 29.000000);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][12], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][12], -1);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][12], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][12], 0);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][12], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][12], 4);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][12], 0);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][12], 0);
PlayerTextDrawSetSelectable(playerid, CharacterView[playerid][12], true);

	CharacterView[playerid][13] = CreatePlayerTextDraw(playerid, 275.400054, 201.583343, "LD_BEAT:circle");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][13], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, CharacterView[playerid][13], 8.000000, 9.000000);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][13], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][13], -5963521);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][13], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][13], 0);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][13], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][13], 4);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][13], 0);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][13], 0);
PlayerTextDrawSetSelectable(playerid, CharacterView[playerid][13], true);

CharacterView[playerid][14] = CreatePlayerTextDraw(playerid, 275.400054, 212.584014, "LD_BEAT:circle");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][14], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, CharacterView[playerid][14], 8.000000, 9.000000);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][14], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][14], -5963521);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][14], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][14], 0);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][14], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][14], 4);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][14], 0);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][14], 0);
PlayerTextDrawSetSelectable(playerid, CharacterView[playerid][14], true);

CharacterView[playerid][15] = CreatePlayerTextDraw(playerid, 275.400054, 233.184661, "LD_BEAT:circle");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][15], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, CharacterView[playerid][15], 8.000000, 9.000000);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][15], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][15], -5963521);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][15], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][15], 0);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][15], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][15], 4);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][15], 0);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][15], 0);
PlayerTextDrawSetSelectable(playerid, CharacterView[playerid][15], true);

CharacterView[playerid][17] = CreatePlayerTextDraw(playerid, 275.900054, 223.585296, "LD_BEAT:circle");
PlayerTextDrawLetterSize(playerid, CharacterView[playerid][17], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, CharacterView[playerid][17], 8.000000, 9.000000);
PlayerTextDrawAlignment(playerid, CharacterView[playerid][17], 1);
PlayerTextDrawColor(playerid, CharacterView[playerid][17], -5963521);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][17], 0);
PlayerTextDrawSetOutline(playerid, CharacterView[playerid][17], 0);
PlayerTextDrawBackgroundColor(playerid, CharacterView[playerid][17], 255);
PlayerTextDrawFont(playerid, CharacterView[playerid][17], 4);
PlayerTextDrawSetProportional(playerid, CharacterView[playerid][17], 0);
PlayerTextDrawSetShadow(playerid, CharacterView[playerid][17], 0);
PlayerTextDrawSetSelectable(playerid, CharacterView[playerid][17], true);

	MainMDC[playerid][0] = CreatePlayerTextDraw(playerid, 157.877029, 114.750000, "box");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][0], 0.000000, 22.368957);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][0], 518.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][0], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, MainMDC[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, MainMDC[playerid][0], 41215);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][0], 41215);
	PlayerTextDrawFont(playerid, MainMDC[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][0], 0);

	MainMDC[playerid][1] = CreatePlayerTextDraw(playerid, 157.408508, 113.583389, "box");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][1], 0.000000, 22.415809);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][1], 155.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][1], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, MainMDC[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, MainMDC[playerid][1], -2147483393);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][1], -2147483393);
	PlayerTextDrawFont(playerid, MainMDC[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][1], 0);

	MainMDC[playerid][2] = CreatePlayerTextDraw(playerid, 524.260681, 115.333412, "box");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][2], 0.000000, 22.415809);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][2], 518.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][2], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, MainMDC[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, MainMDC[playerid][2], -2147483393);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][2], -2147483393);
	PlayerTextDrawFont(playerid, MainMDC[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][2], 0);

	MainMDC[playerid][3] = CreatePlayerTextDraw(playerid, 157.408523, 318.916748, "box");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][3], 0.000000, -0.120056);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][3], 520.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][3], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, MainMDC[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, MainMDC[playerid][3], -2147483393);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][3], -2147483393);
	PlayerTextDrawFont(playerid, MainMDC[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][3], 0);

	MainMDC[playerid][4] = CreatePlayerTextDraw(playerid, 158.345565, 113.583419, "box");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][4], 0.000000, -0.166908);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][4], 520.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][4], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, MainMDC[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, MainMDC[playerid][4], -2147483393);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][4], -2147483393);
	PlayerTextDrawFont(playerid, MainMDC[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][4], 0);

	MainMDC[playerid][5] = CreatePlayerTextDraw(playerid, 513.785461, 106.799980, "LD_BEAT:cross");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][5], 12.000000, 12.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][5], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][5], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][5], 0);

	MainMDC[playerid][6] = CreatePlayerTextDraw(playerid, 247.664550, 117.666648, "LD_DRV:nawtxt");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][6], 165.000000, 191.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][6], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][6], -208);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][6], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][6], 0);

	MainMDC[playerid][7] = CreatePlayerTextDraw(playerid, 247.664550, 117.666648, "LD_DRV:goboat");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][7], 165.000000, 191.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][7], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][7], -208);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][7], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][7], 0);

	MainMDC[playerid][8] = CreatePlayerTextDraw(playerid, 163.330902, 120.583328, "LD_OTB2:butnAo");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][8], 65.000000, 25.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][8], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][8], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][8], 0);

	MainMDC[playerid][9] = CreatePlayerTextDraw(playerid, 234.077590, 120.583320, "LD_OTB2:butnAo");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][9], 65.000000, 25.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][9], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][9], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][9], 0);

	MainMDC[playerid][10] = CreatePlayerTextDraw(playerid, 304.824462, 120.583312, "LD_OTB2:butnAo");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][10], 65.000000, 25.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][10], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][10], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][10], 0);

	MainMDC[playerid][11] = CreatePlayerTextDraw(playerid, 375.571350, 119.999969, "LD_OTB2:butnAo");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][11], 65.000000, 25.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][11], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][11], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][11], 0);

	MainMDC[playerid][12] = CreatePlayerTextDraw(playerid, 446.786529, 119.999977, "LD_OTB2:butnAo");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][12], 65.000000, 25.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][12], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][12], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][12], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][12], 0);

    for (new i = 8; i < 13; i ++) PlayerTextDrawSetSelectable(playerid, MainMDC[playerid][i], 1);
    PlayerTextDrawSetSelectable(playerid, MainMDC[playerid][5], 1);

	MainMDC[playerid][13] = CreatePlayerTextDraw(playerid, 161.156661, 303.750122, "Hosgeldin, ~y~Memur ~w~Memoli.");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][13], 0.198535, 1.168332);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][13], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][13], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][13], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][13], 0);

	MainMDC[playerid][14] = CreatePlayerTextDraw(playerid, 417.437500, 302.000061, "01/01/2016 - 14:02");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][14], 0.252884, 1.284999);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][14], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][14], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][14], 1);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][14], 1);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][14], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][14], 2);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][14], 1);

	MainMDC[playerid][15] = CreatePlayerTextDraw(playerid, 173.338211, 122.916694, "Dashcam");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][15], 0.313791, 1.354999);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][15], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][15], 255);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][15], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][15], 0);

	MainMDC[playerid][16] = CreatePlayerTextDraw(playerid, 239.868209, 122.916694, "Aranmalar");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][16], 0.313791, 1.354999);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][16], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][16], 255);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][16], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][16], 0);

	MainMDC[playerid][17] = CreatePlayerTextDraw(playerid, 307.335479, 122.916702, "Sicil Kontrol");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][17], 0.313791, 1.354999);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][17], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][17], 255);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][17], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][17], 0);

	MainMDC[playerid][18] = CreatePlayerTextDraw(playerid, 377.613952, 122.333358, "Plaka Sorgu");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][18], 0.313791, 1.354999);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][18], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][18], 255);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][18], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][18], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][18], 0);

	MainMDC[playerid][19] = CreatePlayerTextDraw(playerid, 450.703582, 122.333358, "Telf. Sorgu");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][19], 0.313791, 1.354999);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][19], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][19], 255);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][19], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][19], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][19], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][19], 0);

	MainMDC[playerid][20] = CreatePlayerTextDraw(playerid, 271.727539, 173.083358, "Ad/Soyad: ~y~Test");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][20], 0.290366, 1.401667);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][20], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][20], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][20], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][20], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][20], 0);

	MainMDC[playerid][21] = CreatePlayerTextDraw(playerid, 271.259002, 188.250015, "Ad/Soyad: ~y~Test");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][21], 0.290366, 1.401667);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][21], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][21], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][21], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][21], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][21], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][21], 0);

	MainMDC[playerid][22] = CreatePlayerTextDraw(playerid, 271.259002, 204.000000, "Ad/Soyad: ~y~Test");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][22], 0.290366, 1.401667);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][22], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][22], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][22], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][22], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][22], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][22], 0);

	MainMDC[playerid][23] = CreatePlayerTextDraw(playerid, 271.259033, 219.749954, "Ad/Soyad: ~y~Test");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][23], 0.290366, 1.401667);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][23], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][23], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][23], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][23], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][23], 0);

	MainMDC[playerid][24] = CreatePlayerTextDraw(playerid, 271.727569, 236.083297, "Ad/Soyad: ~y~Test");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][24], 0.290366, 1.401667);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][24], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][24], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][24], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][24], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][24], 0);

	MainMDC[playerid][25] = CreatePlayerTextDraw(playerid, 271.727600, 252.416580, "Ad/Soyad: ~y~Test");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][25], 0.290366, 1.401667);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][25], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][25], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][25], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][25], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][25], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][25], 0);


	MainMDC[playerid][26] = CreatePlayerTextDraw(playerid, 154.897476, 159.666732, "");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][26], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][26], 117.000000, 124.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][26], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][26], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][26], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][26], -256);
	PlayerTextDrawFont(playerid, MainMDC[playerid][26], 5);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][26], 0);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][26], 0);
	PlayerTextDrawSetPreviewModel(playerid, MainMDC[playerid][26], 299);
	PlayerTextDrawSetPreviewRot(playerid, MainMDC[playerid][26],  0.000000, 0.000000, 0.000000, 1.000000);

	MainMDC[playerid][27] = CreatePlayerTextDraw(playerid, 446.786529, 149.999977, "LD_OTB2:butnAo");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][27], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, MainMDC[playerid][27], 65.000000, 25.000000);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][27], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][27], -1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][27], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][27], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][27], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][27], 4);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][27], 0);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][27], 0);
    PlayerTextDrawSetSelectable(playerid, MainMDC[playerid][27], 1);

	MainMDC[playerid][28] = CreatePlayerTextDraw(playerid, 450.703582, 152.333358, "Suc Ekle");
	PlayerTextDrawLetterSize(playerid, MainMDC[playerid][28], 0.313791, 1.354999);
	PlayerTextDrawAlignment(playerid, MainMDC[playerid][28], 1);
	PlayerTextDrawColor(playerid, MainMDC[playerid][28], 255);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][28], 0);
	PlayerTextDrawSetOutline(playerid, MainMDC[playerid][28], 0);
	PlayerTextDrawBackgroundColor(playerid, MainMDC[playerid][28], 255);
	PlayerTextDrawFont(playerid, MainMDC[playerid][28], 1);
	PlayerTextDrawSetProportional(playerid, MainMDC[playerid][28], 1);
	PlayerTextDrawSetShadow(playerid, MainMDC[playerid][28], 0);

    GBText = TextDrawCreate(641.199951, 1.500000, "usebox");
    TextDrawLetterSize(GBText, 0.000000, 49.378147);
    TextDrawTextSize(GBText, -2.000000, 0.000000);
    TextDrawAlignment(GBText, 3);
    TextDrawColor(GBText, -1);
    TextDrawUseBox(GBText, true);
    TextDrawBoxColor(GBText, 255);
    TextDrawSetShadow(GBText, 0);
    TextDrawSetOutline(GBText, 0);
    TextDrawBackgroundColor(GBText, 255);
    TextDrawFont(GBText, 1);




    PlayerData[playerid][pTextdraws][39] = CreatePlayerTextDraw(playerid, 300.000000, 411.000000, "~r~Alt text.");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][39], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][39], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][39], 3);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][39], 0.460000, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][39], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][39], 0);




	PlayerData[playerid][pTextdraws][58] = CreatePlayerTextDraw(playerid, 424.000000, 151.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][58], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][58], 0.600000, 8.699998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][58], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][58], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][58], 202.000000, 11.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][58], 0);

	PlayerData[playerid][pTextdraws][59] = CreatePlayerTextDraw(playerid, 206.000000, 151.000000, "Tanitim: Giris");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][59], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][59], 0.319999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][59], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][59], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][59], 420.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][59], 0);

	PlayerData[playerid][pTextdraws][60] = CreatePlayerTextDraw(playerid, 208.000000, 164.000000, "Az sonra bir tanitim yani giris egitimi alacaksin.~n~Daha sonra spawn olacaksin.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][60], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][60], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][60], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][60], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][60], 0);

	PlayerData[playerid][pTextdraws][61] = CreatePlayerTextDraw(playerid, 208.000000, 197.000000, "Herhangi bir sorun olursa, ~g~~h~/sorusor~w~'u kullan. ~n~Helper ekibi sana yardimci olacaktir.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][61], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][61], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][61], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][61], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][61], 0);

	PlayerData[playerid][pTextdraws][62] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][62], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][62], 0.530000, 51.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][62], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][62], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][62], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][62], -6.000000, 30.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][62], 0);


	PlayerData[playerid][pTextdraws][69] = CreatePlayerTextDraw(playerid, 13.000000, 421.000000, "~b~Hedef:~w~ Calculating...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][69], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][69], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][69], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][69], 0);

	PlayerData[playerid][pTextdraws][70] = CreatePlayerTextDraw(playerid, 499.000000, 101.000000, "~g~Kalan Sure:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][70], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][70], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][70], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][70], 0);

	PlayerData[playerid][pTextdraws][81] = CreatePlayerTextDraw(playerid, 553.000000, 99.000000, "~b~~h~Hedefler:~w~ 0/10");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][81], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][81], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][81], 0.390000, 1.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][81], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][81], 0);

	PlayerData[playerid][pTextdraws][82] = CreatePlayerTextDraw(playerid, 37.000000, 315.000000, "~b~Loaded:~w~ Retail Supplies~n~~b~Yuklu Sandik:~w~ 6/6");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][82], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][82], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][82], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][82], 0);

	TelefonPlayer[playerid][0] = CreatePlayerTextDraw(playerid,528.477233, 258.249969, "Hic yeni bildiriminiz yok!");
	PlayerTextDrawLetterSize(playerid, TelefonPlayer[playerid][0], 0.223836, 0.946666);
	PlayerTextDrawAlignment(playerid, TelefonPlayer[playerid][0], 1);
	PlayerTextDrawColor(playerid, TelefonPlayer[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, TelefonPlayer[playerid][0], 1);
	PlayerTextDrawSetOutline(playerid, TelefonPlayer[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, TelefonPlayer[playerid][0], 255);
	PlayerTextDrawFont(playerid, TelefonPlayer[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TelefonPlayer[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TelefonPlayer[playerid][0], 1);

	TelefonPlayer[playerid][1] = CreatePlayerTextDraw(playerid, 560.805297, 255.916854, "");
	PlayerTextDrawLetterSize(playerid, TelefonPlayer[playerid][1], 0.376105, 1.699166);
	PlayerTextDrawAlignment(playerid, TelefonPlayer[playerid][1], 2);
	PlayerTextDrawColor(playerid, TelefonPlayer[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, TelefonPlayer[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TelefonPlayer[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TelefonPlayer[playerid][1], 255);
	PlayerTextDrawFont(playerid, TelefonPlayer[playerid][1], 3);
	PlayerTextDrawSetProportional(playerid, TelefonPlayer[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TelefonPlayer[playerid][1], 0);

    TelefonPlayer[playerid][2] = CreatePlayerTextDraw(playerid, 574.000000, 315.000000, "Bilinmeyen Ad");
	PlayerTextDrawLetterSize(playerid, TelefonPlayer[playerid][2], 0.242108, 1.162500);
	PlayerTextDrawAlignment(playerid, TelefonPlayer[playerid][2], 2);
	PlayerTextDrawColor(playerid, TelefonPlayer[playerid][2], 255);
	PlayerTextDrawSetShadow(playerid, TelefonPlayer[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TelefonPlayer[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TelefonPlayer[playerid][2], 255);
	PlayerTextDrawFont(playerid, TelefonPlayer[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TelefonPlayer[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TelefonPlayer[playerid][2], 0);

	TelefonPlayer[playerid][3] = CreatePlayerTextDraw(playerid, 575.000000, 340.000000, "00:00");
	PlayerTextDrawLetterSize(playerid, TelefonPlayer[playerid][3], 0.186354, 1.115833);
	PlayerTextDrawAlignment(playerid, TelefonPlayer[playerid][3], 2);
	PlayerTextDrawColor(playerid, TelefonPlayer[playerid][3], -1523963137);
	PlayerTextDrawSetShadow(playerid, TelefonPlayer[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TelefonPlayer[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TelefonPlayer[playerid][3], 255);
	PlayerTextDrawFont(playerid, TelefonPlayer[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TelefonPlayer[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TelefonPlayer[playerid][3], 0);

	TelefonYazi[playerid][0] = CreatePlayerTextDraw(playerid, 526.135070, 253.583618, "TDEditor");
	PlayerTextDrawLetterSize(playerid, TelefonYazi[playerid][0], 0.243513, 1.069165);
	PlayerTextDrawAlignment(playerid, TelefonYazi[playerid][0], 1);
	PlayerTextDrawColor(playerid, TelefonYazi[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, TelefonYazi[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TelefonYazi[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TelefonYazi[playerid][0], 255);
	PlayerTextDrawFont(playerid, TelefonYazi[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TelefonYazi[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TelefonYazi[playerid][0], 0);

	TelefonYazi[playerid][1] = CreatePlayerTextDraw(playerid, 524.729492, 327.666931, "TDEditor");
	PlayerTextDrawLetterSize(playerid, TelefonYazi[playerid][1], 0.243513, 1.069165);
	PlayerTextDrawAlignment(playerid, TelefonYazi[playerid][1], 1);
	PlayerTextDrawColor(playerid, TelefonYazi[playerid][1], 255);
	PlayerTextDrawSetShadow(playerid, TelefonYazi[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TelefonYazi[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TelefonYazi[playerid][1], 255);
	PlayerTextDrawFont(playerid, TelefonYazi[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TelefonYazi[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TelefonYazi[playerid][1], 0);

	TelefonYazi[playerid][2] = CreatePlayerTextDraw(playerid, 634.663452, 201.666564, "");
	PlayerTextDrawLetterSize(playerid, TelefonYazi[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TelefonYazi[playerid][2], -127.000000, 172.000000);
	PlayerTextDrawAlignment(playerid, TelefonYazi[playerid][2], 1);
	PlayerTextDrawColor(playerid, TelefonYazi[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TelefonYazi[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TelefonYazi[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TelefonYazi[playerid][2], 0);
	PlayerTextDrawFont(playerid, TelefonYazi[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, TelefonYazi[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, TelefonYazi[playerid][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, TelefonYazi[playerid][2], 19172);
	PlayerTextDrawSetPreviewRot(playerid, TelefonYazi[playerid][2], 0.000000, 0.000000, 0.000000, 1.000000);

	TelefonYazi[playerid][3] = CreatePlayerTextDraw(playerid, 567.833190, 257.666656, "HARITA");
	PlayerTextDrawLetterSize(playerid, TelefonYazi[playerid][3], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, TelefonYazi[playerid][3], 2);
	PlayerTextDrawColor(playerid, TelefonYazi[playerid][3], -1523963137);
	PlayerTextDrawSetShadow(playerid, TelefonYazi[playerid][3], 52);
	PlayerTextDrawSetOutline(playerid, TelefonYazi[playerid][3], 2);
	PlayerTextDrawBackgroundColor(playerid, TelefonYazi[playerid][3], 255);
	PlayerTextDrawFont(playerid, TelefonYazi[playerid][3], 3);
	PlayerTextDrawSetProportional(playerid, TelefonYazi[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TelefonYazi[playerid][3], 52);
}

stock ShowPlayerFooter(playerid, string[], time = 5000) {
	if (PlayerData[playerid][pShowFooter]) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][39]);
	    KillTimer(PlayerData[playerid][pFooterTimer]);
	}
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][39], string);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][39]);

	PlayerData[playerid][pShowFooter] = true;
	PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);
}


forward HidePlayerFooter(playerid);
public HidePlayerFooter(playerid) {

	if (!PlayerData[playerid][pShowFooter])
	    return 0;

	PlayerData[playerid][pShowFooter] = false;
	return PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][39]);
}
ResetStatistics(playerid)
{
    foreach (new i : Player) if (PlayerData[i][pLastPM] == playerid) {
	    PlayerData[i][pLastPM] = INVALID_PLAYER_ID;
	}
	PlayerData[playerid][pLastPM] = INVALID_PLAYER_ID;
    SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
    PlayerData[playerid][pDovus] = 4;
	PlayerData[playerid][pLogged] = false;
	PlayerData[playerid][pMask] = false;
    PlayerData[playerid][pBaygin] = false;
	PlayerData[playerid][pKartusHazir] = true;
	PlayerData[playerid][pOtobusDuty] = false;
    if(BalikTimer[playerid] != -1)
	{
		KillTimer(BalikTimer[playerid]);
		BalikTimer[playerid] = -1;
	}

	PlayerData[playerid][pBocek] = INVALID_PLAYER_ID;
    PlayerData[playerid][pYaris] = -1;
    PlayerData[playerid][pYarisHazirliyormu] = -1;
	IsSpeeding[playerid] = false;
    PlayerData[playerid][pDMUyari] = 0;
    PlayerData[playerid][pDMUyariSure] = 0;
    PlayerData[playerid][pBaygin] = false;
	PlayerData[playerid][pBayginSure] = 0;
    PlayerData[playerid][pAdminChat] = true;
    PlayerData[playerid][pTaksiKabul] = -1;
   	PlayerData[playerid][pDisableSpeedo] = false;
   	PlayerData[playerid][pKereste] = -1;
   	PlayerData[playerid][pPaintball] = -1;
   	PlayerData[playerid][pCaptureFactory] = -1;
    AracInterioruSifirla(playerid);
	for (new i = 0; i < 3; i ++) {
	    PlayerCharacters[playerid][i][0] = 0;

	    for (new j = 0; j < 9; j ++) {
	    	AccessoryData[playerid][i][j] = 0.0;
	    }
	}
	for (new i = 0; i != MAX_INVENTORY; i ++) {
	    InventoryData[playerid][i][invExists] = false;
	    InventoryData[playerid][i][invModel] = 0;
	    InventoryData[playerid][i][invQuantity] = 0;
	}
	for (new i = 0; i != MAX_URUN; i ++) {
		UrunData[playerid][i][urunVarmi] = false;
	   	UrunData[playerid][i][urunMiktar] = 0;
	}
	for (new i = 0; i < 13; i ++) {
	    PlayerData[playerid][pGuns][i] = 0;
	    PlayerData[playerid][pAmmo][i] = 0;
	}
	for (new i = 0; i != MAX_HOUSE_FURNITURE; i ++) {
	    ListedFurniture[playerid][i] = -1;
	}
	for (new i = 0; i < MAX_LISTED_ITEMS; i ++) {
	    NearestItems[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
	    ContactData[playerid][i][contactExists] = false;
	    ContactData[playerid][i][contactID] = 0;
	    ContactData[playerid][i][contactNumber] = 0;
	    ListedContacts[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) {
	    LocationData[playerid][i][locationExists] = false;
	    LocationData[playerid][i][locationID] = 0;
	}
	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) {
	    TicketData[playerid][i][ticketID] = 0;
		TicketData[playerid][i][ticketExists] = false;
		TicketData[playerid][i][ticketFee] = 0;
	}
	for (new i = 0; i != 3; i ++) {
	    Kuponlar[playerid][i][kuponID] = -1;
		Kuponlar[playerid][i][kuponVarmi] = false;
		Kuponlar[playerid][i][kuponOdul] = 0;
		Kuponlar[playerid][i][kuponYatirilan] = 0;
		Kuponlar[playerid][i][kuponTahmin] = -1;
		Kuponlar[playerid][i][kuponMacID] = -1;
	}
	for (new i = 0; i != MAX_HASAR; i ++) {
		Hasarlar[playerid][i][hasarVarmi] = false;
		Hasarlar[playerid][i][hasarBolge] = 0;
		Hasarlar[playerid][i][hasarVeren] = INVALID_PLAYER_ID;
        Hasarlar[playerid][i][hasarDeger] = 0;
        Hasarlar[playerid][i][hasarSilah] = 0;
	}
	for (new i = 0; i < 5; i ++) {
	    PlayerData[playerid][pASlot][i] = 0;
	    PlayerData[playerid][pTSlot][i] = true;
	}
	BoomboxData[playerid][boomboxPlaced] = 0;
	BoomboxData[playerid][boomboxPos][0] = 0.0;
	BoomboxData[playerid][boomboxPos][1] = 0.0;
	BoomboxData[playerid][boomboxPos][2] = 0.0;
    Yarali[playerid] = false;
    GangZoneHideForPlayer(playerid, blackmap);
    TakiptekiYarali[playerid] = INVALID_PLAYER_ID;
    SigaraDurum[playerid] = false;
    KiyafetDurum[playerid] = false;
    PenisDurum[playerid] = false;
	PlayerData[playerid][pRaporSayisi] = 0;
	PlayerData[playerid][pSoruSayisi] = -1;
	PlayerData[playerid][pID] = -1;
	PlayerData[playerid][pAccount] = 0;
	PlayerData[playerid][pLogged] = 0;
	PlayerData[playerid][pLoginAttempts] = 0;
	PlayerData[playerid][pCreated] = 0;
	PlayerData[playerid][pGender] = 1;
	PlayerData[playerid][pBirthdate][0] = 0;
	PlayerData[playerid][pOrigin][0] = 0;
    PlayerData[playerid][pTenRengi][0] = 0;
	PlayerData[playerid][pSkin] = 98;
    PlayerData[playerid][pEditType] = 0;
    PlayerData[playerid][pGBWarn] = 1;
    PlayerData[playerid][pGlasses] = 0;
    PlayerData[playerid][pHat] = 0;
    PlayerData[playerid][pBandana] = 0;
    PlayerData[playerid][pPos] = 0.0;
    PlayerData[playerid][pInterior] = 0;
    PlayerData[playerid][pWorld] = 0;
    PlayerData[playerid][pCharacter] = 0;
    PlayerData[playerid][pKilled] = 0;
    PlayerData[playerid][pHospital] = -1;
    PlayerData[playerid][pHospitalInt] = -1;
    PlayerData[playerid][pHospitalTime] = 0;
    PlayerData[playerid][pRepairTime] = 0;
    PlayerData[playerid][pMoney] = 250;
    SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
    PlayerData[playerid][pDovus] = 4;
    PlayerData[playerid][pBilet] = 0;
    PlayerData[playerid][pBizJob] = -1;
    PlayerData[playerid][pBizRank] = 0;
    PlayerData[playerid][pPartner] = 0;
    PlayerData[playerid][pMayo] = 0;
    PlayerData[playerid][pLevel] = 1;
    PlayerData[playerid][pEXP] = 0;
    PlayerData[playerid][pBankMoney] = 250;
    PlayerData[playerid][pSpawnPoint] = 0;
    format(PlayerData[playerid][pForumNick], 32, "Baðlanmadý");
    //format(playerData[playerid][pPasaport], 3, "Yok")
    PlayerData[playerid][pSavings] = 0;
    PlayerData[playerid][pEkstraDil] = 0;
    PlayerData[playerid][pAdmin] = 0;
    PlayerData[playerid][pTirSeviye] = 1;
    PlayerData[playerid][pSilahSeviye] = 1;
    PlayerData[playerid][pSilahEXP] = 0;
    PlayerData[playerid][pTirEXP] = 0;
    SetPlayerFightingStyle(playerid, 4);
    PlayerData[playerid][pKasSeviye] = 1;
    PlayerData[playerid][pKasEXP] = 0;
    format(PlayerData[playerid][pAdminName], 24, "Yok");
    format(PlayerData[playerid][pTesterName], 24, "Yok");
	PlayerData[playerid][pShowFooter] = 0;
	PlayerData[playerid][pReportTime] = 0;
	PlayerData[playerid][pHelpTime] = 0;
	PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;
	PlayerData[playerid][pJailTime] = 0;
	PlayerData[playerid][pMuted] = 0;
	PlayerData[playerid][pDestekMute] = 0;
	PlayerData[playerid][pSpamCount] = 0;
	PlayerData[playerid][pCommandCount] = 0;
	PlayerData[playerid][pDisplayStats] = 0;
	PlayerData[playerid][pToggleGlasses] = 0;
	PlayerData[playerid][pToggleHat] = 0;
	PlayerData[playerid][pToggleBandana] = 0;
	PlayerData[playerid][pToggleArmor] = 0;
    PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;
    PlayerData[playerid][pShotTime] = 0;
	PlayerData[playerid][pInventoryItem] = 0;
	PlayerData[playerid][pStorageItem] = 0;
	PlayerData[playerid][pStorageSelect] = 0;
	PlayerData[playerid][pProductModify] = 0;
	PlayerData[playerid][pTester] = 0;
	PlayerData[playerid][pTutorial] = 0;
	PlayerData[playerid][pTutorialTime] = 0;
	PlayerData[playerid][pTutorialStage] = 0;
	PlayerData[playerid][pHouse] = -1;
	PlayerData[playerid][pBusiness] = -1;
	PlayerData[playerid][pEntrance] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pGasStation] = -1;
    PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	PlayerData[playerid][pEditGate] = -1;
	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pSelectFurniture] = 0;
	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
	PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pHouseOffered] = -1;
	PlayerData[playerid][pHouseValue] = 0;
	PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pBusinessOffered] = -1;
	PlayerData[playerid][pBusinessValue] = 0;
	PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCarOffered] = -1;
	PlayerData[playerid][pCarValue] = 0;
	PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShakeType] = 0;
	PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodType] = 0;
	PlayerData[playerid][pFoodPrice] = 0;
	PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffered] = -1;
	PlayerData[playerid][pBizJobOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pBizJobOffered] = -1;
	PlayerData[playerid][pPhone] = 0;
	PlayerData[playerid][pPhoneOff] = 0;
	PlayerData[playerid][pLottery] = 0;
	PlayerData[playerid][pLotteryB] = 0;
	PlayerData[playerid][pHunger] = 100;
	PlayerData[playerid][pThirst] = 100;
	PlayerData[playerid][pHungerTime] = 0;
	PlayerData[playerid][pThirstTime] = 0;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pPlayingHours] = 0;
	PlayerData[playerid][pMinutes] = 0;
	PlayerData[playerid][pArmorStatus] = 0;
	PlayerData[playerid][pArmorShown] = 0;
	PlayerData[playerid][pClothesType] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pTestStage] = 0;
	PlayerData[playerid][pTirAsama] = 0;
	PlayerData[playerid][pTirGelisAsama] = 0;
	PlayerData[playerid][pPizzaAsama] = 0;
	PlayerData[playerid][pPizzaIsbasi] = 0;
	PlayerData[playerid][pPizzaBasladimi] = 0;
	PlayerData[playerid][pTestWarns] = 0;
	PlayerData[playerid][pFurnitureType] = 0;
	PlayerData[playerid][pJob] = 0;
	PlayerData[playerid][pTaxiFee] = 0;
	PlayerData[playerid][pTaxiTime] = 0;
	PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTaxiDuty] = 0;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pMineCount] = 0;
	PlayerData[playerid][pMinedRock] = 0;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pCarryCrate] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionID] = -1;
	PlayerData[playerid][pFactionRank] = 0;
	PlayerData[playerid][pFactionEdit] = -1;
	PlayerData[playerid][pSelectedSlot] = -1;
	PlayerData[playerid][pOnDuty] = 0;
	PlayerData[playerid][pTazer] = 0;
	PlayerData[playerid][pBeanBag] = 0;
	PlayerData[playerid][pStunned] = 0;
	PlayerData[playerid][pCuffed] = 0;
    PlayerData[playerid][pDragged] = 0;
    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerData[playerid][pPrisoned] = 0;
	PlayerData[playerid][pWarrants] = 0;
    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pTrackTime] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pKonumTime] = 0;
	PlayerData[playerid][pBroadcast] = 0;
	PlayerData[playerid][pNewsGuest] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMuteTime] = 0;
	PlayerData[playerid][pTransfer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pWaypoint] = 0;
	PlayerData[playerid][pWaypointPos][0] = 0.0;
	PlayerData[playerid][pWaypointPos][1] = 0.0;
	PlayerData[playerid][pWaypointPos][2] = 0.0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pDisableOOC] = 0;
	PlayerData[playerid][pDisablePM] = 0;
	PlayerData[playerid][pDisableFaction] = 0;
	PlayerData[playerid][pDisableTester] = 0;
	PlayerData[playerid][pDisableBC] = 0;
	PlayerData[playerid][pNameChange][0] = 0;
	PlayerData[playerid][pDrugTime] = 0;
	PlayerData[playerid][pDrugUsed] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = 0;
	PlayerData[playerid][pWeapon] = 0;
	PlayerData[playerid][pBackpackLoot] = -1;
	PlayerData[playerid][pChannel] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pRangeBooth] = -1;
	PlayerData[playerid][pTargets] = 0;
	PlayerData[playerid][pTargetLevel] = 0;
	PlayerData[playerid][pVendorTime] = 0;
	PlayerData[playerid][pLoopAnim] = 0;
	PlayerData[playerid][pExecute] = 0;
	PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTakeItems] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDrinkBar] = INVALID_PLAYER_BAR_ID;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pSpeedTime] = 0;
	PlayerData[playerid][pMarker] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pShipment] = -1;
	PlayerData[playerid][pDeliverShipment] = 0;
	PlayerData[playerid][pHoldWeapon] = 0;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pAdvertise][0] = 0;
	PlayerData[playerid][pIhbar][0] = 0;
	PlayerData[playerid][pFreeze] = 0;
	PlayerData[playerid][pTask] = 0;
    PlayerData[playerid][pBankTask] = 0;
    PlayerData[playerid][pStoreTask] = 0;
    PlayerData[playerid][pTestTask] = 0;
    PlayerData[playerid][pSorting] = -1;
    PlayerData[playerid][pSortCrate] = 0;
    PlayerData[playerid][pHUD] = 1;
    PlayerData[playerid][pTesterDuty] = 0;
    PlayerData[playerid][pAdminDuty] = 0;
    PlayerData[playerid][pSeekHelp] = 0;
    PlayerData[playerid][pMaskID] = random(90000) + 10000;
    PlayerData[playerid][pMaskOn] = 0;
    PlayerData[playerid][pFactionMod] = 0;
    PlayerData[playerid][pCapacity] = 35;
    PlayerData[playerid][pPlayRadio] = 0;
    PlayerData[playerid][pGraffiti] = -1;
    PlayerData[playerid][pGraffitiTime] = 0;
    PlayerData[playerid][pGraffitiColor] = 0;
    PlayerData[playerid][pEditGraffiti] = -1;
    PlayerData[playerid][pAdminHide] = 0;
    PlayerData[playerid][pDetectorTime] = 0;
    PlayerData[playerid][pPicking] = 0;
    PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;
 	PlayerData[playerid][pBizJob] = -1;
    PlayerData[playerid][pBizRank] = 0;
    tiryapiyor[playerid] = 0;
	PlayerData[playerid][pPizzaBasladimi] = 0;
    ResetWarnings(playerid);
	ResetEditing(playerid);
}



ResetWarnings(playerid)
{
    PlayerData[playerid][pWarnings] = 0;
   	PlayerData[playerid][pWarn1][0] = 0;
    PlayerData[playerid][pWarn2][0] = 0;
}

GetNumberOwner(number)
{
	foreach (new i : Player) if (PlayerData[i][pPhone] == number && Inventory_HasItem(i, "Telefon")) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

IsPlayerInsideTaxi(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vehicleid) == 420 || GetVehicleModel(vehicleid) == 438)
	{
     foreach (new i : Player)
		{
			if ((i != playerid) && (PlayerData[i][pJob] == JOB_TAXI && PlayerData[i][pTaxiDuty] && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid)
				return 1;
		}
	}
	return 0;
}

SelectCharacter(playerid, id)
{
	PlayerData[playerid][pCharacter] = id;

	if (!PlayerCharacters[playerid][id - 1][0])
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "{FFFFFF}> Karakter Oluþturma", "\n{ff3f3f}[V:RP] {FFFFFF}Bu bölümde kendinize karakter adý seçebilirsiniz.\n{ff3f3f}[V:RP] {FFFFFF}Ünlü isimleri kullanmak sunucuda yasaktýr.\n{ff3f3f}[V:RP] {FFFFFF}Karakteriniz {FF0000}Ad_Soyad{FFFFFF} formatýnda olmalýdýr.", "Oluþtur", "Cikis");

	static
	    query[200];

	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][72], PlayerCharacters[playerid][id - 1]);

	format(query, sizeof(query), "SELECT `Skin`, `Birthdate`, `Origin`, `CreateDate`, `Money`, `Level`,  `LastLogin` FROM `characters` WHERE `Character` = '%s'", PlayerCharacters[playerid][id - 1]);
	mysql_function_query(g_iHandle, query, true, "OnQueryFinished", "dd", playerid, THREAD_SHOW_CHARACTER);

	return 1;
}
IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if (i == 0 && str[0] == '-')
			continue;

	    else if (str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}



ReturnVehicleModelName(model)
{
	new
	    name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

stock ReturnVehicleName(vehicleid)
{
	new
		model = GetVehicleModel(vehicleid),
		name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}
stock IsAMotorBike(carid) {
	switch(GetVehicleModel(carid)) {
		case 509, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}
GetVehicleModelByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
	{
	    if (strfind(g_arrVehicleNames[i], name, true) != -1)
	    {
	        return i + 400;
		}
	}
	return 0;
}

GetVehicleDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}

stock IsWindowedVehicle(vehicleid)
{
	static const g_aWindowStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
	    1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aWindowStatus[modelid - 400]);
}

stock IsNewsVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 488, 582: return 1;
	}
	return 0;
}

stock IsTrainVehicle(modelid)
{
	switch (modelid) {
	    case 539, 538, 537: return 1;
	}
	return 0;
}

stock IsBikeVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 481, 509, 510: return 1;
	}
	return 0;
}
stock ModifiyeEdilemezArac(vehicleid)
{
	new id = Car_GetID(vehicleid);

	if(CarData[id][carFaction] >= 1 || CarData[id][carMeslek] >= 1 || CarData[id][carKiralik] >= 1)
		return 1;

	return 0;
}


stock IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

stock IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

stock IsSpeedoVehicle(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid)) {
	    return 0;
	}
	return 1;
}

stock IsLoadableVehicle(vehicleid)
{
	new modelid = GetVehicleModel(vehicleid);

	if (GetVehicleTrailer(vehicleid))
	    modelid = GetVehicleModel(GetVehicleTrailer(vehicleid));

	switch (modelid) {
	    case 609, 403, 414, 456, 498, 499, 514, 515, 435, 591, 543, 482: return 1;
	}
	return 0;
}

stock GetMaxCrates(vehicleid)
{
	new crates;

	switch (GetVehicleModel(vehicleid)) {
	    case 498, 609: crates = 10;
	    case 414: crates = 8;
	    case 456, 499: crates = 8;
	    case 435, 591: crates = 15;
	    case 543, 482: crates = 10;
	}
	return crates;
}

stock IsCrateInUse(crateid)
{
	if (CrateData[crateid][crateVehicle] != INVALID_VEHICLE_ID && IsValidVehicle(CrateData[crateid][crateVehicle])) {
	    return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pCarryCrate] == crateid && GetPlayerSpecialAction(i) == SPECIAL_ACTION_CARRY) {
	    return 1;
	}
	return 0;
}

stock IsWoodInUse(woodid)
{
	if (Keresteler[woodid][keresteVehicle] != INVALID_VEHICLE_ID && IsValidVehicle(Keresteler[woodid][keresteVehicle])) {
	    return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pKereste] == woodid && GetPlayerSpecialAction(i) == SPECIAL_ACTION_CARRY) {
	    return 1;
	}
	return 0;
}

stock GetVehicleCrates(vehicleid)
{
	if (!IsValidVehicle(vehicleid) || !IsLoadableVehicle(vehicleid))
		return 0;

	new crates;

	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    crates++;
	}
 	return crates;
}

stock IsABoat(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}

stock IsABike(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 448, 461..463, 468, 521..523, 581, 586, 481, 509, 510: return 1;
	}
	return 0;
}

stock ZirhliAraclar(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 428, 427, 601, 528: return 1;
	}
	return 0;
}

stock IsAPlane(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
	}
	return 0;
}
stock IsATrain(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 449,537,538,569,570,590: return 1;
    }
    return 0;
}

stock IsAHelicopter(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
	}
	return 0;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}
stock GetPlayerSpeed2(playerid)
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
    GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;
    return floatround(ST[3]);
}
stock InsertObjectToDB(id)
{
    stmt_bind_value(AddObject, 0, DB::TYPE_INTEGER, id);
	stmt_bind_value(AddObject, 1, DB::TYPE_STRING, CopObjectData[id][Owner]);
	stmt_bind_value(AddObject, 2, DB::TYPE_INTEGER, CopObjectData[id][Type]);
	stmt_bind_value(AddObject, 3, DB::TYPE_INTEGER, CopObjectData[id][ObjData]);
    stmt_bind_value(AddObject, 4, DB::TYPE_INTEGER, CopObjectData[id][ObjModel]);
	stmt_bind_value(AddObject, 5, DB::TYPE_FLOAT, CopObjectData[id][ObjX]);
	stmt_bind_value(AddObject, 6, DB::TYPE_FLOAT, CopObjectData[id][ObjY]);
	stmt_bind_value(AddObject, 7, DB::TYPE_FLOAT, CopObjectData[id][ObjZ]);
	stmt_bind_value(AddObject, 8, DB::TYPE_FLOAT, CopObjectData[id][ObjRX]);
	stmt_bind_value(AddObject, 9, DB::TYPE_FLOAT, CopObjectData[id][ObjRY]);
	stmt_bind_value(AddObject, 10, DB::TYPE_FLOAT, CopObjectData[id][ObjRZ]);
	stmt_bind_value(AddObject, 11, DB::TYPE_INTEGER, CopObjectData[id][ObjInterior]);
	stmt_bind_value(AddObject, 12, DB::TYPE_INTEGER, CopObjectData[id][ObjVirtualWorld]);
	stmt_execute(AddObject);
	return 1;
}
stock SaveObjectToDB(id)
{
    stmt_bind_value(UpdateObject, 0, DB::TYPE_FLOAT, CopObjectData[id][ObjX]);
	stmt_bind_value(UpdateObject, 1, DB::TYPE_FLOAT, CopObjectData[id][ObjY]);
	stmt_bind_value(UpdateObject, 2, DB::TYPE_FLOAT, CopObjectData[id][ObjZ]);
	stmt_bind_value(UpdateObject, 3, DB::TYPE_FLOAT, CopObjectData[id][ObjRX]);
	stmt_bind_value(UpdateObject, 4, DB::TYPE_FLOAT, CopObjectData[id][ObjRY]);
	stmt_bind_value(UpdateObject, 5, DB::TYPE_FLOAT, CopObjectData[id][ObjRZ]);
	stmt_bind_value(UpdateObject, 6, DB::TYPE_INTEGER, id);
	stmt_execute(UpdateObject);
	return 1;
}
stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

stock GetHouseByID(sqlid)
{
	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == sqlid)
	    return i;

	return -1;
}

stock GetBusinessByID(sqlid)
{
	for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == sqlid)
	    return i;

	return -1;
}

stock GetEntranceByID(sqlid)
{
	for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == sqlid)
	    return i;

	return -1;
}

stock GetElapsedTime(time, &hours, &minutes, &seconds)
{
	hours = 0;
	minutes = 0;
	seconds = 0;

	if (time >= 3600)
	{
		hours = (time / 3600);
		time -= (hours * 3600);
	}
	while (time >= 60)
	{
	    minutes++;
	    time -= 60;
	}
	return (seconds = time);
}

stock GetDuration(time)
{
	new
	    str[32];

	if (time < 0 || time == gettime()) {
	    format(str, sizeof(str), "Hic");
	    return str;
	}
	else if (time < 60)
		format(str, sizeof(str), "%d saniye", time);

	else if (time >= 0 && time < 60)
		format(str, sizeof(str), "%d saniye", time);

	else if (time >= 60 && time < 3600)
		format(str, sizeof(str), (time >= 120) ? ("%d dakika") : ("%d dakika"), time / 60);

	else if (time >= 3600 && time < 86400)
		format(str, sizeof(str), (time >= 7200) ? ("%d saat") : ("%d saat"), time / 3600);

	else if (time >= 86400 && time < 2592000)
 		format(str, sizeof(str), (time >= 172800) ? ("%d gun") : ("%d gun"), time / 86400);

	else if (time >= 2592000 && time < 31536000)
 		format(str, sizeof(str), (time >= 5184000) ? ("%d ay") : ("%d ay"), time / 2592000);

	else if (time >= 31536000)
		format(str, sizeof(str), (time >= 63072000) ? ("%d yil") : ("%d yil"), time / 31536000);

	strcat(str, " once");

	return str;
}

stock GetEngineStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return 0;

	return 1;
}

stock GetHoodStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
		return 0;

	return 1;
}

stock GetTrunkStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (boot != 1)
		return 0;

	return 1;
}

stock GetLightStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
		return 0;

	return 1;
}

stock SetEngineStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

stock SetLightStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

stock SetTrunkStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

stock SetHoodStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

stock Object_Save(objectid)
{
	new
	    query[1024];

	format(query, sizeof(query), "UPDATE `objects` SET `objectModel` = '%d', `objectX` = '%.4f', `objectY` = '%.4f', `objectZ` = '%.4f', `objectRX` = '%.4f', `objectRY` = '%.4f', `objectRZ` = '%.4f', `objectInterior` = '%d', `objectWorld` = '%d'",
	    ObjectData[objectid][objectModel],
	    ObjectData[objectid][objectPos][0],
	    ObjectData[objectid][objectPos][1],
	    ObjectData[objectid][objectPos][2],
	    ObjectData[objectid][objectPos][3],
	    ObjectData[objectid][objectPos][4],
	    ObjectData[objectid][objectPos][5],
	    ObjectData[objectid][objectInterior],
	    ObjectData[objectid][objectWorld]
	);
	format(query, sizeof(query), "%s, `objectOwner` = '%d' WHERE `objectID` = '%d'",
	    query,
	    ObjectData[objectid][objectOwner],
	    ObjectData[objectid][objectID]
	);
	return mysql_tquery(g_iHandle, query);
}
LoadCCTVs() return mysql_tquery(handle_mysql, "SELECT * FROM `cctv` ORDER BY `ID`", "OnLoadCCTVs", "");


stock Object_Delete(objectid)
{
	if (objectid != -1 && ObjectData[objectid][objectVarmi])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `objects` WHERE `objectID` = '%d'", ObjectData[objectid][objectID]);
		mysql_tquery(g_iHandle, query);

		if (IsValidDynamicObject(ObjectData[objectid][objectObject]))
		    DestroyDynamicObject(ObjectData[objectid][objectObject]);

        ObjectData[objectid][objectID] = 0;
		ObjectData[objectid][objectVarmi] = false;
		ObjectData[objectid][objectModel] = 2000;
		ObjectData[objectid][objectPos][0] = 0.0;
		ObjectData[objectid][objectPos][1] = 0.0;
		ObjectData[objectid][objectPos][2] = 0.0;
		ObjectData[objectid][objectPos][3] = 0.0;
		ObjectData[objectid][objectPos][4] = 0.0;
		ObjectData[objectid][objectPos][5] = 0.0;
		ObjectData[objectid][objectInterior] = 0;
		ObjectData[objectid][objectWorld] = 0;
		ObjectData[objectid][objectOwner] = 0;
	}
	return 1;
}

forward OnObjectCreated(objectid);
public OnObjectCreated(objectid)
{
	if (objectid == -1 || !ObjectData[objectid][objectVarmi])
	    return 0;

	ObjectData[objectid][objectID] = cache_insert_id(g_iHandle);
	Object_Save(objectid);

	return 1;
}

public OnObjectMoved(objectid)
{
	for (new i = 0; i < MAX_BOOTHS; i ++) if (g_BoothUsed[i] && g_BoothObject[i] == objectid) {
	    DestroyObject(g_BoothObject[i]);

	    return SetTimerEx("UpdateBooth", 3000, false, "dd", Booth_GetPlayer(i), i);
	}
	return 1;
}
forward OnQueryExecute(playerid, query[]);
public OnQueryExecute(playerid, query[])
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (strfind(query, "SELECT", true) != -1)
		Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Success: MySQL returned %d rows from your query.\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", rows);

	else
		Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Success: Query executed successfully (affected rows: %d).\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", cache_affected_rows());

	PlayerData[playerid][pExecute] = 0;
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
 foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 6 && PlayerData[i][pExecute])
		{
	    	PlayerData[i][pExecute] = 0;
	    	Dialog_Show(i, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Error: \"%s\"\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", error);
		}
	}
 	printf("** [MySQL]: %s", error);
	Log_Write("logs/mysql_log.txt", "[%s] %s: %s", ReturnDate(), (callback[0]) ? (callback) : ("n/a"), error);
	return 1;
}

forward OnQueryFinished(extraid, threadid);
public OnQueryFinished(extraid, threadid)
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields
	;

	switch (threadid)
	{
		    case THREAD_CREATE_CHAR:
	    {
	        PlayerData[extraid][pID] = cache_insert_id(g_iHandle);
	        PlayerData[extraid][pLogged] = 1;

			SQL_SaveCharacter(extraid);

			PlayerData[extraid][pID] = -1;
			PlayerData[extraid][pLogged] = 0;
	    }
  		case THREAD_CHECK_ACCOUNT:
		{
		    cache_get_data(rows, fields, g_iHandle);

		    if (rows)
			{
			    static
			        loginDate[36];

			    cache_get_row(0, 0, loginDate, g_iHandle);

                new querye[512], Cache: owner_query;
				mysql_format(g_iHandle, querye, sizeof(querye), "SELECT `ExSlot` FROM `accounts` WHERE `Username` = '%s'", PlayerData[extraid][pUsername]);
				owner_query = mysql_query(g_iHandle, querye);
				if(cache_num_rows()) PlayerData[extraid][pExtraSlot] = cache_get_field_content_int(0, "ExSlot");
				cache_delete(owner_query);

				format(PlayerData[extraid][pLoginDate], 36, loginDate);
		        Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "> Karakter Giriþi", "Sunucuda kayýtlý bir hesabýnýz var.\n\n{FFFFFF}Sunucuya giriþ yapmak için þifrenizi girin.", "Giriþ", "Cikis", PlayerData[extraid][pUsername]);
			}
			else
			{
			    if(k_basvuru)
			    {
                    Dialog_Show(extraid, rFQq, DIALOG_STYLE_MSGBOX, "{FFFFFF}> {fde607}Sunucuda kayýtlý bir hesabýnýz yok!", "{fde607}Varna Roleplay{FFFFFF}'a hoþgeldin!, {D10000}%s.\n\n{FFFFFF} Sunucumuzda oynayabilmek için forum adresimizden kendine hesap oluþturmalýsýn!", "Tamam", "", ReturnName(extraid));
                    KickEx(extraid);
				}
				else
				{
        			Dialog_Show(extraid, RegisterScreen, DIALOG_STYLE_PASSWORD, "{FFFFFF}> Kayýt Ol", "{FFFFFF}Varna Roleplay'e hoþgeldin %s. \nKayýt olmak için þifre giriniz.", "Kayýt Ol", "Cikis", ReturnName(extraid));
				}
			}
    	}
    	case THREAD_LOGIN:
   		{
    	    cache_get_data(rows, fields, g_iHandle);


    	    if (!rows)
    	    {
    	        PlayerData[extraid][pLoginAttempts]++;

    	        if (PlayerData[extraid][pLoginAttempts] >= 3)
    	        {
    	            SendClientMessage(extraid, COLOR_LIGHTRED, "Sunucu: Yanlýþ þifre giriþi yaptýðýnýz için sunucudan atýldýnýz.");
    	            KickEx(extraid);
				}
				else
				{
    	        	Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "{FFFFFF}> Karakter Girisi", "{FFFFFF}Varna Roleplay'a tekrardan hoþgeldin!\n\nSon Giriþ: %s.\n\n{B80000}{HATALI ÞÝFRE} {FFFFFF}Hesabýnýza giriþ yapmak için lütfen doðru þifrenizi giriniz:", "Giriþ", "{FF6347}Iptal", PlayerData[extraid][pLoginDate]);
    	        	SendClientMessageEx(extraid, COLOR_WHITE, "{A9C4EB}Sunucu: {FFFFFF}Hatalý þifre girdiniz. Kalan hak:(%d/3).",PlayerData[extraid][pLoginAttempts]);
				}
			}
			else
			{
				static
					query[128];
           		GirisTimer[extraid] = 0;
				// Update the last login date.
                format(query, sizeof(query), "UPDATE `accounts` SET `IP` = '%s', `LoginDate` = '%s' WHERE `Username` = '%s'", PlayerData[extraid][pIP], ReturnDate(), PlayerData[extraid][pUsername]);
				mysql_function_query(g_iHandle, query, false, "", "");

    			// Load the character data.
				format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' LIMIT 3", PlayerData[extraid][pUsername]);
				mysql_function_query(g_iHandle, query, true, "OnQueryFinished", "dd", extraid, THREAD_CHARACTERS);
			}
		}
		case THREAD_CHARACTERS:
		{
			cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows; i ++) {
			    cache_get_field_content(i, "Character", PlayerCharacters[extraid][i], g_iHandle);
			    PlayerCharactersSkin[extraid][i] = cache_get_field_int(i, "Skin");
		    }
		    for (new i = 0; i < 20; i ++) {
		        SendClientMessage(extraid, -1, "");
			}
		/*	for (new i = 0; i < 12; i ++)
		{
		TextDrawHideForPlayer(extraid, NewLoginTD[i]);
		}*/
            ShowCharacterMenu(extraid);
		}
		case THREAD_LOAD_CHARACTER:
		{
		    static
		        string[128];

		    cache_get_data(rows, fields, g_iHandle);

   foreach (new i : Player)
			{
			    if (PlayerData[i][pCharacter] == PlayerData[extraid][pCharacter] && !strcmp(ReturnName(i), PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1]) && i != extraid)
       			{
       			    ShowCharacterMenu(extraid);
				   	SendErrorMessage(extraid, "Karakter zaten giriþ yapmýþ.");
				}
			}
			switch (SetPlayerName(extraid, PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1]))
			{
			    case -1: {
					SendClientMessageEx(extraid, COLOR_LIGHTRED, "Notice: Your character's name seems to be in use already.");
				}
				default:
				{
				    if (!rows) {
				        return 0;
					}
					static
					    query[128]
					;
			        PlayerData[extraid][pID] = cache_get_field_int(0, "ID");
			        PlayerData[extraid][pCreated] = cache_get_field_int(0, "Created");
			        PlayerData[extraid][pGender] = cache_get_field_int(0, "Gender");

					cache_get_field_content(0, "Birthdate", PlayerData[extraid][pBirthdate], g_iHandle, 24);
			        cache_get_field_content(0, "Origin", PlayerData[extraid][pOrigin], g_iHandle, 32);
			        cache_get_field_content(0, "Gorunus", PlayerData[extraid][pGorunus], g_iHandle, 256);
                    cache_get_field_content(0, "TenRengi", PlayerData[extraid][pTenRengi], g_iHandle, 24);

			        PlayerData[extraid][pSkin] = cache_get_field_int(0, "Skin");
			        PlayerData[extraid][pPos][0] = cache_get_field_float(0, "PosX");
			        PlayerData[extraid][pPos][1] = cache_get_field_float(0, "PosY");
			        PlayerData[extraid][pPos][2] = cache_get_field_float(0, "PosZ");
			        PlayerData[extraid][pPos][3] = cache_get_field_float(0, "PosA");
			        PlayerData[extraid][pHealth] = cache_get_field_float(0, "Health");
			        PlayerData[extraid][pInterior] = cache_get_field_int(0, "Interior");
			        PlayerData[extraid][pWorld] = cache_get_field_int(0, "World");
			        PlayerData[extraid][pHospital] = cache_get_field_int(0, "Hospital");
                    PlayerData[extraid][pHospitalInt] = cache_get_field_int(0, "HospitalInt");
			        PlayerData[extraid][pMoney] = cache_get_field_int(0, "Money");
			        PlayerData[extraid][pBankMoney] = cache_get_field_int(0, "BankMoney");
			        PlayerData[extraid][pOwnsBillboard] = cache_get_field_int(0, "OwnsBillboard");
					PlayerData[extraid][pSavings] = cache_get_field_int(0, "Savings");
			        PlayerData[extraid][pAdmin] = cache_get_field_int(0, "Admin");
			        PlayerData[extraid][pJailTime] = cache_get_field_int(0, "JailTime");
			        PlayerData[extraid][pMuted] = cache_get_field_int(0, "Muted");
			        PlayerData[extraid][pTester] = cache_get_field_int(0, "Tester");
			        PlayerData[extraid][pHouse] = cache_get_field_int(0, "House");
			        PlayerData[extraid][pBusiness] = cache_get_field_int(0, "Business");
			        PlayerData[extraid][pPet] = cache_get_field_int(0, "Pet");
			        PlayerData[extraid][pEntrance] = cache_get_field_int(0, "Entrance");
			        PlayerData[extraid][pPhone] = cache_get_field_int(0, "Phone");
			        PlayerData[extraid][pHediyeTime] = cache_get_field_int(0, "HediyeTime");
			        PlayerData[extraid][pSiparisTime] = cache_get_field_int(0, "SiparisTime");
			        PlayerData[extraid][pLottery] = cache_get_field_int(0, "Lottery");
			        PlayerData[extraid][pLottery] = cache_get_field_int(0, "LotteryB");
			        PlayerData[extraid][pHunger] = cache_get_field_int(0, "Hunger");
			        PlayerData[extraid][pThirst] = cache_get_field_int(0, "Thirst");
			        PlayerData[extraid][pPlayingHours] = cache_get_field_int(0, "PlayingHours");
			        PlayerData[extraid][pMinutes] = cache_get_field_int(0, "Minutes");
			        PlayerData[extraid][pArmorStatus] = cache_get_field_float(0, "ArmorStatus");
			        PlayerData[extraid][pJob] = cache_get_field_int(0, "Job");
			        PlayerData[extraid][pFactionID] = cache_get_field_int(0, "Faction");
            		PlayerData[extraid][pBizJobID] = cache_get_field_int(0, "BizJob");
			        PlayerData[extraid][pFactionRank] = cache_get_field_int(0, "FactionRank");
			        PlayerData[extraid][pPrisoned] = cache_get_field_int(0, "Prisoned");
			        PlayerData[extraid][pWarrants] = cache_get_field_int(0, "Warrants");
			        PlayerData[extraid][pChannel] = cache_get_field_int(0, "Channel");
			        PlayerData[extraid][pPartner] = cache_get_field_int(0, "Partner");
			        PlayerData[extraid][pBleeding] = cache_get_field_int(0, "Bleeding");
			        PlayerData[extraid][pAdminHide] = cache_get_field_int(0, "AdminHide");
			        PlayerData[extraid][pVCoin] = cache_get_field_int(0, "VCoin");
			        PlayerData[extraid][pWarnings] = cache_get_field_int(0, "Warnings");
			        PlayerData[extraid][pMaskID] = cache_get_field_int(0, "MaskID");
			        PlayerData[extraid][pDependTime] = cache_get_field_int(0, "DependTime");
			        PlayerData[extraid][pTotalUsed] = cache_get_field_int(0, "TotalUsed");
			        PlayerData[extraid][pFactionMod] = cache_get_field_int(0, "FactionMod");
			        PlayerData[extraid][pCapacity] = cache_get_field_int(0, "Capacity");
			        PlayerData[extraid][pSpawnPoint] = cache_get_field_int(0, "SpawnPoint");
                    PlayerData[extraid][pLevel] = cache_get_field_int(0, "Level");
                    PlayerData[extraid][pEXP] = cache_get_field_int(0, "Exp");
                    cache_get_field_content(0, "AdminName", PlayerData[extraid][pAdminName], g_iHandle, 32);
                    PlayerData[extraid][pEkstraDil] = cache_get_field_int(0, "EkstraDil");
                    PlayerData[extraid][pBaygin] = cache_get_field_int(0, "Injured");
                    PlayerData[extraid][pKasSeviye] = cache_get_field_int(0, "KasSeviye");
			        PlayerData[extraid][pCK] = cache_get_field_int(0, "CK");
                    PlayerData[extraid][pKasEXP] = cache_get_field_int(0, "KasExp");
                    PlayerData[extraid][pDovus] = cache_get_field_int(0, "DovusStil");
                    PlayerData[extraid][pMetalAldimi] = cache_get_field_int(0, "MetalAldimi");
					SetPlayerFightingStyle(extraid, PlayerData[extraid][pDovus]);
					cache_get_field_content(0, "Warn1", PlayerData[extraid][pWarn1], g_iHandle, 32);
					cache_get_field_content(0, "Warn2", PlayerData[extraid][pWarn2], g_iHandle, 32);
                    PlayerData[extraid][pTirSeviye] = cache_get_field_int(0, "TirSeviye");
                    PlayerData[extraid][pTirEXP] = cache_get_field_int(0, "TirEXP");
                    PlayerData[extraid][pSilahSeviye] = cache_get_field_int(0, "SilahSeviye");
                    PlayerData[extraid][pSilahEXP] = cache_get_field_int(0, "SilahEXP");
                    PlayerData[extraid][pRaporSayisi] = cache_get_field_int(0, "rSayi");
                    PlayerData[extraid][pSoruSayisi] = cache_get_field_int(0, "sSayi");
                    PlayerData[extraid][pFactionDivizyon] = cache_get_field_int(0, "FactionDivizyon");
                    PlayerData[extraid][pFabrikaCalisma] = cache_get_field_int(0, "FabrikaCalisma");
                    PlayerData[extraid][pPasaport] = cache_get_field_int(0, "Pasaport");
                	cache_get_field_content(0, "JailReason", PlayerData[extraid][pJailReason], g_iHandle, 128);



			        for (new i = 0; i < 13; i ++) {
			            format(query, sizeof(query), "Gun%d", i + 1);
			            PlayerData[extraid][pGuns][i] = cache_get_field_int(0, query);

			            format(query, sizeof(query), "Ammo%d", i + 1);
			            PlayerData[extraid][pAmmo][i] = cache_get_field_int(0, query);
			        }

                	cache_get_field_content(0, "Ayarlar", string, g_iHandle);
					sscanf(string, "p<|>iiiiiiiiii", PlayerData[extraid][pDisablePM], PlayerData[extraid][pDisableOOC],PlayerData[extraid][pDisableFaction],PlayerData[extraid][pDisableBC],PlayerData[extraid][pDisableSpeedo],PlayerData[extraid][pDisableTester],PMSpec[extraid],PlayerData[extraid][pAdminChat],PlayerData[extraid][pChatAnimation], PlayerData[extraid][pPlakaDurum]);

                  	cache_get_field_content(0, "OnDuty", string, g_iHandle);
					sscanf(string, "p<|>ii", PlayerData[extraid][pOnDuty], PlayerData[extraid][pDutySkin]);

                    cache_get_field_content(0, "Baliklar", string, g_iHandle);
					sscanf(string, "p<|>iiiiiiii", OyuncuBaliklari[extraid][BalikID][0], OyuncuBaliklari[extraid][BalikID][1], OyuncuBaliklari[extraid][BalikID][2], OyuncuBaliklari[extraid][BalikID][3],OyuncuBaliklari[extraid][BalikID][4],OyuncuBaliklari[extraid][BalikID][5],OyuncuBaliklari[extraid][BalikID][6],OyuncuBaliklari[extraid][BalikID][7]);

                	cache_get_field_content(0, "BalikGram", string, g_iHandle);
					sscanf(string, "p<|>iiiiiiii", OyuncuBaliklari[extraid][BalikGram][0], OyuncuBaliklari[extraid][BalikGram][1], OyuncuBaliklari[extraid][BalikGram][2], OyuncuBaliklari[extraid][BalikGram][3],OyuncuBaliklari[extraid][BalikGram][4],OyuncuBaliklari[extraid][BalikGram][5],OyuncuBaliklari[extraid][BalikGram][6],OyuncuBaliklari[extraid][BalikGram][7]);

     				cache_get_field_content(0, "ASlotA", string, g_iHandle);
					sscanf(string, "p<|>iii", PlayerData[extraid][pASlot][0], PlayerData[extraid][pABone][0], PlayerData[extraid][pTSlot][0]);

					cache_get_field_content(0, "ASlotB", string, g_iHandle);
					sscanf(string, "p<|>iii", PlayerData[extraid][pASlot][1], PlayerData[extraid][pABone][1], PlayerData[extraid][pTSlot][1]);

					cache_get_field_content(0, "ASlotC", string, g_iHandle);
					sscanf(string, "p<|>iii", PlayerData[extraid][pASlot][2], PlayerData[extraid][pABone][2], PlayerData[extraid][pTSlot][2]);

					cache_get_field_content(0, "ASlotD", string, g_iHandle);
					sscanf(string, "p<|>iii", PlayerData[extraid][pASlot][3], PlayerData[extraid][pABone][3], PlayerData[extraid][pTSlot][3]);

                	cache_get_field_content(0, "ASlotE", string, g_iHandle);
					sscanf(string, "p<|>iii", PlayerData[extraid][pASlot][4], PlayerData[extraid][pABone][4], PlayerData[extraid][pTSlot][4]);

                	cache_get_field_content(0, "ASlotAPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][0][0], AccessoryData[extraid][0][1], AccessoryData[extraid][0][2], AccessoryData[extraid][0][3], AccessoryData[extraid][0][4], AccessoryData[extraid][0][5], AccessoryData[extraid][0][6], AccessoryData[extraid][0][7], AccessoryData[extraid][0][8]);

                	cache_get_field_content(0, "ASlotBPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][1][0], AccessoryData[extraid][1][1], AccessoryData[extraid][1][2], AccessoryData[extraid][1][3], AccessoryData[extraid][1][4], AccessoryData[extraid][1][5], AccessoryData[extraid][1][6], AccessoryData[extraid][1][7], AccessoryData[extraid][1][8]);

           			cache_get_field_content(0, "ASlotCPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][2][0], AccessoryData[extraid][2][1], AccessoryData[extraid][2][2], AccessoryData[extraid][2][3], AccessoryData[extraid][2][4], AccessoryData[extraid][2][5], AccessoryData[extraid][2][6], AccessoryData[extraid][2][7], AccessoryData[extraid][2][8]);

                   	cache_get_field_content(0, "ASlotDPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][3][0], AccessoryData[extraid][3][1], AccessoryData[extraid][3][2], AccessoryData[extraid][3][3], AccessoryData[extraid][3][4], AccessoryData[extraid][3][5], AccessoryData[extraid][3][6], AccessoryData[extraid][3][7], AccessoryData[extraid][3][8]);

                    cache_get_field_content(0, "ASlotEPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][4][0], AccessoryData[extraid][4][1], AccessoryData[extraid][4][2], AccessoryData[extraid][4][3], AccessoryData[extraid][4][4], AccessoryData[extraid][4][5], AccessoryData[extraid][4][6], AccessoryData[extraid][4][7], AccessoryData[extraid][4][8]);

					if (!PlayerData[extraid][pMaskID])
					    PlayerData[extraid][pMaskID] = random(90000) + 10000;

					if (!PlayerData[extraid][pCapacity])
					    PlayerData[extraid][pCapacity] = 15;

				    for (new i = 0; i < 81; i ++) {
				        if (i < 8 || (i >= 71 && i <= 80)) PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
					}
					SetPlayerColor(extraid, DEFAULT_COLOR);
				    if (PlayerData[extraid][pTester] > 0)
			    	{
						SendServerMessage(extraid, "Helper olarak giriþ yaptýnýz.");
				    }
				    if (PlayerData[extraid][pAdmin] == 8)
				    {
				    PlayerData[extraid][pAdmin] = 4;
					}
					if (PlayerData[extraid][pAdmin] == 5)
				    {
				    PlayerData[extraid][pAdmin] = 3;
					}
				    if (PlayerData[extraid][pAdmin] > 0)
				    {
						PlayerData[extraid][pTester] = 0;
						PlayerData[extraid][pTesterHide] = 1;
				    }
				    SendClientMessageEx(extraid, COLOR_WHITE, "{ff3f3f}Server: {FFFFFF}%s adlý karakterinize giriþ yaptýnýz.", ReturnName(extraid));
				    if (!PlayerData[extraid][pBiKere]) {
				    Inventory_Remove(extraid, "Maymuncuk", 500);
				    PlayerData[extraid][pBiKere] = 1;
				    }
				    static
					queryy[128];
				// Update the last login date.
                format(queryy, sizeof(queryy), "UPDATE `characters` SET `LoginDate` = '%s' WHERE `Username` = '%s'", ReturnDate(), PlayerData[extraid][pUsername]);
				mysql_function_query(g_iHandle, queryy, false, "", "");
				    PlayerData[extraid][pCKOnay] = 0;
				    PlayerData[extraid][pSilahSikti] = 1;
				    PlayerData[extraid][pGirisYapti] = 1;
				     SetTimerEx("GirisYapti", 1000, false, "dd", extraid);
                    SetTimerEx("SpawnOldu", 20000, false, "dd", extraid);
				    PlayerData[extraid][pKartusHazir] = false;
				    PlayerData[extraid][pGodMode] = 0;
				    KillTimer(BalikTimer[extraid]);
		            BalikTimer[extraid] = -1;
				    PlayerData[extraid][pOtobusTur]= 0;
				    PlayerData[extraid][pSexAnim] = 0;
				    PlayerData[extraid][pEvGozlemliyor] = 0;
				    PlayerTextDrawHide(extraid, Giris[extraid]);
					KillTimer(PlayerData[extraid][pGirisTimerr]);


				    PlayerData[extraid][pLogged] = 1;


                    format(query, sizeof(query), "SELECT * FROM `inventory` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_INVENTORY);

                    new user_id = -1, querye[512], Cache: owner_query;
					mysql_format(g_iHandle, querye, sizeof(querye), "SELECT `ID` FROM `accounts` WHERE `Username` = '%s'", PlayerData[extraid][pUsername]);
					owner_query = mysql_query(g_iHandle, querye);
					if(cache_num_rows()) user_id = cache_get_field_content_int(0, "ID");
					cache_delete(owner_query);

                    format(query, sizeof(query), "SELECT * FROM `urunler` WHERE `urunSahip` = '%d'", user_id);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_URUN);

                    format(query, sizeof(query), "SELECT * FROM `contacts` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_CONTACTS);

                    format(query, sizeof(query), "SELECT * FROM `tickets` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_TICKETS);

                    format(query, sizeof(query), "SELECT * FROM `kuponlar` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_KUPON);

                    format(query, sizeof(query), "SELECT * FROM `kontraktlar` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_KONTRAKT);

                    format(query, sizeof(query), "SELECT * FROM `gps` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_LOCATIONS);

                    if(PlayerData[extraid][pOwnsBillboard] == 0)
                    {
                        PlayerData[extraid][pOwnsBillboard] = -1;
					}
					if (PlayerData[extraid][pFactionID] != -1) {
					    PlayerData[extraid][pFaction] = GetFactionByID(PlayerData[extraid][pFactionID]);

					    if (PlayerData[extraid][pFaction] == -1) {
					        ResetFaction(extraid);
						}
					}
					if (PlayerData[extraid][pBizJobID] != -1) {
					    PlayerData[extraid][pBizJob] = GetBizByID(PlayerData[extraid][pBizJobID]);

					    if (PlayerData[extraid][pBizJob] == -1) {
         					PlayerData[extraid][pBizJob] = -1;
         					PlayerData[extraid][pBizJobID] = -1;
         					PlayerData[extraid][pBizRank] = 1;
						}
					}

					if (PlayerData[extraid][pFaction] != -1 && FactionData[PlayerData[extraid][pFaction]][factionMOTD] > 0)
			    	{
						new bmotd[128];
						format(bmotd, 128,  "[Birlik]:{FFFFFF} %s", FactionData[PlayerData[extraid][pFaction]][factionMOTD]);
						SendClientMessage(extraid, 0xFF8080FF, bmotd);
				    }

				    if (!PlayerData[extraid][pCreated])
				    {
				        new
                			str[48];

						format(str, sizeof(str), "~r~Karakter Yapilandirma:~w~ %s", ReturnName(extraid));
						//PlayerTextDrawSetString(extraid, [extraid][2], str);
						PlayerData[extraid][pSkin] = 98;
						PlayerData[extraid][pOrigin][0] = '\0';
						PlayerData[extraid][pBirthdate][0] = '\0';
						Dialog_Show(extraid, Gender, DIALOG_STYLE_LIST, "Cinsiyet", "Erkek\nKadýn", "Seç", "{FF6347}Iptal");
				    }
				    else
				    {
        				SetSpawnInfo(extraid, 0, PlayerData[extraid][pSkin], PlayerData[extraid][pPos][0], PlayerData[extraid][pPos][1], PlayerData[extraid][pPos][2], 0.0, 0, 0, 0, 0, 0, 0);

				        TogglePlayerSpectating(extraid, 0);
				        TogglePlayerControllable(extraid, 0);

				        CancelSelectTextDraw(extraid);
				        SetTimerEx("SpawnTimer", 1000, false, "d", extraid);
					}
				}
			}
		}
		case THREAD_VERIFY_PASS:
		{
		    cache_get_data(rows, fields, g_iHandle);

		    if (rows)
				Dialog_Show(extraid, NewPass, DIALOG_STYLE_PASSWORD, "Yeni Þifre Girin", "Yeni þifrenizi girin.\n\nNot: Güvenliðiniz için güçlü þifre kullanmayý tercih edin.", "Deðiþtir", "Ýptal");

			else
				SendErrorMessage(extraid, "Bu þifre size ait deðil!");
		}
		case THREAD_FIND_USERNAME:
		{
		    static
		        query[128];

			cache_get_data(rows, fields, g_iHandle);

			if (rows)
			{
				new
				    name[MAX_PLAYER_NAME + 1];

				cache_get_row(0, 0, name, g_iHandle);

				if (strcmp(name, PlayerData[extraid][pUsername], false) != 0)
				{
					format(PlayerData[extraid][pUsername], sizeof(name), name);
					SetPlayerName(extraid, name);
				}
		    }
		    format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", PlayerData[extraid][pUsername]);
			mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CHECK_ACCOUNT);
		}
		case THREAD_LOAD_INVENTORY:
		{
		    static
		        name[32];

		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_INVENTORY; i ++) {
			    InventoryData[extraid][i][invExists] = true;
			    InventoryData[extraid][i][invID] = cache_get_field_int(i, "invID");
			    InventoryData[extraid][i][invModel] = cache_get_field_int(i, "invModel");
                InventoryData[extraid][i][invQuantity] = cache_get_field_int(i, "invQuantity");

				cache_get_field_content(i, "invItem", name, g_iHandle, sizeof(name));
				strpack(InventoryData[extraid][i][invItem], name, 32 char);
			}
		}
		case THREAD_LOAD_URUN:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_URUN; i ++) {
			  	UrunData[extraid][i][urunVarmi] = true;
			    UrunData[extraid][i][urunID] = cache_get_field_int(i, "urunID");
                UrunData[extraid][i][urunMiktar] = cache_get_field_int(i, "urunMiktar");
				cache_get_field_content(i, "urunAd", UrunData[extraid][i][urunAd], g_iHandle, 128);
			}
		}
		case THREAD_LOAD_CONTACTS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_CONTACTS; i ++) {
				cache_get_field_content(i, "contactName", ContactData[extraid][i][contactName], g_iHandle, 32);

				ContactData[extraid][i][contactExists] = true;
			    ContactData[extraid][i][contactID] = cache_get_field_int(i, "contactID");
			    ContactData[extraid][i][contactNumber] = cache_get_field_int(i, "contactNumber");
			}
		}
		case THREAD_LOAD_LOCATIONS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_GPS_LOCATIONS; i ++) {
				cache_get_field_content(i, "locationName", LocationData[extraid][i][locationName], g_iHandle, 32);

				LocationData[extraid][i][locationExists] = true;
			    LocationData[extraid][i][locationID] = cache_get_field_int(i, "locationID");
			    LocationData[extraid][i][locationPos][0] = cache_get_field_float(i, "locationX");
			    LocationData[extraid][i][locationPos][1] = cache_get_field_float(i, "locationY");
			    LocationData[extraid][i][locationPos][2] = cache_get_field_float(i, "locationZ");
			}
		}
		case THREAD_LOAD_TICKETS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i ++) {
				cache_get_field_content(i, "ticketReason", TicketData[extraid][i][ticketReason], g_iHandle, 64);
				cache_get_field_content(i, "ticketDate", TicketData[extraid][i][ticketDate], g_iHandle, 36);

				TicketData[extraid][i][ticketExists] = true;
			    TicketData[extraid][i][ticketID] = cache_get_field_int(i, "ticketID");
			    TicketData[extraid][i][ticketFee] = cache_get_field_int(i, "ticketFee");
			}
		}
		case THREAD_LOAD_KUPON:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_KUPON; i ++) {
				cache_get_field_content(i, "kuponTarih", Kuponlar[extraid][i][kuponTarih], g_iHandle, 32);
				Kuponlar[extraid][i][kuponVarmi] = true;
			    Kuponlar[extraid][i][kuponID] = cache_get_field_int(i, "kuponID");
			    Kuponlar[extraid][i][kuponOdul] = cache_get_field_int(i, "kuponOdul");
			    Kuponlar[extraid][i][kuponYatirilan] = cache_get_field_int(i, "kuponYatirilan");
			    Kuponlar[extraid][i][kuponTahmin] = cache_get_field_int(i, "kuponTahmin");
			    Kuponlar[extraid][i][kuponMacID] = cache_get_field_int(i, "kuponMacID");
			}
		}
		case THREAD_LOAD_KONTRAKT:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_KONTRAKT; i ++) {
				cache_get_field_content(i, "kuponTarih", Kuponlar[extraid][i][kuponTarih], g_iHandle, 32);
				Kontraktlar[extraid][i][kontraktVarmi] = true;
			    Kontraktlar[extraid][i][kontraktID] = cache_get_field_int(i, "kontraktID");
			    Kontraktlar[extraid][i][kontraktMiktar] = cache_get_field_int(i, "kontraktMiktar");
			    cache_get_field_content(i, "kontraktTarih", Kontraktlar[extraid][i][kontraktTarih], g_iHandle, 36);
			    cache_get_field_content(i, "kontraktSebep", Kontraktlar[extraid][i][kontraktSebep], g_iHandle, 128);
			    cache_get_field_content(i, "kontraktImzalayan", Kontraktlar[extraid][i][kontraktImzalayan], g_iHandle, 36);
			}
		}
		case THREAD_BAN_LOOKUP:
		{
		    new
		        reason[128],
				date[36],
				username[24],
				serial[128],
				sure;

		    cache_get_data(rows, fields, g_iHandle);

		    if (rows) {
		        cache_get_field_content(0, "Username", username, g_iHandle);
		        cache_get_field_content(0, "Date", date, g_iHandle);
				cache_get_field_content(0, "Reason", reason, g_iHandle);
                sure = cache_get_field_int(0, "UnbanTime");
                cache_get_field_content(0, "Serial", serial, g_iHandle);
				new tarih[8], time = gettime();
                if (sure != 0)
				{
				    TimestampToDate(sure, tarih[0],tarih[1],tarih[2],tarih[3],date[4],tarih[5]);
				    if(time > sure) {
				        Blacklist_Remove(PlayerData[extraid][pUsername]);
				    }
				    else {
        			Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Yasaklandýn!", "Hesabýnýz bu sunucudan geçici olarak yasaklandý.\n\nHesap: %s\nSebep: %s\nTarih: %s\nAçýlacaðý Tarih: %02d/%02d/%02d %02d:%02d:%02d\n\nF8 tuþuna basýn ve bir ekran görüntüsü alýn, bu ekran görüntüsü ile forumumuzdan yasaklanmanýza itiraz edebilirsiniz.", "Kapat", "", PlayerData[extraid][pUsername], reason, date, tarih[2], tarih[1],tarih[0],tarih[3],tarih[4],tarih[5]);
					KickEx(extraid); }
				}
				else if (!strcmp(username, "null", true) || !username[0])
				{
				   // Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Yasaklanma Bilgisi", "Bu IP sunucudan yasaklý.\n\nIP: %s\nTarih: %s\nSebep: %s\n\nBu ekranýn fotoðrafýný çekerek forumdan hatalý yasaklanma açabilirsin.", "Kapat", "", PlayerData[extraid][pIP], date, reason);
				    SendServerMessage(extraid, "IP adresin sunucudan yasaklý. IP: %s Tarih: %s Gerekçe: %s", PlayerData[extraid][pIP], date, reason);
					KickEx(extraid);
				}
				else if (strlen(serial) > 0)
				{
				    Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Yasaklanma Bilgisi", "Bu serial sunucudan yasaklý.\n\nTarih: %s\nSebep: %s\n\nBu ekranýn fotoðrafýný çekerek forumdan hatalý yasaklanma açabilirsin.", "Kapat", "", date, reason);
					KickEx(extraid);
				}
				else
				{
				    //Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Yasaklanma Bilgisi", "Bu sunucudan yasaklýsýn.\n\nHesap: %s\nTarih: %s\nSebep: %s\n\nBu ekranýn fotoðrafýný çekerek forumdan hatalý yasaklanma açabilirsin. %d", "Kapat", "", PlayerData[extraid][pUsername], date, reason, sure);
				    SendServerMessage(extraid, "Bu sunucudan yasaklýsýn! Karakter adýn: %s Tarih: %s Gerekçe: %s %d", PlayerData[extraid][pUsername], date, reason, sure);
					KickEx(extraid);
				}
		    }
		}
 	case THREAD_SHOW_CHARACTER:
		{
			cache_get_data(rows, fields, g_iHandle);

			if (rows)
			{
    SQL_LoadCharacter(extraid, PlayerData[extraid][pCharacter]);

			}
		}
	}
	return 1;
}
forward OnViewCharges(extraid, name[]);
public OnViewCharges(extraid, name[])
{
	if (GetFactionType(extraid) != FACTION_POLICE && GetFactionType(extraid) != FACTION_INTEL)
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "Hiç sonuç bulunamadý: \"%s\".", name);

	static
	    string[1024],
		desc[128],
		date[36];

	string[0] = 0;

	for (new i = 0; i < rows; i ++) {
	    cache_get_field_content(i, "Description", desc, g_iHandle);
	    cache_get_field_content(i, "Date", date, g_iHandle);

	    format(string, sizeof(string), "%s%s (%s)\n", string, desc, date);
	}
	format(desc, sizeof(desc), "Sicil: %s", name);
	Dialog_Show(extraid, ChargeList, DIALOG_STYLE_LIST, desc, string, "Kapat", "");
	return 1;
}

stock SetCameraData(playerid)
{
    #if SERVER_CITY == 1
  	 	JBC_SetPlayerPos(playerid, -1553.776367, 844.732299, 32.268722);
		SetPlayerCameraPos(playerid, -1553.776367, 844.732299, 52.268722);
		SetPlayerCameraLookAt(playerid, -1554.276245, 844.740234, 52.250732);
	#elseif SERVER_CITY == 2
	    JBC_SetPlayerPos(playerid, -1553.776367, 844.732299, 32.268722);
		SetPlayerCameraPos(playerid, -1553.776367, 844.732299, 52.268722);
		SetPlayerCameraLookAt(playerid, -1554.276245, 844.740234, 52.250732);
    #elseif SERVER_CITY == 3
	    JBC_SetPlayerPos(playerid, 2069.442138, 977.235412, 6.572320);
		SetPlayerCameraPos(playerid, 2069.442138, 977.235412, 26.572320);
		SetPlayerCameraLookAt(playerid, 2069.452148, 977.702697, 26.557329);
	#endif

	return 1;
}
forward AccountCheck(playerid);
public AccountCheck(playerid)
{
    //JBC_SetPlayerPos(playerid, -1988.752075, -72.294998, 38.647026);
	//ayarlaCameraPos(playerid, -1988.752075, -72.294998, 58.647026);
	//ayarlaCameraLookAt(playerid, -2006.489868, -72.107597, 55.977474);
	//giriþ ekraný poslarý gratex

	JBC_SetPlayerPos(playerid, 1558.4169,-1613.6615,57.1444);
	SetPlayerCameraPos(playerid, 1534.2129,-1615.0602,54.9933);
	//ayarlaCameraLookAt(playerid, 1497.5651,-1327.8810,145.7974);
	SetPlayerCameraLookAt(playerid, 1483.2896,-1638.3901,14.1484);
	for (new i = 0; i < 2; i ++) {
		TextDrawShowForPlayer(playerid, NewLoginTD[i]);

	}
	SQL_CheckAccount(playerid);
	return 1;
}
forward OnResolveUsername(extraid, character[]);
public OnResolveUsername(extraid, character[])
{
    new
		rows,
		fields,
		name[24];

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
 		return SendErrorMessage(extraid, "Böyle bir hesap yok!");

	cache_get_row(0, 0, name, g_iHandle);
	SendServerMessage(extraid, "%s adlý kiþinin giriþ yaptýðý isim : %s.", character, name);

	return 1;
}


forward OnLoginDate(extraid, username[]);
public OnLoginDate(extraid, username[])
{
    if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
	    date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    cache_get_row(0, 0, date, g_iHandle);

	    SendServerMessage(extraid, "%s's last login was on: %s.", username, date);
	}
	else {
	    SendErrorMessage(extraid, "Invalid username specified.");
	}
	return 1;
}

forward OnCarStorageAdd(carid, itemid);
public OnCarStorageAdd(carid, itemid)
{
	CarStorage[carid][itemid][cItemID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnStorageAdd(houseid, itemid);
public OnStorageAdd(houseid, itemid)
{
	HouseStorage[houseid][itemid][hItemID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnDealerCarCreated(bizid, slotid);
public OnDealerCarCreated(bizid, slotid)
{
	DealershipCars[bizid][slotid][vehID] = cache_insert_id(g_iHandle);
	return 1;
}
forward GirisTimerr(playerid);
public GirisTimerr(playerid)
{
SendServerMessage(playerid, "50 saniye içinde giriþ yapmadýðýnýz için atýldýnýz!");
KickEx(playerid);
return 1;
}
forward OnFurnitureCreated(furnitureid);
public OnFurnitureCreated(furnitureid)
{
	FurnitureData[furnitureid][furnitureID] = cache_insert_id(g_iHandle);
	Furniture_Save(furnitureid);
	return 1;
}

forward OnContactAdd(playerid, id);
public OnContactAdd(playerid, id)
{
	ContactData[playerid][id][contactID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnInventoryAdd(playerid, itemid);
public OnInventoryAdd(playerid, itemid)
{
	InventoryData[playerid][itemid][invID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnBanLookup(playerid, username[]);
public OnBanLookup(playerid, username[])
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	static
	    rows,
	    fields,
	    reason[128],
	    date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    cache_get_field_content(0, "Reason", reason, g_iHandle);
	    cache_get_field_content(0, "Date", date, g_iHandle);

		SendServerMessage(playerid, "%s adlý oyuncu %s tarihinde yasaklandý. Gerekçe: %s", username, date, reason);
	}
	else {
	    SendErrorMessage(playerid, "%s adlý oyuncu yasaklý deðil.", username);
	}
	return 1;
}


forward SoyadKilitlimi_p(newname[]);
public SoyadKilitlimi_p(newname[])
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	    return 1;

	return 0;
}


forward OnDeleteCharacter(playerid, name[]);
public OnDeleteCharacter(playerid, name[])
{
	static
	    rows,
	    fields,
		query[128],
		id = -1;

    cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "%s adlý karakter sunucuda bulunmuyor.", name);

	if (cache_get_field_int(0, "Admin") > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Sileceðin karakter senden yüksek bir admin yetkisine sahip.");

	id = cache_get_field_int(0, "ID");

	if (id) {
	    format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
     	mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
		mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

  		SendServerMessage(playerid, "%s adlý karakteri baþarýyla sildin.", name);
	}
	return 1;
}





forward OnDeleteAccount(playerid, name[]);
public OnDeleteAccount(playerid, name[])
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "%s adlý hesap sunucuda bulunmuyor.", name);

	static
	    query[128];

	for (new i = 0; i < rows; i ++)
	{
	    if ((id = cache_get_field_int(i, "ID")))
		{
	        format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

	        format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

	        format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

            format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);
		}
	}
	format(query, sizeof(query), "DELETE FROM `accounts` WHERE `Username` = '%s'", name);
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s'", name);
    mysql_tquery(g_iHandle, query);

    SendServerMessage(playerid, "%s adlý hesabý veritabanýndan baþarýyla sildin!", name);
    return 1;
}

forward OnNameChange(playerid, userid, newname[]);
public OnNameChange(playerid, userid, newname[])
{
	if (!IsPlayerConnected(playerid) || !IsPlayerConnected(userid))
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	    return SendErrorMessage(playerid, "%s Ýsmi kullanýlýyor.", newname);

    new
		oldname[MAX_PLAYER_NAME];

	GetPlayerName(userid, oldname, sizeof(oldname));
	ChangeName(userid, newname);

    for (new i = 0, l = strlen(oldname); i != l; i ++) {
	    if (oldname[i] == '_') oldname[i] = ' ';
	}
	for (new i = 0, l = strlen(newname); i != l; i ++) {
	    if (newname[i] == '_') newname[i] = ' ';
	}
	SendAdminAlert(COLOR_LIGHTRED, "[SÝSTEM] %s adlý admin %s adlý oyuncunun ismini %s olarak deðiþtirdi.", ReturnName(playerid), ReturnName(userid), newname);
	SendTesterMessage(COLOR_LIGHTRED, "[SÝSTEM] %s adlý admin %s adlý oyuncunun ismini %s olarak deðiþtirdi.", ReturnName(playerid), ReturnName(userid), newname);
	SendServerMessage(playerid, "%s Adlý oyuncunun ismini %s olarak deðiþtirdin.", oldname, newname);
	SendServerMessage(userid, "%s Adlý admin tarafýndan isminiz %s olarak deðiþtirildi.", ReturnName(playerid, 0), newname);

	Log_Write("logs/name_log.txt", "[%s] %s has changed %s's name to %s.", ReturnDate(), ReturnName(playerid), oldname, newname);
	return 1;
}

forward OnTicketCreated(playerid, ticketid);
public OnTicketCreated(playerid, ticketid)
{
	TicketData[playerid][ticketid][ticketID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnKuponCreated(playerid, kuponid);
public OnKuponCreated(playerid, kuponid)
{
	Kuponlar[playerid][kuponid][kuponID] = cache_insert_id(g_iHandle);
 	return 1;
}

forward OnKontraktCreated(playerid, kontraktid);
public OnKontraktCreated(playerid, kontraktid)
{
	Kontraktlar[playerid][kontraktid][kontraktID] = cache_insert_id(g_iHandle);
 	return 1;
}

forward OnRackCreated(rackid);
public OnRackCreated(rackid)
{
	if (rackid == -1 || !RackData[rackid][rackExists])
	    return 0;

	RackData[rackid][rackID] = cache_insert_id(g_iHandle);
	Rack_Save(rackid);

	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id(g_iHandle);
	Gate_Save(gateid);

	return 1;
}

forward OnBusinessCreated(bizid);
public OnBusinessCreated(bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	BusinessData[bizid][bizID] = cache_insert_id(g_iHandle);
	Business_Save(bizid);

	return 1;
}

forward OnHaberCreated(haberid);
public OnHaberCreated(haberid)
{
	if (haberid == -1 || !Haberler[haberid][haberVarmi])
	    return 0;

	Haberler[haberid][haberID] = cache_insert_id(g_iHandle);
	Haber_Kaydet(haberid);
	return 1;
}


forward OnMezarCreated(mezarid);
public OnMezarCreated(mezarid)
{
	if (mezarid == -1 || !Mezarlar[mezarid][mezarVarmi])
	    return 0;

	Mezarlar[mezarid][mezarID] = cache_insert_id(g_iHandle);
	Mezar_Kaydet(mezarid);
	return 1;
}
forward OnHoodCreated(hoodid);
public OnHoodCreated(hoodid)
{
	if (hoodid == -1 || !OnayliHoodlar[hoodid][hoodVarmi])
	    return 0;

	OnayliHoodlar[hoodid][hoodID] = cache_insert_id(g_iHandle);
	Hood_Kaydet(hoodid);
	return 1;
}

forward OnFabrikaCreated(fabrikaid);
public OnFabrikaCreated(fabrikaid)
{
	if (fabrikaid == -1 || !Fabrikalar[fabrikaid][fabrikaVarmi])
	    return 0;

	Fabrikalar[fabrikaid][fabrikaID] = cache_insert_id(g_iHandle);
	Fabrika_Kaydet(fabrikaid);

	return 1;
}

forward OnEntranceCreated(entranceid);
public OnEntranceCreated(entranceid)
{
	if (entranceid == -1 || !EntranceData[entranceid][entranceExists])
	    return 0;

	EntranceData[entranceid][entranceID] = cache_insert_id(g_iHandle);
	EntranceData[entranceid][entranceWorld] = EntranceData[entranceid][entranceID] + 7000;

	Entrance_Save(entranceid);

	return 1;
}

forward OnCarCreated(carid);
public OnCarCreated(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	CarData[carid][carID] = cache_insert_id(g_iHandle);
	Car_Save(carid);

	return 1;
}

forward OnPumpCreated(pumpid);
public OnPumpCreated(pumpid)
{
    PumpData[pumpid][pumpID] = cache_insert_id(g_iHandle);
	Pump_Save(pumpid);

	return 1;
}

forward OnArrestCreated(arrestid);
public OnArrestCreated(arrestid)
{
	if (arrestid == -1 || !ArrestData[arrestid][arrestExists])
	    return 0;

	ArrestData[arrestid][arrestID] = cache_insert_id(g_iHandle);
	Arrest_Save(arrestid);

	return 1;
}
forward OnCrateCreated(crateid);
public OnCrateCreated(crateid)
{
	if (crateid == -1 || !CrateData[crateid][crateExists])
	    return 0;

	CrateData[crateid][crateID] = cache_insert_id(g_iHandle);
	Crate_Save(crateid);

	return 1;
}

forward OnFactionCreated(factionid);
public OnFactionCreated(factionid)
{
	if (factionid == -1 || !FactionData[factionid][factionExists])
	    return 0;

	FactionData[factionid][factionID] = cache_insert_id(g_iHandle);

	Faction_Save(factionid);
	Faction_SaveRanks(factionid);

	return 1;
}

forward OnMacCreated(macid);
public OnMacCreated(macid)
{
	if (macid == -1 || !Maclar[macid][macVarmi])
	    return 0;

	Maclar[macid][macID] = cache_insert_id(g_iHandle);

	Mac_Kaydet(macid);
	return 1;
}

forward OnBackpackCreated(id);
public OnBackpackCreated(id)
{
	if (id == -1 || !BackpackData[id][backpackExists])
	    return 0;

	BackpackData[id][backpackID] = cache_insert_id(g_iHandle);
	Backpack_Save(id);

	return 1;
}
forward OnATMCreated(atmid);
public OnATMCreated(atmid)
{
    if (atmid == -1 || !ATMData[atmid][atmExists])
		return 0;

	ATMData[atmid][atmID] = cache_insert_id(g_iHandle);
 	ATM_Save(atmid);

	return 1;
}
forward OnSandikCreated(sid);
public OnSandikCreated(sid)
{
    if (sid == -1 || !Sandiklar[sid][sandikVarmi])
		return 0;

	Sandiklar[sid][sandikID] = cache_insert_id(g_iHandle);
 	Sandik_Kaydet(sid);

	return 1;
}

forward OnImpoundCreated(impoundid);
public OnImpoundCreated(impoundid)
{
	if (impoundid == -1 || !ImpoundData[impoundid][impoundExists])
	    return 0;

	ImpoundData[impoundid][impoundID] = cache_insert_id(g_iHandle);
	Impound_Save(impoundid);

	return 1;
}

forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(g_iHandle);
	Graffiti_Save(id);

	return 1;
}

forward OnDetectorCreated(id);
public OnDetectorCreated(id)
{
	MetalDetectors[id][detectorID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnGarbageCreated(garbageid);
public OnGarbageCreated(garbageid)
{
	if (garbageid == -1 || !GarbageData[garbageid][garbageExists])
	    return 0;

	GarbageData[garbageid][garbageID] = cache_insert_id(g_iHandle);
	Garbage_Save(garbageid);

	return 1;
}

forward OnVendorCreated(vendorid);
public OnVendorCreated(vendorid)
{
	if (vendorid == -1 || !VendorData[vendorid][vendorExists])
	    return 0;

	VendorData[vendorid][vendorID] = cache_insert_id(g_iHandle);
	Vendor_Save(vendorid);

	return 1;
}

forward OnSpeedCreated(speedid);
public OnSpeedCreated(speedid)
{
	if (speedid == -1 || !SpeedData[speedid][speedExists])
	    return 0;

	SpeedData[speedid][speedID] = cache_insert_id(g_iHandle);
	Speed_Save(speedid);

	return 1;
}

forward OnHouseCreated(houseid);
public OnHouseCreated(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	HouseData[houseid][houseID] = cache_insert_id(g_iHandle);
	House_Save(houseid);

	return 1;
}

forward OnDroppedItem(itemid);
public OnDroppedItem(itemid)
{
	if (itemid == -1 || !DroppedItems[itemid][droppedModel])
	    return 0;

	DroppedItems[itemid][droppedID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnJobCreated(jobid);
public OnJobCreated(jobid)
{
	if (jobid == -1 || !JobData[jobid][jobExists])
	    return 0;

	JobData[jobid][jobID] = cache_insert_id(g_iHandle);
	Job_Save(jobid);

	return 1;
}

forward OnCharacterLookup(extraid, id, character[]);
public OnCharacterLookup(extraid, id, character[])
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
	    string[128];

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    static
	        admin,
	        skin,
	        createDate,
	        lastLogin;

		admin = cache_get_field_int(0, "Admin");
		skin = cache_get_field_int(0, "Skin");

		createDate = cache_get_field_int(0, "CreateDate");
		lastLogin = cache_get_field_int(0, "LastLogin");

		format(string, sizeof(string), "~g~Ad:~w~ %s~n~~g~Hesap:~w~ %s~n~~g~Olusturma:~w~ %s~n~~g~Son Giris:~w~ %s", character, (admin > 0) ? ("Admin") : ("Player"), GetDuration(gettime() - createDate), GetDuration(gettime() - lastLogin));
		PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][52], string);

		format(string, sizeof(string), "#%d: %s", id, character);
		PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][53], string);

		PlayerTextDrawSetPreviewModel(extraid, PlayerData[extraid][pTextdraws][54], skin);

		for (new i = 40; i < 58; i ++)
  		{
    		if (i >= 50)
      			PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);

			else if (i < 50)
   				PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
   		}
		SelectTextDraw(extraid, -1);

		PlayerData[extraid][pDisplayStats] = 2;
		PlayerData[extraid][pCharacterMenu] = id;
	}
	return 1;
}

forward OnCharacterCheck(extraid, character[]);
public OnCharacterCheck(extraid, character[])
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
		query[150];

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    Dialog_Show(extraid, CreateChar, DIALOG_STYLE_INPUT, "Karakter oluþtur", "Hata: \"%s\" ismi kullanýlýyor!\n\nLütfen baþka bir isim giriniz.", "Tamam", "Iptal", character);
	}
	else
	{
		format(query, sizeof(query), "INSERT INTO `characters` (`Username`, `Character`, `CreateDate`) VALUES('%s', '%s', '%d')", PlayerData[extraid][pUsername], character, gettime());
		mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CREATE_CHAR);

		format(PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1], MAX_PLAYER_NAME + 1, character);
	//	SendServerMessage(extraid, "\"%s\" adlý karakter baþarýyla oluþturuldu.", character);
		SendClientMessageEx(extraid, 0xE74C3CFF, "Sunucu: {FFFFFF}%s karakteriniz oluþturuldu.", character);

		ShowCharacterMenu(extraid);
		PlayerData[extraid][pLogged] = 0;
	}
	return 1;
}

stock FlashTextDraw(playerid, PlayerText:textid, delay = 500)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDraw", delay, false, "dd", playerid, _:textid);

	return 1;
}

stock FlashTextDrawEx(playerid, PlayerText:textid, amount = 1)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);

	return 1;
}

forward FlashShowTextDrawEx(playerid, PlayerText:textid, amount);
public FlashShowTextDrawEx(playerid, PlayerText:textid, amount)
{
    if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawnedEx(playerid)) {
	    PlayerTextDrawShow(playerid, textid);

	    if (amount > 0) return SetTimerEx("HideTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);
	}
	return 1;
}

forward HideTextDrawEx(playerid, PlayerText:textid, amount);
public HideTextDrawEx(playerid, PlayerText:textid, amount)
{
    if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawnedEx(playerid)) {
	    PlayerTextDrawHide(playerid, textid);

	    if (amount > 0) return SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, --amount);
	}
	return 1;
}

forward FlashShowTextDraw(playerid, PlayerText:textid);
public FlashShowTextDraw(playerid, PlayerText:textid)
{
	if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawnedEx(playerid)) {
	    PlayerTextDrawShow(playerid, textid);
	}
	return 1;
}

stock RestartCheck()
{
	static
	    time[3],
		string[32];

	if (g_ServerRestart == 1 && !g_RestartTime)
	{
		foreach (new i : Player) {
		    SQL_SaveCharacter(i);
		    SetPlayerName(i, PlayerData[i][pUsername]);
		}
		SendRconCommand("gmx");
	}
	else if (g_ServerRestart == 1) {
		GetElapsedTime(g_RestartTime--, time[0], time[1], time[2]);

		format(string, 32, "~r~Server Restart:~w~ %02d:%02d", time[1], time[2]);
	    TextDrawSetString(gServerTextdraws[3], string);
	}
	return 1;
}
stock RespawnCheck()
{
static
	    time[3],
	    count,
		string[32];


	if (g_AracRespawn == 1 && !g_RespawnTime)
	{
		for (new i = 1; i != MAX_VEHICLES; i ++)
	//    new modelid = GetVehicleModel(i);
	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
	    {
	        RespawnVehicle(i);
			count++;
		}
		SendClientMessageToAllEx(COLOR_LIGHTRED, "[vBeta] Tüm araçlar respawnlandý!");
	}
	else if (g_AracRespawn == 1) {
		GetElapsedTime(g_AracRespawn--, time[0], time[1], time[2]);

		format(string, 32, "~r~Arac Respawn:~w~ %02d:%02d", time[1], time[2]);
	    TextDrawSetString(gServerTextdraws[3], string);
	}
	return 1;
}
stock TotalledCheck()
{
	static
	    Float:fHealth;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehicleHealth(i, fHealth) && fHealth < 300.0) {
	    SetVehicleHealth(i, 300.0);
	    SetEngineStatus(i, false);
	    }
	return 1;
}


forward MinuteCheck();
public MinuteCheck()
{

	new Hour, Minute, Second, saat[24];
	gettime(Hour, Minute, Second);
	format(saat, sizeof(saat), "%02d:%02d", Hour, Minute);
	TextDrawSetString(TelefonTD[13], saat);


	for (new fabrikaid = 0; fabrikaid != MAX_FABRIKA; fabrikaid ++) if(Fabrikalar[fabrikaid][fabrikaVarmi] && Fabrikalar[fabrikaid][fabrikaBirlik] != -1)
   	{
		if(Fabrikalar[fabrikaid][fabrikaTip] == 1) {
		    new verilecekmetal = RandomEx(0, 30) * floatround(Fabrikalar[fabrikaid][fabrikaUretimHizi], floatround_round);
			Fabrikalar[fabrikaid][fabrikaDepo][0] += floatround(verilecekmetal, floatround_round);
		}
		if(Fabrikalar[fabrikaid][fabrikaTip] == 2) {
		    new verilecekuyusturucu = (1 * floatround(Fabrikalar[fabrikaid][fabrikaUretimHizi], floatround_round));
			Fabrikalar[fabrikaid][fabrikaDepo][1] += verilecekuyusturucu;
			Fabrikalar[fabrikaid][fabrikaDepo][2] += verilecekuyusturucu;
			Fabrikalar[fabrikaid][fabrikaDepo][3] += verilecekuyusturucu;
		}
  		Fabrika_Kaydet(fabrikaid);
	}
	for(new i=0; i < MAX_MAC; i++) if(Maclar[i][macVarmi] && !Maclar[i][macOynandimi] && gettime() > Maclar[i][macZaman])
	{
		Mac_Sonuclat(i);
	}
	for(new i=0; i < MAX_OTELODASI; i++) if(OtelOdalari[i][odaVarmi] && OtelOdalari[i][odaKiralayan] != 0 && gettime() > OtelOdalari[i][odaKiraBitis])
	{
		Otel_OdaKapat(i);
	}
	for(new i=0; i < MAX_BILLBOARDS; i++) if(BillBoardData[i][bbExists] && BillBoardData[i][bbOwner] != 0 && gettime() > BillBoardData[i][bbTime])
	{
		BillBoardData[i][bbOwner] = 0;
        BillBoardData[i][bbTime] = 0;
        format(BillBoardData[i][bbMessage], 230, "Yok");
	}

    foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] && !PlayerData[i][pCharacter])
	        continue;

		if(gettime() > PlayerData[i][pDependTime] && PlayerData[i][pTotalUsed] > GEREKEN_BAGIMLILIK)
		{
			new oran = RandomEx(0,100), krizorani = 15 + (PlayerData[i][pTotalUsed] / 25);
			if(oran < krizorani ) {
                SendClientMessage(i, COLOR_YELLOW, "[UYARI] Uyuþturucuya baðýmlý olduðunuz için acilen bir doz daha almanýz gerekmektedir!");
                SendNearbyMessage(i, 30.0, 0x80CAADFF, "** Gözlerinde ki kýzarýklýk, uyuþturucu krizine girdiðinin göstergesidir. ( %s )", ReturnName(i, 0));
              //  SetPlayerWeather(i, 234);
			   // SetPlayerDrunkLevel(i, 4999);
			    //PlayerData[i][pKriz] = SetTimerEx("KrizEtki", 30000, true, "d", i);
			  //  SendServerMessage(i, "Yerden 30 saniye sonra kalkacaksýn.");
			    //ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 1, 1, 1, 0, 1);
			    EffectTimer[i] = SetTimerEx("RemoveEffects", 45 * 1000, false, "i", i);
	           	PlayerData[i][pDependTime] = gettime() + KRIZ_SURESI;
			}
	}

		if(PlayerData[i][pPhone] == 0 && Inventory_HasItem(i, "Telefon"))
		{
		    PlayerData[i][pPhone] = random(90000) + 10000;
		    //SendServerMessage(i, "Telefon numaranýz bugda olduðu için %d olarak ayarlandý. (/numaram)", PlayerData[i][pPhone]);
		    Inventory_Remove(i, "Telefon");
		}
        PlayerData[i][pMinutes]++;
        SQL_SaveCharacter(i);

        if (PlayerData[i][pMinutes] >= PAYDAY_ORANI)
       	{
			SetTimerEx("MaasSifirla", 120*1000, false, "d", i);
            new paycheck = 250;

        	PlayerData[i][pMinutes] = 0;
			PlayerData[i][pAracParcalatTime]--;
			PlayerData[i][pPlayingHours]++;
			if (PlayerData[i][pAracParcalatTime] == 0)
			{
            PlayerData[i][pAracParcalatTime] = 0;
            }
            if(PlayerData[i][pBagisci] == 1)
            {
            paycheck +=500;
            SendServerMessage(i, "Baðýþçý olduðun için ekstradan 500 dolar kazandýn!");
            }
            if(PlayerData[i][pSilverVip] == 1)
            {
            paycheck +=750;
            SendServerMessage(i, "Silver VIP olduðun için ekstradan 750 dolar kazandýn!");
            }
            if(PlayerData[i][pGoldVip] == 1)
            {
            paycheck +=1000;
            SendServerMessage(i, "Gold VIP olduðun için ekstradan 1000 dolar kazandýn!");
            }
            if(PlayerData[i][pQuantumVip] == 1)
            {
            paycheck +=1500;
            SendServerMessage(i, "Quantum VIP olduðun için ekstradan 1500 dolar kazandýn!");
            }
			if(GetFactionType(i) == FACTION_POLICE)
			{
				if(PlayerData[i][pFactionRank] == 1 || PlayerData[i][pFactionRank] == 2) paycheck += 150;
				if(PlayerData[i][pFactionRank] == 3 || PlayerData[i][pFactionRank] == 4) paycheck += 250;
				if(PlayerData[i][pFactionRank] == 5 || PlayerData[i][pFactionRank] == 6) paycheck += 200;
				if(PlayerData[i][pFactionRank] == 7 || PlayerData[i][pFactionRank] > 7) paycheck += 500;
			}
			if(GetFactionType(i) == FACTION_GOV)
			{
				if(PlayerData[i][pFactionRank] == 1 || PlayerData[i][pFactionRank] == 2) paycheck += 150;
				if(PlayerData[i][pFactionRank] == 3 || PlayerData[i][pFactionRank] == 4) paycheck += 300;
				if(PlayerData[i][pFactionRank] == 5 || PlayerData[i][pFactionRank] == 6) paycheck += 450;
				if(PlayerData[i][pFactionRank] == 7 || PlayerData[i][pFactionRank] > 7) paycheck += 500;
			}
			if(GetFactionType(i) == FACTION_NEWS)
			{
				if(PlayerData[i][pFactionRank] == 1 || PlayerData[i][pFactionRank] == 2) paycheck += 175;
				if(PlayerData[i][pFactionRank] == 3 || PlayerData[i][pFactionRank] == 4) paycheck += 325;
				if(PlayerData[i][pFactionRank] == 5 || PlayerData[i][pFactionRank] == 6) paycheck += 400;
				if(PlayerData[i][pFactionRank] == 7 || PlayerData[i][pFactionRank] > 7) paycheck += 500;
			}
			if(GetFactionType(i) == FACTION_MEDIC)
			{
				if(PlayerData[i][pFactionRank] == 1 || PlayerData[i][pFactionRank] == 2) paycheck += 250;
				if(PlayerData[i][pFactionRank] == 3 || PlayerData[i][pFactionRank] == 4) paycheck += 400;
				if(PlayerData[i][pFactionRank] == 5 || PlayerData[i][pFactionRank] == 6) paycheck += 500;
				if(PlayerData[i][pFactionRank] == 7 || PlayerData[i][pFactionRank] > 7) paycheck += 800;
			}
			SetPVarInt(i, "Maas", paycheck);


				GiveMoney(i, paycheck);
                new coordsstring[128];
                PlayerData[i][pHediyeTime]--;
				format(coordsstring, sizeof(coordsstring),"[+][Bonus] 1 saatlik bonus 250$ kazandýnýz.",FormatNumber(paycheck));
				SendClientMessage(i, 0x00FF00FF, coordsstring);
				GiveMoney(i, 250);
				if (PlayerData[i][pSilahZaman] > 0)
				{
                PlayerData[i][pSilahZaman]--;
                }
                if (PlayerData[i][pSilahZaman] == 0)
				{
                PlayerData[i][pSilahZaman] = 0;
                }
				PlayerData[i][pEXP]++;
 				if(PlayerData[i][pEXP] >= PlayerData[i][pLevel]*4)
				{
				PlayerData[i][pEXP] = 0;
				PlayerData[i][pLevel]++;
				SendServerMessage(i, "{7EFB1A}Seviye atladýnýz ve seviye bonusu olarak 500$ kazandýnýz!");
				GiveMoney(i, 500);
				}
				CallLocalFunction("MaasSifirla", "d", i);
		}

	}
	for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && PlantData[i][plantDrugs] < Plant_MaxGrams(PlantData[i][plantType])) {
	    PlantData[i][plantDrugs]++;

	    Plant_Refresh(i);
	    Plant_Save(i);
	}

    for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if(CarData[i][carKiralik] == 1)
    {
		if(CarData[i][carKiraZaman] == 1)
		{
			CarData[i][carKiraZaman] = 0;
			CarData[i][carAnahtar] = -1;
			CarData[i][carLocked] = 0;
			CoreVehicles[i][vehFuel] = 100;
			RepairVehicle(i);
			new realid = Car_GetRealID(i);
			RespawnVehicle(realid);

			Car_Save(i);
  		}
		else if (CarData[i][carKiraZaman] > 1)
		{
		    CarData[i][carKiraZaman]--;
		    Car_Save(i);
   		}
    }
	for (new i = 0; i != MAX_HOUSES; i ++) if(HouseData[i][houseKiralayan] != -1)
    {
		if(HouseData[i][houseKiraSure] == 1)
		{
			HouseData[i][houseKiraSure] = 0;
			HouseData[i][houseKiralayan] = -1;
			HouseData[i][houseLocked] = 1;
			House_Save(i);
  		}
		else if (HouseData[i][houseKiraSure] > 1)
		{
		    HouseData[i][houseKiraSure]--;
		    House_Save(i);
   		}
    }
	return 1;
}


forward PlayerCheck();
public PlayerCheck()
{

static
		str[128],
		
		yarali[128],
		string[256],
//		userid,
		playerid,
		id = -1;

 	foreach (new i : Player)
	{
 		if (!PlayerData[i][pLogged] && PlayerData[i][pCharacter] != 0)
	        continue;
        if(IsPlayerInAnyVehicle(i) && ZirhliAraclar(GetPlayerVehicleID(i)))
	    {
	        new sc_id = GetPlayerVehicleID(i), Float:sc_health;
	        GetVehicleHealth(sc_id, sc_health);
			if(sc_health < 1000) {
			    CoreVehicles[sc_id][vehHasar] -= 1000.0 - sc_health;
			    if(CoreVehicles[sc_id][vehHasar] > 1000) RepairVehicle(sc_id);
			}
	    }
		 if(IsPlayerInAnyVehicle(i) || CarData[i][carZirh] == 1)
        {
	        new sc_id = GetPlayerVehicleID(i), Float:sc_health;
	        GetVehicleHealth(sc_id, sc_health);
			if(sc_health < 1000) {
			    CarData[sc_id][carHasar] -= 1000.0 - sc_health;
			    if(CarData[sc_id][carHasar] > 1000) RepairVehicle(sc_id);
			}
	    }
	    new years,months,days,hourss,minutess;
       getdate(years, months, days), gettime(hourss, minutess);
	   format(string, sizeof string, "%d/%s%d/%s%d %s%d:%s%d_______________(%d)%s",days, ((months < 10) ? ("0") : ("")), months, (years < 10) ? ("0") : (""), years, (hourss < 10) ? ("0") : (""), hourss, (minutess < 10) ? ("0") : (""), minutess,i,ReturnName(i));
	   PlayerTextDrawSetString(i, TDEditor_Hud[i][3], string);
	   new string2[256];
	   new Float: hp;

		GetPlayerHealth(i, hp);
		new Float: sp;

		GetPlayerArmour(i, sp);
	   format(string2, sizeof string2, "%d", floatround(hp, floatround_floor));
	   PlayerTextDrawSetString(i, TDEditor_Hud[i][2], string2);
	   new string3[64];
	   format(string3, sizeof string3, "~y~FPS:~w~%i~n~~b~Ping:~w~%i", pFPS[i], GetPlayerPing(i));
	   PlayerTextDrawSetString(i, TDEditor_Hud[i][1], string3);
	   new string4[64];
	   format(string4, sizeof string4, "%d", floatround(sp, floatround_floor));
	   PlayerTextDrawSetString(i, TDEditor_Hud[i][4], string4);
	   new string5[64];
	   format(string5, sizeof string5, "%d/dk",PlayerData[i][pMinutes]);
	   PlayerTextDrawSetString(i, TDEditor_Hud[i][5], string5);
	   new string6[64];
	   format(string6, sizeof string6, "%d",Konektovano());
	   PlayerTextDrawSetString(i, TDEditor_Hud[i][6], string6);

	/*
	format(strings, sizeof strings, "%s ~r~ v1",ReturnName(i));
	   PlayerTextDrawSetString(i, TDEditor_Hud[i][3], strings);
	   format(string, sizeof string, "%d/%s%d/%s%d %s%d:%s%d",days, ((months < 10) ? ("0") : ("")), months, (years < 10) ? ("0") : (""), years, (hourss < 10) ? ("0") : (""), hourss, (minutess < 10) ? ("0") : (""), minutess);
	   PlayerTextDrawSetString(i, TDEditor_Hud[i][4], string);
	   */

	    if(IsPlayerInAnyVehicle(i) && Mise[i][BusStop] == 1 && Mise[i][BusMission] != 999)
	    {
			new id2 = Car_GetID(GetPlayerVehicleID(i));
		    if(Mise[i][BusStop] == 1 && Car_Meslek(i, id2) && Mise[i][BusMission] != 999 && PlayerData[i][pJob] == JOB_OTOBUSSOFORU  ){
				if(IsPlayerInSphere(i,361.7982,-1527.4463,33.0697,5) ||
					IsPlayerInSphere(i,535.0513,-1262.2404,16.3687,5) ||
					IsPlayerInSphere(i,626.7946,-1636.8909,16.0026,5) ||
					IsPlayerInSphere(i,770.7590,-1676.8026,12.9227,5) ||
					IsPlayerInSphere(i,796.7376,-1472.4398,13.3828,5) ||
					IsPlayerInSphere(i,886.7276,-997.1920,35.92730,5) ||
					IsPlayerInSphere(i,1030.4622,-1152.1044,23.6563,5) ||
					IsPlayerInSphere(i,1207.4020,-948.4581,42.7275,5) ||
					IsPlayerInSphere(i,1414.8257,-1158.7787,23.6563,5) ||
					IsPlayerInSphere(i,1712.4600,-1274.5700,13.3800,5) ||
					IsPlayerInSphere(i,1933.5078,-1044.9818,23.9135,5) ||
					IsPlayerInSphere(i,2268.4385,-1192.2931,24.8130,5) ||
					IsPlayerInSphere(i,2317.0918,-1386.5325,23.8715,5) ||
					IsPlayerInSphere(i,2420.4346,-1259.8356,23.8316,5) ||
					IsPlayerInSphere(i,2508.8904,-1414.6725,28.3594,5) ||
					IsPlayerInSphere(i,2740.5342,-1460.7323,30.2813,5) ||
					IsPlayerInSphere(i,2795.3704,-1380.3308,21.2550,5) ||
					IsPlayerInSphere(i,2771.5024,-1654.8423,11.6193,5) ||
					IsPlayerInSphere(i,2479.2590,-1729.6877,13.3828,5) ||
					IsPlayerInSphere(i,2450.0835,-1934.4447,13.3361,5) ||
					IsPlayerInSphere(i,2711.8206,-2026.3109,13.3270,5) ||
					IsPlayerInSphere(i,2223.9805,-2136.5171,13.3324,5) ||
					IsPlayerInSphere(i,1995.4023,-2163.7217,13.3828,5) ||
					IsPlayerInSphere(i,1825.7169,-2083.2720,13.3828,5) ||
					IsPlayerInSphere(i,1964.0333,-2001.6047,13.3828,5) ||
					IsPlayerInSphere(i,1824.5422,-1884.4218,13.3277,5) ||
					IsPlayerInSphere(i,2053.2000,-1815.0000,13.3800,5) ||
					IsPlayerInSphere(i,1823.6591,-1649.7051,13.3828,5) ||
					IsPlayerInSphere(i,2107.2432,-1714.2798,13.3892,5) ||
					IsPlayerInSphere(i,2007.6346,-1457.7531,13.3906,5) ||
					IsPlayerInSphere(i,1741.2539,-1596.0043,13.3817,5) ||
					IsPlayerInSphere(i,1526.8031,-1672.5814,13.3828,5) ||
					IsPlayerInSphere(i,1458.7119,-1869.5370,13.3906,5) ||
					IsPlayerInSphere(i,1182.7495,-1816.8263,13.3984,5) ||
					IsPlayerInSphere(i,1208.2617,-1350.3226,13.4014,5) ||
					IsPlayerInSphere(i,1003.3614,-1317.4762,13.3906,5) ||
					IsPlayerInSphere(i,508.0580,-1662.4474,18.9118,5)) {
				    Mise[i][BusStopTime] +=1;
				    if(Mise[i][BusStopTime] == 10){
				        HidePlayerFooter(i);
					    Mise[i][BusStop] = 0;
					    Mise[i][BusStopTime] = 0;
					    Mise[i][BusMission] += 1;
						BusMissions(i);
					}
				}else{/*
				    ShowPlayerFooter(i, "~r~BEKLEMEDIN, GERI DON!");
				    Mise[i][BusStopTime] = 0;
				    Mise[i][BusStopTimeFail] += 1;
				    if(Mise[i][BusStopTimeFail] == 10){
					    Mise[i][BusMission] += 1;
					    Mise[i][BusStop] = 0;
					    Mise[i][BusStopTime] = 0;
						BusMissions(i);
					}*/
					if(Mise[i][BusStopTime] == 10){
				        HidePlayerFooter(i);
					    Mise[i][BusStop] = 0;
					    Mise[i][BusStopTime] = 0;
					    Mise[i][BusMission] += 1;
						BusMissions(i);
					}
				}
			}
		}
		SetPlayerProgressBarValue(i, Aclik[i], PlayerData[i][pHunger]);
		SetPlayerProgressBarValue(i, Susuzluk[i], PlayerData[i][pThirst]);

	    if(IsPlayerOnPhone(i) && PlayerData[i][pIncomingCall] == 0)
	    {
	        konusmasuresi[i]++;
	        static
		        hours,
		        minutes,
		        seconds;

			GetElapsedTime(konusmasuresi[i], hours, minutes, seconds);
            format(str, sizeof(str), "%02d:%02d", minutes, seconds);
			PlayerTextDrawSetString(i, TelefonPlayer[i][3], str);
	 	}

	    if(IsPlayerSpawnedEx(i) && SQL_IsLogged(i))
		{
		    GetPlayerPos(i, PlayerData[i][pPos][0], PlayerData[i][pPos][1], PlayerData[i][pPos][2]);
	    	GetPlayerFacingAngle(i, PlayerData[i][pPos][3]);

		}

        if(GetPlayerState(i) == PLAYER_STATE_DRIVER && Speedlimit[i])
		{
		    new a, b, c;
			GetPlayerKeys(i, a, b ,c);
		    if(a == 8 && GetVehicleSpeed(i) > Speedlimit[i])
		    {
		        new newspeed = GetVehicleSpeed(i) - Speedlimit[i];
		    	ModifyVehicleSpeed(GetPlayerVehicleID(i), -newspeed);
		    }
		}
		if (GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && !PlayerData[i][pJetpack])
		{
	    	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has spawned a jetpack using hacks.", ReturnName(i, 0));
            new msg[128];
	        format(msg, sizeof (msg), "%s adli oyuncu jetpack hilesi kullandi ve sistem tarafindan atildi.", ReturnName(i));
	    	Log_Write("logs/cheat_log.txt", "[%s] %s has spawned a jetpack using hacks.", ReturnDate(), ReturnName(i, 0));
	    	Dialog_Show(i, Antihile, DIALOG_STYLE_MSGBOX, "ANTI-HILE DEVREDE!", " Sunucudan Kicklendiniz! \n Kickleyen: Sistem \n Kicklenme Gerekçeniz: Hile Kullanimi \n ", "Kapat", "");
			Kick(i);
		}
		if (GetPlayerSpeed2(i) > 250 && PlayerData[i][pAdmin] < 1)
		{
		    if (!IsAPlane(GetPlayerVehicleID(i)))
		    {
		        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý kiþi hýz hilesi kullanýyor!", ReturnName(i, 0));
            new msg[128];
	        format(msg, sizeof (msg), "%s adli oyuncu hiz hilesi kullandi ve sistem tarafindan atildi.", ReturnName(i));
		        Dialog_Show(i, Antihile, DIALOG_STYLE_MSGBOX, "ANTI-HILE DEVREDE!", " Sunucudan Kicklendiniz! \n Kickleyen: Sistem \n Kicklenme Gerekçeniz: Hile Kullanimi \n ", "Kapat", "");
		        KickEx(i);
		        Log_Write("logs/cheat_log.txt", "[%s] %s has possibly used speed hacks (%.0f kmh).", ReturnDate(), ReturnName(i, 0), GetVehicleSpeed(GetPlayerVehicleID(i)));
			}
		}
		if(PlayerData[i][pChannel] == 911 && GetFactionType(i) != FACTION_POLICE)
		{
		    PlayerData[i][pChannel] = 0;
		}
		if(PlayerData[i][pChannel] == 666 && GetFactionType(i) != FACTION_INTEL)
		{
		    PlayerData[i][pChannel] = 0;
		}
		if(PlayerData[i][pChannel] == 910 && GetFactionType(i) != FACTION_AKADEMI)
		{
		    PlayerData[i][pChannel] = 0;
		}
		if (PlayerData[i][pPicking])
		{
			if ((id = PlayerData[i][pPickCar]) != -1)
			{
			    if (Car_Nearest(i) != id)
			    {
			        PlayerData[i][pPicking] = 0;
			        PlayerData[i][pPickCar] = -1;
			        PlayerData[i][pPickTime] = 0;
				}
				else
				{
				    PlayerData[i][pPickTime]++;

				    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Kiriliyor... %d", PlayerData[i][pPickSure] - PlayerData[i][pPickTime]);
					GameTextForPlayer(i, str, 1000, 3);
					TogglePlayerControllable(i, 0);

					if (PlayerData[i][pPickTime] >= PlayerData[i][pPickSure])
					{
                        static
					        engine, lights, alarm, doors, bonnet, boot, objective;

	    				GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
					    SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);

                        PlayerData[i][pPicking] = 0;
                        PlayerData[i][pPickCar] = -1;
                        PlayerData[i][pPickTime] = 0;

                        CarData[id][carLocked] = 0;
						Car_Save(id);

					    SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** %s aracýn kilidini kýrdý.", ReturnName(i, 0));
					    TogglePlayerControllable(i, 1);
					    ClearAnimations(i);
					    ShowPlayerFooter(i, "Kilit ~g~kirildi~w~!");
					}
				}
		    }
		}
		if (PlayerData[i][pTazer] && !PlayerData[i][pKartusHazir])
		{
		    PlayerData[i][pKartusSure]--;
		    SetPlayerArmedWeapon(i, 0);
	        if(GetPlayerWeapon(i) == 23 )
            {
	    	SetPlayerArmedWeapon(i, 0);
	        }
		    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Kartus dolduruluyor... %d saniye", PlayerData[i][pKartusSure]);
			GameTextForPlayer(i, str, 1000, 3);
			if (PlayerData[i][pKartusSure] <= 0)
			{
				PlayerData[i][pKartusHazir] = true;
                PlayerData[i][pKartusSure] = 10;
                ClearAnimations(i);
			    GameTextForPlayer(i, "~G~KARTUS DOLDU!", 1000, 3);
			}
		}
		if (PlayerData[i][pBaygin])
		{
		    PlayerData[i][pBayginSure]++;
		    //new strs[24];
		//    format(strs, 24, "Bu þahýs sistemsel yaralý!", i);
          //  SetPlayerChatBubble(i, strs, COLOR_RED, 10.0, 1500);
            SetPlayerHealth(i, 1000);

			//format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~~r~BAYGIN: ~y~%d", BAYGIN_SURE - PlayerData[i][pBayginSure]);
		//	PlayerTextDrawShow(i, Baygin[i]);
		//	format(str, sizeof(str), "BAYGIN: %d", BAYGIN_SURE - PlayerData[i][pBayginSure]);
	//		PlayerTextDrawSetString(i, Baygin[i], str);
		//	GameTextForPlayer(i, str, 1000, 3);

            ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 3.1, 0, 1, 1, 1, 900000, 1);

			if (PlayerData[i][pBayginSure] >= BAYGIN_SURE)
			{
                PlayerData[i][pBaygin] = false;
               // PlayerTextDrawHide(i, Baygin[i]);
                PlayerData[i][pBayginSure] = 0;
                PlayerData[i][pKilled] = 0;
                PlayerData[i][pGodMode] = 0;
                DestroyDynamic3DTextLabel(PlayerData[i][oYarali]);
               	format(yarali, sizeof(yarali), "", playerid);
				PlayerData[playerid][oYarali] = CreateDynamic3DTextLabel(yarali, COLOR_RED, 0.0, 0.0, 0.3, 10.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1);
                SetCameraBehindPlayer(i);
            //    ShowHungerTextdraw(i, 1);
				ClearAnimations(i);
				SetPlayerHealth(i, 25);
				TogglePlayerControllable(i, 1);
			    //ShowPlayerFooter(i, "~r~Artik baygin degilsin!");
		    }
		}
		if (PlayerData[i][pImmobing])
		{
			if ((id = PlayerData[i][pImmobCar]) != -1)
			{
			    if (!IsPlayerInVehicle(i, CarData[id][carVehicle]))
			    {
			        PlayerData[i][pImmobing] = 0;
			        PlayerData[i][pImmobCar] = -1;
			        PlayerData[i][pImmobTime] = 0;
				}
				else
				{
				    PlayerData[i][pImmobTime]++;

				    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Duzkontak yapiliyor... %d", PlayerData[i][pImmobSure] - PlayerData[i][pImmobTime]);
					GameTextForPlayer(i, str, 1000, 3);

					if (PlayerData[i][pImmobTime] >= PlayerData[i][pImmobSure])
					{
                        static
					        engine, lights, alarm, doors, bonnet, boot, objective;

	    				GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
					    SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);

                        PlayerData[i][pImmobing] = 0;
                        PlayerData[i][pImmobCar] = -1;
                        PlayerData[i][pImmobTime] = 0;

						SetEngineStatus(CarData[id][carVehicle], true);
						Car_Save(id);
                        TogglePlayerControllable(i, 1);
					    SendNearbyMessage(i, 30.0, COLOR_PURPLE, "> %s aracýn motorunu çalýþtýrdý.", ReturnName(i, 0));
					}
				}
		    }
		}
		if (PlayerData[i][pHospital] != -1)
		{
			PlayerData[i][pHospitalTime]++;

			format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Kurtariliyor... %d", 15 - PlayerData[i][pHospitalTime]);
			GameTextForPlayer(i, str, 1000, 3);

			ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

			if (PlayerData[i][pHospitalTime] >= 15)
			{
       			JBC_SetPlayerPos(i, 1189.8380,-1325.3081,13.5672);
			    TogglePlayerControllable(i, 1);
			    SetPlayerVirtualWorld(i, 0);
			    SendServerMessage(i, "Kurtarýldýn ve en yakýn hastaneye býrakýldýn.");
			    if(PlayerData[i][pWantedLevel] >= 1)
			    {
			    SendServerMessage(i, "All Saints Hastanesi tarafýndan arandýðýnýz bilgisi polis departmanýna bildirildi!");
                SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "%s adlý oyuncu All Saints Hastanesine spawn oldu ve aranýyor!", ReturnName(i));
                }
			    ResetWeapons(i);
			    ObjeleriYukle(i);
			    GameTextForPlayer(i, " ", 1, 3);
			    PlayerData[i][pHospitalInt] = PlayerData[i][pHospital];
			    PlayerData[i][pHospital] = -1;
			    PlayerData[i][pKilled] = false;
			    PlayerData[i][pHospitalTime] = 0;
			}
		}
		else if (PlayerData[i][pMuted] && PlayerData[i][pMuteTime] > 0)
		{
		    PlayerData[i][pMuteTime]--;

		    if (!PlayerData[i][pMuteTime])
		    {
				PlayerData[i][pMuted] = 0;
				PlayerData[i][pMuteTime] = 0;
		    }
		}
		else if (PlayerData[i][pDMUyari] > 0 && PlayerData[i][pDMUyariSure] > 0)
		{
  			PlayerData[i][pDMUyariSure]--;

		    if (!PlayerData[i][pDMUyariSure])
		    {
				PlayerData[i][pDMUyari] = 0;
				PlayerData[i][pDMUyariSure] = 0;
		    }
		}
		else if (PlayerData[i][pGraffiti] != -1 && PlayerData[i][pGraffitiTime] > 0)
		{
			if (Graffiti_Nearest(i) != PlayerData[i][pGraffiti])
			{
			    PlayerData[i][pGraffiti] = -1;
                PlayerData[i][pGraffitiTime] = 0;
			}
			else
			{
	            PlayerData[i][pGraffitiTime]--;

	            if (PlayerData[i][pGraffitiTime] < 1)
				{
				    strunpack(str, PlayerData[i][pGraffitiText]);
	                format(GraffitiData[PlayerData[i][pGraffiti]][graffitiText], 64, str);

	                strunpack(str, PlayerData[i][pGraffitiFont]);
                    format(GraffitiData[PlayerData[i][pGraffiti]][graffitiFont], 64, str);
				    GraffitiData[PlayerData[i][pGraffiti]][graffitiColor] = PlayerData[i][pGraffitiColor];

					Graffiti_Refresh(PlayerData[i][pGraffiti]);
				    Graffiti_Save(PlayerData[i][pGraffiti]);

				    ClearAnimations(i);
					SendNearbyMessage(i, 30.0, COLOR_PURPLE, "> %s graffitiyi bitirir.", ReturnName(i, 0));

	                PlayerData[i][pGraffiti] = -1;
	                PlayerData[i][pGraffitiTime] = 0;
				}
			}
		}
		else if (PlayerData[i][pSpamCount] > 0)
		{
		    PlayerData[i][pSpamCount]--;
		}
		else if (PlayerData[i][pCommandCount] > 0)
		{
		    PlayerData[i][pCommandCount]--;
		}
		else if (PlayerData[i][pVendorTime] > 0)
		{
		    PlayerData[i][pVendorTime]--;
		}
		else if (PlayerData[i][pDrinkTime] > 0)
		{
		    PlayerData[i][pDrinkTime]--;
		}
		else if (PlayerData[i][pAdTime] > 0)
		{
		    PlayerData[i][pAdTime]--;
		}
		else if (PlayerData[i][pSpeedTime] > 0)
		{
		    PlayerData[i][pSpeedTime]--;
		}
		else if (PlayerData[i][pBleeding] && PlayerData[i][pBleedTime] > 0)
		{
		    if (--PlayerData[i][pBleedTime] == 0)
		    {
		        CanDegistir(i, ReturnHealth(i) - 3.0);
			    PlayerData[i][pBleedTime] = 10;

			    CreateBlood(i);
			    SetTimerEx("HidePlayerBox", 500, false, "dd", i, _:ShowPlayerBox(i, 0xFF000066));
			}
		}
		else if (PlayerData[i][pFingerTime] > 0)
		{
		    PlayerData[i][pFingerTime]--;

		    if (!PlayerData[i][pFingerTime] && DroppedItems[PlayerData[i][pFingerItem]][droppedModel] && IsPlayerInRangeOfPoint(i, 1.5, DroppedItems[PlayerData[i][pFingerItem]][droppedPos][0], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][1], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][2]))
		    {
		        SendServerMessage(i, "Parmak izi bulundu: %s.", DroppedItems[PlayerData[i][pFingerItem]][droppedPlayer]);
                PlayerData[i][pFingerItem] = -1;
			}
		}
		else if (PlayerData[i][pDrugUsed] != 0 && PlayerData[i][pDrugTime] > 0)
		{
		    if (--PlayerData[i][pDrugTime] && 1 <= PlayerData[i][pDrugUsed] <= 3 && GetPlayerDrunkLevel(i) < 5000) {
		        SetPlayerDrunkLevel(i, 10000);

				PlayerTextDrawShow(i, PlayerData[i][pTextdraws][8]);

				if (PlayerData[i][pDrugUsed] == 3) {
				    SetPlayerWeather(i, -67);
				    SetPlayerTime(i, 12, 12); // Set the time (the drug weather is buggy at night)
				}
			}
		    if (1 <= PlayerData[i][pDrugUsed] <= 3 && ReturnHealth(i) <= 95) {
		    	CanDegistir(i, ReturnHealth(i) + 5);
			}
			else if (PlayerData[i][pDrugTime] > 0)
		    {
		    PlayerData[i][pDrugTime]--;
		    }
		    if (!PlayerData[i][pDrugTime])
		    {
		        new
	        		time[3];

        		gettime(time[0], time[1], time[2]);
				SetPlayerTime(i, time[0], time[1]);
				SetPlayerWeather(i, havaid);
		        SetPlayerDrunkLevel(i, 500);
				PlayerTextDrawHide(i, PlayerData[i][pTextdraws][8]);

				PlayerData[i][pDrugUsed] = 0;
		        SendServerMessage(i, "Uyuþturucunun etkisi bitti.");
		    }
		}
		else if (PlayerData[i][pStunned] > 0)
		{
            PlayerData[i][pStunned]--;

			if (GetPlayerAnimationIndex(i) != 388)
            	ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

            if (!PlayerData[i][pStunned])
            {
                TogglePlayerControllable(i, 1);
                ShowPlayerFooter(i, "Donma etkisi ~r~bitti.");
			}
		}
		else if (PlayerData[i][pDestekMute] > 0)
		{
		PlayerData[i][pDestekMute]--;
		}
		else if (PlayerData[i][pJailTime] > 0)
		{
		    static
		        hours,
		        minutes,
		        seconds;

		    PlayerData[i][pJailTime]--;

			GetElapsedTime(PlayerData[i][pJailTime], hours, minutes, seconds);

			format(str, sizeof(str), "~g~Ceza:~w~ %02d:%02d:%02d", hours, minutes, seconds);
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][70], str);

		    if (!PlayerData[i][pJailTime])
		    {
		        PlayerData[i][pPrisoned] = 0;

		        SetDefaultSpawn(i);
		        //ShowHungerTextdraw(i, 1);

				SendServerMessage(i, "Hapis süren bitti.");
				SetPlayerVirtualWorld(i, 0);
		        PlayerTextDrawHide(i, PlayerData[i][pTextdraws][70]);
			}
		}
		else if (PlayerData[i][pTrackTime] > 0 && IsPlayerConnected(PlayerData[i][pMDCPlayer]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_INTEL))
		{
		    PlayerData[i][pTrackTime]--;

		    if (!PlayerData[i][pTrackTime])
		    {
		        if ((id = House_Inside(PlayerData[i][pMDCPlayer])) != -1)
				{
				    PlayerData[i][pCP] = 1;

				    SetPlayerCheckpoint(i, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2], 3.0);
		            SendServerMessage(i, "%s'nin son görüldüðü ev \"%s\" adresindedir. (radarda iþaretlendi).", ReturnName(PlayerData[i][pMDCPlayer], 0), HouseData[id][houseAddress]);
		        }
		        else if ((id = Business_Inside(PlayerData[i][pMDCPlayer])) != -1)
		        {
		            PlayerData[i][pCP] = 1;

		            SetPlayerCheckpoint(i, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 3.0);
		            SendServerMessage(i, "%s'nin son görüldüðü iþyeri \"%s\" adresindedir. (radarda iþaretlendi).", ReturnName(PlayerData[i][pMDCPlayer], 0), BusinessData[id][bizName]);
		        }
		        else if (GetPlayerInterior(PlayerData[i][pMDCPlayer]) == 0)
		        {
		            static
		                Float:fX,
		                Float:fY,
		                Float:fZ;

		            GetPlayerPos(PlayerData[i][pMDCPlayer], fX, fY, fZ);
		            PlayerData[i][pCP] = 1;

                    SetPlayerCheckpoint(i, fX, fY, fZ, 3.0);
		            SendServerMessage(i, "%s'nin son görüldüðü yer \"%s\" adresindedir. (radarda iþaretlendi).", ReturnName(PlayerData[i][pMDCPlayer], 0), GetLocation(fX, fY, fZ));
		        }
		        else
		        {
		            SendServerMessage(i, "Yer bulunamadý, %s; yer bilgisine ulaþýlamýyor. (interior içinde).", ReturnName(PlayerData[i][pMDCPlayer], 0));
				}
			}
		}
		else if (PlayerData[i][pCooking] && IsPlayerSpawnedEx(i))
		{
		    PlayerData[i][pCookingTime]--;

		    if (House_Inside(i) == PlayerData[i][pCookingHouse])
		    {
			    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~~h~Pisiriliyor...~w~ %d saniye", PlayerData[i][pCookingTime]);
			    GameTextForPlayer(i, str, 1200, 3);
			}
		    if (PlayerData[i][pCookingTime] < 1)
		    {
		        if (House_Inside(i) != PlayerData[i][pCookingHouse])
		        {
		            SendServerMessage(i, "Þu anda baþka birþey piþiriliyor.");
		        }
		        else
				{
					switch (PlayerData[i][pCooking])
		        	{
                    	case 1:
		            	{
		               	    id = Inventory_Add(i, "Pismis Hamburger", 2703, 1);

		               	    if (id == -1)
		               	        return SendErrorMessage(i, "Envanterinizde boþ yer yok.");

		                	SendNearbyMessage(i, 30.0, COLOR_GREEN, "** Hamburger ýsýtýldý! (( %s ))", ReturnName(i, 0));
		                	SendServerMessage(i, "Pismis Burger Envantere Eklendi.");
		            	}
			            case 2:
			            {
			                id = Inventory_Add(i, "Pismis Pizza", 2702, 6);

			                if (id == -1)
		               	        return SendErrorMessage(i, "Envanterinizde boþ yer yok.");

		    	            SendNearbyMessage(i, 30.0,COLOR_GREEN, "** Pizza piþti! (( %s ))", ReturnName(i, 0));
		    	            SendServerMessage(i, "The Pismis Pizza was added to your inventory.");
		        	    }
					}
				}
                PlayerData[i][pCooking] = 0;
                PlayerData[i][pCookingTime] = 0;
                PlayerData[i][pCookingHouse] = -1;
		    }
		}
		else if (PlayerData[i][pDrivingTest] && IsPlayerInVehicle(i, PlayerData[i][pTestCar]))
		{
		    /*if (!IsPlayerInRangeOfPoint(i, 1000.0, g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][2]))
			{
		        CancelDrivingTest(i);
				SendClientMessage(i, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Sürüþ alanýndan ayrýldýðýn için test iptal oldu.");
    		}*/
			if (GetPlayerSpeed2(i) >= 75.0)
   			{
				if (++PlayerData[i][pTestWarns] < 3)
				{
    				SendClientMessageEx(i, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Aþýrý hýz yapýyorsun, yavaþla! (%d/3)", PlayerData[i][pTestWarns]);
        		}
	       		else
				{
    				CancelDrivingTest(i);
        			SendClientMessage(i, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Aþýrý hýz yaptýðýn için test iptal oldu.");
			    }
			}
		}
		else if (IsPlayerInsideTaxi(i))
		{
		    if(PlayerData[i][pTaxiFee] >= GetMoney(i)) {
				LeaveTaxi(i, GetVehicleDriver(GetPlayerVehicleID(i)));
				RemovePlayerFromVehicle(i);
		        SendServerMessage(GetVehicleDriver(GetPlayerVehicleID(i)), "Yolcunun taksi ücretini ödeyecek parasý olmadýðý için taksiden indirdin.");
		        SendServerMessage(i, "Taksi ücretini ödeyecek paran olmadýðý için taksiden indin.");
			}
            DisablePlayerCheckpoint(i); DisablePlayerCheckpoint(GetVehicleDriver(GetPlayerVehicleID(i)));
   		    PlayerData[i][pTaxiTime]++;

		    if (PlayerData[i][pTaxiTime] == 10)
		    {
		        PlayerData[i][pTaxiTime] = 0;
		        PlayerData[i][pTaxiFee] += 7;
		    }
		    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~$%d...~w~ %d saniye", PlayerData[i][pTaxiFee], PlayerData[i][pTaxiTime]);

			GameTextForPlayer(i, str, 1100, 3);
			GameTextForPlayer(GetVehicleDriver(GetPlayerVehicleID(i)), str, 1100, 3);
		}
			if (PlayerData[i][pCreated] && !PlayerData[i][pTutorial] && !PlayerData[i][pJailTime] && PlayerData[i][pHospital] == -1 && PlayerData[i][pCreated] && IsPlayerSpawnedEx(i))
		{
		static
	    Float:health;
		    GetPlayerHealth(i, health);
}
		if ((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && PlayerData[i][pBoombox] != id && strlen(BoomboxData[id][boomboxURL]) && !IsPlayerInAnyVehicle(i))
		{
		    strunpack(str, BoomboxData[id][boomboxURL]);
		    PlayerData[i][pBoombox] = id;

		    StopAudioStreamForPlayer(i);
		    PlayAudioStreamForPlayer(i, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
		}
		else if (PlayerData[i][pBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 30.0, BoomboxData[PlayerData[i][pBoombox]][boomboxPos][0], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][1], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][2]))
		{
		    PlayerData[i][pBoombox] = INVALID_PLAYER_ID;
		    StopAudioStreamForPlayer(i);
		}
        if (PlayerData[i][pHealthTime] > 0)
        {
            PlayerData[i][pHealthTime]--;
		}
		if (PlayerData[i][pRangeBooth] != -1 && !IsPlayerInRangeOfPoint(i, 3.0, arrBoothPositions[PlayerData[i][pRangeBooth]][0], arrBoothPositions[PlayerData[i][pRangeBooth]][1], arrBoothPositions[PlayerData[i][pRangeBooth]][2]))
		{
			Booth_Leave(i);
		}


	/*	format(str, sizeof(str), "%d%c", PlayerData[i][pHunger], '%');
		PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][63], str);

		format(str, sizeof(str), "%d%c", PlayerData[i][pThirst], '%');
		PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][64], str);*/

	}

	TotalledCheck();
	RestartCheck();
	RespawnCheck();
    TollUpdate();


    for (new fabrikaid = 0; fabrikaid != MAX_FABRIKA; fabrikaid ++) if(Fabrikalar[fabrikaid][fabrikaVarmi] && Fabrika_EleGeciren(fabrikaid) != -1)
   	{
		Fabrikalar[fabrikaid][fabrikaCaptureTime]--;
		new tip[256], birlikad[256];
  		new sahipbirlik = GetFactionByID(Fabrikalar[fabrikaid][fabrikaBirlik]);
		if(Fabrikalar[fabrikaid][fabrikaBirlik] != -1) format(birlikad, sizeof(birlikad), "%s", FactionData[sahipbirlik][factionName]);
		else format(birlikad, sizeof(birlikad), "Yok");
		if(Fabrikalar[fabrikaid][fabrikaTip] == 1) format(tip, sizeof(tip), "Atýk Fabrikasý");
        if(Fabrikalar[fabrikaid][fabrikaTip] == 2) format(tip, sizeof(tip), "Tohum Fabrikasý");
        new label[1024];
		format(label, sizeof(label), "{FF6347}Ele geçiriliyor...\n%s\n\n{FFEA47}[ %s ]\nEle Geçiren: {FFFFFF}%s\n{FFEA47}Tip: {FFFFFF}%s\n{FFEA47}Üretim Hýzý: {FFFFFF}%.2f", ConvertToMinutes(Fabrikalar[fabrikaid][fabrikaCaptureTime]), Fabrikalar[fabrikaid][fabrikaAd], birlikad, tip, Fabrikalar[fabrikaid][fabrikaUretimHizi]);
		UpdateDynamic3DTextLabelText(Fabrikalar[fabrikaid][fabrikaText3D], COLOR_WHITE, label);
		if(Fabrikalar[fabrikaid][fabrikaCaptureTime] <= 0)
		{
			new elegeciren = Fabrika_EleGeciren(fabrikaid);
		    Fabrikalar[fabrikaid][fabrikaBirlik] = FactionData[PlayerData[elegeciren][pFaction]][factionID];
		    SendClientMessageToAllEx(COLOR_RADIO, "FABRÝKA: {FFFFFF}%s adlý oyuncu '%s' adlý fabrikayý '%s' birliði adýna ele geçirdi.", ReturnName(Fabrika_EleGeciren(fabrikaid), 0), Fabrikalar[fabrikaid][fabrikaAd], FactionData[PlayerData[Fabrika_EleGeciren(fabrikaid)][pFaction]][factionName]);
		    Fabrika_CaptureReset(fabrikaid);
		    Fabrikalar[fabrikaid][fabrikaTime] = gettime() +  (7200 * RandomEx(5, 7));
		    Fabrika_Yenile(fabrikaid);
		    Fabrika_Kaydet(fabrikaid);
		}
	}
	return 1;
}

forward UpdateTime();
public UpdateTime()
{
	static
	    time[3],
	    string[32];

	gettime(time[0], time[1], time[2]);

	if (time[0] >= 12)
		format(string, 32, "%02d:%02d PM", (time[0] == 12) ? (12) : (time[0] - 12), time[1]);

	else if (time[0] < 12)
		format(string, 32, "%02d:%02d AM", (time[0] == 0) ? (12) : (time[0]), time[1]);

	TextDrawSetString(gServerTextdraws[0], string);

	foreach (new i : Player) if (PlayerData[i][pDrugUsed] != 3) {
		SetPlayerTime(i, time[0], time[1]);
	}
	SetTimer("UpdateTime", 30000, false);
}

forward RefuelCheck();
public RefuelCheck()
{
   new panelsx,doorsx,lightsx,tiresx;
   for (new p=0; p<MAX_VEHICLES; p++)
   {
   			    if (Flasher[p] == 1)
                {
                        if (FlasherState[p] == 1)
                        {
                                GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
                                UpdateVehicleDamageStatus(p, panelsx, doorsx, 2, tiresx);
                                FlasherState[p] = 0;
                        }
                        else
                        {
                                GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
                                UpdateVehicleDamageStatus(p, panelsx, doorsx, 1, tiresx);
                                FlasherState[p] = 1;
                        }
                }
    }

	new
	    string[128];

 foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] || PlayerData[i][pRefill] == INVALID_VEHICLE_ID)
	        continue;

        if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasPump] != -1)
		{
		    PlayerData[i][pRefillPrice]++;

		    CoreVehicles[PlayerData[i][pRefill]][vehFuel] ++;
		    PumpData[PlayerData[i][pGasPump]][pumpFuel] --;

		    if (PumpData[PlayerData[i][pGasPump]][pumpExists])
			{
			    format(string, sizeof(string), "{FFFFFF}[{FFD700}Benzin Ýstasyonu{FFFFFF}]\n[/a benzin]", PlayerData[i][pGasPump], PumpData[PlayerData[i][pGasPump]][pumpFuel]);
			    UpdateDynamic3DTextLabelText(PumpData[PlayerData[i][pGasPump]][pumpText3D], COLOR_DARKBLUE, string);
			}
			if (CoreVehicles[PlayerData[i][pRefill]][vehFuel] >= 100 || GetEngineStatus(PlayerData[i][pRefill]) || !PumpData[PlayerData[i][pGasPump]][pumpExists] || PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
			{
			    GiveMoney(i, -PlayerData[i][pRefillPrice]);
			    SendServerMessage(i, "Aracýn deposu $%d'a dolduruldu.", PlayerData[i][pRefillPrice]);
			    TogglePlayerControllable(i,1);

			    if (PumpData[PlayerData[i][pGasPump]][pumpExists])
				{
					if (PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
						PumpData[PlayerData[i][pGasPump]][pumpFuel] = 0;

					BusinessData[PlayerData[i][pGasStation]][bizVault] += PlayerData[i][pRefillPrice];
					Business_Save(PlayerData[i][pGasStation]);

					Pump_Save(PlayerData[i][pGasPump]);
				}
				StopRefilling(i);
			}
		}
	}
	return 1;
}

forward FuelUpdate();
public FuelUpdate()
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsEngineVehicle(i) && GetEngineStatus(i))
	{
	    new id = Car_GetID(i);
	    if(id == -1) return 1;
	    if (CoreVehicles[i][vehFuel] > 0)
	    {
	        if(CarData[i][carMeslek] >= 1)
	        {
	        CoreVehicles[i][vehFuel] = 100;
			}
			if(CarData[i][carFaction] == 1)
	        {
	        CoreVehicles[i][vehFuel] = 100;
			}
			CoreVehicles[i][vehFuel]--;


			if (CoreVehicles[i][vehFuel] >= 1 && CoreVehicles[i][vehFuel] <= 5)
			{
			    SendClientMessage(GetVehicleDriver(i), COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Bu aracýn benzini bitmek üzere, bir benzin istasyonuna uðra!");
			}
		}
		if (CoreVehicles[i][vehFuel] <= 0)
		{
		    CoreVehicles[i][vehFuel] = 0;
		    SetEngineStatus(i, false);
		}
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{

    if(GetVehicleModel(vehicleid) == 454)
    {
    	for(new i=0; i<MAX_PLAYERS; i++)
		{
			if(HangiTropic[i] == vehicleid)
        	{
				CanDegistir(i, 0);
				SendServerMessage(i, "Bulunduðunuz gemi patladý.");
			}
		}
	}
    if(GetVehicleModel(vehicleid) == 508)
	{
		new Float: hp;
		GetVehicleHealth(vehicleid, hp);

		for(new i; i < GetMaxPlayers(); ++i)
		{
		    if(!IsPlayerConnected(i)) continue;

		    if(KaravanID[i] == vehicleid)
			{
				CanDegistir(i, -1.0);
				if(hp < 250.0)
				{
					CreateExplosionForPlayer(i, 2513.5132, -1729.1434, 778.7484, 11, 1.0);
					CreateExplosionForPlayer(i, 2511.60742, -1723.17603, 778.70001, 11, 1.0);
				}
			}
		}
	}

    if(IsValidObject(ShipObject[vehicleid]))
    {
            DestroyVehicle(vehicleid);
            DestroyObject(ShipObject[vehicleid]);
            ShipObject[vehicleid] = INVALID_OBJECT_ID;
    }

	if (CoreVehicles[vehicleid][vehTemporary])
	{
	    CoreVehicles[vehicleid][vehTemporary] = false;
	    DestroyVehicle(vehicleid);
	}
	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    Crate_Delete(i);
	}
	for (new i = 0; i != MAX_KERESTE; i ++) if (Keresteler[i][keresteVarmi] && Keresteler[i][keresteVehicle] == vehicleid) {
	    Kereste_Sil(i);
	}
	RespawnVehicle(vehicleid);
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    GiveMoney(playerid, -50);
	SendServerMessage(playerid, "Aracýn tamir ücreti için $50 ödediniz.");
	new id = Car_GetID(vehicleid);

	if(id != -1)
		ChangeVehicleColor(vehicleid, CarData[id][carColor1], CarData[id][carColor2]);

	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	SetVehiclePaintjob(vehicleid, paintjobid);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	new modelid = GetVehicleModel(vehicleid);
	if(!IsLegalComponent(modelid, componentid))
	{
	    Kick(playerid);
	    return 0;
	}

 	new
		id = Car_GetID(vehicleid);

   	if (!Car_IsOwner(playerid, id)) return 0;

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = componentid;
	    Car_Save(id);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{

	CarUpdate[vehicleid] = 0;
	tiryuk[vehicleid] = 0;
	yuktip[vehicleid] = 0;
	vehiclecallsign[vehicleid] = 0;
    if (CoreVehicles[vehicleid][vehTemporary])
	{
	    CoreVehicles[vehicleid][vehTemporary] = false;
	    DestroyVehicle(vehicleid);
	}
    for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    Crate_Delete(i);
	}
	for (new i = 0; i != MAX_KERESTE; i ++) if (Keresteler[i][keresteVarmi] && Keresteler[i][keresteVehicle] == vehicleid) {
	    Kereste_Sil(i);
	}
	if (IsValidObject(CoreVehicles[vehicleid][vehCrate]) && GetVehicleModel(vehicleid) == 530)
	    DestroyObject(CoreVehicles[vehicleid][vehCrate]);

	ResetVehicle(vehicleid);
	return 1;
}
/*
public OnRconLoginAttempt(ip[], password[], success)
{
	if (!success)
	{
	    foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 6) {
	        _Kick(i);
	    }
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: RCON login attempt failed from \"%s\".", ip);
	    Log_Write("logs/rcon_log.txt", "[%s] RCON login attempt failed from \"%s\".", ReturnDate(), ip);
	}
	else
	{
	    foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 6) {
	        Blacklist_Add(ip, PlayerData[i][pUsername], "Server", "Unauthorized RCON");

	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s was banned for logging into RCON without authorization.", ReturnName(i, 0));
	    	Log_Write("logs/rcon_log.txt", "[%s] %s (%s) was banned for an unauthorized RCON login.", ReturnDate(), ReturnName(i, 0), ip);

			break;
		}
	}
	return 1;
}*/

public OnPlayerStreamIn(playerid, forplayerid)
{
    if (PlayerData[playerid][pMaskOn])
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	else
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);

	return 1;
}

forward AktorEtkilesim(playerid, actorid, ad[]);
public AktorEtkilesim(playerid, actorid, ad[])
{
	if (!strcmp(ad, "Balýkçý", true)) {
	   	Dialog_Show(playerid, Balikci, DIALOG_STYLE_LIST, "{FF6347}{ Balýkçý:{FFFFFF} Ne istiyorsun? }", "Balýk satmak istiyorum.\nBalýk piyasasý ne durumda?\nYem almak istiyorum.", "Seç", "{FF6347}Iptal");
	}
	else if (!strcmp(ad, "Resepsiyonist", true)) {
	   	Dialog_Show(playerid, OdaTut, DIALOG_STYLE_MSGBOX, "{FF6347}{ Resepsiyonist:{FFFFFF} Oda tutmak mý istiyorsunuz? }", "{2ECC71}%s {FFFFFF}ödeyerek otelimizde 2 saatlik oda tutabilirsiniz, tutmak istiyor musunuz?", "Evet", "{FF6347}Hayýr", FormatNumber(OTEL_KIRAUCRET));
	}
	else if (!strcmp(ad, "Bilet Satýcýsý", true)) {
	   	Dialog_Show(playerid, SeyehatBiletiAl, DIALOG_STYLE_MSGBOX, "{FF6347}{ Bilet Satýcýsý:{FFFFFF} Buyrun? }", "{2ECC71}%s {FFFFFF}ödeyerek seyehat bileti alabilirsiniz, almak istiyor musunuz?", "Evet", "{FF6347}Hayýr", FormatNumber(SEYEHAT_BILETUCRET));
	}
	else if (!strcmp(ad, "Sex Shop Tezgahtarý", true)) {
       	Dialog_Show(playerid, SexShop, DIALOG_STYLE_TABLIST, "{FF6347}{ Sex Shop Tezgahtarý:{FFFFFF} Ne alacaktýnýz? }", "Mor Dildo\t"GR"$25\nDildo\t"GR"$15\nVibrator\t"GR"$50\nGümüþ Vibrator\t"GR"$125", "Satýn Al", "{FF6347}Ayrýl");
	}
 else if (!strcmp(ad, "Silah Tüccari", true)) { // Silah Tüccari
       Dialog_Show(playerid, MermiTuccari, DIALOG_STYLE_TABLIST, "{FF6347}Mermi Tüccarý:{FFFFFF} Ne alacaktýnýz? ", "Þarjör\t"GR"300$\nCephane Kartuþu\t"GR"1200$\nBicak\t"GR"250$", "Satýn Al", "{FF6347}Ayrýl");
	}
	else if (!strcmp(ad, "Silah Satýcýsý", true)) {
	new factionid = PlayerData[playerid][pFaction];
    if (factionid == 0)
		return SendErrorMessage(playerid, "Devlet çalýþanlarý bu sistemi kullanamaz.");
  	if (factionid == 1)
		return SendErrorMessage(playerid, "Devlet çalýþanlarý bu sistemi kullanamaz.");
  	if (factionid == 2)
		return SendErrorMessage(playerid, "Devlet çalýþanlarý bu sistemi kullanamaz.");
  	if (factionid == 3)
		return SendErrorMessage(playerid, "Devlet çalýþanlarý bu sistemi kullanamaz.");
       Dialog_Show(playerid, Kacakci, DIALOG_STYLE_LIST, "Silah Satýcýsý", "9mm\t9.000$\nDesert Eagle\t25.000$\nShotgun\t15.000$\nUzi\t20.000$\nMP5\t25.000$\nTec-9\t20.000$\nAK-47\t40.000$", "Satýn Al", "Iptal");
	}
	else if (!strcmp(ad, "Keþ", true)) {
	new factionid = PlayerData[playerid][pFaction];
	if (factionid == -1) return SendErrorMessage(playerid, "Þu anda hiçbir birliðe üye deðilsin.");
	if(FactionData[factionid][gTip] != 1) return SendErrorMessage(playerid, "Bulunduðun birlik çete tipi deðil!");
	if (FactionData[factionid][factionUOnay] != 1) return SendErrorMessage(playerid, "Bulunduðun birliðin uyuþturucu onayý mevcut deðil.");
    Dialog_Show(playerid, Uyusturucu, DIALOG_STYLE_LIST, "Keþ", "Skunk Tohumu\t1 Adet(15.000$)\nMarijuana Tohumu\t1 Adet(20.000$)\nLSD\t10 Adet(2.500$)\nEkstazi\t10 Adet(3.000$)", "Satýn Al", "Iptal");
	}
	else if (!strcmp(ad, "Tarifeci", true)) {
	if (PlayerData[playerid][pSmsHakki] > 1) return SendErrorMessage(playerid, "SMS hakkýn bitmemiþ!");
    Dialog_Show(playerid, Tarife, DIALOG_STYLE_LIST, "LS Tarife", "Ýndirimli Tarife(125$)\t25 adet SMS hakký", "Satýn Al", "Iptal");
	}
	else if (!strcmp(ad, "Saha Görevlisi", true)) {
        new Float:vehpos[3];
		GetVehiclePos(Shamal, vehpos[0], vehpos[1], vehpos[2]);
		SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Saha Görevlisi] »:{FFFFFF} Uçak þu anda aldýðýmýz haberlere göre %s bölgesinde.", GetLocation(vehpos[0], vehpos[1], vehpos[2]));
	}
	else if (!strcmp(ad, "Halkla Ýliþkiler Sorumlusu", true)) {
		new baslik[256], string[1024];
		strcat(string, "Ýþlem Adý\tDurum\n");
		strcat(string, "Kiþisel Cezalar\n");
	 	strcat(string, "Araç Cezalarý\n");
		strcat(string, "Boþanma Ýþlemleri {2ECC71}[$1,500]\n");
		strcat(string, "Ödenmemiþ Vergiler\n");
		strcat(string, "Pasaport Ýþlemleri {2ECC71}[$5,000]\n");
		format(baslik, sizeof(baslik), "{2F4F4F}Hükümet {A9A9A9}(#%d - %s)", PlayerData[playerid][pID], ReturnName(playerid, 0));
		return Dialog_Show(playerid, Hukumet, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Tamam", "Kapat");
	}
	else if (!strcmp(ad, "Hastane Görevlisi", true)) {
		new baslik[256], string[1024];
		strcat(string, "Ýþlem Adý\tDurum\n");
		strcat(string, "Cinsiyet Operasyonu  {2ECC71}[ $3,500 ]\n");
 		format(baslik, sizeof(baslik), "{2F4F4F}Hastane Görevlisi {A9A9A9}(#%d - %s)", PlayerData[playerid][pID], ReturnName(playerid, 0));
		return Dialog_Show(playerid, Hastane, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Tamam", "Kapat");
	}
	else if (!strcmp(ad, "Dövüþ Eðitmeni", true)) {
	   	Dialog_Show(playerid, dovusstil, DIALOG_STYLE_TABLIST, "{FF6347}{ Dövüþ Eðitmeni:{FFFFFF} Ne öðrenmek istiyorsun? }", "Elbow\t$12000\nBox\t$12000\nGrabkick\t$12000\nKnee-head\t$12000\nKung-fu\t$12000\nNormal\tÜcretsiz\n", "Öðren", "{FF6347}Iptal");
	}
	else if (!strcmp(ad, "Tüccar", true)) {
	   	SendErrorMessage(playerid, "Bu aktörün etkileþimi yok.");
	}
	return 1;
}

forward YarisBaslat(y);
public YarisBaslat(y)
{
    if(Yarislar[y][yarisGeriSayim] == 3)
    {

        foreach(new i : Player) {
            if(PlayerData[i][pYaris] == y || PlayerData[i][pYarisHazirliyormu] == y) {
            	GameTextForPlayer(i, "~r~3", 1000, 3);
            	TogglePlayerControllable(i, 0);
            	PlayerData[i][pYarisAdim] = 0;
            	SetPlayerRaceCheckpoint(i, 0, Yarislar[i][yarisCPx][0], Yarislar[i][yarisCPy][0], Yarislar[i][yarisCPz][0], Yarislar[i][yarisCPx][1], Yarislar[i][yarisCPy][1], Yarislar[i][yarisCPz][1], 5.0);
            }
        }
        Yarislar[y][yarisGeriSayim]--;
        SetTimerEx("YarisBaslat", 1000, false, "d", y);
    }
    else if(Yarislar[y][yarisGeriSayim] == 2)
    {
        foreach(new i : Player) {
            if(PlayerData[i][pYaris] == y || PlayerData[i][pYarisHazirliyormu] == y) {
            	GameTextForPlayer(i, "~y~2", 1000, 3);
            	TogglePlayerControllable(i, 0);
            }
        }
        Yarislar[y][yarisGeriSayim]--;
        SetTimerEx("YarisBaslat", 1000, false, "d", y);
    }
    else if(Yarislar[y][yarisGeriSayim] == 1)
    {
        foreach(new i : Player) {
            if(PlayerData[i][pYaris] == y || PlayerData[i][pYarisHazirliyormu] == y) {
            	GameTextForPlayer(i, "~y~1", 1000, 3);
            	TogglePlayerControllable(i, 0);
            }
        }
        Yarislar[y][yarisGeriSayim]--;
        SetTimerEx("YarisBaslat", 1000, false, "d", y);
    }
    else if(Yarislar[y][yarisGeriSayim] <= 0)
    {
        foreach(new i : Player) {
            if(PlayerData[i][pYaris] == y || PlayerData[i][pYarisHazirliyormu] == y) {
            	GameTextForPlayer(i, "~g~START!", 1000, 3);
            	TogglePlayerControllable(i, 1);
            }
        }
        Yarislar[y][yarisDurum] = 1;
        Yarislar[y][yarisGeriSayim] = 3;
        //CallLocalFunction("YarisBaslat", "d", y);
    }
	return 1;
}


forward MaasSifirla(playerid);
public MaasSifirla(playerid)
{
    PlayerData[playerid][pPay] = false;
    PlayerData[playerid][pPayCode] = 0;
    for (new i = 0; i < 4; i ++) {
		TextDrawHideForPlayer(playerid, MaasEkrani[i]);
	}
	for (new i = 0; i < 7; i ++) {
		PlayerTextDrawHide(playerid, MaasEkrani_P[playerid][i]);
	}
	return 1;
}


forward PaynSprayTamir(playerid, vehicleid);
public PaynSprayTamir(playerid, vehicleid)
{
    TogglePlayerControllable(playerid, 1);
	RepairVehicle(vehicleid);
	GameTextForPlayer(playerid, "~g~TAMIR EDILDI!", 2 * 1000, 3);
	return 1;
}

forward OnPlayerUseItem(playerid, itemid, name[]);
public OnPlayerUseItem(playerid, itemid, name[])
{
    if (IsFurnitureItem(name))
	{
        new id = House_Inside(playerid);

        if (id == -1)
            return SendErrorMessage(playerid, "Mobilya yerleþtirmek için herhangi bir evin içinde olmalýsýnýz.");

		if (!House_IsOwner(playerid, id))
		    return SendErrorMessage(playerid, "Sadece kendi evinize mobilya yerleþtirebilirsiniz !");

		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        x += 5.0 * floatsin(-angle, degrees);
        y += 5.0 * floatcos(-angle, degrees);

		if (Furniture_GetCount(id) > MAX_HOUSE_FURNITURE)
		    return SendErrorMessage(playerid, "You can only have %d furniture items in your house.", MAX_HOUSE_FURNITURE);

		new furniture = Furniture_Add(id, name, InventoryData[playerid][itemid][invModel], x, y, z, 0.0, 0.0, angle);

		if (furniture == -1)
		    return SendErrorMessage(playerid, "Sunucu mobilya sýnýrýna ulaþtý.");

		Inventory_Remove(playerid, name);
		PlayerData[playerid][pEditFurniture] = furniture;

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, \"%s\" adlý mobilyayý eve yerleþtirir.", ReturnName(playerid, 0), name);
		SetPVarInt(playerid, "MOBILYA", 1);
		EditDynamicObject(playerid, FurnitureData[furniture][furnitureObject]);
	}
	else if (!strcmp(name, "Kalas", true)) {
	    SendServerMessage(playerid, "Kamp ateþi koymak için, /kampatesi komutunu kullanabilirsin.");
	}
	else if (!strcmp(name, "Nargile", true)) {
	    SendServerMessage(playerid, "Nargile yakmak için /nargile.");
	}
	else if (!strcmp(name, "Sarjor", true)) {
	    cmd_sarjor(playerid, "\1");
	}
	else if (!strcmp(name, "Boombox", true)) {
	    cmd_boombox(playerid, "koy");
	}
	else if (!strcmp(name, "Sirtcantasi", true)) {
	    cmd_canta(playerid, "\1");
	}
	else if (!strcmp(name, "Sigara", true)) {
	    cmd_sigara(playerid, "\1");
	}
    else if (!strcmp(name, "Telefon", true)) {
        cmd_telefon(playerid, "\1");
    }
    else if (!strcmp(name, "Telsiz", true)) {
        SendSyntaxMessage(playerid, "[KULLANIM]: '/PR [Yazý] ile konuþabilirsiniz.' ");
    }
    else if (!strcmp(name, "Benzin Kutusu", true)) {
        cmd_benzinkutusu(playerid, "\1");
    }
    else if (!strcmp(name, "GPS Cihazi", true)) {
        cmd_gps(playerid, "\1");
    }
    else if (!strcmp(name, "Marijuana", true)) {
        cmd_ukullan(playerid, "marijuana");
    }
    else if (!strcmp(name, "Kokain", true)) {
        cmd_ukullan(playerid, "kokain");
    }
    else if (!strcmp(name, "Eroin", true)) {
        cmd_ukullan(playerid, "eroin");
    }
    else if (!strcmp(name, "LSD", true)) {
        cmd_ukullan(playerid, "LSD");
    }
    else if (!strcmp(name, "Soda", true)) {
        cmd_ic(playerid, "soda");
    }
    else if (!strcmp(name, "Su", true)) {
        cmd_ic(playerid, "su");
    }
    else if (!strcmp(name, "Dondurulmus Pizza", true)) {
        cmd_pisir(playerid, "pizza");
    }
    else if (!strcmp(name, "Dondurulmus Hamburger", true)) {
        cmd_pisir(playerid, "burger");
    }
    else if (!strcmp(name, "Celik Yelek", true)) {
        cmd_celikyelek(playerid, "\1");
    }
    else if (!strcmp(name, "Cephane Kartusu", true)) {
        cmd_cephanekartusu(playerid, "\1");
    }
    else if (!strcmp(name, "Colt 45", true)) {
        EquipWeapon(playerid, "Colt 45");
    }
    else if (!strcmp(name, "Desert Eagle", true)) {
        EquipWeapon(playerid, "Desert Eagle");
    }
    else if (!strcmp(name, "Shotgun", true)) {
        EquipWeapon(playerid, "Shotgun");
    }
    else if (!strcmp(name, "Micro SMG", true)) {
        EquipWeapon(playerid, "Micro SMG");
    }
    else if (!strcmp(name, "Tec-9", true)) {
        EquipWeapon(playerid, "Tec-9");
    }
    else if (!strcmp(name, "MP5", true)) {
        EquipWeapon(playerid, "MP5");
    }
    else if (!strcmp(name, "AK-47", true)) {
        EquipWeapon(playerid, "AK-47");
    }
    else if (!strcmp(name, "Rifle", true)) {
        EquipWeapon(playerid, "Rifle");
    }
    else if (!strcmp(name, "Sniper", true)) {
        EquipWeapon(playerid, "Sniper");
    }
    else if (!strcmp(name, "Golf Club", true)) {
        EquipWeapon(playerid, "Golf Club");
    }
    else if (!strcmp(name, "Knife", true)) {
        EquipWeapon(playerid, "Knife");
    }
    else if (!strcmp(name, "Shovel", true)) {
        EquipWeapon(playerid, "Shovel");
    }
    else if (!strcmp(name, "Katana", true)) {
        EquipWeapon(playerid, "Katana");
    }
    else if (!strcmp(name, "Pismis Pizza", true))
	{
        if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Þuanda hiç aç deðilsin.");

        if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2702, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 15 > 100) ? (100) : (PlayerData[playerid][pHunger] + 15);
		Inventory_Remove(playerid, "Pismis Pizza");
		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s pizzadan bir dilim alýr ve yemeye baþlar.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Pismis Hamburger", true))
	{
	    if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Þuanda hiç aç deðilsin.");

		if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);
		Inventory_Remove(playerid, "Pismis Hamburger");
		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s elleriyle hamburgeri kavrar ve yemeye baþlar.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Sosisli", true))
	{

		if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 30 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);
		Inventory_Remove(playerid, "Sosisli");
		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s elleriyle sosisliyi kavrar ve yemeye baþlar.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Tavuk", true))
	{
	    if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Þuanda hiç aç deðilsin.");

        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);
		Inventory_Remove(playerid, "Tavuk");

		ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir parça tavuk alýr ve yemeye baþlar.", ReturnName(playerid, 0));
    }
    return 1;
}
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
    if ((weaponid >= 22 && weaponid <= 38) && PlayerData[playerid][pRangeBooth] != -1 && objectid == g_BoothObject[PlayerData[playerid][pRangeBooth]])
 	{
 	    static
	        string[128];

		PlayerPlaySound(playerid, 6401, 0.0, 0.0, 0.0);

		PlayerData[playerid][pTargets]++;
		DestroyDynamicObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

		format(string, sizeof(string), "~b~Hedefler:~w~ %d/10", PlayerData[playerid][pTargets]);
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], string);

		SetTimerEx("UpdateBooth", 3000, false, "dd", playerid, PlayerData[playerid][pRangeBooth]);
	}
	return 1;
}

public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
    if (PlayerData[playerid][pGodMode]) return 0;
    new modelid = GetPlayerVehicleID(issuerid);
if (issuerid != INVALID_PLAYER_ID && (!IsPlayerInAnyVehicle(playerid)) && GetVehicleModel(modelid) == 596 || GetVehicleModel(modelid) == 597)
	{
	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
	SendServerMessage(playerid, "(%s) LSPD aracý sana çarptýðý için etkisiz hale geldin! (15 saniye)", ReturnName(issuerid, 0));
	SendServerMessage(issuerid, "(%s) adlý þahýs 15 saniye boyunca yerde etkisiz halde kalacak!", ReturnName(playerid, 0));
	TogglePlayerControllable(playerid, 0);
	PlayerData[playerid][pStunned] = 15;
	}
if(issuerid != INVALID_PLAYER_ID && weapon == 25 && bodypart == 9)
    {
        CanDegistir(playerid, 0.0);
    }
	if(issuerid != INVALID_PLAYER_ID) {
		if (PlayerData[issuerid][pLevel] < 2)
		{
		    SendClientMessage(issuerid, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Sunucuda 2 level olmadan saldýramazsýn!");
		    PlayerData[issuerid][pDMUyari]++;
			PlayerData[issuerid][pDMUyariSure] = 5;

		    if( PlayerData[issuerid][pDMUyari] >= 5 && PlayerData[issuerid][pDMUyariSure] > 0)
		    {
		        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s 2 level olmadýðý halde insanlara zarar vermeye çalýþtýðý için oyundan atýldý.", ReturnName(issuerid, 0));
		        SendServerMessage(issuerid, "Yeni olduðunuz ve uyarýldýðýnýz halde ýsrarla kiþilere hasar vermeye çalýþtýðýnýz için oyundan atýldýnýz.");
		        KickEx(issuerid);
		    }
		    return 0;
		}
		if (PlayerData[playerid][pLevel] < 2)
		{
		    SendClientMessage(issuerid,  COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Oyunda yeni olan oyunculara zarar veremezsin!");
		    return 0;
		}
		if(hack_WeaponCode(issuerid, weapon)) return 0;
	}
    if(issuerid != INVALID_PLAYER_ID) Hasar_Ekle(playerid, bodypart, amount, issuerid, weapon);

	if(bodypart == 7 || bodypart == 8)
	{
		PlayerData[playerid][pTopallama] = true;
        SetTimerEx("TopallamaDuzelt", 60*1000, false, "d", playerid);
	}
   // kan efekti bu SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFF000066));
   	if (PlayerData[playerid][pFirstAid])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Ýlkyardým yaparken yaralandýðýn için ilkyardým iptal oldu.");

        PlayerData[playerid][pFirstAid] = 0;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
	if(playerid != INVALID_PLAYER_ID && GuvenliBolgedeyse(playerid) && GetFactionType(issuerid) != FACTION_POLICE)
	{
  		//Dialog_Show(issuerid, GBIUyari, DIALOG_STYLE_MSGBOX, "{FF0000}Güvenli Bölgedesiniz!", "{FFFFFF}Bulunduðunuz bölge güvenli bölgedir, burada kavga silah\nateþleyemezsiniz. Eðer 1 dakika içinde oyuncuya 3 kere zarar vermeye çalýþýrsanýz sistem tarafýndan\n otomatik olarak Güvenli Bölge Ýhlalinden hapse atýlýrsýnýz!", "Tamam", "");
        SendClientMessageEx(issuerid, COLOR_WHITE, "{A9C4EB}Sunucu:{FFFFFF}Güvenli bölgede birisine ateþ ettiðiniz/vurduðunuz için uyarýldýnýz. (Kalan Uyarý:%d/3).",PlayerData[issuerid][pGBWarn]);
		PlayerData[issuerid][pGBWarn]++;
		SetTimerEx("GBWarnReset", 15 * 1000, false, "d", issuerid);
		if(PlayerData[issuerid][pGBWarn] >= 5)
		{
		    new time = tickcount() - 2000;
    		if(time < Timer[issuerid][GBI]) return 1;
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s adlý oyuncuyu sistem tarafýndan 40 dakika hapse mâhkum etti. (Sebep: GBI)", ReturnName(issuerid, 0));
			ClearAnimations(issuerid);
			PlayerTextDrawShow(issuerid, PlayerData[issuerid][pTextdraws][70]);
            PlayerData[issuerid][pGBWarn] = 0;
		    JBC_SetPlayerPos(issuerid, 197.6346, 175.3765, 1003.0234);
		    SetPlayerInterior(issuerid, 3);
			//SendServerMessage(playerid, "Tüm silahlarýn sýfýrlandý, birdaha GBI ihlali uygulamaman dileði ile.");
			SetPlayerVirtualWorld(issuerid, (issuerid + 100));
		 	SetPlayerFacingAngle(issuerid, 0.0);

			SetCameraBehindPlayer(issuerid);
			ResetWeapons(issuerid);

			ResetPlayer(issuerid);

			PlayerData[issuerid][pJailTime] = 120 * 60;
			PlayerData[issuerid][pPrisoned] = 0;
		}
		return 1;
 }

	if (issuerid != INVALID_PLAYER_ID)
	{/*
		PlayerData[playerid][pLastShot] = issuerid;
		PlayerData[playerid][pShotTime] = gettime();

		if (IsBleedableWeapon(weaponid) && !PlayerData[playerid][pBleeding] && ReturnArmour(playerid) < 1 && PlayerData[issuerid][pRangeBooth] == -1 && PlayerData[playerid][pHospital] == -1 && !PaintballOyunundami(issuerid))
		{
		    if (!PlayerHasTazer(issuerid) && !PlayerHasBeanBag(issuerid))
		    {
			    PlayerData[playerid][pBleeding] = 1;
			    PlayerData[playerid][pBleedTime] = 10;

				CreateBlood(playerid);
			    SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFF000066));
			}
		}
		if (PlayerData[issuerid][pDrugUsed] == 4 && (weaponid >= 0 && weaponid <= 15))
		{
		    CanDegistir(playerid, ReturnHealth(playerid) - 6);
		}*/
	    if ((GetFactionType(issuerid) == FACTION_POLICE || GetFactionType(issuerid) == FACTION_GOV || GetFactionType(issuerid) == FACTION_AKADEMI || GetFactionType(issuerid) == FACTION_INTEL) && PlayerData[issuerid][pTazer] && PlayerData[playerid][pStunned] < 1 && weapon == 23)
	    {
			if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
			    return SendErrorMessage(issuerid, "Dondurmak için oyuncunun yayan olmasý gereklidir.");
	        if (GetPlayerDistanceFromPlayer(issuerid, playerid) > 10.0)
                return SendErrorMessage(issuerid, "Ateþ etmek için çok uzaksýn.");
            new
                strdamage[64];
			format(strdamage, sizeof(strdamage), "%s tarafindan ~r~donduruldun~w~.", ReturnName(issuerid, 0));
            PlayerData[playerid][pStunned] = 10;
            TogglePlayerControllable(playerid, 0);
            ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
            ShowPlayerFooter(playerid, strdamage);
			SendNearbyMessage(issuerid, 30.0, COLOR_PURPLE, "** %s elektroþok silahýný %s'a yöneltir ve ateþler.", ReturnName(issuerid, 0), ReturnName(playerid, 0));
			return 0;
        }
        if ((GetFactionType(issuerid) == FACTION_POLICE || GetFactionType(issuerid) == FACTION_INTEL) && PlayerData[issuerid][pBeanBag] && PlayerData[playerid][pStunned] < 1 && weapon == 25)
        {
			if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
			    return SendErrorMessage(issuerid, "Dondurmak için oyuncunun yayan olmasý gereklidir.");
            if (GetPlayerDistanceFromPlayer(issuerid, playerid) > 10.0)
                return SendErrorMessage(issuerid, "Ateþ etmek için çok uzaksýn.");
            new
                strdamage[64];
			format(strdamage, sizeof(strdamage), "%s tarafindan ~r~donduruldun~w~.", ReturnName(issuerid, 0));
            PlayerData[playerid][pStunned] = 10;
            TogglePlayerControllable(playerid, 0);
            ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
            ShowPlayerFooter(playerid, strdamage);
			SendNearbyMessage(issuerid, 30.0, COLOR_PURPLE, "** %s beanbag tüfeðini %s'a yöneltir ve ateþler.", ReturnName(issuerid, 0), ReturnName(playerid, 0));
            return 0;
		}
	}
	return 1;
}

stock split(const src[], dest[][], const delimiter)
{
    new n_pos,num,old,str[1];
    str[0] = delimiter;
    while(n_pos != -1)
    {
        n_pos = strfind(src,str,false,n_pos+1);
        strmid(dest[num++], src, (!num)?0:old+1,(n_pos==-1)?strlen(src):n_pos,256);
        old=n_pos;
    }
    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
if(weaponid != 38)
{
if((gettime() - shotTime[playerid]) < 1)
{
shot[playerid]++;
}
else
{
shot[playerid]=0;
}
if(shot[playerid] == 10)
{
Dialog_Show(playerid, Antihile, DIALOG_STYLE_MSGBOX, "ANTI-HILE DEVREDE!", " Sunucudan Kicklendiniz! \n Kickleyen: Sistem \n Kicklenme Gerekçeniz: Hile Kullanimi \n ", "Kapat", "");
KickEx(playerid);
}
shotTime[playerid] = gettime();
}
SetTimerEx("SilahSikti", 5000, false, "dd", playerid);
if (!PlayerData[playerid][pSilahSikti]) {
//SendNearbyMessage(playerid, 75.0, COLOR_WHITE, "Çevre IC: Yakýnlardan silah sesleri gelmektedir.");
PlayerData[playerid][pSilahSikti] = 1;
}
UpdateWeapons(playerid);
	if(hack_WeaponCode(playerid, weaponid)) return 0;
	if(PlayerData[playerid][pTazer] && PlayerData[playerid][pKartusHazir])
	{
		PlayerData[playerid][pKartusSure] = 10;
	    PlayerData[playerid][pKartusHazir] = false;
	}
    if (GetPlayerWeapon(playerid) != PlayerData[playerid][pWeapon])
	{
	    PlayerData[playerid][pWeapon] = GetPlayerWeapon(playerid);

		if (PlayerData[playerid][pWeapon] >= 1 && !PlayerData[playerid][pRangeBooth] && !PlayerData[playerid][pEvSilah] && PlayerData[playerid][pWeapon] <= 45 && PlayerData[playerid][pWeapon] != 40 && PlayerData[playerid][pWeapon] != 2 && PlayerData[playerid][pGuns][g_aWeaponSlots[PlayerData[playerid][pWeapon]]] != GetPlayerWeapon(playerid) && !PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid) && PlayerData[playerid][pRangeBooth] == -1 && PlayerData[playerid][pCharacter] > 0)
		{
		  SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s muhtemelen silah hilesi kullandýðý için oyundan atýldý. (Anti hile)", ReturnName(playerid, 0));
		    //SendAdminAlert(COLOR_LIGHTRED, "[VGuard]: %s silah hilesi kullandýðý için sunucudan yasaklandý. (%s).", ReturnName(playerid, 0), ReturnWeaponName(PlayerData[playerid][pWeapon]));
           SendServerMessage(playerid, "Anti-Hile aktif edildi.");
            new str[128];
	        format(str, sizeof (str), "%s adli oyuncu silah hilesi kullandi ve sistem tarafindan atildi.", ReturnName(playerid));
			Log_Write("logs/cheat_log.txt", "[%s] %s was kicked for weapon hacks (%s).", ReturnDate(), ReturnName(playerid), ReturnWeaponName(PlayerData[playerid][pWeapon]));
			ResetWeapons(playerid);
			KickEx(playerid);
			//Blacklist_Add(PlayerData[playerid][pIP], PlayerData[playerid][pUsername], "Anticheat", "Weapon Hacks");
			return 0;
		}
	}

    if(hittype == BULLET_HIT_TYPE_PLAYER && IsPlayerConnected(hitid) && !IsPlayerNPC(hitid))
        {
                new Float:Shot[3], Float:Hit[3];
                GetPlayerLastShotVectors(playerid, Shot[0], Shot[1], Shot[2], Hit[0], Hit[1], Hit[2]);

                new playersurf = GetPlayerSurfingVehicleID(playerid);
                new hitsurf = GetPlayerSurfingVehicleID(hitid);
                new Float:targetpackets = NetStats_PacketLossPercent(hitid);
                new Float:playerpackets = NetStats_PacketLossPercent(playerid);

                if(~(playersurf) && ~(hitsurf) && !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(hitid))
                {
                        if(!IsPlayerAimingAtPlayer(playerid, hitid) && !IsPlayerInRangeOfPoint(hitid, 5.0, Hit[0], Hit[1], Hit[2]))
                        {
                                new issuer[24];
                                GetPlayerName(playerid, issuer, 24);
                                AimbotWarnings[playerid] ++;

                                SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s AIMBOT kullanýyor olabilir.", ReturnName(playerid, 0));
		        				Log_Write("logs/cheat_log.txt", "[%s] %s AIMBOT kullaniyor olabilir.", ReturnDate(), ReturnName(playerid, 0));
                                if(AimbotWarnings[playerid] > 10)
                                {
                                        if(targetpackets < 1.2 && playerpackets < 1.2) return _Kick(playerid);
                                        else
                                        {
                                                SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s AIMBOT kullanýyor olabilir.", ReturnName(playerid, 0));
		        								Log_Write("logs/cheat_log.txt", "[%s] %s AIMBOT kullaniyor olabilir.", ReturnDate(), ReturnName(playerid, 0));
			}                           }
                                return 0;
                        }
                        else return 1;
                }
                else return 1;
        }
	if ((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if (PlayerData[hitid][pRangeBooth] != -1 || PlayerData[hitid][pHospital] != -1)
	        return 0;

		if (PlayerData[hitid][pDrugUsed] == 2)
		{
		    new
				Float:damage = floatdiv(g_arrWeaponDamage[weaponid], 2),
				Float:health;

		    GetPlayerHealth(hitid, health);
		    CanDegistir(hitid, floatsub(health, damage));

		    return 0;
		}
	}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (weaponid < 22 || weaponid > 38)  return 0;   if(!(-20000.0 <= z <= 20000.0))
        return 0;


    if( hittype != BULLET_HIT_TYPE_NONE ) // Bullet Crashing uses just this hittype
	{
        if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) ) // a valid offset, it's impossible that a offset bigger than 1000 is legit (also less than -1000.0 is impossible, not used by this hack, but still, let's check for it, just for the future, who knows what hacks will appear). The object with biggest offset is having ~700-800 radius.
		{
			_Kick(playerid);
			return 0; // let's desynchronize that bullet, so players won't crash
		}
	}
    if(IsWeaponWithAmmo(weaponid) && weaponid != 38)
	{

		new count = 0;
		if(weaponid != CurrentWeapon[playerid]) CurrentWeapon[playerid] = weaponid, CurrentAmmo[playerid] = GetPlayerWeaponAmmo(playerid,weaponid), count++;
		if(GetPlayerWeaponAmmo(playerid,weaponid) > CurrentAmmo[playerid] || GetPlayerWeaponAmmo(playerid,weaponid) < CurrentAmmo[playerid])
		{

			CurrentAmmo[playerid] = GetPlayerWeaponAmmo(playerid,weaponid);
			NoReloading[playerid] = 0;
			count++;
		}
		if(GetPlayerWeaponAmmo(playerid,weaponid) != 0 && GetPlayerWeaponAmmo(playerid,weaponid) == CurrentAmmo[playerid] && count == 0 && weaponid != 38)
		{

			NoReloading[playerid]++;
			if(NoReloading[playerid] == 5)
			{

				NoReloading[playerid] = 0;
				CurrentWeapon[playerid] = 0;
				CurrentAmmo[playerid] = 0;
				Dialog_Show(playerid, Antihile, DIALOG_STYLE_MSGBOX, "ANTI-HILE DEVREDE!", " Sunucudan Kicklendiniz! \n Kickleyen: Sistem \n Kicklenme Gerekçeniz: Hile Kullanimi \n ", "Kapat", "");
                KickEx(playerid);
				return 0;
			}
		}
	}
	if ((22 <= weaponid <= 38) && (GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET && GetPlayerAmmo(playerid) == 1) && GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL && GetFactionType(playerid) != FACTION_GOV)
 	{
     	switch (weaponid) {
 	        case 22: Inventory_Add(playerid, "Colt 45", 346);
 	        case 24: Inventory_Add(playerid, "Desert Eagle", 348);
 	        case 25: Inventory_Add(playerid, "Shotgun", 349);
 	        case 28: Inventory_Add(playerid, "Micro SMG", 352);
 	        case 29: Inventory_Add(playerid, "MP5", 353);
 	        case 30: Inventory_Add(playerid, "AK-47", 355);
 	        case 32: Inventory_Add(playerid, "Tec-9", 372);
 	        case 33: Inventory_Add(playerid, "Rifle", 357);
 	        case 34: Inventory_Add(playerid, "Sniper", 358);
		}
 	    ResetWeapon(playerid, weaponid);
 	    HoldWeapon(playerid, weaponid);
 	    SendServerMessage(playerid, "Þarjör boþaldý, baþka þarjör tak! ('N' ile silahý envantere koyabilirsin).");
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
PlayerData[playerid][pInt] = 0;
if (GetPVarInt(playerid, "EMO") == 1)
    {
    new carid = Car_NearestEx(playerid);

    new tempobjid = UsedPlayerAttach[playerid];
    if(IsValidDynamicObject(VehicleData[carid][TempObject][tempobjid])) DestroyDynamicObject(VehicleData[carid][TempObject][tempobjid]);
    GiveWeaponToPlayer(playerid, CarData[carid][carWeapons][tempobjid], CarData[carid][carAmmo][tempobjid]);
    CarData[carid][carWeapons][tempobjid] = 0;
    DeletePVar(playerid, "EMO");
    CarData[carid][carAmmo][tempobjid] = 0;
    UsedPlayerAttach[playerid] = -1;
    SendServerMessage(playerid, "Silah objesini yerleþtirirken öldüðünüz için obje yerleþtirilmedi!");
    }
Spawned[playerid] = 0;
Injourney[playerid] = 0;
	Watching[playerid] = 0;
	if ( KontraktVarmi(playerid) )
	{
	    new katil;
	   	for (new j = 0; j < MAX_KONTRAKT; j ++) if (Kontraktlar[playerid][j][kontraktVarmi] && Kontraktlar[playerid][j][kontraktKatil] == killerid)  {
			katil = true;
		}
		if(katil)
		{
		    new toplamkesilen;
 			for (new j = 0; j < MAX_KONTRAKT; j ++) if (Kontraktlar[playerid][j][kontraktVarmi])  {
				GiveMoney(playerid, -Kontraktlar[playerid][j][kontraktMiktar] / 2);
				toplamkesilen +=  Kontraktlar[playerid][j][kontraktMiktar] / 2;
				GiveMoney(killerid, Kontraktlar[playerid][j][kontraktMiktar]);
				Kontrakt_Sil(playerid, j);
			}
			SendFactionMessage(PlayerData[killerid][pFaction], COLOR_LIGHTRED, "SERÝKATÝL: {FFFFFF}%s adlý serikatil %s adlý kurbaný avladý ve %s kazandý.", ReturnName(killerid), ReturnName(playerid, 0), FormatNumber(toplamkesilen * 2));
			SendServerMessage(playerid, "Serikatil tarafýndan öldürüldünüz ve kontrakt ücretinin yarýsý sizden kesildi. (%s)", FormatNumber(toplamkesilen));
		}
	}
	if(SQL_IsLogged(playerid) && PlayerData[playerid][pJailTime] <= 0 && !PlayerData[playerid][pPrisoned])
	{
	    UpdateWeapons(playerid);
	    if(PlayerData[playerid][pBaygin])
		{
      	    PlayerData[playerid][pKilled] = false;
		    PlayerData[playerid][pBaygin] = false;
		    PlayerData[playerid][pBayginSure] = 0;
		    PlayerData[playerid][pHospital] = GetClosestHospital(playerid);
	        return 1;
	    }
	    PlayerData[playerid][pKilled] = true;
	    SetPVarInt(playerid, "pInt", GetPlayerInterior(playerid));
	    SetPVarInt(playerid, "pVW", GetPlayerVirtualWorld(playerid));
    	GetPlayerPos(playerid, DeathPosX[playerid], DeathPosY[playerid], DeathPosZ[playerid]);
	}
    if(PlayerData[playerid][pCaptureFactory] != -1)
    {
        Fabrika_CaptureReset(PlayerData[playerid][pCaptureFactory]);
    }

    if(BallHolder == playerid)
	    RecreateBall();
    if(PoolAimer == playerid)
	{
        PoolAimer = -1;
        TextDrawHideForPlayer(playerid, PoolTD[0]);
        TextDrawHideForPlayer(playerid, PoolTD[1]);
        TextDrawHideForPlayer(playerid, PoolTD[2]);
        TextDrawHideForPlayer(playerid, PoolTD[3]);
        DestroyObject(AimObject);
	}
    if(PlayingPool[playerid])
    {
        PlayingPool[playerid] = 0;
        new
		    count = GetPoolPlayersCount();
        if(count <= 0)
        {
			PoolStarted = 0;
			RespawnPoolBalls();
        }
    }
    ResetRobbery(playerid, 1);
	if(PaintballOyunundami(playerid))
	{
	    new pbid = PlayerData[playerid][pPaintball];
		if(Paintball[pbid][odaTur] == 2)
		{
		    if(PlayerData[playerid][pPaintballTeam] == 0) Paintball[pbid][odaTakimPuan][0]++;
	     	else Paintball[pbid][odaTakimPuan][1]++;
		}
	    PlayerData[killerid][pPaintballKill] ++;
		PlayerData[playerid][pPaintballDeath] ++;
	}
   	if(gPlayerUsingLoopingAnim[playerid])
	{
        gPlayerUsingLoopingAnim[playerid] = 0;
        CallRemoteFunction("HidePlayerAnimTextdraw", "d", playerid);
	}
    AracInterioruSifirla(playerid);
    AntiFakekill[playerid]++;
    SetTimerEx("AntiFakekillTimer", 1000,false,"i",playerid);

    GetPlayerPos(playerid, Dx[playerid], Dy[playerid], Dz[playerid]);
    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);


	if (killerid != INVALID_PLAYER_ID)
	{
	    if (1 <= reason <= 46)
			Log_Write("logs/kill_log.txt", "[%s] %s has killed %s (%s).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), ReturnWeaponName(reason));

		else
			Log_Write("logs/kill_log.txt", "[%s] %s has killed %s (reason %d).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), reason);

		if (reason == 50 && killerid != INVALID_PLAYER_ID)
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has killed %s by heli-blading.", ReturnName(killerid, 0), ReturnName(playerid, 0));

        if (reason == 29 && killerid != INVALID_PLAYER_ID && GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has killed %s by driver shooting.", ReturnName(killerid, 0), ReturnName(playerid, 0));
	}
	return 1;
}
#pragma tabsize 0


stock AracInterioruSifirla(playerid)
{
    SetPVarInt(playerid, "CamdanBakiyormu", false);
    HangiTropic[playerid] = -1;
    KaravanID[playerid] = INVALID_VEHICLE_ID;
    SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT)) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
if(newkeys & KEY_FIRE && oldkeys & KEY_CROUCH && IsCbugWeapon(playerid))
    {
        CallLocalFunction("OnPlayerMakeCBug", "i", playerid);
    }
if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
	}
if(newkeys == 16 && Injourney[playerid] > 0)
	{
		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(Injourney[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		Injourney[playerid] = 0;
	}
  	if (PlayerData[playerid][pTutorial] || PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawnedEx(playerid) || PlayerData[playerid][pCuffed])
	    return 0;

	if (PRESSED ( KEY_FIRE ) && IsPlayerSpawned(playerid))
	{
	    if (GetPlayerWeapon(playerid) != PlayerData[playerid][pWeapon])
		{
	    PlayerData[playerid][pWeapon] = GetPlayerWeapon(playerid);

		if (PlayerData[playerid][pWeapon] >= 1 && !PlayerData[playerid][pRangeBooth] && !PlayerData[playerid][pEvSilah] && PlayerData[playerid][pWeapon] <= 45 && PlayerData[playerid][pWeapon] != 40 && PlayerData[playerid][pWeapon] != 2 && PlayerData[playerid][pGuns][g_aWeaponSlots[PlayerData[playerid][pWeapon]]] != GetPlayerWeapon(playerid) && !PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid) && PlayerData[playerid][pRangeBooth] == -1 && PlayerData[playerid][pCharacter] > 0)
		{
		    //SendAdminAlert(COLOR_LIGHTRED, "[VGuard]: %s silah hilesi kullandýðý için sunucudan yasaklandý. (%s).", ReturnName(playerid, 0), ReturnWeaponName(PlayerData[playerid][pWeapon]));
			Log_Write("logs/cheat_log.txt", "[%s] %s was kicked for weapon hacks (%s).", ReturnDate(), ReturnName(playerid), ReturnWeaponName(PlayerData[playerid][pWeapon]));
			ResetWeapons(playerid);
			KickEx(playerid);
			//Blacklist_Add(PlayerData[playerid][pIP], PlayerData[playerid][pUsername], "Anticheat", "Weapon Hacks");
			return 0;
		}
	}

	}
	if (PRESSED( KEY_WALK ) && GetActorID(playerid) != -1) {
	    new actorid = GetActorID(playerid);
	    CallLocalFunction("AktorEtkilesim", "dds", playerid, actorid, Actors[actorid][actorAd]);
	}
    if(InfoSkate[playerid][sActive] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
                static bool:act;
                SetPlayerArmedWeapon(playerid,0);
                if(newkeys & KEY_HANDBRAKE){
                        #if MODE_SKATE == 0
                        // medium speed
                        ApplyAnimation(playerid, "SKATE","skate_run",4.1,1,1,1,1,1,1);
                        #else
                        // fast speed
                        ApplyAnimation(playerid, "SKATE","skate_sprint",4.1,1,1,1,1,1,1);
                        #endif
                        if(!act){
                                act = true;
                                RemovePlayerAttachedObject(playerid,INDEX_SKATE);
                                DestroyObject(InfoSkate[playerid][sSkate]);
                                InfoSkate[playerid][sSkate] = CreateObject(19878,0,0,0,0,0,0);
                                AttachObjectToPlayer(InfoSkate[playerid][sSkate],playerid, -0.2,0,-0.9,0,0,90);
                        }
                }
                if(oldkeys & KEY_HANDBRAKE){
                        ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
                        if(act){
                                act = false;
                                DestroyObject(InfoSkate[playerid][sSkate]);
                                RemovePlayerAttachedObject(playerid,INDEX_SKATE);
                                #if TYPE_SKATE == 0
                                // the skate is placed on the right arm
                                SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
                                #else
                                // the skate is placed in the back
                                SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,1,0.055999,-0.173999,-0.007000,-95.999893,-1.600010,24.099992,1.000000,1.000000,1.000000);
                                #endif
                        }
                }
        }
    if( PRESSED( KEY_SECONDARY_ATTACK ) && IsPlayerInRangeOfPoint(playerid, 3.0, -357.5095, 3415.0078, 1032.7606) )
    {
        new Float:velocityX, Float:velocityY, Float:velocityZ;
        GetVehicleVelocity (Tren, velocityX, velocityY, velocityZ);
       	new speed = floatround (floatsqroot (floatpower (velocityX, 2) + floatpower (velocityY, 2) + floatpower (velocityZ, 2)) * 136.666667, floatround_round);
		if(speed > 30) return SendErrorMessage(playerid, "Tren þu anda hareket halinde, biraz yavaþlamasýný bekle.");
		new Float:tx, Float:ty, Float:tz;
        GetVehicleRelativePos(Tren, tx, ty, tz, -2.5, 0.0, 0.0);
        JBC_SetPlayerPos(playerid, tx, ty, tz);
        SetPlayerVirtualWorld(playerid, 0);
        SendServerMessage(playerid, "Trenden ayrýldýnýz, tekrar binmek isterseniz bilet kullanmak zorundasýnýz.");
    }
    if( PRESSED( KEY_SECONDARY_ATTACK )  && IsPlayerInRangeOfPoint(playerid, 3.0, 3.1347,23.0074,1199.5937) )
    {
        new Float:velocityX, Float:velocityY, Float:velocityZ;
        GetVehicleVelocity (Shamal, velocityX, velocityY, velocityZ);
       	new speed = floatround (floatsqroot (floatpower (velocityX, 2) + floatpower (velocityY, 2) + floatpower (velocityZ, 2)) * 136.666667, floatround_round);
		if(speed > 30) return SendErrorMessage(playerid, "Uçak þu anda hareket halinde, biraz yavaþlamasýný bekle.");
        new Float:tx, Float:ty, Float:tz;
        GetVehicleRelativePos(Shamal, tx, ty, tz, -2.5, 0.0, 0.0);
        JBC_SetPlayerPos(playerid, tx, ty, tz);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerInterior(playerid, 0);
        SendServerMessage(playerid, "Uçaktan ayrýldýnýz, tekrar binmek isterseniz bilet kullanmak zorundasýnýz.");
    }
	if(IsPlayerInRangeOfPoint(playerid, 100, BallSpawn[0] , BallSpawn[1], BallSpawn[2]))
 	{
	    new
		    tick = GetTickCount(),
			dif;

		if (PRESSED(KEY_HANDBRAKE))
			pLastTick[playerid] = tick;
		else if (RELEASED(KEY_HANDBRAKE))
		{
		    dif = tick - pLastTick[playerid];
		    pLastTick[playerid] = -1;
		    if(dif < 2000)
		    {
			    new
			        Float:ox, Float:oy, Float:oz,
			        Float:x, Float:y, Float:z;
			    GetBallPos(ox, oy, oz);
			    GetPlayerPos(playerid, x, y, z);
			    if(IsPlayerInRangeOfPoint(playerid, 1.2, ox, oy, z) && floatabs(oz - z) < 1.8)
			    {
			        new
			            Float:speed,
			            Float:angle,
			            Float:vx, Float:vy, Float:vz;

					if(dif > 1000)
					    dif = 2000 - dif;
			        speed = (float(dif + 400) / (1000)) * 20.0;

			        if(BallHolder != -1)
			        {
				        DestroyBall();
				        CreateBall();
				        SetObjectPos(Ball, ox, oy, oz);
				        BallHolder = -1;
				    }

			        GetPlayerFacingAngle(playerid, angle);
			        vx = speed * floatsin(-angle, degrees),
			        vy = speed * floatcos(-angle, degrees);
			        vz = /*(newkeys & KEY_SECONDARY_ATTACK) ? (speed / 1.3) :*/ (speed / 5.2);

			        /*GetPlayerCameraFrontVector(playerid, vx, vy, vz);
			        vx *= speed;
			        vy *= speed;
			        vz *= speed * 1.2;
			        if(vz < 0.0)
			            vz = 0.0;*/

					PHY_SetObjectVelocity(Ball, vx, vy, vz);

					if(oz > BallSpawn[2] + (1.0 - 0.875))
					    ApplyAnimation(playerid, "WAYFARER", "WF_Fwd", 4.0, 0, 0, 0, 0, 0);
					else if(dif > 300)
						ApplyAnimation(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 1, 1, 0, 0);
					PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);

					LastTouch = playerid;
				}
			}
		}

		if (PRESSED(KEY_WALK))
			pLastTick[playerid] = tick;
		else if (RELEASED(KEY_WALK))
		{
		    dif = tick - pLastTick[playerid];
		    pLastTick[playerid] = -1;
		    if(dif < 2000)
		    {
			    new
			        Float:ox, Float:oy, Float:oz,
			        Float:x, Float:y, Float:z;
			    GetBallPos(ox, oy, oz);
			    GetPlayerPos(playerid, x, y, z);
			    if(IsPlayerInRangeOfPoint(playerid, 1.2, ox, oy, z) && floatabs(oz - z) < 1.8)
			    {
			        new
			            Float:speed,
			            Float:angle,
			            Float:vx, Float:vy, Float:vz;

					if(dif > 1000)
					    dif = 2000 - dif;
			        speed = (float(dif + 400) / (1000)) * 15.0;

			        if(BallHolder != -1)
			        {
				        DestroyBall();
				        CreateBall();
				        SetObjectPos(Ball, ox, oy, oz);
				        BallHolder = -1;
				    }

			        GetPlayerFacingAngle(playerid, angle);
			        vx = speed * floatsin(-angle, degrees),
			        vy = speed * floatcos(-angle, degrees);
			        vz = speed / 1.3;
					PHY_SetObjectVelocity(Ball, vx, vy, vz);

					if(oz > BallSpawn[2] + (1.0 - 0.875))
					    ApplyAnimation(playerid, "WAYFARER", "WF_Fwd", 4.0, 0, 0, 0, 0, 0);
					else if(dif > 300)
						ApplyAnimation(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 1, 1, 0, 0);
					PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);

					LastTouch = playerid;
				}
			}
		}


		if (PRESSED(KEY_SECONDARY_ATTACK))
			pLastTick[playerid] = tick;
		else if (RELEASED(KEY_SECONDARY_ATTACK))
		{
		    dif = tick - pLastTick[playerid];
		    pLastTick[playerid] = -1;
		    if(dif < 2000)
		    {
			    new
			        Float:ox, Float:oy, Float:oz,
			        Float:x, Float:y, Float:z;
			    GetBallPos(ox, oy, oz);
			    GetPlayerPos(playerid, x, y, z);
			    if(IsPlayerInRangeOfPoint(playerid, 1.2, ox, oy, z) && floatabs(oz - z) < 1.8)
			    {
			        new
			            Float:speed,
			            Float:angle,
			            Float:vx, Float:vy, Float:vz;

					if(dif > 1000)
					    dif = 2000 - dif;
			        speed = (float(dif + 400) / (1000)) * 16.0;

			        if(BallHolder != -1)
			        {
				        DestroyBall();
				        CreateBall();
				        SetObjectPos(Ball, ox, oy, oz);
				        BallHolder = -1;
				    }

			        GetPlayerFacingAngle(playerid, angle);
			        vx = speed * floatsin(-angle, degrees),
			        vy = speed * floatcos(-angle, degrees);
			        vz = speed / 2.0;
					PHY_SetObjectVelocity(Ball, vx, vy, vz);

					if(oz > BallSpawn[2] + (1.0 - 0.875))
					    ApplyAnimation(playerid, "WAYFARER", "WF_Fwd", 4.0, 0, 0, 0, 0, 0);
					else if(dif > 300)
						ApplyAnimation(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 1, 1, 0, 0);
					PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);

					LastTouch = playerid;
				}
			}
		}

		if(PRESSED(KEY_FIRE))
		{
		    new
			    Float:ox, Float:oy, Float:oz,
			    Float:x, Float:y, Float:z;
			GetBallPos(ox, oy, oz);
			if(BallHolder == playerid)
			{
			    DestroyBall();
				CreateBall();
				SetObjectPos(Ball, ox, oy, oz);
				BallHolder = -1;
			}
			else
			{
				GetPlayerPos(playerid, x, y, z);
				if(IsPlayerInRangeOfPoint(playerid, 1.2, ox, oy, z) && oz < z && (z - oz) < 1.2)
				{
				    GetObjectRot(Ball, ox, oy, oz);
				    AttachObjectToPlayer(Ball, playerid, 0.0, 0.6, -0.875, ox, oy, oz);

					if(BallHolder != -1)
					    PlayerPlaySound(BallHolder, 1130, 0.0, 0.0, 0.0);
					PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);

					BallHolder = playerid;
					LastTouch = playerid;
				}
			}
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
		}
	}

    if(PoolStarted && PlayingPool[playerid])
	{
		if (IsKeyJustUp(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
		{
			if(PlayingPool[playerid] && PoolAimer != playerid && !UsingChalk[playerid])
			{
				SetTimerEx("PlayPoolSound", 1400, 0, "d", 31807);
				SetPlayerArmedWeapon(playerid, 0);
				SetPlayerAttachedObject(playerid, OBJ_SLOT_POOL, 338, 6, 0, 0.07, -0.85, 0, 0, 0);
                ApplyAnimation(playerid, "POOL", "POOL_ChalkCue",3.0,0,0,0,0,0,1);
                UsingChalk[playerid] = 1;
                SetTimerEx("RestoreWeapon", 3500, 0, "d", playerid);
			}
		}
		if (IsKeyJustUp(KEY_JUMP, newkeys, oldkeys))
		{
			if(PoolAimer == playerid)
			{
				if(PoolCamera[playerid] < 2) PoolCamera[playerid]++;
				else PoolCamera[playerid] = 0;
				new
					Float:poolrot = AimAngle[playerid][0],
					Float:Xa,
					Float:Ya,
					Float:Za,
					Float:x,
					Float:y;
                GetObjectPos(PoolBall[0][bObject], Xa, Ya, Za);
                switch(PoolCamera[playerid])
				{
					case 0:
					{
                        GetXYBehindObjectInAngle(PoolBall[0][bObject], poolrot, x, y, 0.675);
                        SetPlayerCameraPos(playerid, x, y, 998.86785888672+0.28);
                        SetPlayerCameraLookAt(playerid, Xa, Ya, Za+0.170);
					}
                    case 1:
					{
					    SetPlayerCameraPos(playerid, 511.84469604492, -84.831642150879, 1001.4904174805);
					    SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
					}
                    case 2:
					{
					    SetPlayerCameraPos(playerid, 508.7971496582, -84.831642150879, 1001.4904174805);
					    SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
					}
				}
			}
		}
        if (IsKeyJustUp(KEY_HANDBRAKE, newkeys, oldkeys))
		{
			if(AreAllBallsStopped())
			{
                if(PoolAimer != playerid)
				{
                    if(!UsingChalk[playerid] && PoolAimer == -1 && PoolBall[0][bExisting])
					{
					    new
						    Float:poolrot,
							Float:X,
							Float:Y,
							Float:Z,
							Float:Xa,
							Float:Ya,
							Float:Za,
							Float:x,
							Float:y;
                        GetPlayerPos(playerid, X, Y, Z);
                        GetObjectPos(PoolBall[0][bObject], Xa, Ya, Za);
                        if(Is2DPointInRangeOfPoint(X, Y, Xa, Ya, 1.5) && Z < 999.5)
                        {
                            TogglePlayerControllable(playerid, 0);
					        GetAngleToXY(Xa, Ya, X, Y, poolrot);
                            SetPlayerFacingAngle(playerid, poolrot);
                            AimAngle[playerid][0] = poolrot;
                            AimAngle[playerid][1] = poolrot;
                            SetPlayerArmedWeapon(playerid, 0);
                            GetXYInFrontOfPos(Xa, Ya, poolrot+180, x, y, 0.085);
                            AimObject = CreateObject(3004, x, y, Za, 7.0, 0, poolrot+180);
							switch(PoolCamera[playerid])
							{
								case 0:
								{
                                    GetXYBehindObjectInAngle(PoolBall[0][bObject], poolrot, x, y, 0.675);
                                    SetPlayerCameraPos(playerid, x, y, 998.86785888672+0.28);
                                    SetPlayerCameraLookAt(playerid, Xa, Ya, Za+0.170);
								}
                                case 1:
								{
								    SetPlayerCameraPos(playerid, 511.84469604492, -84.831642150879, 1001.4904174805);
								    SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
								}
                                case 2:
								{
								    SetPlayerCameraPos(playerid, 508.7971496582, -84.831642150879, 1001.4904174805);
								    SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
								}
							}
                            ApplyAnimation(playerid, "POOL", "POOL_Med_Start",50.0,0,0,0,1,1,1);
                            PoolAimer = playerid;
                            TextDrawShowForPlayer(playerid, PoolTD[0]);
        					TextDrawShowForPlayer(playerid, PoolTD[1]);
        					TextDrawTextSize(PoolTD[2], 501.0, 0.0);
        					TextDrawShowForPlayer(playerid, PoolTD[2]);
        					TextDrawShowForPlayer(playerid, PoolTD[3]);
        					PoolPower = 1.0;
        					PoolDir = 0;
                        }
                    }
                }
                else
				{
                    TogglePlayerControllable(playerid, 1);
                    GiveWeaponToPlayer(playerid, 7, 1);
		            ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0, 1);
                    SetCameraBehindPlayer(playerid);
                    PoolAimer = -1;
                    DestroyObject(AimObject);
                    TextDrawHideForPlayer(playerid, PoolTD[0]);
			        TextDrawHideForPlayer(playerid, PoolTD[1]);
			        TextDrawHideForPlayer(playerid, PoolTD[2]);
			        TextDrawHideForPlayer(playerid, PoolTD[3]);
                }
            }
        }
        if (IsKeyJustUp(KEY_FIRE, newkeys, oldkeys))
		{
            if(PoolAimer == playerid)
			{
				new
				    Float:speed;
				ApplyAnimation(playerid, "POOL", "POOL_Med_Shot",3.0,0,0,0,0,0,1);
                speed = 0.4 + (PoolPower * 2.0) / 100.0;
				PHY_SetObjectVelocity(PoolBall[0][bObject], speed * floatsin(-AimAngle[playerid][0], degrees), speed * floatcos(-AimAngle[playerid][0], degrees));
                if(PoolCamera[playerid] == 0)
				{
				    switch(random(2))
				    {
                        case 0: SetPlayerCameraPos(playerid, 511.84469604492, -84.831642150879, 1001.4904174805);
                        case 1: SetPlayerCameraPos(playerid, 508.7971496582, -84.831642150879, 1001.4904174805);
                    }
                    SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
                }
                PlayPoolSound(31810);
                PoolAimer = -1;
                DestroyObject(AimObject);
                GiveWeaponToPlayer(playerid, 7, 1);
                PoolLastShooter = playerid;
                PoolLastScore = 0;
                TextDrawHideForPlayer(playerid, PoolTD[0]);
		        TextDrawHideForPlayer(playerid, PoolTD[1]);
		        TextDrawHideForPlayer(playerid, PoolTD[2]);
		        TextDrawHideForPlayer(playerid, PoolTD[3]);
            }
        }
    }
    if(takingselfie[playerid] == 1)
	{
		if(PRESSED(KEY_ANALOG_RIGHT))
		{
			GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			static Float: n1X, Float: n1Y;
		    if(Degree[playerid] >= 360) Degree[playerid] = 0;
		    Degree[playerid] += Speed;
		    n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
		    n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
		    SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
		    SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
		    SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		}
		if(PRESSED(KEY_ANALOG_LEFT))
		{
		    GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			static Float: n1X, Float: n1Y;
		    if(Degree[playerid] >= 360) Degree[playerid] = 0;
		    Degree[playerid] -= Speed;
		    n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
		    n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
		    SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
		    SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
		    SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		}
	}
	if (PRESSED(KEY_SUBMISSION) && IsPlayerInAnyVehicle(playerid))
	{
	    //cmd_a(playerid, "\1"); - düzeltmek lazým 2 tuþunu etkiledi.
	}
	if (PRESSED(KEY_NO) && IsPlayerInAnyVehicle(playerid))
	{
	    //cmd_a(playerid, "\1"); - düzeltmek lazým 2 tuþunu etkiledi
	}
	if (newkeys == KEY_NO)
	{
     static id = -1;

	    if ((id = House_GarajaYakinMi(playerid)) != -1)
	    {
	        if (HouseData[id][garajKilit])
	            return SendErrorMessage(playerid, "Bu garaj kilitli.");


			if (IsPlayerInAnyVehicle(playerid))
			{
       new boskoltuk = 1;
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1493.6433,-598.8337,1085.6049);
				ObjeleriYukle(playerid);
				LinkVehicleToInterior(tmpcar, 1);
				SetVehicleVirtualWorld(tmpcar, HouseData[id][houseID] + 5000);
//				SetVehicleZAngle(tmpcar, 180.0);
                PlayerData[playerid][pHouse] = HouseData[id][houseID];
				SetPlayerInterior(playerid, 1);
				SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);
				//SendClientMessageEx(playerid, COLOR_GRAY, "EV: {FFFFFF}Bu ev %s adlý kiþiye kayýtlýdýr.", HouseData[id][houseOwnerName]);
				SendClientMessageEx(playerid, COLOR_GRAY, "EV: {FFFFFF}Bu evin sistemsel fiyatý %s miktarýndadýr.", FormatNumber(HouseData[id][housePrice]));
				SetCameraBehindPlayer(playerid);
				PutPlayerInVehicle(playerid, tmpcar, 0);
    			foreach(new i : Player)
			    {
			        if(IsPlayerInVehicle(i, tmpcar) && i != playerid && boskoltuk <= 3)
					{
					     PlayerData[i][pHouse] = HouseData[id][houseID];
					     ObjeleriYukle(i);
						 SetPlayerInterior(i, 1);
						 SetPlayerVirtualWorld(i, HouseData[id][houseID] + 5000);
						 SetCameraBehindPlayer(i);
						 PutPlayerInVehicle(i, tmpcar, boskoltuk);
					     boskoltuk++;
					}
				}
			}
			else
			{
			    ObjeleriYukle(playerid);
				JBC_SetPlayerPosEx(playerid, 1493.6433,-598.8337,1085.6049);
			}
			SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = HouseData[id][houseID];
			return 1;
		}
		else if ((id = House_GarajInside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 4.5, 1341.1537,-1548.5522,10037.3174))
	    {
	        if (IsPlayerInAnyVehicle(playerid))
			{
				new tmpcar = GetPlayerVehicleID(playerid), boskoltuk = 1;
				SetVehiclePos(tmpcar, HouseData[id][garajPos][0], HouseData[id][garajPos][1], HouseData[id][garajPos][2]);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
//				SetVehicleZAngle(tmpcar, -180.0);
                ObjeleriYukle(playerid);
    			foreach(new i : Player)
			    {
			        if(IsPlayerInVehicle(i, tmpcar) && i != playerid && boskoltuk <= 3)
					{
					     ObjeleriYukle(i);
					     PlayerData[i][pHouse] = -1;
						 SetPlayerInterior(i, 0);
						 SetPlayerVirtualWorld(i, 0);
						 SetCameraBehindPlayer(i);
						 PutPlayerInVehicle(i, tmpcar, boskoltuk);
					     boskoltuk++;

					}
				}
			}
			else
			{
				JBC_SetPlayerPosEx(playerid, HouseData[id][garajPos][0], HouseData[id][garajPos][1], HouseData[id][garajPos][2]);
				SetPlayerFacingAngle(playerid, HouseData[id][garajPos][3] - 180.0);
			}

			SetPlayerInterior(playerid, HouseData[id][houseExterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = -1;
			return 1;
		}

	   /*
	   	if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1 && House_IsOwner(playerid, id))
		{
		    new string[1024], toplamoyuncu[1024];
		    strcat(string, "Ýþlem Adý\tDurum\n");
		    if(House_Nearest(playerid))
		    {
      			strcat(string, "Zili Çal\n");
				new pmdurumu[24];
				if(PlayerData[playerid][pTester] > 0)
				{
					if (!PlayerData[playerid][pDisableTester]) format(pmdurumu, 24, "{228B22}Açýk");
				 	else format(pmdurumu, 24, "{8B0000}Kapalý");
					format(toplamoyuncu, sizeof(toplamoyuncu), "Tester Chat Durumunu Deðiþtir\t%s\n", pmdurumu);
					strcat(string, toplamoyuncu);
				}
			}
			new baslik[256];
			format(baslik, sizeof(baslik), "{2F4F4F}Ayarlar {A9A9A9}(#%d - %s)", PlayerData[playerid][pID], ReturnName(playerid, 0));
			Dialog_Show(playerid, Ayarlar, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Tamam", "Kapat");
		}
	    cmd_isiklar(playerid, "\1");*/

 }


    if (newkeys == KEY_SECONDARY_ATTACK)
	{
	                        if(Equipments(playerid) != 0)
	{
	                    if(MyEquipment[playerid] != 0)
	{
	                        FinishGym(playerid);
	                        return 1;
	}
	                        if(IsEquipmentUsed[Equipments(playerid)] == 1 && GymLoop[playerid] == 0)
	{
	                        SendClientMessage(playerid,0xFF6347AA, "* Ekipman baþkasý tarafýndan kullanýlýyor.");
	                        return 1;
	}
	                        if(GymLoop[playerid] != 0)
	{
	                        FinishGym(playerid);
	                        return 1;
	}
	                        MyEquipment[playerid] = Equipments(playerid);
	                        IsEquipmentUsed[MyEquipment[playerid]] = 1;
	                    SendtoEquipment(playerid, MyEquipment[playerid], 1);
	                    TogglePlayerControllable(playerid, 0);
	                    switch(MyEquipment[playerid])
	                        {
	                            case 1 .. 3: { ApplyAnimation(playerid,"GYMNASIUM","gym_bike_geton",4.0,1,0,0,1,0,1); }
	                    		case 4 .. 6: { ApplyAnimation(playerid,"GYMNASIUM","gym_tread_geton",4.0,1,0,0,1,0,1); }
	                       		case 7 .. 10:{ ApplyAnimation(playerid,"benchpress","gym_bp_geton",4.0,1,0,0,1,0,1); }
	                        }
	                        GymButton[playerid] = random(4)+1;
	                        GameTextForPlayer(playerid, GameTextArrow(GymButton[playerid]), 2000, 3);
	                        KillTimer(GymTimer[playerid]);
	                        GymTimer[playerid] = SetTimerEx("GYM", 2000, true, "i", playerid);
	}
	}

    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
		ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);

	if (newkeys & KEY_CROUCH && IsPlayerInRangeOfPoint(playerid, 1.5, -226.4219, 1408.4594, 26.7734) && PlayerData[playerid][pTutorialStage] == 1)
	{
	    DisablePlayerCheckpoint(playerid);

		PlayerData[playerid][pTutorialStage] = 2;
	    SendClientMessage(playerid, COLOR_SERVER, "Press 'N' to pickup any nearby item whilst crouched.");
	}
	if (newkeys & KEY_YES && IsPlayerSpawnedEx(playerid))
	{
	     if(InEV[playerid] == INVALID_EV_ID) {
			foreach(new i : EVs)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 1.5, EVData[i][EVX], EVData[i][EVY], EVData[i][EVZ]))
			    {
			        SetPVarInt(playerid, "EVPickupCooldown", gettime() + EV_COOLDOWN);
			        SetPVarInt(playerid, "PickupEVID", i);

					if(!strcmp(EVData[i][Owner], "-")) {
						new string[64];
						format(string, sizeof(string), "This EV is for sale!\n\nPrice: {2ECC71}TL%s", convertNumber(EVData[i][Price]));
						ShowPlayerDialog(playerid, DIALOG_BUY_EV, DIALOG_STYLE_MSGBOX, "EV For Sale", string, "Buy", "Close");
					}else{
					    if(EVData[i][SalePrice] > 0 && strcmp(EVData[i][Owner], Player_GetName(playerid)))
					    {
                            new string[64];
							format(string, sizeof(string), "This EV is for sale!\n\nPrice: {2ECC71}TL%s", convertNumber(EVData[i][SalePrice]));
							ShowPlayerDialog(playerid, DIALOG_BUY_EV_FROM_OWNER, DIALOG_STYLE_MSGBOX, "EV For Sale", string, "Buy", "Close");
							return 1;
					    }

					    switch(EVData[i][LockMode])
					    {
					        case LOCK_MODE_NOLOCK: SendToEV(playerid, i);
					        case LOCK_MODE_PASSWORD: ShowPlayerDialog(playerid, DIALOG_EV_PASSWORD, DIALOG_STYLE_INPUT, "EV Password", "This EV is password protected.\n\nEnter EV password:", "Done", "Close");
							case LOCK_MODE_KEYS:
							{
							    new gotkeys = Iter_Contains(EVKeys[playerid], i);
							    if(!gotkeys) if(!strcmp(EVData[i][Owner], Player_GetName(playerid))) gotkeys = 1;

								if(gotkeys) {
									SendToEV(playerid, i);
								}else{
								    SendClientMessage(playerid, 0xE74C3CFF, "You don't have keys for this EV, you can't enter.");
								}
							}

					        case LOCK_MODE_OWNER:
					        {
								if(!strcmp(EVData[i][Owner], Player_GetName(playerid))) {
								    SetPVarInt(playerid, "EVPickupCooldown", gettime() + EV_COOLDOWN);
						            SendToEV(playerid, i);
								}else{
								    SendClientMessage(playerid, 0xE74C3CFF, "Sorry, only the owner can enter this EV.");
								}
					        }
					    }
					}

			        return 1;
			    }
			}
		}else{
			for(new i; i < sizeof(EVInteriors); ++i)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 1.5, EVInteriors[i][intX], EVInteriors[i][intY], EVInteriors[i][intZ]))
			    {
			        SetPVarInt(playerid, "EVPickupCooldown", gettime() + EV_COOLDOWN);
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, EVData[ InEV[playerid] ][EVX], EVData[ InEV[playerid] ][EVY], EVData[ InEV[playerid] ][EVZ]);
			        InEV[playerid] = INVALID_EV_ID;
			        return 1;
			    }
			}
		}
	}
	if (newkeys & KEY_SPRINT && IsPlayerSpawnedEx(playerid) && PlayerData[playerid][pLoopAnim])
	{
	    ClearAnimations(playerid);
	    PlayerData[playerid][pSexAnim] = 0;
		HidePlayerFooter(playerid);

	    StopLoopingAnim(playerid);
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pDrinking])
	{
	    if (GetPlayerAnimationIndex(playerid) != 15 && GetPlayerAnimationIndex(playerid) != 16 && !PlayerData[playerid][pDrinkTime])
     	{
		    if (GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) <= 0.0)
		    {
	    	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

				PlayerData[playerid][pDrinking] = 0;
				SendServerMessage(playerid, "Þiþe bitti.");
		    }
	    	else
	    	{
	    	    PlayerData[playerid][pDrinkTime] = 2;

	    	    switch (PlayerData[playerid][pDrinking])
	    	    {
					case 1: PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);
                    case 2: PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);
				}
	    		if(ReturnHealth(playerid) < 100) { CanDegistir(playerid, ReturnHealth(playerid)+20); }
			    SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) - 10.0);
			}
		}
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pMining] && IsPlayerNearMine(playerid))
	{
	    if (PlayerData[playerid][pMineTime] > 0 || PlayerData[playerid][pMinedRock])
	        return 1;

		new id = Job_NearestPoint(playerid);

		if (id != -1)
		{
		    PlayerData[playerid][pMineTime] = 1;
		    SetTimerEx("MineTime", 400, false, "d", playerid);

		    if (PlayerData[playerid][pMineCount] < 5)
	    	{
	    	    PlayerData[playerid][pMineCount]++;

	        	ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
			}
			else
			{
			    PlayerData[playerid][pMinedRock] = 1;
			    PlayerData[playerid][pMineCount] = 0;

			    RemovePlayerAttachedObject(playerid, 4);

			    ApplyAnimation(playerid, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);

			    SetPlayerAttachedObject(playerid, 4, 2936, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
				SendServerMessage(playerid, "Taþý yükledin, taþý haritada belirtilen noktaya býrak.");

				SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 2.5);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			}
	    }
	}
	else if (newkeys & KEY_FIRE && AgacaYakinMi(playerid))
	{
		new id = Agac_ID(playerid);

		if (id != -1 && !PlayerData[playerid][pOdunTimer] && !Agaclar[id][agacKesildimi])
		{
		    if (PlayerData[playerid][pJob] != JOB_ODUNCULUK)
	   			 return SendErrorMessage(playerid, "Oduncu olmadýðýn için aðaçlarý kesemezsin.");
	   		 if (!PlayerData[playerid][pOdunculuk])
	   			 return SendErrorMessage(playerid, "Ýþbaþýnda deðilsin, /odunculuk yazarak iþbaþýna geç.");

		    if (Agaclar[id][agacHasar] > 0)
	    	{
	    	    new str[24];
	    	    Agaclar[id][agacHasar]--;
	    	    PlayerData[playerid][pOdunTimer] = true;
            	SetTimerEx("OdunVurmaTimer", 2000, false, "d", playerid);
	    	    format(str, sizeof(str), "Hasar: %d/15", Agaclar[id][agacHasar]);
	    	    ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
           		ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
                UpdateDynamic3DTextLabelText(Agaclar[id][agacLabel], COLOR_RED, str);
			}
			else
			{
			    AgacKes(playerid, id);
			}
	    }
	}
	else if (newkeys & KEY_CTRL_BACK)
	{
	    if (PlayerData[playerid][pUsedMagazine])
	    {
	        new weaponid = PlayerData[playerid][pHoldWeapon];
	   // silah idlerine göre þarjör
	        switch (weaponid)
	        {
			    case 22:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Colt 45");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 17);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s þarjörü kontrol edip yuvaya yerleþtirir.", ReturnName(playerid, 0));
				}
				case 24:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Desert Eagle");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 7);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s þarjörü kontrol edip yuvaya yerleþtirir.", ReturnName(playerid, 0));
				}
				case 25:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Shotgun");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 8);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s þarjörü kontrol edip yuvaya yerleþtirir.", ReturnName(playerid, 0));
				}
				case 28:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Micro SMG");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 50);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s þarjörü kontrol edip yuvaya yerleþtirir.", ReturnName(playerid, 0));
				}
				case 29:
       			{
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "MP5");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 30);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s þarjörü kontrol edip yuvaya yerleþtirir.", ReturnName(playerid, 0));
				}
				case 32:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Tec-9");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 50);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s þarjörü kontrol edip yuvaya yerleþtirir.", ReturnName(playerid, 0));
				}
				case 30:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "AK-47");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 30);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s þarjörü kontrol edip yuvaya yerleþtirir.", ReturnName(playerid, 0));
				}
				case 33:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Rifle");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 5);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s þarjörü kontrol edip yuvaya yerleþtirir.", ReturnName(playerid, 0));
				}
		        case 34:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Sniper");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 5);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s þarjörü kontrol edip yuvaya yerleþtirir.", ReturnName(playerid, 0));
				}
			}
			return 1;
	    }
	}
	else if (newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    static
	        string[320];

		if (PlayerData[playerid][pTutorialStage] == 2 && IsPlayerInRangeOfPoint(playerid, 1.5, -226.4219, 1408.4594, 26.7734) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
		    Inventory_Add(playerid, "Demo Soda", 1543);
		    DestroyPlayerObject(playerid, PlayerData[playerid][pTutorialObject]);

            PlayerData[playerid][pTutorialStage] = 3;
 		    SendClientMessage(playerid, COLOR_SERVER, "Press 'Y' to open your inventory and select the soda bottle.");
		    return 1;
		}
		if (PlayerData[playerid][pHoldWeapon] > 0)
		{
		    if (PlayerData[playerid][pUsedMagazine])
      			Inventory_Add(playerid, "Sarjor", 2039);

		    HoldWeapon(playerid, 0);
		    return SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s silahý saklar.", ReturnName(playerid, 0));
		}
		if (PlayerData[playerid][pLoadCrate])
		{
		    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i))
			{
			    if (!IsLoadableVehicle(i))
			        return SendErrorMessage(playerid, "Bu araca sandýk yükleyemezsiniz.");

			    if (CoreVehicles[i][vehLoadType] != 0 && CoreVehicles[i][vehLoadType] != PlayerData[playerid][pLoadType])
			        return SendErrorMessage(playerid, "Bu araç baþka bir sandýk ile yüklü.");

			    if (CoreVehicles[i][vehLoads] >= 6)
			        return SendErrorMessage(playerid, "Bu araç dolu, en fazla 6 sandýk yükleyebilirsin.");

				CoreVehicles[i][vehLoads]++;
				CoreVehicles[i][vehLoadType] = PlayerData[playerid][pLoadType];

                ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
                SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s elindeki sandýðý '%s' model araca yerleþtirir.", ReturnName(playerid, 0), ReturnVehicleName(i));

                if (CoreVehicles[i][vehLoads] == 6)
                {
                    DisablePlayerCheckpoint(playerid);

					if (PlayerData[playerid][pShipment] != -1)
					{
					    PlayerData[playerid][pDeliverShipment] = 1;

					    SendServerMessage(playerid, "Tüm sandýklar araca yüklendi, '/indir' komutu ile haritada belirtilen dükkana mallarý indir.");
					    SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pShipment]][bizDeliver][0], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][1], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][2], 3.0);
					}
					else switch (PlayerData[playerid][pLoadType])
                    {
                    	case 1: SendServerMessage(playerid, "Tüm sandýklar araca yüklendi, '/indir' komutu ile herhangi bir 'Market' tipi dükkana mallarý indir.");
                        case 2: SendServerMessage(playerid, "Tüm sandýklar araca yüklendi, '/indir' komutu ile herhangi bir 'Silahçý' tipi dükkana mallarý indir.");
                        case 3: SendServerMessage(playerid, "Tüm sandýklar araca yüklendi, '/indir' komutu ile herhangi bir 'Kýyafet Maðazasý' tipi dükkana mallarý indir.");
                        case 4: SendServerMessage(playerid, "Tüm sandýklar araca yüklendi, '/indir' komutu ile herhangi bir 'Fast-Food' tipi dükkana mallarý indir.");
                        case 5: SendServerMessage(playerid, "Tüm sandýklar araca yüklendi, '/indir' komutu ile herhangi bir 'Benzinlik' tipi dükkana mallarý indir.");
                        case 6: SendServerMessage(playerid, "Tüm sandýklar araca yüklendi, '/indir' komutu ile herhangi bir 'Mobilya Dükkaný' tipi dükkana mallarý indir.");
					}
					PlayerData[playerid][pLoading] = 0;
					PlayerData[playerid][pLoadType] = 0;
                }
                PlayerData[playerid][pLoadCrate] = 0;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				return 1;
			}
		}
		for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackPlayer] == 0 && IsPlayerInRangeOfPoint(playerid, 2.0, BackpackData[i][backpackPos][0], BackpackData[i][backpackPos][1], BackpackData[i][backpackPos][2])) {
		    return Backpack_Items(playerid, i);
		}
        if (PlayerData[playerid][pCarryTrash])
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (GetVehicleModel(i) == 408 && IsPlayerNearBoot(playerid, i))
			{
			    if (CoreVehicles[i][vehTrash] >= 10)
			        return SendErrorMessage(playerid, "Bu araç dolu.");

				CoreVehicles[i][vehTrash]++;

				RemovePlayerAttachedObject(playerid, 4);
				// SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s çöpü aracýn arkasýna atar.", ReturnName(playerid, 0));

				PlayerData[playerid][pCarryTrash] = 0;
				break;
			}
		}
        if (PlayerData[playerid][pKereste] != -1)
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (GetVehicleModel(i) == 578 && IsPlayerNearBoot(playerid, i))
			{
			    if (CoreVehicles[i][vehKereste] >= 16)
			        return SendErrorMessage(playerid, "Bu araç dolu. (Limit 16 kereste).");

				Keresteler[PlayerData[playerid][pKereste]][keresteVehicle] = i;
				Keresteler[PlayerData[playerid][pKereste]][keresteX] = 0.0;
				Keresteler[PlayerData[playerid][pKereste]][keresteY] = 0.0;
				Keresteler[PlayerData[playerid][pKereste]][keresteZ] = 0.0;
				Keresteler[PlayerData[playerid][pKereste]][keresteA] = 0.0;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s, aracýn arkasýna odunu koyar.", ReturnName(playerid, 0));

				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);

				CoreVehicles[i][vehKereste]++;
				    if(CoreVehicles[i][vehKereste] == 1)
     				{
					    CoreVehicles[i][vehKeresteObj][0] = CreateDynamicObject(1463,  -0.59500, 1.60220, 0.09180,   0.00000, 0.00000, 90.00000);
                        AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][0], i,  -0.59500, 1.60220, 0.09180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 2)
					{
         				CoreVehicles[i][vehKeresteObj][1] = CreateDynamicObject(1463, 0.65100, 1.60220, 0.09180,   0.00000, 0.00000, 90.00000);
                        AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][1], i,  0.65100, 1.60220, 0.09180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 3)
					{
        				CoreVehicles[i][vehKeresteObj][2]  = CreateDynamicObject(1463, -0.59500, -0.16580, 0.09180,   0.00000, 0.00000, 90.00000);
                        AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][2], i,  -0.59500, -0.16580, 0.09180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 4)
					{
					    CoreVehicles[i][vehKeresteObj][3] = CreateDynamicObject(1463, 0.65100, -0.16580, 0.09180,   0.00000, 0.00000, 90.00000);
					    AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][3], i,  0.65100, -0.16580, 0.09180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 5)
					{
					    CoreVehicles[i][vehKeresteObj][4] = CreateDynamicObject(1463,  -0.59500, -1.93380, 0.09180,   0.00000, 0.00000, 90.00000);
					    AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][4], i,  -0.59500, -1.93380, 0.09180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 6)
					{
					    CoreVehicles[i][vehKeresteObj][5] = CreateDynamicObject(1463,  0.65100, -1.82980, 0.09180,   0.00000, 0.00000, 90.00000);
					    AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][5], i,  0.65100, -1.82980, 0.09180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 7)
					{
					    CoreVehicles[i][vehKeresteObj][6] = CreateDynamicObject(1463,  -0.59500, -3.70180, 0.09180,   0.00000, 0.00000, 90.00000);
					    AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][6], i,  -0.59500, -3.70180, 0.09180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 8)
					{
						CoreVehicles[i][vehKeresteObj][7] = CreateDynamicObject(1463,  0.65080, -3.61780, 0.09180,   0.00000, 0.00000, 90.00000);
						AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][7], i, 0.65080, -3.61780, 0.09180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 9)
					{
					    CoreVehicles[i][vehKeresteObj][8] = CreateDynamicObject(1463, -0.59500, 1.60220, 0.61180,   0.00000, 0.00000, 90.00000);
					    AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][8], i, -0.59500, 1.60220, 0.61180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 10)
					{
					    CoreVehicles[i][vehKeresteObj][9] = CreateDynamicObject(1463, 0.65100, 1.60220, 0.61180,   0.00000, 0.00000, 90.00000);
					    AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][9], i,0.65100, 1.60220, 0.61180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 11)
					{
					    CoreVehicles[i][vehKeresteObj][10] = CreateDynamicObject(1463,  -0.59740, -0.18570, 0.61180,   0.00000, 0.00000, 90.00000);
					    AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][10], i,  -0.59740, -0.18570, 0.61180,   0.00000, 0.00000, 90.00000);

					}
					if(CoreVehicles[i][vehKereste] == 12)
					{
    					CoreVehicles[i][vehKeresteObj][11] = CreateDynamicObject(1463,  0.65100, -0.16580, 0.61180,   0.00000, 0.00000, 90.00000);
    					AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][11], i,  0.65100, -0.16580, 0.61180,   0.00000, 0.00000, 90.00000);

					}
					if(CoreVehicles[i][vehKereste] == 13)
					{
						CoreVehicles[i][vehKeresteObj][12] = CreateDynamicObject(1463, -0.59260, -1.91390, 0.61180,   0.00000, 0.00000, 90.00000);
						AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][12], i, -0.59260, -1.91390, 0.61180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 14)
					{
					    CoreVehicles[i][vehKeresteObj][13] = CreateDynamicObject(1463, 0.65100, -1.82980, 0.61180,   0.00000, 0.00000, 90.00000);
					    AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][13], i, 0.65100, -1.82980, 0.61180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 15)
					{
					    CoreVehicles[i][vehKeresteObj][14] = CreateDynamicObject(1463, -0.59500, -3.70180, 0.61180,   0.00000, 0.00000, 90.00000);
                        AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][14], i, -0.59500, -3.70180, 0.61180,   0.00000, 0.00000, 90.00000);
					}
					if(CoreVehicles[i][vehKereste] == 16)
					{
					    CoreVehicles[i][vehKeresteObj][15] = CreateDynamicObject(1463, 0.65080, -3.61780, 0.61180,   0.00000, 0.00000, 90.00000);
                        AttachDynamicObjectToVehicle(CoreVehicles[i][vehKeresteObj][15], i, 0.65080, -3.61780, 0.61180,   0.00000, 0.00000, 90.00000);
					}
				PlayerData[playerid][pKereste] = -1;
				return 1;
			}
		}
		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
			{
			    if (GetVehicleCrates(i) >= GetMaxCrates(i))
			        return SendErrorMessage(playerid, "Bu araç dolu. (Limit %d).", GetMaxCrates(i));

				CrateData[PlayerData[playerid][pCarryCrate]][crateVehicle] = i;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s, %s model araca sandýk koyar.", ReturnName(playerid, 0), ReturnVehicleName(i));

				PlayerData[playerid][pCarryCrate] = -1;
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
				break;
			}
		}
		else if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
		    new
				count = 0,
				id = Item_Nearest(playerid);

		    if (id != -1)
		    {
		        string = "";

		        for (new i = 0; i < MAX_DROPPED_ITEMS; i ++) if (count < MAX_LISTED_ITEMS && DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld]) {
		            NearestItems[playerid][count++] = i;

		            strcat(string, DroppedItems[i][droppedItem]);
		            strcat(string, "\n");
		        }
		        if (count == 1)
		        {
				    if (DroppedItems[id][droppedWeapon] != 0)
					{
				        if (PlayerData[playerid][pLevel] < 2)
							return SendErrorMessage(playerid, "2 level olman gereklidir.");

    	   				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

    	                Item_Delete(id);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s, %s adlý silahý yerden alýr.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
                        Log_Write("logs/droppick.txt", "[%s] %s picked up a %s.", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));

					}
					else if (PickupItem(playerid, id))
					{
			    		format(string, sizeof(string), "~g~%s~w~ envantere eklendi!", DroppedItems[id][droppedItem]);
			    		ShowPlayerFooter(playerid, string);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s yerden \"%s\" alýr.", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
						Log_Write("logs/droppick.txt", "[%s] %s has picked up a \"%s\".", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
					}
					else
						SendErrorMessage(playerid, "Envanterde boþ yer yok.");
				}
				else Dialog_Show(playerid, PickupItems, DIALOG_STYLE_LIST, "Yerdeki Eþyalar", string, "Al", "{FF6347}Iptal");
			}
		}
	}
	else if (newkeys & KEY_SECONDARY_ATTACK)
	{


		static
		    id = -1;

		if ((id = Vendor_Nearest(playerid)) != -1)
		{
		    switch (VendorData[id][vendorType])
		    {
		        case 1:
		        {
					if (GetMoney(playerid) < 3)
					    return SendErrorMessage(playerid, "3 dolarýn yok!");

					if (PlayerData[playerid][pVendorTime] > 0)
					    return SendErrorMessage(playerid, "Satýn aldýktan sonra biraz bekle!");

					if (Inventory_Count(playerid, "Pismis Hamurger") >= 5)
					    return SendErrorMessage(playerid, "Envanterinde zaten 5 adet hamburger bulunuyor");

					id = Inventory_Add(playerid, "Pismis Hamburger", 2703);

					if (id != -1)
					{
					    PlayerData[playerid][pVendorTime] = 3;

					    GiveMoney(playerid, -3);
					    ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

					    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s, 3$ verir ve bir hamburger alýr.", ReturnName(playerid, 0));
						//ShowPlayerFooter(playerid, "~p~Hamburger~w~ envantere eklendi.");
					}
				}
				case 2:
		        {
					if (GetMoney(playerid) < 2)
					    return SendErrorMessage(playerid, "2 dolarýn yok!");

					if (PlayerData[playerid][pVendorTime] > 0)
					    return SendErrorMessage(playerid, "Satýn aldýktan sonra biraz bekle!");

					if (Inventory_Count(playerid, "Soda") >= 10)
					    return SendErrorMessage(playerid, "Envanterinde zaten 10 adet soda bulunuyor!");

					id = Inventory_Add(playerid, "Soda", 1543);

					if (id != -1)
					{
                        PlayerData[playerid][pVendorTime] = 3;

					    GiveMoney(playerid, -2);
					    ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);

					    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s, 3$ verir ve bir soda alýr.", ReturnName(playerid, 0));
					//	ShowPlayerFooter(playerid, "Your ~p~Soda~w~ was envantere eklendi.");
					}
				}
			}
		}
		if (PlayerData[playerid][pRangeBooth] != -1)
		{
		    Booth_Leave(playerid);
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s atýþ taliminden ayrýldý.", ReturnName(playerid, 0));
		}
		else for (new i = 0; i < MAX_BOOTHS; i ++) if (!g_BoothUsed[i] && IsPlayerInRangeOfPoint(playerid, 1.5, arrBoothPositions[i][0], arrBoothPositions[i][1], arrBoothPositions[i][2]))
		{
		    g_BoothUsed[i] = true;
		    PlayerData[playerid][pRangeBooth] = i;

		    ResetPlayerWeapons(playerid);

		    GivePlayerWeaponEx(playerid, 24, 15000);

			Booth_Refresh(playerid);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], "~b~Hedefler:~w~ 0/10");

			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][81]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s atýþ talimine girdi.", ReturnName(playerid, 0));
			return 1;
		}
		if (PlayerData[playerid][pTutorialStage] == 5 && IsPlayerInRangeOfPoint(playerid, 1.5, -228.8403, 1401.1831, 27.7656))
		{
		    for (new i = 0; i < 100; i ++) {
		        SendClientMessage(playerid, -1, "");
			}
		    SetDefaultSpawn(playerid);
		    Dialog_Show(playerid, TutorialConfirm, DIALOG_STYLE_MSGBOX, "Tutorial", "Would you like to view the server's main tutorial?", "Yes", "No");
		}
		if (IsPlayerInRangeOfPoint(playerid, 2.5, -204.5334, -1735.3131, 675.7687) && PlayerData[playerid][pHospitalInt] != -1)
		{
			JBC_SetPlayerPos(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][0], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][1], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][2]);
			SetPlayerFacingAngle(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][3]);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = -1;
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 272.2939, 1388.8876, 11.1342))
		{
		    JBC_SetPlayerPosEx(playerid, 1206.8619, -1314.3546, 797.0880);
		    SetPlayerFacingAngle(playerid, 270.0000);

		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1206.8619, -1314.3546, 796.7880) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD && !PlayerData[playerid][pJailTime])
		{
		    if (PlayerData[playerid][pFreeze])
			{
		        TogglePlayerControllable(playerid, 1);
		        KillTimer(PlayerData[playerid][pFreezeTimer]);
			}
		    JBC_SetPlayerPos(playerid, 272.2939, 1388.8876, 11.1342);
		    SetPlayerFacingAngle(playerid, 270.0000);

		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1211.1923, -1354.3439, 796.7456) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD)
		{
		    if (PlayerData[playerid][pFreeze])
			{
		        TogglePlayerControllable(playerid, 1);
		        KillTimer(PlayerData[playerid][pFreezeTimer]);
			}
		    JBC_SetPlayerPos(playerid, 201.8927, 1437.1788, 10.5950);
		    SetPlayerFacingAngle(playerid, 180.0000);

		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 201.8927, 1437.1788, 10.5950))
		{
		    JBC_SetPlayerPosEx(playerid, 1211.1923, -1354.3439, 797.0456);
		    SetPlayerFacingAngle(playerid, 0.0000);

		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

		    SetCameraBehindPlayer(playerid);
		}
		for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) if (IsPlayerInRangeOfPoint(playerid, 3.0, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]))
		{
			JBC_SetPlayerPos(playerid, -204.5648, -1736.1201, 675.7687);
			SetPlayerFacingAngle(playerid, 180.0000);

			TogglePlayerControllable(playerid, 0);
			SetTimerEx("HastaneTimer", 3000, false, "d", playerid);

			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, i + 5000);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = i;

		    return 1;
	    }
	    if ((id = House_Nearest(playerid)) != -1)
	    {
	        if (HouseData[id][houseLocked])
	            return SendErrorMessage(playerid, "Bu ev kilitli.");

			JBC_SetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
			SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);
			PlayerData[playerid][pInt] = 1;
            ObjeleriYukle(playerid);
			SetPlayerInterior(playerid, HouseData[id][houseInterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);
			SendClientMessageEx(playerid, COLOR_GRAY, "EV: {FFFFFF}Bu ev %s adlý kiþiye kayýtlýdýr.", HouseData[id][houseOwnerName]);
			SendClientMessageEx(playerid, COLOR_GRAY, "EV: {FFFFFF}Bu evin sistemsel fiyatý %s miktarýndadýr.", FormatNumber(HouseData[id][housePrice]));
            ObjeleriYukle(playerid);
			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = HouseData[id][houseID];
			return 1;
		}
		if ((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
	    {
	        if (HouseData[id][houseLocked])
	            return SendErrorMessage(playerid, "Kapý kilitli.");

			JBC_SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
			SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);

			SetPlayerInterior(playerid, HouseData[id][houseExterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
            PlayerData[playerid][pInt] = 1;
            ObjeleriYukle(playerid);
			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = -1;
			return 1;
		}
        if ((id = Business_Nearest(playerid)) != -1)
	    {
	        if (BusinessData[id][bizLocked])
	            return SendErrorMessage(playerid, "Bu dükkan þu anda kilitli.");

            if (BusinessData[id][bizLoginFee] > 0 && !PlayerData[playerid][pBizRank])
			{
			    if(GetMoney(playerid) < BusinessData[id][bizLoginFee]) return SendErrorMessage(playerid, "Giriþ ücreti için yeterli paran yok.");
				BusinessData[id][bizVault] += BusinessData[id][bizLoginFee];
                GiveMoney(playerid, -BusinessData[id][bizLoginFee]);
			}

			if (BusinessData[id][bizType] == 9 && strlen(BusinessData[id][bizMusic]) > 0 )
			{
				PlayAudioStreamForPlayer(playerid, BusinessData[id][bizMusic]);
			}
			if (PlayerData[playerid][pTask] && !PlayerData[playerid][pStoreTask])
			{
			    PlayerData[playerid][pStoreTask] = 1;
				//Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Retail Store", "This business is a Retail Store. You can purchase many items here using the /buy command.\nThere are many useful things that you can purchase here, which are added to your inventory.\n\nThe most useful item is the GPS System, as this device allows you to find what you need.\nYou can leave this business at any time by pressing the 'F' key at the door.", "Close", "");

			    if (IsTaskCompleted(playerid))
				{
    				PlayerData[playerid][pTask] = 0;
					//ShowPlayerFooter(playerid, "You have ~g~completed~w~ all your tasks!");
				}
			}
			JBC_SetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
			SetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

			SetPlayerInterior(playerid, BusinessData[id][bizInterior]);
			SetPlayerVirtualWorld(playerid, BusinessData[id][bizID] + 6000);
			SetCameraBehindPlayer(playerid);
            PlayerData[playerid][pInt] = 1;
			PlayerData[playerid][pBusiness] = BusinessData[id][bizID];
            ObjeleriYukle(playerid);
        	TogglePlayerControllable(playerid, 0);
		/*	if (strlen(BusinessData[id][bizMessage]) && strcmp(BusinessData[id][bizMessage], "YOK", true)) {
			    SendClientMessage(playerid, COLOR_DARKBLUE, BusinessData[id][bizMessage]);
			}*/
			return 1;
		}
		if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
	    {
	    if (BusinessData[id][bizLocked]) return SendErrorMessage(playerid, "Kapý kilitli.");

			JBC_SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
			SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);

			SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
			PlayerData[playerid][pInt] = 1;
            ObjeleriYukle(playerid);
			if (BusinessData[id][bizType] == 9)	StopAudioStreamForPlayer(playerid);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pBusiness] = -1;
			return 1;
		}
		if ((id = Entrance_Nearest(playerid)) != -1)
	    {
	        if (EntranceData[id][entranceLocked])
	            return SendErrorMessage(playerid, "Bu bina kilitli.");

            if (PlayerData[playerid][pTask])
			{
				if (EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
				{
			    	PlayerData[playerid][pBankTask] = 1;
			    	//Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Banking", "This is one of the banks of San Andreas. You can manage your bank accounts here.\nEach player has a standard bank account and a savings account for extra funds.\n\nYou can type /bank inside this building to manage either of your bank accounts.\nIf you are near any ATM machine, you can use the /atm command for your banking needs.", "Close", "");

				    if (IsTaskCompleted(playerid))
					{
				        PlayerData[playerid][pTask] = 0;
						//ShowPlayerFooter(playerid, "You have ~g~completed~w~ all your tasks!");
					}
				}
				else if (EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
				{
			    	PlayerData[playerid][pTestTask] = 1;
			    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "DMV", "The DMV is where a player can attempt the driving test to obtain their license.\nYou must avoid hitting obstacles, damaging the vehicle or speeding during the test.\n\nIt is legally required to possess a driving license to drive in San Andreas.\nDriving without a license can result in several consequences by law enforcement.", "Close", "");

				    if (IsTaskCompleted(playerid))
					{
				        PlayerData[playerid][pTask] = 0;
						//ShowPlayerFooter(playerid, "You have ~g~completed~w~ all your tasks!");
					}
				}
			}
			 if (strlen(EntranceData[id][entrancePass]))
		{
		    Dialog_Show(playerid, EntrancePass, DIALOG_STYLE_INPUT, "Þifre Gir", "Aþaðýya bu kapýya girmek için þifreyi giriniz:", "Tamam", "{FF6347}Iptal");
		}
		else
		{

			    JBC_SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

			SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

			SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pInt] = 1;
            ObjeleriYukle(playerid);
            }
			if(EntranceData[id][entranceType] == 6) SendClientMessage(playerid, COLOR_DARKBLUE, "Burasý bir Iddaa Bâyidir, /iddaayardim ile gerekli komutlarý öðrenebilirsiniz.");
			if(EntranceData[id][entranceType] == 2)
			{
			    if(GetPVarInt(playerid, "BankPickupCooldown") > gettime()) return 1;
		        if(IsPlayerInRangeOfPoint(playerid, 2.0,  2303.1777, -16.1625, 27.0)) {
		            SetPVarInt(playerid, "InsideBank", 1);
		                //JBC_SetPlayerPos(playerid, 2305.5591, -16.1253, 26.7496);
		                SetPVarInt(playerid, "BankPickupCooldown", gettime() + PICKUP_COOLDOWN);

		                if(BankControls[Alarm])
		                {
		            SetPVarInt(playerid, "Alarm", 1);
		                PlayerPlaySound(playerid, 3401, 0.0, 0.0, 0.0);
		                }
		        }
			}
			if(EntranceData[id][entranceType] == 7)
			{

		            if(!GetPVarInt(playerid, "animsloaded"))
		            {
		                ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
		                ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
		            ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
		                        SetPVarInt(playerid, "animsloaded", 1);
		                }

		           // SetPlayerInterior(playerid, 1);
		            //ayarlaVirtualWorld(playerid, VAULT_VIRTUALWORLD);
		        //JBC_SetPlayerPos(playerid, 2144.2788, 1602.5975, 997.7766);
		                SetPVarInt(playerid, "BankPickupCooldown", gettime() + PICKUP_COOLDOWN);

			}
			if(EntranceData[id][entranceBaglanti] == 1)
			{
                	PlayerData[playerid][pEntrance] = -1;
			}
			else PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];

			return 1;
		}
		if ((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
	    {
	        if (EntranceData[id][entranceCustom])
				JBC_SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			else
			    JBC_SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			if(EntranceData[id][entranceType] == 7)
			{

		            //ayarlaInterior(playerid, 0);
		            //ayarlaVirtualWorld(playerid, 0);
		       		// JBC_SetPlayerPos(playerid, 2315.5637, -0.1449, 26.7422);
		            SetPVarInt(playerid, "BankPickupCooldown", gettime() + PICKUP_COOLDOWN);
			}
			SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);
			PlayerData[playerid][pInt] = 1;
            ObjeleriYukle(playerid);
			SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);
			return 1;
		}
		if ((id = Kereste_ID(playerid)) != -1 && PlayerData[playerid][pKereste] == -1  && Keresteler[id][keresteVehicle] == INVALID_VEHICLE_ID && !IsWoodInUse(id))
		{
		    if ((id = Kereste_Highest(id)) == -1)
		        id = Kereste_ID(playerid);

		    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

            PlayerData[playerid][pKereste] = id;
            SetPlayerAttachedObject(playerid, 4, 1463, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 90.765972, 0.500000, 0.500000, 0.500000);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s yavaþça eðilir ve odunlarý kucaklar.", ReturnName(playerid, 0));
			SendServerMessage(playerid, "Odunlarý kaldýrdýn, araca yüklemek için aracýn yanýnda 'N' bas.");

			DestroyDynamicObject(Keresteler[id][keresteObject]);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			Keresteler[id][keresteObject] = INVALID_OBJECT_ID;
			return 1;
		}
		if (PlayerData[playerid][pKereste] != -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		{
		    ApplyAnimation(playerid, "CARRY", "null", 4.0, 0, 0, 0, 0, 0);
		    ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);

			Kereste_Birak(playerid, 1.5);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s elindeki odunlarý yere býrakýr.", ReturnName(playerid, 0));

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
		if ((id = Crate_Nearest(playerid)) != -1 && PlayerData[playerid][pCarryCrate] == -1 && !IsCrateInUse(id))
		{
		    // If the crate is within a stack, this function below
		    // will get the highest crate on the stack.

		    if ((id = Crate_Highest(id)) == -1)
		        id = Crate_Nearest(playerid);

		    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

            PlayerData[playerid][pCarryCrate] = id;
            SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s yavaþça eðilir ve sandýðý kucaklar.", ReturnName(playerid, 0));
			SendServerMessage(playerid, "Sandýðý kaldýrdýn, araca yüklemek için aracýn yanýnda 'N' bas.");

			DestroyDynamicObject(CrateData[id][crateObject]);
			if(IsValidDynamic3DTextLabel(CrateData[id][crateText3D]))
DestroyDynamic3DTextLabel(CrateData[id][crateText3D]);


			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			CrateData[id][crateObject] = INVALID_OBJECT_ID;
			return 1;
		}
		if (PlayerData[playerid][pCarryCrate] != -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY && !PlayerData[playerid][pCrafting])
		{
		    ApplyAnimation(playerid, "CARRY", "null", 4.0, 0, 0, 0, 0, 0);
		    ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);

			Crate_Drop(playerid, 1.5);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s elindeki sandýðý yere býrakýr.", ReturnName(playerid, 0));

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
	}
	return 1;
}


forward PutInsideVehicle(playerid, vehicleid);
public PutInsideVehicle(playerid, vehicleid)
{
	if (!PlayerData[playerid][pDrivingTest])
	    return 0;

	RemoveFromVehicle(vehicleid);
    PutPlayerInVehicle(playerid, vehicleid, 0);
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
DisablePlayerCheckpoint(playerid);
if(IsAMotorBike(vehicleid))
	{
    	RemovePlayerAttachedObject(playerid, 4);
	}


	if(PlayerData[playerid][pEmniyetKemeri] && !IsAMotorBike(vehicleid)) {
		PlayerData[playerid][pEmniyetKemeri] = false;
//		SetPlayerChatBubble(playerid, "[ Emniyet kemeri çýkartýldý ]", COLOR_RED, 2000);
    	SendClientMessage(playerid,  COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Araçtan indiðiniz için emniyet kemeri otomatik olarak çýkartýldý.");
 	}
	if(GetVehicleModel(vehicleid) == 408)
	{
    	garbage_AracDurum[vehicleid] = false;
		garbage_AracTime[vehicleid] = gettime()+80;
		garbage_AracPlayer[vehicleid] = INVALID_PLAYER_ID;
		SendServerMessage(playerid, "Çöpçülük aracýndan indin, '80' saniye içinde geri binmezsen araç spawnlanacak.");
	}
    for(new ia; ia < 5; ia++) TextDrawHideForPlayer(playerid, carMDC[vehicleid][ia]);
    KillTimer(KMTimer[playerid]);
	SetPVarInt(playerid, "EnSonBindigiArac", vehicleid);
	new id = Car_GetID(vehicleid);
if(CarData[id][carMeslek] >= 1) {
SendServerMessage(playerid, "Meslek aracýndan indiðiniz için 30 saniye sonra respawnlanacak.");
SetTimerEx("MeslekRespawn", 30000, false, "dd", playerid, vehicleid);
}
	if (PlayerData[playerid][pTaxiDuty])
	{
        foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pTaxiDuty] = false;
        SendServerMessage(playerid, "Araçtan indiðin için iþbaþýndan çýktýn.");
	}
	if (PlayerData[playerid][pPizzaBasladimi] == 1)
	{
		SetPVarInt(playerid, "PizzaMotorID", vehicleid);
	    Dialog_Show(playerid, PizzaAyril, DIALOG_STYLE_MSGBOX, "Pizza Ýptal", "Araçtan indin, pizza daðýtýmýný iptal etmek istiyor musun?", "Evet", "Hayir");
	}
	if (tiryapiyor[playerid])
	{
	    SetPVarInt(playerid, "TirID", vehicleid);
	    Dialog_Show(playerid, TirAyril, DIALOG_STYLE_MSGBOX, "Týr Ýptal", "Araçtan indin, týr seferini iptal etmek istiyor musun?", "Evet", "Hayir");
	}
    if (PlayerData[playerid][pDrivingTest])
	{
	    SetTimerEx("PutInsideVehicle", 500, false, "dd", playerid, vehicleid);
		Dialog_Show(playerid, LeaveTest, DIALOG_STYLE_MSGBOX, "Confirm Test Leave", "Warning: Are you sure you want to exit the driving test?", "Yes", "No");
	}
	if (PlayerData[playerid][pJob] == JOB_UNLOADER && GetVehicleModel(vehicleid) == 530)
	{
	    CoreVehicles[vehicleid][vehLoadType] = 0;
		DestroyObject(CoreVehicles[vehicleid][vehCrate]);

		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
for(new i=0; i<MAX_PLAYERS; i++)
     {
        if (ispassenger) return 1;
        if(IsPlayerInVehicle(i,vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerTeam(i) ==  GetPlayerTeam(playerid)) {
            new Float:X,Float:Y,Float:Z;
            GetPlayerPos(playerid,X,Y,Z);
            ClearAnimations(playerid);
            SetPlayerPos(playerid,X,Y,Z+1);
            TogglePlayerControllable(playerid, 0);
            SendErrorMessage(playerid, "Car-jack yasaklý! 3 saniye boyunca dondun");
            SetTimerEx("HastaneTimer", 3000, false, "d", playerid);
          }
      }



	if( ispassenger && GetVehicleModel(vehicleid) == 570 )
	{
	   // if(!spamProtect(playerid, "Binis", 1)) return 1;
		if(PlayerData[playerid][pBilet] <= 0) {
   			SetCameraBehindPlayer(playerid); ClearAnimations(playerid);
			return SendErrorMessage(playerid, "Biletiniz yok.");
		}
		SetCameraBehindPlayer(playerid); ClearAnimations(playerid);
		PlayerData[playerid][pBilet]--;
		SendServerMessage(playerid, "Tren seyahatini tercih ettiniz, bir biletiniz kullanýldý.");
		JBC_SetPlayerPos(playerid, -357.5095, 3415.0078, 1032.7606);
		SetPlayerFacingAngle(playerid, 358.8447);
		SetPlayerVirtualWorld(playerid, vehicleid+2000);
	}
	if( !ispassenger && (vehicleid == Tren  || vehicleid == Shamal ) && !IsPlayerNPC(playerid))
	{
	    SetCameraBehindPlayer(playerid); ClearAnimations(playerid);
        return SendErrorMessage(playerid, "Bu aracý kullanamazsýnýz.");
	}
	if( ispassenger && vehicleid == Shamal)
	{
	   // if(!spamProtect(playerid, "Binis", 1)) return 1;
		if(PlayerData[playerid][pBilet] <= 0) {
			RemovePlayerFromVehicle(playerid);
   			SetCameraBehindPlayer(playerid); ClearAnimations(playerid);
			return SendErrorMessage(playerid, "Biletiniz yok.");
		}
		PlayerData[playerid][pBilet]--;
		SendServerMessage(playerid, "Uçak seyahatini tercih ettiniz, bir biletiniz kullanýldý.");
		JBC_SetPlayerPos(playerid, 3.1347,23.0074,1199.5937);
		SetPlayerFacingAngle(playerid, 88.1222);
		SetPlayerVirtualWorld(playerid, vehicleid+2000);
		SetPlayerInterior(playerid, 1);
	}

	if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || PlayerData[playerid][pFirstAid] || PlayerData[playerid][pBaygin]) {
	    ClearAnimations(playerid);
	    return 0;
	}
	new id = Car_GetID(vehicleid);

	if (!ispassenger && id != -1 && CarData[id][carFaction] > 0 && GetFactionType(playerid) != CarData[id][carFaction] && !Car_IsOwner(playerid, id)) {
	    ClearAnimations(playerid);

	    return SendErrorMessage(playerid, "Bu aracýn anahtarýna sahip deðilsin.");
	}
	return 1;
}


forward tir(playerid);
public tir(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new trailerid = GetVehicleTrailer(vehicleid);
	if(IsTrailerAttachedToVehicle(vehicleid))
	{
	    TirBitir(playerid, vehicleid);
	    tiryuk[trailerid] = 0;
		RespawnVehicle(trailerid);
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	new yarisid = PlayerData[playerid][pYaris];
	if(Yarislar[yarisid][yarisVarmi])
	{
	    new a = PlayerData[playerid][pYarisAdim]+1;
	    PlayerData[playerid][pYarisAdim]++;
	    if(Yarislar[yarisid][yarisCountCP] == PlayerData[playerid][pYarisAdim])
		{
		    if(a >= Yarislar[yarisid][yarisCountCP])
			{
				Yarislar[yarisid][yarisSiralama]++;
				new siralamastr[128];
				format(siralamastr, 128, "%s ~g~(%d. oldu)", ReturnName(playerid, 0), Yarislar[yarisid][yarisSiralama]);
			    foreach(new i : Player) {
		 			if(PlayerData[i][pYaris] == yarisid) ShowPlayerFooter(i, siralamastr);
				}
				DisablePlayerRaceCheckpoint(playerid);
				SendServerMessage(playerid, "Yarýþta %d. oldun, tebrikler.", Yarislar[yarisid][yarisSiralama]);
			}
		    a = Yarislar[yarisid][yarisCountCP];
		    SetPlayerRaceCheckpoint(playerid, 1, Yarislar[yarisid][yarisCPx][a], Yarislar[yarisid][yarisCPy][a], Yarislar[yarisid][yarisCPz][a], Yarislar[yarisid][yarisCPx][a+1], Yarislar[yarisid][yarisCPy][a+1], Yarislar[yarisid][yarisCPz][a+1], 5.0);

			return 1;
		}
	    SetPlayerRaceCheckpoint(playerid, 0, Yarislar[yarisid][yarisCPx][a], Yarislar[yarisid][yarisCPy][a], Yarislar[yarisid][yarisCPz][a], Yarislar[yarisid][yarisCPx][a+1], Yarislar[yarisid][yarisCPy][a+1], Yarislar[yarisid][yarisCPz][a+1], 5.0);
	}
	return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
if(CPcimento[playerid] == cimento1)
{
   CPcimento[playerid] = cimento2;
   SetPlayerCheckpoint(playerid, cimento2_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento2)
{
   CPcimento[playerid] = cimento3;
   SetPlayerCheckpoint(playerid, cimento3_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento3)
{
   CPcimento[playerid] = cimento4;
   SetPlayerCheckpoint(playerid, cimento4_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento4)
{
   CPcimento[playerid] = cimento5;
   SetPlayerCheckpoint(playerid, cimento5_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento5)
{
   CPcimento[playerid] = cimento6;
   SetPlayerCheckpoint(playerid, cimento6_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento6)
{
   CPcimento[playerid] = cimento7;
   SetPlayerCheckpoint(playerid, cimento7_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento7)
{
   CPcimento[playerid] = cimento8;
   SetPlayerCheckpoint(playerid, cimento8_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento8)
{
   CPcimento[playerid] = cimento9;
   SetPlayerCheckpoint(playerid, cimento9_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento9)
{
   CPcimento[playerid] = cimento10;
   SetPlayerCheckpoint(playerid, cimento10_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento10)
{
   CPcimento[playerid] = cimento11;
   SetPlayerCheckpoint(playerid, cimento11_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento11)
{
   CPcimento[playerid] = cimento12;
   SetPlayerCheckpoint(playerid, cimento12_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento12)
{
   CPcimento[playerid] = cimento13;
   SetPlayerCheckpoint(playerid, cimento13_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento13)
{
   CPcimento[playerid] = cimento14;
   SetPlayerCheckpoint(playerid, cimento14_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento14)
{
   CPcimento[playerid] = cimento15;
   SetPlayerCheckpoint(playerid, cimento15_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento15)
{
   CPcimento[playerid] = cimento16;
   SetPlayerCheckpoint(playerid, cimento16_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento16)
{
   CPcimento[playerid] = cimento17;
   SetPlayerCheckpoint(playerid, cimento17_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento17)
{
   CPcimento[playerid] = cimento18;
   SetPlayerCheckpoint(playerid, cimento18_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento18)
{
   CPcimento[playerid] = cimento19;
   SetPlayerCheckpoint(playerid, cimento19_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento19)
{
   CPcimento[playerid] = cimento20;
   SetPlayerCheckpoint(playerid, cimento20_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento20)
{
   CPcimento[playerid] = cimento21;
   SetPlayerCheckpoint(playerid, cimento21_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento21)
{
   CPcimento[playerid] = cimento22;
   SetPlayerCheckpoint(playerid, cimento22_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento22)
{
   CPcimento[playerid] = cimento23;
   SetPlayerCheckpoint(playerid, cimento23_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento23)
{
   CPcimento[playerid] = cimento24;
   SetPlayerCheckpoint(playerid, cimento24_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento24)
{
   CPcimento[playerid] = cimento25;
   SetPlayerCheckpoint(playerid, cimento25_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento25)
{
   CPcimento[playerid] = cimento26;
   SetPlayerCheckpoint(playerid, cimento26_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento26)
{
   CPcimento[playerid] = cimento27;
   SetPlayerCheckpoint(playerid, cimento27_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento27)
{
   CPcimento[playerid] = cimento28;
   SetPlayerCheckpoint(playerid, cimento28_CO, 4.1);
    return 1;
}
if(CPcimento[playerid] == cimento28)
{
CPcimento[playerid] = 0;
  new payment;
				new level = PlayerData[playerid][pCimentoSkill];
				if(level >= 0 && level < 50) payment = 600;
				else if(level >= 50 && level < 100) payment = 750;
				else if(level >= 100 && level < 200) payment = 800;
				else if(level >= 200 && level < 400) payment = 850;
				else if(level >= 400) payment = 900;
new vehicleid = GetPlayerVehicleID(playerid);
if (PlayerData[playerid][pJob] != JOB_CIMENTO)
	    return SendErrorMessage(playerid, "Çimento taþýmacýlýðý mesleðinde deðilsin.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid))))
        return SendErrorMessage(playerid, "Meslek aracý deðil.");

      if (CoreVehicles[vehicleid][vehCimento] == 0) return SendErrorMessage(playerid, "Bu araçta yük yok.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");
if(!IsPlayerInRangeOfPoint(playerid, 4.5, -1870.0231,-201.6903,19.3219)) return SendErrorMessage(playerid, "Çimento satma noktasýnda deðilsiniz.");
new level2 = PlayerData[playerid][pCimentoSkill], string2[128];
if(level2 >= 0 && level2 < 25) { SendClientMessage(playerid, COLOR_YELLOW, "Çimento Taþýmacýlýðý Levelin = 1"); format(string2, sizeof(string2), "Level atlamak için %d yük daha teslim etmelisiniz.",25 - level2); SendClientMessage(playerid, COLOR_YELLOW, string2); }
else if(level2 >= 25 && level2 < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Çimento Taþýmacýlýðý Levelin = 2"); format(string2, sizeof(string2), "Level atlamak için %d yük daha teslim etmelisiniz.", 50 - level2); SendClientMessage(playerid, COLOR_YELLOW, string2); }
else if(level2 >= 50 && level2 < 75) { SendClientMessage(playerid, COLOR_YELLOW, "Çimento Taþýmacýlýðý Levelin = 3"); format(string2, sizeof(string2), "Level atlamak için %d yük daha teslim etmelisiniz.", 75 - level2); SendClientMessage(playerid, COLOR_YELLOW, string2); }
else if(level2 >= 75 && level2 < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Çimento Taþýmacýlýðý Levelin = 4"); format(string2, sizeof(string2), "Level atlamak için %d yük daha teslim etmelisiniz.", 100 - level2); SendClientMessage(playerid, COLOR_YELLOW, string2); }
else if(level2 >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Çimento Taþýmacýlýðý Levelin = 5"); }
PlayerData[playerid][pCimentoSkill]++;
if(PlayerData[playerid][pSilverVip] == 1)
{
GiveMoney(playerid, 250);
SendServerMessage(playerid, "Silver VIP olduðun için ekstradan 250 dolar kazandýn!");
}
if(PlayerData[playerid][pGoldVip] == 1)
{
GiveMoney(playerid, 500);
SendServerMessage(playerid, "Gold VIP olduðun için ekstradan 500 dolar kazandýn!");
}
if(PlayerData[playerid][pQuantumVip] == 1)
{
GiveMoney(playerid, 750);
SendServerMessage(playerid, "Quantum VIP olduðun için ekstradan 750 dolar kazandýn!");
}
SendServerMessage(playerid, "Çimento sattýn ve %d$ kazandýn!", payment);
DisablePlayerCheckpoint(playerid);
CoreVehicles[vehicleid][vehCimento] = 0;
GiveMoney(playerid, payment);
return 1;
}
if(CPtasimacilik[playerid] == tasimacilik1)
{
   CPtasimacilik[playerid] = tasimacilik2;
   SetPlayerCheckpoint(playerid, tasimacilik2_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik2)
{
   CPtasimacilik[playerid] = tasimacilik3;
   SetPlayerCheckpoint(playerid, tasimacilik3_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik3)
{
   CPtasimacilik[playerid] = tasimacilik4;
   SetPlayerCheckpoint(playerid, tasimacilik4_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik4)
{
   CPtasimacilik[playerid] = tasimacilik5;
   SetPlayerCheckpoint(playerid, tasimacilik5_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik5)
{
   CPtasimacilik[playerid] = tasimacilik6;
   SetPlayerCheckpoint(playerid, tasimacilik6_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik6)
{
   CPtasimacilik[playerid] = tasimacilik7;
   SetPlayerCheckpoint(playerid, tasimacilik7_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik7)
{
   CPtasimacilik[playerid] = tasimacilik8;
   SetPlayerCheckpoint(playerid, tasimacilik8_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik8)
{
   CPtasimacilik[playerid] = tasimacilik9;
   SetPlayerCheckpoint(playerid, tasimacilik9_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik9)
{
   CPtasimacilik[playerid] = tasimacilik10;
   SetPlayerCheckpoint(playerid, tasimacilik10_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik10)
{
   CPtasimacilik[playerid] = tasimacilik11;
   SetPlayerCheckpoint(playerid, tasimacilik11_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik11)
{
   CPtasimacilik[playerid] = tasimacilik12;
   SetPlayerCheckpoint(playerid, tasimacilik12_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik12)
{
   CPtasimacilik[playerid] = tasimacilik13;
   SetPlayerCheckpoint(playerid, tasimacilik13_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik13)
{
   CPtasimacilik[playerid] = tasimacilik14;
   SetPlayerCheckpoint(playerid, tasimacilik14_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik14)
{
   CPtasimacilik[playerid] = tasimacilik15;
   SetPlayerCheckpoint(playerid, tasimacilik15_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik15)
{
   CPtasimacilik[playerid] = tasimacilik16;
   SetPlayerCheckpoint(playerid, tasimacilik16_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik16)
{
   CPtasimacilik[playerid] = tasimacilik17;
   SetPlayerCheckpoint(playerid, tasimacilik17_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik17)
{
   CPtasimacilik[playerid] = tasimacilik18;
   SetPlayerCheckpoint(playerid, tasimacilik18_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik18)
{
   CPtasimacilik[playerid] = tasimacilik19;
   SetPlayerCheckpoint(playerid, tasimacilik19_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik19)
{
   CPtasimacilik[playerid] = tasimacilik20;
   SetPlayerCheckpoint(playerid, tasimacilik20_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik20)
{
   CPtasimacilik[playerid] = tasimacilik21;
   SetPlayerCheckpoint(playerid, tasimacilik21_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik21)
{
   CPtasimacilik[playerid] = tasimacilik22;
   SetPlayerCheckpoint(playerid, tasimacilik22_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik22)
{
   CPtasimacilik[playerid] = tasimacilik23;
   SetPlayerCheckpoint(playerid, tasimacilik23_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik23)
{
   CPtasimacilik[playerid] = tasimacilik24;
   SetPlayerCheckpoint(playerid, tasimacilik24_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik24)
{
   CPtasimacilik[playerid] = tasimacilik25;
   SetPlayerCheckpoint(playerid, tasimacilik25_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik25)
{
   CPtasimacilik[playerid] = tasimacilik26;
   SetPlayerCheckpoint(playerid, tasimacilik26_CO, 4.1);
    return 1;
}
if(CPtasimacilik[playerid] == tasimacilik26)
{
   CPtasimacilik[playerid] = tasimacilik27;
   SetPlayerCheckpoint(playerid, tasimacilik27_CO, 4.1);
    return 1;
}

if(CPtasimacilik[playerid] == tasimacilik27)
{
  CPtasimacilik[playerid] = 0;
  new vehicleid = GetPlayerVehicleID(playerid);
if (PlayerData[playerid][pJob] != JOB_TASIMACI)
	    return SendErrorMessage(playerid, "Taþýmacýlýk þirketinde deðilsin.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid))))
        return SendErrorMessage(playerid, "Meslek aracý deðil.");

      if (CoreVehicles[vehicleid][vehTasimaci] == 0) return SendErrorMessage(playerid, "Bu araçta yük yok.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");
	if (!IsPlayerInRangeOfPoint(playerid, 4.5, 2283.5410,64.1197,26.5771)) return SendErrorMessage(playerid, "Taþýmacýlýk mesleðinin teslim noktasýnda deðilsin.");
if(PlayerData[playerid][pSilverVip] == 1)
{
GiveMoney(playerid, 250);
SendServerMessage(playerid, "Silver VIP olduðun için ekstradan 250 dolar kazandýn!");
}
if(PlayerData[playerid][pQuantumVip] == 1)
{
GiveMoney(playerid, 750);
SendServerMessage(playerid, "Quantum VIP olduðun için ekstradan 750 dolar kazandýn!");
}
if(PlayerData[playerid][pGoldVip] == 1)
{
GiveMoney(playerid, 500);
SendServerMessage(playerid, "Gold VIP olduðun için ekstradan 500 dolar kazandýn!");
}
GiveMoney(playerid, 445);
SendServerMessage(playerid, "Yüklerini teslim ettin ve 445$ kazandýn!");
DisablePlayerCheckpoint(playerid);
CoreVehicles[vehicleid][vehTasimaci] = 0;
return 1;
}
if(CPotobus[playerid] == otobus1)
{
   CPotobus[playerid] = otobus2;
   SetPlayerCheckpoint(playerid, otobus2_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus2)
{
   CPotobus[playerid] = otobus3;
   SetPlayerCheckpoint(playerid, otobus3_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus3)
{
   CPotobus[playerid] = otobus4;
   SetPlayerCheckpoint(playerid, otobus4_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus4)
{
   CPotobus[playerid] = otobus5;
   SetPlayerCheckpoint(playerid, otobus5_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus5)
{
   CPotobus[playerid] = otobus6;
   SetPlayerCheckpoint(playerid, otobus6_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus6)
{
   CPotobus[playerid] = otobus7;
   SetPlayerCheckpoint(playerid, otobus7_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus7)
{
   CPotobus[playerid] = otobus8;
   SetPlayerCheckpoint(playerid, otobus8_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus8)
{
   CPotobus[playerid] = otobus9;
   SetPlayerCheckpoint(playerid, otobus9_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus9)
{
   CPotobus[playerid] = otobus10;
   SetPlayerCheckpoint(playerid, otobus10_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus10)
{
   CPotobus[playerid] = otobus11;
   SetPlayerCheckpoint(playerid, otobus11_CO, 4.6);
   TogglePlayerControllable(playerid, 0);
   SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
   GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
    return 1;
}
if(CPotobus[playerid] == otobus11)
{
   CPotobus[playerid] = otobus12;
   SetPlayerCheckpoint(playerid, otobus12_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus12)
{
   CPotobus[playerid] = otobus13;
   SetPlayerCheckpoint(playerid, otobus13_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus13)
{
   CPotobus[playerid] = otobus14;
   SetPlayerCheckpoint(playerid, otobus14_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus14)
{
   CPotobus[playerid] = otobus15;
   SetPlayerCheckpoint(playerid, otobus15_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus15)
{
   CPotobus[playerid] = otobus16;
   SetPlayerCheckpoint(playerid, otobus16_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus16)
{
   CPotobus[playerid] = otobus17;
   SetPlayerCheckpoint(playerid, otobus17_CO, 4.6);
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
    return 1;
}
if(CPotobus[playerid] == otobus17)
{
   CPotobus[playerid] = otobus18;
   SetPlayerCheckpoint(playerid, otobus18_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus18)
{
   CPotobus[playerid] = otobus19;
   SetPlayerCheckpoint(playerid, otobus19_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus19)
{
   CPotobus[playerid] = otobus20;
   SetPlayerCheckpoint(playerid, otobus20_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus20)
{
   CPotobus[playerid] = otobus21;
   SetPlayerCheckpoint(playerid, otobus21_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus21)
{
   CPotobus[playerid] = otobus22;

TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus22_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus22)
{
   CPotobus[playerid] = otobus23;
   SetPlayerCheckpoint(playerid, otobus23_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus23)
{
   CPotobus[playerid] = otobus24;
   SetPlayerCheckpoint(playerid, otobus24_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus24)
{
   CPotobus[playerid] = otobus25;
   SetPlayerCheckpoint(playerid, otobus25_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus25)
{
   CPotobus[playerid] = otobus26;
   SetPlayerCheckpoint(playerid, otobus26_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus26)
{
   CPotobus[playerid] = otobus27;
   SetPlayerCheckpoint(playerid, otobus27_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus27)
{
   CPotobus[playerid] = otobus28;
   SetPlayerCheckpoint(playerid, otobus28_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus28)
{
   CPotobus[playerid] = otobus29;
   SetPlayerCheckpoint(playerid, otobus29_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus29)
{
   CPotobus[playerid] = otobus30;
   SetPlayerCheckpoint(playerid, otobus30_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus30)
{
   CPotobus[playerid] = otobus31;
   SetPlayerCheckpoint(playerid, otobus31_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus31)
{
   CPotobus[playerid] = otobus32;
   SetPlayerCheckpoint(playerid, otobus32_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus32)
{
   CPotobus[playerid] = otobus33;
   SetPlayerCheckpoint(playerid, otobus33_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus33)
{
   CPotobus[playerid] = otobus34;
   SetPlayerCheckpoint(playerid, otobus34_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus34)
{
   CPotobus[playerid] = otobus35;
   SetPlayerCheckpoint(playerid, otobus35_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus35)
{
   CPotobus[playerid] = otobus36;
   SetPlayerCheckpoint(playerid, otobus36_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus36)
{
   CPotobus[playerid] = otobus37;
   SetPlayerCheckpoint(playerid, otobus37_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus37)
{
   CPotobus[playerid] = otobus38;
   SetPlayerCheckpoint(playerid, otobus38_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus38)
{
   CPotobus[playerid] = otobus39;
   SetPlayerCheckpoint(playerid, otobus39_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus39)
{
   CPotobus[playerid] = otobus40;
   SetPlayerCheckpoint(playerid, otobus40_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus40)
{
   CPotobus[playerid] = otobus41;
   SetPlayerCheckpoint(playerid, otobus41_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus41)
{
   CPotobus[playerid] = otobus42;
   SetPlayerCheckpoint(playerid, otobus42_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus42)
{
   CPotobus[playerid] = otobus43;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus43_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus43)
{
   CPotobus[playerid] = otobus44;
   SetPlayerCheckpoint(playerid, otobus44_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus44)
{
   CPotobus[playerid] = otobus45;
   SetPlayerCheckpoint(playerid, otobus45_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus45)
{
   CPotobus[playerid] = otobus46;
   SetPlayerCheckpoint(playerid, otobus46_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus46)
{
   CPotobus[playerid] = otobus47;
   SetPlayerCheckpoint(playerid, otobus47_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus47)
{
   CPotobus[playerid] = otobus48;
   SetPlayerCheckpoint(playerid, otobus48_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus48)
{
   CPotobus[playerid] = otobus49;
   SetPlayerCheckpoint(playerid, otobus49_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus49)
{
   CPotobus[playerid] = otobus50;
   SetPlayerCheckpoint(playerid, otobus50_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus50)
{
   CPotobus[playerid] = otobus51;
   SetPlayerCheckpoint(playerid, otobus51_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus51)
{
   CPotobus[playerid] = otobus52;
   SetPlayerCheckpoint(playerid, otobus52_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus52)
{
   CPotobus[playerid] = otobus53;
   SetPlayerCheckpoint(playerid, otobus53_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus53)
{
   CPotobus[playerid] = otobus54;
   SetPlayerCheckpoint(playerid, otobus54_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus54)
{
   CPotobus[playerid] = otobus55;
   SetPlayerCheckpoint(playerid, otobus55_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus55)
{
   CPotobus[playerid] = otobus56;
   SetPlayerCheckpoint(playerid, otobus56_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus56)
{
   CPotobus[playerid] = otobus57;
   SetPlayerCheckpoint(playerid, otobus57_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus57)
{
   CPotobus[playerid] = otobus58;
   SetPlayerCheckpoint(playerid, otobus58_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus58)
{
   CPotobus[playerid] = otobus59;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus59_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus59)
{
   CPotobus[playerid] = otobus60;
   SetPlayerCheckpoint(playerid, otobus60_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus60)
{
   CPotobus[playerid] = otobus61;
   SetPlayerCheckpoint(playerid, otobus61_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus61)
{
   CPotobus[playerid] = otobus62;
   SetPlayerCheckpoint(playerid, otobus62_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus62)
{
   CPotobus[playerid] = otobus63;
   SetPlayerCheckpoint(playerid, otobus63_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus63)
{
   CPotobus[playerid] = otobus64;
   SetPlayerCheckpoint(playerid, otobus64_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus64)
{
   CPotobus[playerid] = otobus65;
   SetPlayerCheckpoint(playerid, otobus65_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus65)
{
   CPotobus[playerid] = otobus66;
   SetPlayerCheckpoint(playerid, otobus66_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus66)
{
   CPotobus[playerid] = otobus67;
   SetPlayerCheckpoint(playerid, otobus67_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus67)
{
   CPotobus[playerid] = otobus68;
   SetPlayerCheckpoint(playerid, otobus68_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus68)
{
   CPotobus[playerid] = otobus69;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus69_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus69)
{
   CPotobus[playerid] = otobus70;
   SetPlayerCheckpoint(playerid, otobus70_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus70)
{
   CPotobus[playerid] = otobus71;
   SetPlayerCheckpoint(playerid, otobus71_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus71)
{
   CPotobus[playerid] = otobus72;
   SetPlayerCheckpoint(playerid, otobus72_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus72)
{
   CPotobus[playerid] = otobus73;
   SetPlayerCheckpoint(playerid, otobus73_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus73)
{
   CPotobus[playerid] = otobus74;
   SetPlayerCheckpoint(playerid, otobus74_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus74)
{
   CPotobus[playerid] = otobus75;
   SetPlayerCheckpoint(playerid, otobus75_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus75)
{
   CPotobus[playerid] = otobus76;
   SetPlayerCheckpoint(playerid, otobus76_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus76)
{
   CPotobus[playerid] = otobus77;
   SetPlayerCheckpoint(playerid, otobus77_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus77)
{
   CPotobus[playerid] = otobus78;
   SetPlayerCheckpoint(playerid, otobus78_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus78)
{
   CPotobus[playerid] = otobus79;
   SetPlayerCheckpoint(playerid, otobus79_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus79)
{
   CPotobus[playerid] = otobus80;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus80_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus80)
{
   CPotobus[playerid] = otobus81;
   SetPlayerCheckpoint(playerid, otobus81_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus81)
{
   CPotobus[playerid] = otobus82;
   SetPlayerCheckpoint(playerid, otobus82_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus82)
{
   CPotobus[playerid] = otobus83;
   SetPlayerCheckpoint(playerid, otobus83_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus83)
{
   CPotobus[playerid] = otobus84;
   SetPlayerCheckpoint(playerid, otobus84_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus84)
{
   CPotobus[playerid] = otobus85;
   SetPlayerCheckpoint(playerid, otobus85_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus85)
{
   CPotobus[playerid] = otobus86;
   SetPlayerCheckpoint(playerid, otobus86_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus86)
{
   CPotobus[playerid] = otobus87;
   SetPlayerCheckpoint(playerid, otobus87_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus87)
{
   CPotobus[playerid] = otobus88;
   SetPlayerCheckpoint(playerid, otobus88_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus88)
{
   CPotobus[playerid] = otobus89;
   SetPlayerCheckpoint(playerid, otobus89_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus89)
{
   CPotobus[playerid] = otobus90;
   SetPlayerCheckpoint(playerid, otobus90_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus90)
{
   CPotobus[playerid] = otobus91;

TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus91_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus91)
{
   CPotobus[playerid] = otobus92;
   SetPlayerCheckpoint(playerid, otobus92_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus92)
{
   CPotobus[playerid] = otobus93;
   SetPlayerCheckpoint(playerid, otobus93_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus93)
{
   CPotobus[playerid] = otobus94;
   SetPlayerCheckpoint(playerid, otobus94_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus94)
{
   CPotobus[playerid] = otobus95;
   SetPlayerCheckpoint(playerid, otobus95_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus95)
{
   CPotobus[playerid] = otobus96;
   SetPlayerCheckpoint(playerid, otobus96_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus96)
{
   CPotobus[playerid] = otobus97;
   SetPlayerCheckpoint(playerid, otobus97_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus97)
{
   CPotobus[playerid] = otobus98;
   SetPlayerCheckpoint(playerid, otobus98_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus98)
{
   CPotobus[playerid] = otobus99;
   SetPlayerCheckpoint(playerid, otobus99_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus99)
{
   CPotobus[playerid] = otobus100;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus100_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus100)
{
   CPotobus[playerid] = otobus101;
   SetPlayerCheckpoint(playerid, otobus101_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus101)
{
   CPotobus[playerid] = otobus102;
   SetPlayerCheckpoint(playerid, otobus102_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus102)
{
   CPotobus[playerid] = otobus103;
   SetPlayerCheckpoint(playerid, otobus103_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus103)
{
   CPotobus[playerid] = otobus104;
   SetPlayerCheckpoint(playerid, otobus104_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus104)
{
   CPotobus[playerid] = otobus105;
   SetPlayerCheckpoint(playerid, otobus105_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus105)
{
   CPotobus[playerid] = otobus106;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus106_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus106)
{
   CPotobus[playerid] = otobus107;
   SetPlayerCheckpoint(playerid, otobus107_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus107)
{
   CPotobus[playerid] = otobus108;
   SetPlayerCheckpoint(playerid, otobus108_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus108)
{
   CPotobus[playerid] = otobus109;
   SetPlayerCheckpoint(playerid, otobus109_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus109)
{
   CPotobus[playerid] = otobus110;
   SetPlayerCheckpoint(playerid, otobus110_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus110)
{
   CPotobus[playerid] = otobus111;
   SetPlayerCheckpoint(playerid, otobus111_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus111)
{
   CPotobus[playerid] = otobus112;
   SetPlayerCheckpoint(playerid, otobus112_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus112)
{
   CPotobus[playerid] = otobus113;
   SetPlayerCheckpoint(playerid, otobus113_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus113)
{
   CPotobus[playerid] = otobus114;
   SetPlayerCheckpoint(playerid, otobus114_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus114)
{
   CPotobus[playerid] = otobus115;
   SetPlayerCheckpoint(playerid, otobus115_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus115)
{
   CPotobus[playerid] = otobus116;
   SetPlayerCheckpoint(playerid, otobus116_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus116)
{
   CPotobus[playerid] = otobus117;
   SetPlayerCheckpoint(playerid, otobus117_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus117)
{
   CPotobus[playerid] = otobus118;
   SetPlayerCheckpoint(playerid, otobus118_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus118)
{
   CPotobus[playerid] = otobus119;
   SetPlayerCheckpoint(playerid, otobus119_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus119)
{
   CPotobus[playerid] = otobus120;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus120_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus120)
{
   CPotobus[playerid] = otobus121;
   SetPlayerCheckpoint(playerid, otobus121_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus121)
{
   CPotobus[playerid] = otobus122;
   SetPlayerCheckpoint(playerid, otobus122_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus122)
{
   CPotobus[playerid] = otobus123;
   SetPlayerCheckpoint(playerid, otobus123_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus123)
{
   CPotobus[playerid] = otobus124;
   SetPlayerCheckpoint(playerid, otobus124_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus124)
{
   CPotobus[playerid] = otobus125;
   SetPlayerCheckpoint(playerid, otobus125_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus125)
{
   CPotobus[playerid] = otobus126;
   SetPlayerCheckpoint(playerid, otobus126_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus126)
{
   CPotobus[playerid] = otobus127;
   SetPlayerCheckpoint(playerid, otobus127_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus127)
{
   CPotobus[playerid] = otobus128;
   SetPlayerCheckpoint(playerid, otobus128_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus128)
{
   CPotobus[playerid] = otobus129;
   SetPlayerCheckpoint(playerid, otobus129_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus129)
{
   CPotobus[playerid] = otobus130;
   SetPlayerCheckpoint(playerid, otobus130_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus130)
{
   CPotobus[playerid] = otobus131;
   SetPlayerCheckpoint(playerid, otobus131_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus131)
{
   CPotobus[playerid] = otobus132;
   SetPlayerCheckpoint(playerid, otobus132_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus132)
{
   CPotobus[playerid] = otobus133;
   SetPlayerCheckpoint(playerid, otobus133_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus133)
{
   CPotobus[playerid] = otobus134;
   SetPlayerCheckpoint(playerid, otobus134_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus134)
{
   CPotobus[playerid] = otobus135;
   SetPlayerCheckpoint(playerid, otobus135_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus135)
{
   CPotobus[playerid] = otobus136;
   SetPlayerCheckpoint(playerid, otobus136_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus136)
{
   CPotobus[playerid] = otobus137;
   SetPlayerCheckpoint(playerid, otobus137_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus137)
{
   CPotobus[playerid] = otobus138;
   SetPlayerCheckpoint(playerid, otobus138_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus138)
{
   CPotobus[playerid] = otobus139;
   SetPlayerCheckpoint(playerid, otobus139_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus139)
{
   CPotobus[playerid] = otobus140;
   SetPlayerCheckpoint(playerid, otobus140_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus140)
{
   CPotobus[playerid] = otobus141;
   SetPlayerCheckpoint(playerid, otobus141_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus141)
{
   CPotobus[playerid] = otobus142;
   SetPlayerCheckpoint(playerid, otobus142_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus142)
{
   CPotobus[playerid] = otobus143;
   SetPlayerCheckpoint(playerid, otobus143_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus143)
{
   CPotobus[playerid] = otobus144;
   SetPlayerCheckpoint(playerid, otobus144_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus144)
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Otobüste deðilsiniz.");
	if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid)))) return SendErrorMessage(playerid, "Meslek aracý deðil.");
//	new vehicleid = GetPlayerVehicleID(playerid);
//	new carid = Car_GetID(vehicleid);

    if (PlayerData[playerid][pJob] != JOB_OTOBUSSOFORU)
	    return SendErrorMessage(playerid, "Otobüs þöförü deðilsin.");

  CPotobus[playerid] = 0;
  GiveMoney(playerid, 370);
  SendServerMessage(playerid, "Otobüs seferin tamamlandý! 370$ kazandýn.");
  SendServerMessage(playerid, "3 tur atarsan ekstra 300$ bonus alacaksýn.");
  PlayerData[playerid][pOtobusTur]++;
  if (PlayerData[playerid][pOtobusTur] == 3)
  {
  SendServerMessage(playerid, "3 tur attýðýn için toplamda 670$ kazandýn.");
  PlayerData[playerid][pOtobusTur] = 0;
  GiveMoney(playerid, 670);
  CPotobus[playerid] = 0;
  PlayerData[playerid][pOtobusDuty] = false;
  DisablePlayerCheckpoint(playerid);
  }
  PlayerData[playerid][pOtobusDuty] = false;
  DisablePlayerCheckpoint(playerid);
    // Görev Bittiðinde Olacaklar
   return 1;
}
if(pCop[playerid] == 1)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 2;
SetPlayerCheckpoint(playerid, 954.538940, -1407.942382, 12.925345, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 2)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 3;
SetPlayerCheckpoint(playerid, 1062.813598, -1349.844848, 13.086701, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 3)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 4;
SetPlayerCheckpoint(playerid, 1076.857299, -1155.112426, 23.481101, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 4)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 5;
SetPlayerCheckpoint(playerid, 1096.760253, -942.036010, 42.477321, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 5)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 6;
SetPlayerCheckpoint(playerid, 1335.495971, -942.018798, 35.572380, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 6)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 7;
SetPlayerCheckpoint(playerid, 1403.524047, -1039.621948, 24.113580, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 7)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 8;
SetPlayerCheckpoint(playerid, 1474.131713, -1091.475585, 23.531709, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 8)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 9;
SetPlayerCheckpoint(playerid, 1442.489990, -1231.124511, 13.271898, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 9)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 10;
SetPlayerCheckpoint(playerid, 1275.507568, -1567.794189, 13.145867, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 10)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 11;
SetPlayerCheckpoint(playerid, 1025.046630, -1567.541748, 13.177808, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 11)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 12;
SetPlayerCheckpoint(playerid, 912.201904, -1506.778198, 13.158470, 2.0);
//SendClientMessage(playerid, COLOR_WHITE, "Toplamaya devam edin.");
return 1;
}

if(pCop[playerid] == 12)
{
new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));
new vehicleid = GetPlayerVehicleID(playerid);
new id = Car_GetID(vehicleid);
if (!Car_Meslek(playerid, id) && modelid != 574)
	    return SendErrorMessage(playerid, "Temizlik aracýnda deðilsin.");
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 13;
SetPlayerCheckpoint(playerid, 575.384826, -1390.649414, 13.992828, 2.0);
return 1;
}

if(pCop[playerid] == 13)
{
DisablePlayerCheckpoint(playerid);
pCop[playerid] = 0;
ResetSweeperInfo(playerid);
SendServerMessage(playerid, "Tebrikler, bütün çöpleri toplayarak $150 kazandýnýz!");
GiveMoney(playerid, 150);
return 1;
}
if(CPotobus[playerid] == otobus1)
{
   CPotobus[playerid] = otobus2;
   SetPlayerCheckpoint(playerid, otobus2_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus2)
{
   CPotobus[playerid] = otobus3;
   SetPlayerCheckpoint(playerid, otobus3_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus3)
{
   CPotobus[playerid] = otobus4;
   SetPlayerCheckpoint(playerid, otobus4_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus4)
{
   CPotobus[playerid] = otobus5;
   SetPlayerCheckpoint(playerid, otobus5_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus5)
{
   CPotobus[playerid] = otobus6;
   SetPlayerCheckpoint(playerid, otobus6_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus6)
{
   CPotobus[playerid] = otobus7;
   SetPlayerCheckpoint(playerid, otobus7_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus7)
{
   CPotobus[playerid] = otobus8;
   SetPlayerCheckpoint(playerid, otobus8_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus8)
{
   CPotobus[playerid] = otobus9;
   SetPlayerCheckpoint(playerid, otobus9_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus9)
{
   CPotobus[playerid] = otobus10;
   SetPlayerCheckpoint(playerid, otobus10_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus10)
{
   CPotobus[playerid] = otobus11;
   SetPlayerCheckpoint(playerid, otobus11_CO, 4.6);
   TogglePlayerControllable(playerid, 0);
   SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
   GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
    return 1;
}
if(CPotobus[playerid] == otobus11)
{
   CPotobus[playerid] = otobus12;
   SetPlayerCheckpoint(playerid, otobus12_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus12)
{
   CPotobus[playerid] = otobus13;
   SetPlayerCheckpoint(playerid, otobus13_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus13)
{
   CPotobus[playerid] = otobus14;
   SetPlayerCheckpoint(playerid, otobus14_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus14)
{
   CPotobus[playerid] = otobus15;
   SetPlayerCheckpoint(playerid, otobus15_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus15)
{
   CPotobus[playerid] = otobus16;
   SetPlayerCheckpoint(playerid, otobus16_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus16)
{
   CPotobus[playerid] = otobus17;
   SetPlayerCheckpoint(playerid, otobus17_CO, 4.6);
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
    return 1;
}
if(CPotobus[playerid] == otobus17)
{
   CPotobus[playerid] = otobus18;
   SetPlayerCheckpoint(playerid, otobus18_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus18)
{
   CPotobus[playerid] = otobus19;
   SetPlayerCheckpoint(playerid, otobus19_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus19)
{
   CPotobus[playerid] = otobus20;
   SetPlayerCheckpoint(playerid, otobus20_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus20)
{
   CPotobus[playerid] = otobus21;
   SetPlayerCheckpoint(playerid, otobus21_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus21)
{
   CPotobus[playerid] = otobus22;

TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus22_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus22)
{
   CPotobus[playerid] = otobus23;
   SetPlayerCheckpoint(playerid, otobus23_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus23)
{
   CPotobus[playerid] = otobus24;
   SetPlayerCheckpoint(playerid, otobus24_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus24)
{
   CPotobus[playerid] = otobus25;
   SetPlayerCheckpoint(playerid, otobus25_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus25)
{
   CPotobus[playerid] = otobus26;
   SetPlayerCheckpoint(playerid, otobus26_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus26)
{
   CPotobus[playerid] = otobus27;
   SetPlayerCheckpoint(playerid, otobus27_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus27)
{
   CPotobus[playerid] = otobus28;
   SetPlayerCheckpoint(playerid, otobus28_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus28)
{
   CPotobus[playerid] = otobus29;
   SetPlayerCheckpoint(playerid, otobus29_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus29)
{
   CPotobus[playerid] = otobus30;
   SetPlayerCheckpoint(playerid, otobus30_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus30)
{
   CPotobus[playerid] = otobus31;
   SetPlayerCheckpoint(playerid, otobus31_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus31)
{
   CPotobus[playerid] = otobus32;
   SetPlayerCheckpoint(playerid, otobus32_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus32)
{
   CPotobus[playerid] = otobus33;
   SetPlayerCheckpoint(playerid, otobus33_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus33)
{
   CPotobus[playerid] = otobus34;
   SetPlayerCheckpoint(playerid, otobus34_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus34)
{
   CPotobus[playerid] = otobus35;
   SetPlayerCheckpoint(playerid, otobus35_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus35)
{
   CPotobus[playerid] = otobus36;
   SetPlayerCheckpoint(playerid, otobus36_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus36)
{
   CPotobus[playerid] = otobus37;
   SetPlayerCheckpoint(playerid, otobus37_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus37)
{
   CPotobus[playerid] = otobus38;
   SetPlayerCheckpoint(playerid, otobus38_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus38)
{
   CPotobus[playerid] = otobus39;
   SetPlayerCheckpoint(playerid, otobus39_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus39)
{
   CPotobus[playerid] = otobus40;
   SetPlayerCheckpoint(playerid, otobus40_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus40)
{
   CPotobus[playerid] = otobus41;
   SetPlayerCheckpoint(playerid, otobus41_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus41)
{
   CPotobus[playerid] = otobus42;
   SetPlayerCheckpoint(playerid, otobus42_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus42)
{
   CPotobus[playerid] = otobus43;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus43_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus43)
{
   CPotobus[playerid] = otobus44;
   SetPlayerCheckpoint(playerid, otobus44_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus44)
{
   CPotobus[playerid] = otobus45;
   SetPlayerCheckpoint(playerid, otobus45_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus45)
{
   CPotobus[playerid] = otobus46;
   SetPlayerCheckpoint(playerid, otobus46_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus46)
{
   CPotobus[playerid] = otobus47;
   SetPlayerCheckpoint(playerid, otobus47_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus47)
{
   CPotobus[playerid] = otobus48;
   SetPlayerCheckpoint(playerid, otobus48_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus48)
{
   CPotobus[playerid] = otobus49;
   SetPlayerCheckpoint(playerid, otobus49_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus49)
{
   CPotobus[playerid] = otobus50;
   SetPlayerCheckpoint(playerid, otobus50_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus50)
{
   CPotobus[playerid] = otobus51;
   SetPlayerCheckpoint(playerid, otobus51_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus51)
{
   CPotobus[playerid] = otobus52;
   SetPlayerCheckpoint(playerid, otobus52_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus52)
{
   CPotobus[playerid] = otobus53;
   SetPlayerCheckpoint(playerid, otobus53_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus53)
{
   CPotobus[playerid] = otobus54;
   SetPlayerCheckpoint(playerid, otobus54_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus54)
{
   CPotobus[playerid] = otobus55;
   SetPlayerCheckpoint(playerid, otobus55_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus55)
{
   CPotobus[playerid] = otobus56;
   SetPlayerCheckpoint(playerid, otobus56_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus56)
{
   CPotobus[playerid] = otobus57;
   SetPlayerCheckpoint(playerid, otobus57_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus57)
{
   CPotobus[playerid] = otobus58;
   SetPlayerCheckpoint(playerid, otobus58_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus58)
{
   CPotobus[playerid] = otobus59;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus59_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus59)
{
   CPotobus[playerid] = otobus60;
   SetPlayerCheckpoint(playerid, otobus60_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus60)
{
   CPotobus[playerid] = otobus61;
   SetPlayerCheckpoint(playerid, otobus61_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus61)
{
   CPotobus[playerid] = otobus62;
   SetPlayerCheckpoint(playerid, otobus62_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus62)
{
   CPotobus[playerid] = otobus63;
   SetPlayerCheckpoint(playerid, otobus63_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus63)
{
   CPotobus[playerid] = otobus64;
   SetPlayerCheckpoint(playerid, otobus64_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus64)
{
   CPotobus[playerid] = otobus65;
   SetPlayerCheckpoint(playerid, otobus65_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus65)
{
   CPotobus[playerid] = otobus66;
   SetPlayerCheckpoint(playerid, otobus66_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus66)
{
   CPotobus[playerid] = otobus67;
   SetPlayerCheckpoint(playerid, otobus67_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus67)
{
   CPotobus[playerid] = otobus68;
   SetPlayerCheckpoint(playerid, otobus68_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus68)
{
   CPotobus[playerid] = otobus69;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus69_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus69)
{
   CPotobus[playerid] = otobus70;
   SetPlayerCheckpoint(playerid, otobus70_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus70)
{
   CPotobus[playerid] = otobus71;
   SetPlayerCheckpoint(playerid, otobus71_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus71)
{
   CPotobus[playerid] = otobus72;
   SetPlayerCheckpoint(playerid, otobus72_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus72)
{
   CPotobus[playerid] = otobus73;
   SetPlayerCheckpoint(playerid, otobus73_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus73)
{
   CPotobus[playerid] = otobus74;
   SetPlayerCheckpoint(playerid, otobus74_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus74)
{
   CPotobus[playerid] = otobus75;
   SetPlayerCheckpoint(playerid, otobus75_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus75)
{
   CPotobus[playerid] = otobus76;
   SetPlayerCheckpoint(playerid, otobus76_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus76)
{
   CPotobus[playerid] = otobus77;
   SetPlayerCheckpoint(playerid, otobus77_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus77)
{
   CPotobus[playerid] = otobus78;
   SetPlayerCheckpoint(playerid, otobus78_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus78)
{
   CPotobus[playerid] = otobus79;
   SetPlayerCheckpoint(playerid, otobus79_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus79)
{
   CPotobus[playerid] = otobus80;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus80_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus80)
{
   CPotobus[playerid] = otobus81;
   SetPlayerCheckpoint(playerid, otobus81_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus81)
{
   CPotobus[playerid] = otobus82;
   SetPlayerCheckpoint(playerid, otobus82_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus82)
{
   CPotobus[playerid] = otobus83;
   SetPlayerCheckpoint(playerid, otobus83_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus83)
{
   CPotobus[playerid] = otobus84;
   SetPlayerCheckpoint(playerid, otobus84_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus84)
{
   CPotobus[playerid] = otobus85;
   SetPlayerCheckpoint(playerid, otobus85_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus85)
{
   CPotobus[playerid] = otobus86;
   SetPlayerCheckpoint(playerid, otobus86_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus86)
{
   CPotobus[playerid] = otobus87;
   SetPlayerCheckpoint(playerid, otobus87_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus87)
{
   CPotobus[playerid] = otobus88;
   SetPlayerCheckpoint(playerid, otobus88_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus88)
{
   CPotobus[playerid] = otobus89;
   SetPlayerCheckpoint(playerid, otobus89_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus89)
{
   CPotobus[playerid] = otobus90;
   SetPlayerCheckpoint(playerid, otobus90_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus90)
{
   CPotobus[playerid] = otobus91;

TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus91_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus91)
{
   CPotobus[playerid] = otobus92;
   SetPlayerCheckpoint(playerid, otobus92_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus92)
{
   CPotobus[playerid] = otobus93;
   SetPlayerCheckpoint(playerid, otobus93_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus93)
{
   CPotobus[playerid] = otobus94;
   SetPlayerCheckpoint(playerid, otobus94_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus94)
{
   CPotobus[playerid] = otobus95;
   SetPlayerCheckpoint(playerid, otobus95_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus95)
{
   CPotobus[playerid] = otobus96;
   SetPlayerCheckpoint(playerid, otobus96_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus96)
{
   CPotobus[playerid] = otobus97;
   SetPlayerCheckpoint(playerid, otobus97_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus97)
{
   CPotobus[playerid] = otobus98;
   SetPlayerCheckpoint(playerid, otobus98_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus98)
{
   CPotobus[playerid] = otobus99;
   SetPlayerCheckpoint(playerid, otobus99_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus99)
{
   CPotobus[playerid] = otobus100;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus100_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus100)
{
   CPotobus[playerid] = otobus101;
   SetPlayerCheckpoint(playerid, otobus101_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus101)
{
   CPotobus[playerid] = otobus102;
   SetPlayerCheckpoint(playerid, otobus102_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus102)
{
   CPotobus[playerid] = otobus103;
   SetPlayerCheckpoint(playerid, otobus103_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus103)
{
   CPotobus[playerid] = otobus104;
   SetPlayerCheckpoint(playerid, otobus104_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus104)
{
   CPotobus[playerid] = otobus105;
   SetPlayerCheckpoint(playerid, otobus105_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus105)
{
   CPotobus[playerid] = otobus106;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus106_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus106)
{
   CPotobus[playerid] = otobus107;
   SetPlayerCheckpoint(playerid, otobus107_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus107)
{
   CPotobus[playerid] = otobus108;
   SetPlayerCheckpoint(playerid, otobus108_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus108)
{
   CPotobus[playerid] = otobus109;
   SetPlayerCheckpoint(playerid, otobus109_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus109)
{
   CPotobus[playerid] = otobus110;
   SetPlayerCheckpoint(playerid, otobus110_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus110)
{
   CPotobus[playerid] = otobus111;
   SetPlayerCheckpoint(playerid, otobus111_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus111)
{
   CPotobus[playerid] = otobus112;
   SetPlayerCheckpoint(playerid, otobus112_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus112)
{
   CPotobus[playerid] = otobus113;
   SetPlayerCheckpoint(playerid, otobus113_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus113)
{
   CPotobus[playerid] = otobus114;
   SetPlayerCheckpoint(playerid, otobus114_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus114)
{
   CPotobus[playerid] = otobus115;
   SetPlayerCheckpoint(playerid, otobus115_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus115)
{
   CPotobus[playerid] = otobus116;
   SetPlayerCheckpoint(playerid, otobus116_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus116)
{
   CPotobus[playerid] = otobus117;
   SetPlayerCheckpoint(playerid, otobus117_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus117)
{
   CPotobus[playerid] = otobus118;
   SetPlayerCheckpoint(playerid, otobus118_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus118)
{
   CPotobus[playerid] = otobus119;
   SetPlayerCheckpoint(playerid, otobus119_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus119)
{
   CPotobus[playerid] = otobus120;
   TogglePlayerControllable(playerid, 0);
SetTimerEx("HastaneTimer", 8000, false, "d", playerid);
GameTextForPlayer(playerid, "~r~BEKLEYIN...", 8000, 3);
   SetPlayerCheckpoint(playerid, otobus120_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus120)
{
   CPotobus[playerid] = otobus121;
   SetPlayerCheckpoint(playerid, otobus121_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus121)
{
   CPotobus[playerid] = otobus122;
   SetPlayerCheckpoint(playerid, otobus122_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus122)
{
   CPotobus[playerid] = otobus123;
   SetPlayerCheckpoint(playerid, otobus123_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus123)
{
   CPotobus[playerid] = otobus124;
   SetPlayerCheckpoint(playerid, otobus124_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus124)
{
   CPotobus[playerid] = otobus125;
   SetPlayerCheckpoint(playerid, otobus125_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus125)
{
   CPotobus[playerid] = otobus126;
   SetPlayerCheckpoint(playerid, otobus126_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus126)
{
   CPotobus[playerid] = otobus127;
   SetPlayerCheckpoint(playerid, otobus127_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus127)
{
   CPotobus[playerid] = otobus128;
   SetPlayerCheckpoint(playerid, otobus128_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus128)
{
   CPotobus[playerid] = otobus129;
   SetPlayerCheckpoint(playerid, otobus129_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus129)
{
   CPotobus[playerid] = otobus130;
   SetPlayerCheckpoint(playerid, otobus130_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus130)
{
   CPotobus[playerid] = otobus131;
   SetPlayerCheckpoint(playerid, otobus131_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus131)
{
   CPotobus[playerid] = otobus132;
   SetPlayerCheckpoint(playerid, otobus132_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus132)
{
   CPotobus[playerid] = otobus133;
   SetPlayerCheckpoint(playerid, otobus133_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus133)
{
   CPotobus[playerid] = otobus134;
   SetPlayerCheckpoint(playerid, otobus134_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus134)
{
   CPotobus[playerid] = otobus135;
   SetPlayerCheckpoint(playerid, otobus135_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus135)
{
   CPotobus[playerid] = otobus136;
   SetPlayerCheckpoint(playerid, otobus136_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus136)
{
   CPotobus[playerid] = otobus137;
   SetPlayerCheckpoint(playerid, otobus137_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus137)
{
   CPotobus[playerid] = otobus138;
   SetPlayerCheckpoint(playerid, otobus138_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus138)
{
   CPotobus[playerid] = otobus139;
   SetPlayerCheckpoint(playerid, otobus139_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus139)
{
   CPotobus[playerid] = otobus140;
   SetPlayerCheckpoint(playerid, otobus140_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus140)
{
   CPotobus[playerid] = otobus141;
   SetPlayerCheckpoint(playerid, otobus141_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus141)
{
   CPotobus[playerid] = otobus142;
   SetPlayerCheckpoint(playerid, otobus142_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus142)
{
   CPotobus[playerid] = otobus143;
   SetPlayerCheckpoint(playerid, otobus143_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus143)
{
   CPotobus[playerid] = otobus144;
   SetPlayerCheckpoint(playerid, otobus144_CO, 4.6);
    return 1;
}
if(CPotobus[playerid] == otobus144)
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Otobüste deðilsiniz.");
//	new vehicleid = GetPlayerVehicleID(playerid);
//	new carid = Car_GetID(vehicleid);

    if (PlayerData[playerid][pJob] != JOB_OTOBUSSOFORU)
	    return SendErrorMessage(playerid, "Otobüs þöförü deðilsin.");

  CPotobus[playerid] = 0;
  GiveMoney(playerid, 650);
  SendServerMessage(playerid, "Otobüs seferin tamamlandý! 650$ kazandýn.");
  PlayerData[playerid][pOtobusDuty] = false;
  DisablePlayerCheckpoint(playerid);
    // Görev Bittiðinde Olacaklar
   return 1;
}
	if(GetPVarInt(playerid, "CarDisplay") != 0 && IsPlayerInVehicle(playerid, CarData[GetPVarInt(playerid, "CarDisplay")][carVehicle]))
	{
		SendServerMessage(playerid, "Araç saklama sistemi devredýþý.");
	}
    if(IsPlayerConnected(playerid) && IsPlayerInAnyVehicle(playerid)){
        new carid = Car_GetID(GetPlayerVehicleID(playerid));
	    if(carid != -1 &&  Car_Meslek(playerid, carid)) {
	        if(PlayerData[playerid][pJob] == JOB_OTOBUSSOFORU){
				if(Mise[playerid][BusMission] != 999){
					if(IsPlayerInSphere(playerid,361.7982,-1527.4463,33.0697,5) ||
					IsPlayerInSphere(playerid,535.0513,-1262.2404,16.3687,5) ||
					IsPlayerInSphere(playerid,626.7946,-1636.8909,16.0026,5) ||
					IsPlayerInSphere(playerid,770.7590,-1676.8026,12.9227,5) ||
					IsPlayerInSphere(playerid,796.7376,-1472.4398,13.3828,5) ||
					IsPlayerInSphere(playerid,886.7276,-997.1920,35.92730,5) ||
					IsPlayerInSphere(playerid,1030.4622,-1152.1044,23.6563,5) ||
					IsPlayerInSphere(playerid,1207.4020,-948.4581,42.7275,5) ||
					IsPlayerInSphere(playerid,1414.8257,-1158.7787,23.6563,5) ||
					IsPlayerInSphere(playerid,1712.4600,-1274.5700,13.3800,5) ||
					IsPlayerInSphere(playerid,1933.5078,-1044.9818,23.9135,5) ||
					IsPlayerInSphere(playerid,2268.4385,-1192.2931,24.8130,5) ||
					IsPlayerInSphere(playerid,2317.0918,-1386.5325,23.8715,5) ||
					IsPlayerInSphere(playerid,2420.4346,-1259.8356,23.8316,5) ||
					IsPlayerInSphere(playerid,2508.8904,-1414.6725,28.3594,5) ||
					IsPlayerInSphere(playerid,2740.5342,-1460.7323,30.2813,5) ||
					IsPlayerInSphere(playerid,2795.3704,-1380.3308,21.2550,5) ||
					IsPlayerInSphere(playerid,2771.5024,-1654.8423,11.6193,5) ||
					IsPlayerInSphere(playerid,2479.2590,-1729.6877,13.3828,5) ||
					IsPlayerInSphere(playerid,2450.0835,-1934.4447,13.3361,5) ||
					IsPlayerInSphere(playerid,2711.8206,-2026.3109,13.3270,5) ||
					IsPlayerInSphere(playerid,2223.9805,-2136.5171,13.3324,5) ||
					IsPlayerInSphere(playerid,1995.4023,-2163.7217,13.3828,5) ||
					IsPlayerInSphere(playerid,1825.7169,-2083.2720,13.3828,5) ||
					IsPlayerInSphere(playerid,1964.0333,-2001.6047,13.3828,5) ||
					IsPlayerInSphere(playerid,1824.5422,-1884.4218,13.3277,5) ||
					IsPlayerInSphere(playerid,2053.2000,-1815.0000,13.3800,5) ||
					IsPlayerInSphere(playerid,1823.6591,-1649.7051,13.3828,5) ||
					IsPlayerInSphere(playerid,2107.2432,-1714.2798,13.3892,5) ||
					IsPlayerInSphere(playerid,2007.6346,-1457.7531,13.3906,5) ||
					IsPlayerInSphere(playerid,1741.2539,-1596.0043,13.3817,5) ||
					IsPlayerInSphere(playerid,1526.8031,-1672.5814,13.3828,5) ||
					IsPlayerInSphere(playerid,1458.7119,-1869.5370,13.3906,5) ||
					IsPlayerInSphere(playerid,1182.7495,-1816.8263,13.3984,5) ||
					IsPlayerInSphere(playerid,1208.2617,-1350.3226,13.4014,5) ||
					IsPlayerInSphere(playerid,1003.3614,-1317.4762,13.3906,5) ||
					IsPlayerInSphere(playerid,508.0580,-1662.4474,18.9118,5)) {
					    DisablePlayerCheckpoint(playerid);
					    TogglePlayerControllable(playerid, 0);
					    SetTimerEx("HastaneTimer", 19000, false, "d", playerid);
						Mise[playerid][BusStop] = 1;
						new binenyolcu = RandomEx(2, 4);
						GiveMoney(playerid, binenyolcu*OTOBUS_UCRET);
						SendServerMessage(playerid, "Otobüse %d yolcu bindi ve %skazandýn.", binenyolcu, FormatNumber(binenyolcu*OTOBUS_UCRET));
						GameTextForPlayer(playerid, "~r~BEKLEYIN...", 10000, 3);
	        		}
				}
			}
		}
	}
    if (PlayerData[playerid][pTutorialStage])
	{
	    DisablePlayerCheckpoint(playerid);
		return 1;
	}
	if (PlayerData[playerid][pPizzaBasladimi] == 1)
	{
	    if(pizzahile[playerid] == 1)
		{
		    RespawnVehicle(GetPVarInt(playerid, "PizzaMotorID"));
	 		DisablePlayerCheckpoint(playerid);
	  		JBC_SetPlayerPos(playerid, 2107.4409,-1788.2010,13.5608);
			SendServerMessage(playerid, "Pizza daðýtýmý sona erdi.");
			PlayerData[playerid][pPizzaBasladimi] = 0;
			PlayerData[playerid][pPizzaIsbasi] = 0;
			SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
			_Kick(playerid);
		    return 1;
		}
 		Pizza_RastgeleEv(playerid, KAZANC_PIZZA);
	}
  	if(TruckingCheck[playerid] >= 1 && PlayerData[playerid][pUnloading] == -1)
	{
	    if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendErrorMessage(playerid, "Araçta deðilsin.");
		    return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
		if (!IsLoadableVehicle(vehicleid))
  		{
  			SendErrorMessage(playerid, "Bu araç yüklenebilir bir araç deðil.");
  		}
	    new string[180];
        format(string, sizeof(string), "Teslimattan $%d kazandýn!", TruckingCheck[playerid]);
        GiveMoney(playerid, TruckingCheck[playerid]);
        TruckingCheck[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, string);
		DisablePlayerCheckpoint(playerid);
		RespawnVehicle(vehicleid);
	}
	if (PlayerData[playerid][pTask])
	{
	    new id = -1;

		if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
		    ShowPlayerFooter(playerid, "Press ~y~'F'~w~ to enter this bank.");

        if ((id = Business_Nearest(playerid)) != -1 && BusinessData[id][bizType] == 1 && !PlayerData[playerid][pStoreTask])
		    ShowPlayerFooter(playerid, "Press ~y~'F'~w~ to enter this retail store.");

        if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
		    ShowPlayerFooter(playerid, "Press ~y~'F'~w~ to enter this DMV.");
		DisablePlayerCheckpoint(playerid);
	}
	if (PlayerData[playerid][pDrivingTest])
	{
	    PlayerData[playerid][pTestStage]++;

	    if (PlayerData[playerid][pTestStage] < sizeof(g_arrDrivingCheckpoints)) {
			SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], 3.0);
		}
		else
		{
		    static
		        Float:health;

		    GetVehicleHealth(GetPlayerVehicleID(playerid), health);

		    if (health < 600.0)
				SendErrorMessage(playerid, "Araca hasar verdiðin için test baþarýsýz!");

		    else
			{
		        GiveMoney(playerid, -50);
		        //ShowPlayerFooter(playerid, "Ehliyet ucreti olarak ~r~$50~w~ alindi.");

		        Inventory_Add(playerid, "Ehliyet", 1581);
		        SendServerMessage(playerid, "Testi baþarýyla geçtin ve ehliyet aldýn.");
		    }
  			CancelDrivingTest(playerid);
		}
	}
	else
	{
	    new
			vehicleid = GetPlayerVehicleID(playerid),
			Float:health;

		if (PlayerData[playerid][pWaypoint])
		{
		    PlayerData[playerid][pWaypoint] = 0;

		    DisablePlayerCheckpoint(playerid);
		    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
		}
		else if (PlayerData[playerid][pJob] == JOB_COURIER && !IsPlayerInAnyVehicle(playerid))
		{
			if (PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadCrate] && Job_NearestPoint(playerid) != -1)
			{
			    PlayerData[playerid][pLoadCrate] = 1;

		        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				ShowPlayerFooter(playerid, "Kutuyu ~y~'N'~w~ ile kamyona yerlestir.");
			}
			else if (PlayerData[playerid][pUnloading] != -1)
			{
				if (!PlayerData[playerid][pLoadCrate])
				{
				    PlayerData[playerid][pLoadCrate] = 1;
				    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

			        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

					SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pUnloading]][bizPos][0], BusinessData[PlayerData[playerid][pUnloading]][bizPos][1], BusinessData[PlayerData[playerid][pUnloading]][bizPos][2], 1.0);
					ShowPlayerFooter(playerid, "Sandiklari ~r~checkpoint'e birak.");

					CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads]--;
				}
				else
				{
				    static
				        Float:fX,
				        Float:fY,
				        Float:fZ,
						string[64];

				    PlayerData[playerid][pLoadCrate] = 0;
				    ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

				    RemovePlayerAttachedObject(playerid, 4);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

					switch (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType])
					{
					    case 1:
						{
							TruckingCheck[playerid] += 15;
					        GiveMoney(playerid, 15);
					        ShowPlayerFooter(playerid, "~g~$15~w~ daha alacaksiniz.");
					    }
					    case 2:
						{
						    TruckingCheck[playerid] += 20;
					        GiveMoney(playerid, 20);
					        ShowPlayerFooter(playerid, "~g~$40~w~ daha alacaksiniz.");
					    }
					    case 3:
						{
						    TruckingCheck[playerid] += 12;
					        GiveMoney(playerid, 12);
					        ShowPlayerFooter(playerid, "~g~$12~w~ daha alacaksiniz.");
					    }
					    case 4:
						{
						    TruckingCheck[playerid] += 15;
					        GiveMoney(playerid, 15);
					        ShowPlayerFooter(playerid, "~g~$15~w~ daha alacaksiniz.");
					    }
					    case 5:
						{
						    TruckingCheck[playerid] += 20;
					        GiveMoney(playerid, 20);
					        ShowPlayerFooter(playerid, "~g~$20~w~ daha alacaksiniz.");
					    }
					    case 6:
						{
						    TruckingCheck[playerid] += 15;
					        GiveMoney(playerid, 15);
					        ShowPlayerFooter(playerid, "~g~$15~w~ daha alacaksiniz.");
					    }
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] == 5)
					{
						for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == PlayerData[playerid][pUnloading]) {
						    PumpData[i][pumpFuel] += 100;

			                format(string, sizeof(string), "{FFFFFF}[{FFD700}Benzin Ýstasyonu{FFFFFF}]\n[/a benzin]", i, PumpData[i][pumpFuel]);
						    UpdateDynamic3DTextLabelText(PumpData[i][pumpText3D], COLOR_DARKBLUE, string);

						    Pump_Save(i);
						}
					}
					else
					{
						BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 20;
						Business_Save(PlayerData[playerid][pUnloading]);
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] > 0)
					{
					    GetVehicleBoot(PlayerData[playerid][pUnloadVehicle], fX, fY, fZ);
					    SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
					}
					else
					{
					    CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] = 0;
					    CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] = 0;

				     	PlayerData[playerid][pUnloading] = -1;
					    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

						DisablePlayerCheckpoint(playerid);
					    SendServerMessage(playerid, "Tüm sandýklar tesmim edildi.");
					    SendServerMessage(playerid, "Kamyon'u belirtilen noktaya teslim et ve paraný al.");
					    SetPlayerCheckpoint(playerid, 2707.3208,-2226.6326,13.5469, 5.0);

					    if (PlayerData[playerid][pShipment] != -1)
					    {
					        foreach (new i : Player) if (Business_IsOwner(i, PlayerData[playerid][pShipment])) {
					            SendServerMessage(playerid, "%s iþyerine teslimat yaptý. ( %s )", ReturnName(playerid, 0), BusinessData[PlayerData[playerid][pShipment]][bizName]);
							}
							BusinessData[PlayerData[playerid][pShipment]][bizShipment] = 0;
							Business_Save(PlayerData[playerid][pShipment]);

          					PlayerData[playerid][pShipment] = -1;
          					PlayerData[playerid][pDeliverShipment] = 0;
					    }
					}
				}
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_MINER && PlayerData[playerid][pMinedRock] && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		{
		    new money = 18;

			SendServerMessage(playerid, "Taþý teslim ettin ve $%d kazandýn!", money);
			GiveMoney(playerid, money);

			PlayerData[playerid][pMinedRock] = 0;
			PlayerData[playerid][pMineCount] = 0;

			DisablePlayerCheckpoint(playerid);
			RemovePlayerAttachedObject(playerid, 4);

			SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
	    else if (PlayerData[playerid][pJob] == JOB_UNLOADER && IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	    {
	        GetVehicleHealth(vehicleid, health);

	        CoreVehicles[vehicleid][vehLoadType] = 0;
	        DestroyObject(CoreVehicles[vehicleid][vehCrate]);

			CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
			DisablePlayerCheckpoint(playerid);

			if (health < CoreVehicles[vehicleid][vehLoadHealth]) {
			    SendErrorMessage(playerid, "You have damaged the crate during the process.");
			}
			else {
				SendServerMessage(playerid, "You have unloaded a crate for $20.");
				GiveMoney(playerid, 20);
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_SORTER && PlayerData[playerid][pSorting] != -1)
		{
		    if (PlayerData[playerid][pSortCrate])
		    {
		        PlayerData[playerid][pSortCrate] = 0;

		        RemovePlayerAttachedObject(playerid, 4);
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		        ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		        SetPlayerCheckpoint(playerid, JobData[PlayerData[playerid][pSorting]][jobPoint][0], JobData[PlayerData[playerid][pSorting]][jobPoint][1], JobData[PlayerData[playerid][pSorting]][jobPoint][2], 1.0);

				GiveMoney(playerid, 20);
				ShowPlayerFooter(playerid, "Paketi teslim ettin ve ~g~$10~w~ kazandýn.");
			}
			else
			{
                SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				SetPlayerCheckpoint(playerid, JobData[PlayerData[playerid][pSorting]][jobDeliver][0], JobData[PlayerData[playerid][pSorting]][jobDeliver][1], JobData[PlayerData[playerid][pSorting]][jobDeliver][2], 1.0);

                PlayerData[playerid][pSortCrate] = 1;
				ShowPlayerFooter(playerid, "Deliver the package to the ~r~marker.");
			}
		}
	}
		if (PlayerData[playerid][pCP] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
		return 1;
	}
	return 1;
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
if(newstate == PLAYER_STATE_DRIVER)
        {
                LastCar[playerid]=GetPlayerVehicleID(playerid);
        }
        else if(oldstate == PLAYER_STATE_DRIVER)
        {
                new lastveh = LastCar[playerid];
                GetVehiclePos(lastveh,OldVehiclePos[lastveh][0],OldVehiclePos[lastveh][1],OldVehiclePos[lastveh][2]);
                GetVehicleZAngle(lastveh,OldVehiclePos[lastveh][3]);
        }
PlayerData[playerid][pYanKoltuk] = 1;

    if(newstate==PLAYER_STATE_PASSENGER)
{
    if(GetPlayerWeapon(playerid) == 24 )
    {
		SetPlayerArmedWeapon(playerid, 0);
	}
}

    if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_DRIVER && IsPlayerConnected(playerid) && !PlayerData[playerid][pAdmin])
    {
  		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s, NOP hilesi kullanýyor olabilir. (kod 1 )", ReturnName(playerid, 0));
    }
	if(oldstate == PLAYER_STATE_PASSENGER && newstate == PLAYER_STATE_DRIVER && IsPlayerConnected(playerid) && !PlayerData[playerid][pAdmin])
    {
  		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s, NOP hilesi kullanýyor olabilir. (kod 2 )", ReturnName(playerid, 0));
    }
   	if(oldstate == PLAYER_STATE_PASSENGER && newstate == PLAYER_STATE_PASSENGER && IsPlayerConnected(playerid) && !PlayerData[playerid][pAdmin])
    {
  		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s, NOP hilesi kullanýyor olabilir. (kod 3 )", ReturnName(playerid, 0));
    }
    if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_PASSENGER && IsPlayerConnected(playerid) && !PlayerData[playerid][pAdmin])
    {
  		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s, NOP hilesi kullanýyor olabilir. (kod 4 )", ReturnName(playerid, 0));
    }
	if(oldstate == PLAYER_STATE_DRIVER && SweeperJob[playerid] && IsPlayerConnected(playerid))
    {
  		new money = floatround(SweeperDistance[playerid] * MONEY_PER_METER), string[80];
        format(string, sizeof(string), "~n~~n~~w~Temizlenen: ~b~~h~~h~%d metre~n~~w~Kazanilan ~g~~h~~h~$%d", SweeperDistance[playerid], money);
        GameTextForPlayer(playerid, string, 3000, 3);
        GiveMoney(playerid, money);
        ResetSweeperInfo(playerid);
    }
    if(oldstate == PLAYER_STATE_DRIVER && CiftciJob[playerid] && IsPlayerConnected(playerid))
    {
 		new money = floatround(CiftciDistance[playerid] * MONEY_PER_METER_CIFTCI), string[80];
        format(string, sizeof(string), "~n~~n~~w~Temizlenen: ~b~~h~~h~%d metre~n~~w~Kazanilan ~g~~h~~h~$%d", CiftciDistance[playerid], money);
        GameTextForPlayer(playerid, string, 3000, 3);
        GiveMoney(playerid, money);
        ResetCiftciInfo(playerid);
    }
	if(newstate == PLAYER_STATE_ONFOOT)
	{

	    if(PlayerData[playerid][pOtobusDuty]){
			RespawnVehicle(GetPVarInt(playerid, "OtobusID"));
			Mise[playerid][BusMission] = 999; DisablePlayerCheckpoint(playerid);
			PlayerData[playerid][pOtobusDuty] = false;
			ShowPlayerFooter(playerid, "Sefer iptal oldu.");
 		}
	}

    if(BalikTimer[playerid] != -1)
	{
        if(IsPlayerInAnyVehicle(playerid) && GetPVarInt(playerid, "OltaSlot") != -1)
		{
			RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
			SetPVarInt(playerid, "OltaSlot", -1);
		}

		TextDrawHideForPlayer(playerid, BalikText);
		HidePlayerProgressBar(playerid, BalikBari[playerid]);
		SetPVarInt(playerid, "BalikBekle", tickcount() + 6000);
		KillTimer(BalikTimer[playerid]);
		BalikTimer[playerid] = -1;
		SendClientMessage(playerid, 0xE74C3CFF, "Balýk tutma baþarýsýz oldu.");
	}
   	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
     foreach(new i : Player)
		{
			if(IzlenenID[i] == playerid)
			{
			    TextDrawHideForPlayer(i, SpecCarIcon);
				PlayerTextDrawHide(i, SpecCarText[i]);
				PlayerTextDrawHide(i, SpecCarModel[playerid]);

			    SetPlayerInterior(i, GetPlayerInterior(playerid));
			    SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
				PlayerSpectatePlayer(i, playerid);
			}
		}
	}


    new vehicleid = GetPlayerVehicleID(playerid);
	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));
	new id = Car_GetID(vehicleid);


    if(newstate == PLAYER_STATE_DRIVER && id != -1 )
	{
	    if(PlayerData[playerid][pJob] == JOB_OTOBUSSOFORU && Car_Meslek(playerid, id))
	        SendServerMessage(playerid, "'/otobus basla' yazarak otobüs seferini baþlatabilirsiniz.");

	    if(modelid == 408)
	    {
			garbage_AracDurum[vehicleid] = true;
			garbage_AracTime[vehicleid] = gettime();
			garbage_AracPlayer[vehicleid] = playerid;
		}

	    if(CarData[id][carOwner] != 0 && CarData[id][carOwner] != PlayerData[playerid][pID] && CarData[id][carPrice] > 0 && !CarData[id][carGaleri])
	    {
			Dialog_Show(playerid, AracAlimOnay, DIALOG_STYLE_MSGBOX, "Araç Alým", "{FFFFFF}Bulunduðunuz araç {C2A2DA}%s {FFFFFF}tarafýndan {C2A2DA}%s'a {FFFFFF}satýlýktýr, aracý satýn almak istiyor musunuz?\n\nAraç Modeli : %s\nAraç KM : %d\n", "Satýnal", "Ýptal", GetVehicleOwner(id), FormatNumber(CarData[id][carPrice]), ReturnVehicleModelName(GetVehicleModel(vehicleid)), CarData[id][carDistance]);
	    }
	    if(CarData[id][carOwner] != 0 && CarData[id][carOwner] != PlayerData[playerid][pID] && CarData[id][carPrice] > 0 && CarData[id][carGaleri])
	    {
			Dialog_Show(playerid, AracAlimOnayGaleri, DIALOG_STYLE_MSGBOX, "Galeri", "{FFFFFF}Bulunduðunuz araç {C2A2DA}vBeta Galeri {FFFFFF}tarafýndan {C2A2DA}%s'a {FFFFFF}satýlýktýr, aracý satýn almak istiyor musunuz?\n\nAraç Modeli : %s", "Satýnal", "Ýptal", FormatNumber(CarData[id][carPrice]), ReturnVehicleModelName(GetVehicleModel(vehicleid)), CarData[id][carDistance]);
	    }
 		new str[1024];


		if(CarData[id][carFaction] >= 1 && CarData[id][carOwner] != 0 ) {
		new kilometre;
			 kilometre = floatround(CarData[id][carDistance] / 1000);
			format(str, sizeof(str), "[!][Araba] Sahip: %s / Birlik: %s / Model: %s / Kilometre: %skm.", GetVehicleOwner(id) ,FactionData[GetFactionByID(CarData[id][carBirlik])][factionName], ReturnVehicleModelName(GetVehicleModel(vehicleid)), kilometre);
            SendClientMessage(playerid, COLOR_YELLOW,	str);
            format(str, sizeof(str), "[!][Araba] Vergi: %s / Plaka: %s", FormatNumber(CarData[id][carVergi]), CarData[id][carPlaka]  );
           	SendClientMessage(playerid, COLOR_YELLOW,	str);
           	format(str, sizeof(str), "[!][/arac motor] [/arac far]");
			SendClientMessage(playerid,COLOR_WHITE, str);
		}
		else if(CarData[id][carFaction] >= 1) {
		new kilometre;
			 kilometre = floatround(CarData[id][carDistance] / 1000);
			format(str, sizeof(str), "[!][Araba] Birlik: {FFFFFF}Özel Kurum / Model: %s / Kilometre: %skm.", CarData[id][carPlaka], ReturnVehicleModelName(GetVehicleModel(vehicleid)), kilometre);
            SendClientMessage(playerid, COLOR_YELLOW,	str);
            format(str, sizeof(str), "[!][Araba] Vergi: %s / Plaka: %s", FormatNumber(CarData[id][carVergi]),CarData[id][carPlaka]);
           	SendClientMessage(playerid, COLOR_YELLOW,	str);
           	format(str, sizeof(str), "[!][/arac motor] [/arac far]");
			SendClientMessage(playerid,COLOR_WHITE, str);

		}
		else if(CarData[id][carMeslek] >= 1) {
	       // new vehicleid = GetPlayerVehicleID(playerid);
			format(str, sizeof(str), "{eaff07}[!][Araba] Meslek: %s / Plaka: {FFFFFF}%s", Job_GetName(CarData[id][carMeslek]),  CarData[id][carPlaka]);
            SendClientMessage(playerid, COLOR_YELLOW,	str);
            if(CarData[id][carMeslek] == 0)
			{
			SendClientMessage(playerid, 0xFF0000FF,	"YUKALTEST");

			}

            CoreVehicles[vehicleid][vehFuel] = 100;
	  	}
		else {
				new kilometre;
			 kilometre = floatround(CarData[id][carDistance] / 1000);
			format(str, sizeof(str), "[!][Araba] Sahibi: %s / Model: %s / Kilometre: %dkm.", GetVehicleOwner(id), ReturnVehicleModelName(GetVehicleModel(vehicleid)),kilometre);
            SendClientMessage(playerid, COLOR_YELLOW, str);
            format(str, sizeof(str), "[!][Araba] Vergi: %s / Ceza: %s  / Fiyati: %d$ / Plaka: %s  ", FormatNumber(CarData[id][carVergi]),FormatNumber(CarData[id][carImpoundPrice]),AracFiyati(CarData[id][carModel]), CarData[id][carPlaka]);
           	SendClientMessage(playerid,COLOR_YELLOW, str);
			format(str, sizeof(str), "[!][/a motor] [/a far] [/a at: Aractan atar]");
			SendClientMessage(playerid,COLOR_WHITE, str);


  }
        if(CarData[id][carKiralik] == 1 && CarData[id][carAnahtar] == -1)
			{
			    	new gereklipara;
					if(CarData[id][carOwner] == 0) gereklipara = 150;
					else gereklipara = CarData[id][carKiraUcret];
		    	    SendServerMessage(playerid, "Bu araç %s ödeyerek 1 saatliðine kiralanabilir. (/arackirala)", FormatNumber(gereklipara));
			}

			if(CarData[id][carKiralik] == 1 && CarData[id][carAnahtar] != -1)
		   		  SendServerMessage(playerid, "Bu araç daha önce kiralanmýþ, kirasýnýn bitmesine kalan süre: %d dakika", CarData[id][carKiraZaman]);
	    for(new i; i < 5; i++) TextDrawHideForPlayer(playerid, carMDC[GetPVarInt(playerid, "EnSonBindigiArac")][i]);

        if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo]) for (new i = 0; i < 31; i ++) {
			PlayerTextDrawShow(playerid, AracGostergesi[i][playerid]);

		}
		if(PlayerData[playerid][pPizzaBasladimi] == 0 && PlayerData[playerid][pPizzaIsbasi] == 0 && modelid == 448)
		{
	     RemovePlayerFromVehicle(playerid);
		}
	   	if(CarData[id][carMeslek] >= 0)
	    {
	     	if(!Car_Meslek(playerid, id))
	        {
	            RemovePlayerFromVehicle(playerid);
	            SendErrorMessage(playerid, "Bu araca binmek için mesleðin bu araca uygun olmalý!");
             	return 1;
			}
		}
	    if (IsVehicleImpounded(vehicleid))
	    {
	        RemovePlayerFromVehicle(playerid);
	        SendErrorMessage(playerid, "Bu araç baðlanmýþ, baðlanmýþ araçlarda bu iþlemi kullanamazsýnýz.");
	    }
	    if(Arac_VergiGecikmismi(vehicleid))
	    {
	        RemovePlayerFromVehicle(playerid);
	        SendErrorMessage(playerid, "Bu aracýn vergi ödemesi gecikmiþ, o yüzden kullanamazsýnýz.");
	    }
	   	if (CarData[id][carHurda])
	    {
			SendClientMessage(playerid, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Bu araç hurdaya çýkartýlmýþ, modifiye galerisine git ve aracý tamir ettir!");
		}
		else if (!IsEngineVehicle(vehicleid))
		{
			SetEngineStatus(vehicleid, true);
		}
		else
		{
			if (!GetEngineStatus(vehicleid))
			{
			    if (CoreVehicles[vehicleid][vehFuel] < 1)
	    			ShowPlayerFooter(playerid, "Bu aracin ~r~benzini~w~ yok.");

				else if (ReturnVehicleHealth(vehicleid) <= 300)
	    			ShowPlayerFooter(playerid, "Bu arac ~r~kullanilamaz~w~ halde.");
			}
			if (IsDoorVehicle(vehicleid) && !PlayerData[playerid][pDrivingTest])
			{
			    if( !Inventory_HasItem(playerid, "Ehliyet") && !IsBikeVehicle(vehicleid))
       				SendClientMessage(playerid, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Araç ehliyetin yokken trafiðe çýktýn, polislere dikkat et!");
				else if ( !Inventory_HasItem(playerid, "Motor Ehliyeti") && IsBikeVehicle(vehicleid))
					SendClientMessage(playerid, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Motor ehliyetin yokken trafiðe çýktýn, polislere dikkat et!");
			}
			if (GetVehicleModel(vehicleid) == 578 && CoreVehicles[vehicleid][vehKereste] > 0)
			{
			    SendServerMessage(playerid, "Bu araçta {2ECC71}%d odun {FFFFFF} bulunmaktadýr, kereste fabrikasý haritada belirtildi.", CoreVehicles[vehicleid][vehKereste]);
	   			SetPlayerCheckpoint(playerid, -536.71, -177.71, 78.40, 5.0);
			}
		}
 		if (GetVehicleModel(vehicleid) == 440 && PlayerData[playerid][pJob] == JOB_I_KACAKCILIK && Car_Meslek(playerid, id) && PlayerData[playerid][pFaction] != -1 && GetFactionType(playerid) == FACTION_GANG)
		{
   			switch(CoreVehicles[vehicleid][vehIKacakcilik])
   			{
   			    case 0:
   			    {
   			        SendServerMessage(playerid, "Þu anda {2ECC71}içki kaçakçýlýðý arabasýnda{FFFFFF} bulunmaktasýnýz, yük alma noktasý haritada belirtildi.");
					SetPlayerCheckpoint(playerid, I_KACAKCILIK_YUKALMA_X, I_KACAKCILIK_YUKALMA_Y, I_KACAKCILIK_YUKALMA_Z, 9.0);
   			    }
   			    case 1:
   			    {
   			        SendServerMessage(playerid, "Þu anda {2ECC71}içki kaçakçýlýðý arabasýnda{FFFFFF} bulunmaktasýnýz, araçta yük yüklü. Teslim noktasý haritada belirtildi.");
					SetPlayerCheckpoint(playerid, I_KACAKCILIK_YUKTESLIM_X, I_KACAKCILIK_YUKTESLIM_Y, I_KACAKCILIK_YUKTESLIM_Z, 9.0);
   			    }
        	}
        }
         if (GetVehicleModel(vehicleid) == 413 && PlayerData[playerid][pJob] == JOB_E_KACAKCILIK && Car_Meslek(playerid, id) && PlayerData[playerid][pFaction] != -1 && GetFactionType(playerid) == FACTION_GANG)
		{
   			switch(CoreVehicles[vehicleid][vehEKacakcilik])
   			{
   			    case 0:
   			    {
   			        SendServerMessage(playerid, "Þu anda {2ECC71}elektronik ürün kaçakçýlýðý arabasýnda{FFFFFF} bulunmaktasýnýz, yük alma noktasý haritada belirtildi.");
	   				SetPlayerCheckpoint(playerid, E_KACAKCILIK_YUKALMA_X, E_KACAKCILIK_YUKALMA_Y, E_KACAKCILIK_YUKALMA_Z, 9.0);
   			    }
   			    case 1:
   			    {
   			        SendServerMessage(playerid, "Þu anda {2ECC71}elektronik ürün kaçakçýlýðý arabasýnda{FFFFFF} bulunmaktasýnýz, araçta yük yüklü. Teslim noktasý haritada belirtildi.");
					SetPlayerCheckpoint(playerid, E_KACAKCILIK_YUKTESLIM_X, E_KACAKCILIK_YUKTESLIM_Y, E_KACAKCILIK_YUKTESLIM_Z, 9.0);
   			    }
        	}
        }
		if (GetVehicleModel(vehicleid) == 574 && !SweeperJob[playerid] && PlayerData[playerid][pJob] == JOB_TEMIZLIKCI)
		{
		    SendServerMessage(playerid, "Þu anda {2ECC71}temizlik arabasýnda{FFFFFF} bulunmaktasýnýz, temizliðe baþlayabilirsiniz.");
      		SweeperDistance[playerid] = 0;
            GetPlayerPos(playerid, SweeperLastPos[playerid][0], SweeperLastPos[playerid][1], SweeperLastPos[playerid][2]);
            SweeperJob[playerid] = true;
		}
		if (GetVehicleModel(vehicleid) == 532 && !CiftciJob[playerid] && PlayerData[playerid][pJob] == JOB_CIFTCILIK)
		{
		    SendServerMessage(playerid, "Þu anda {2ECC71}hasat arabasýnda{FFFFFF} bulunmaktasýnýz, hasata baþlayabilirsiniz.");
      		CiftciDistance[playerid] = 0;
            GetPlayerPos(playerid, CiftciLastPos[playerid][0], CiftciLastPos[playerid][1], CiftciLastPos[playerid][2]);
            CiftciJob[playerid] = true;
		}
 	}
	if (newstate == PLAYER_STATE_WASTED && PlayerData[playerid][pJailTime] < 1 && !PaintballOyunundami(playerid))
	{
	    for (new i = 0; i < 3; i ++) {
			PlayerTextDrawHide(playerid, AracGostergesi[i][playerid]);
	    }
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);

//	    ShowHungerTextdraw(playerid, 0);
	    PlayerData[playerid][pHealth] = 100.0;

	    ResetPlayer(playerid);

	    PlayerData[playerid][pKilled] = 1;
/*
	    if (!PaintballOyunundami(playerid))
		{
	        PlayerData[playerid][pBaygin] = 1;

	        PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	    	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		}
		else
		{
		    TextDrawHideForPlayer(playerid, gServerTextdraws[2]);

			PlayerData[playerid][pBaygin] = 0;
			PlayerData[playerid][pHospital] = GetClosestHospital(playerid);
		}*/
		if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
		{
		    SendClientMessage(PlayerData[playerid][pCallLine], COLOR_YELLOW, "[TELEFON]:{FFFFFF} Baðlantý düþtü.");
		    CancelCall(playerid);
		}
		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			Crate_Drop(playerid);
		}
	}
	 if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{

		if( ( IsPlayerInVehicle(playerid,Shamal) || IsPlayerInVehicle(playerid, Tren) ) && !IsPlayerNPC(playerid)) {
		    SetCameraBehindPlayer(playerid); ClearAnimations(playerid);
	        return SendErrorMessage(playerid, "Bu aracý kullanamazsýnýz.");
		}
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 570 && !IsAMotorBike(GetPlayerVehicleID(playerid))) {
			PlayerData[playerid][pEmniyetKemeri] = false;
		    SendClientMessage(playerid,  COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Emniyet kemeriniz takýlý deðil. (/em)");
		    PlayerData[playerid][pYanKoltuk] = 1;
		}
	    new string[128], Float: arachp, vid = GetPlayerVehicleID(playerid);
	    GetVehicleHealth(vid, arachp);

     foreach(new i : Player)
		{
			if(IzlenenID[i] == playerid)
			{
			    TextDrawShowForPlayer(i, SpecCarIcon);
			    format(string, sizeof(string), "%s / HP: ~r~%d", VehicleNames[GetVehicleModel(vid)-400], floatround(arachp, floatround_floor));
				PlayerTextDrawSetString(i, SpecCarText[i], string);
				PlayerTextDrawShow(i, SpecCarText[i]);

		        PlayerTextDrawSetPreviewModel(i, SpecCarModel[i], GetVehicleModel(vid));
		        PlayerTextDrawSetPreviewVehCol(i, SpecCarModel[i], 1, 1);
				PlayerTextDrawShow(i, SpecCarModel[playerid]);
				PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			}
		}
	}
	if (oldstate == PLAYER_STATE_DRIVER)
	{
	    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
	        return RemoveFromVehicle(playerid);

	    for (new i = 0; i < 3; i ++)
			PlayerTextDrawHide(playerid, AracGostergesi[i][playerid]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);
	}
	if (newstate == PLAYER_STATE_DRIVER)
	{
		if (id != -1 && CarData[id][carFaction] > 0 && GetFactionType(playerid) != CarData[id][carFaction]) {
		    RemovePlayerFromVehicle(playerid);

	    	return SendErrorMessage(playerid, "Bu aracýn anahtarlarýna sahip deðilsin.");
		}
		if (PlayerData[playerid][pJob] == JOB_GARBAGE && GetVehicleModel(vehicleid) == 408 && CoreVehicles[vehicleid][vehTrash] > 0)
		{
		    new pointid = -1;

		    if ((pointid = GetClosestJobPoint(playerid, 7)) != -1)
		    {
			    PlayerData[playerid][pCP] = 1;
			    SetPlayerCheckpoint(playerid, JobData[pointid][jobPoint][0], JobData[pointid][jobPoint][1], JobData[pointid][jobPoint][2], 2.5);

		    	SendServerMessage(playerid, "Bu araçta %d çöp torbasý yüklü, çöp döküm yeri haritada belirtildi.", CoreVehicles[vehicleid][vehTrash]);
		    }
		}
		if (PlayerData[playerid][pJob] == JOB_COURIER && IsLoadableVehicle(vehicleid) && CoreVehicles[vehicleid][vehLoads] > 0)
		{
		    if (PlayerData[playerid][pLoading])
		    {
				DisablePlayerCheckpoint(playerid);
				PlayerData[playerid][pLoading] = 0;
			}
			static
			    string[64];

		    switch (CoreVehicles[vehicleid][vehLoadType])
			{
				case 1: format(string, sizeof(string), "~b~Yuklu:~w~ Market Urunleri~n~~b~Yuklu Sandik:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
		        case 2: format(string, sizeof(string), "~b~Yuklu:~w~ Silah Parcalari~n~~b~Yuklu Sandik:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 3: format(string, sizeof(string), "~b~Yuklu:~w~ Tekstil Urunleri~n~~b~Yuklu Sandik:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 4: format(string, sizeof(string), "~b~Yuklu:~w~ Yemek Urunleri~n~~b~Yuklu Sandik:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 5: format(string, sizeof(string), "~b~Yuklu:~w~ Yakit/Benzin~n~~b~Yuklu Sandik:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 6: format(string, sizeof(string), "~b~Yuklu:~w~ Mobilya~n~~b~Yuklu Sandik:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
			}
		    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][82]);
		    PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][82], string);
		}
		SetPlayerArmedWeapon(playerid, 0);
	}
	if ((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && PlayerData[playerid][pPlayRadio])
	{
	    PlayerData[playerid][pPlayRadio] = 0;
	    StopAudioStreamForPlayer(playerid);
	}
	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    if (PlayerData[playerid][pBoombox] != INVALID_PLAYER_ID)
	    {
	        PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
			StopAudioStreamForPlayer(playerid);
	    }
	    if (IsEngineVehicle(vehicleid) && CoreVehicles[vehicleid][vehRadio])
	    {
	        static
	            url[128];

			strunpack(url, CoreVehicles[vehicleid][vehURL]);

			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, url);

			PlayerData[playerid][pPlayRadio] = 1;
		}
	    foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
     		PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER)
	{
	    switch (GetWeapon(playerid))
	    {
	        case 22, 25, 28..33:
	    		SetPlayerArmedWeapon(playerid, GetWeapon(playerid));

			default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}
	if (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
     		PlayerSpectatePlayer(i, playerid);
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER && IsPlayerInsideTaxi(playerid))
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

	    PlayerData[playerid][pTaxiFee] = 5;
	    PlayerData[playerid][pTaxiTime] = 0;
	    PlayerData[playerid][pTaxiPlayer] = driverid;
    	PlayerData[driverid][pTaksiKabul] = -1;
		DisablePlayerCheckpoint(driverid);
	    SendServerMessage(driverid, "%s taksiye yolcu olarak bindi.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "%s'nin taksisine bindin, gitmek istediðin konumu taksiciyle konuþ.", ReturnName(driverid, 0));
	}
 	if (oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiTime] != 0 && PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	{
	    LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
	}
        return 1;
}




public OnPlayerUpdate(playerid)
{
if(PlayerData[playerid][pWantedLevel] > 5)
{
SetPlayerColor(playerid,0xFF0000FF);
}
if (!IsPlayerPause(playerid))
{
PlayerData[playerid][pAFKOldu] = 0;
}
new vehicleid = GetPlayerVehicleID(playerid);
if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && AracZirh[vehicleid] > 1)
{
       new Float:hasar;
       GetVehicleHealth(vehicleid, hasar);
       if(hasar < 1000)
       {
              AracZirh[vehicleid] -= 1000-floatround(hasar);
              RepairVehicle(vehicleid);
              SetVehicleHealth(vehicleid, 1000);
       }
}
FlyKontrol(playerid);
if( GetPlayerAnimationIndex( playerid ) )
    {
        new
			animlib[ 32 ],
      		animname[ 32 ]
	  	;
        GetAnimationName( GetPlayerAnimationIndex( playerid ), animlib, 32, animname, 32 );
        if( !strcmp( animlib, "KNIFE", true ) && !strcmp( animname, "KILL_PARTIAL", true ) )
        {
        if (!PlayerData[playerid][pSexAnim]) {
			SendErrorMessage(playerid, "Býçak bugu sunucuda yasaklý, býçaðýn silindi!");
			SetPlayerArmedWeapon(playerid, 0);
			ResetWeapon(playerid, 4);
            ClearAnimations(playerid);
            }
		}
    }
//SetTimerEx("PlayerCheck", 10000, false, "d", playerid);
    static
	    Float:health;

	GetPlayerHealth(playerid, health);

	static str[64], id = -1, keys[3];

	if (GetPlayerWeapon(playerid) > 1 && (PlayerData[playerid][pHoldWeapon] > 0 || PlayerData[playerid][pMining] > 0))
	    SetPlayerArmedWeapon(playerid, 0);

	if (IsPlayerInAnyVehicle(playerid))
		vehicleid = GetPlayerVehicleID(playerid);
	else
	    vehicleid = INVALID_VEHICLE_ID;

	GetPlayerKeys(playerid, keys[0], keys[1], keys[2]);

    if(SweeperJob[playerid] && GetVehicleModel(GetPlayerVehicleID(playerid)) == 574 && SweeperUpdate[playerid] < gettime())
	{
        SweeperUpdate[playerid] = gettime()+UPDATE_TIME;
        SweeperDistance[playerid] += floatround(GetPlayerDistanceFromPoint(playerid, SweeperLastPos[playerid][0], SweeperLastPos[playerid][1], SweeperLastPos[playerid][2]));
        GetPlayerPos(playerid, SweeperLastPos[playerid][0], SweeperLastPos[playerid][1], SweeperLastPos[playerid][2]);

        new string_swe[512];
	    format(string_swe, sizeof(string_swe), "~n~~n~~n~~n~~n~~n~~n~~n~~g~Temizlenen: ~r~%d ~w~metre", SweeperDistance[playerid]);
		GameTextForPlayer(playerid, string_swe, 1000, 3);
	}
	if(CiftciJob[playerid] && GetVehicleModel(GetPlayerVehicleID(playerid)) == 532 && CiftciUpdate[playerid] < gettime())
	{
        CiftciUpdate[playerid] = gettime()+UPDATE_TIME;
        CiftciDistance[playerid] += floatround(GetPlayerDistanceFromPoint(playerid, CiftciLastPos[playerid][0], CiftciLastPos[playerid][1], CiftciLastPos[playerid][2]));
        GetPlayerPos(playerid, CiftciLastPos[playerid][0], CiftciLastPos[playerid][1], CiftciLastPos[playerid][2]);

        new string_swe[512];
	    format(string_swe, sizeof(string_swe), "~n~~n~~n~~n~~n~~n~~n~~n~~g~Hasat edilen: ~r~%d ~w~metre", CiftciDistance[playerid]);
		GameTextForPlayer(playerid, string_swe, 1000, 3);
	}
	if(PlayerData[playerid][pCaptureFactory] != -1 )
    {
        if(!IsPlayerInRangeOfPoint(playerid, 3.0,Fabrikalar[PlayerData[playerid][pCaptureFactory]][fabrikaPos][0], Fabrikalar[PlayerData[playerid][pCaptureFactory]][fabrikaPos][1], Fabrikalar[PlayerData[playerid][pCaptureFactory]][fabrikaPos][2]))
        {
			Fabrika_CaptureReset(PlayerData[playerid][pCaptureFactory]);
	        Fabrika_Yenile(PlayerData[playerid][pCaptureFactory]);
	        SendServerMessage(playerid, "Uzaklaþtýðýn için ele geçirme baþarýsýz oldu.");
	    }
    }
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new ids = Car_GetID(vehicleid);
		if(ids != -1 && CarUpdate[vehicleid] < tickcount())
		{
            CarUpdate[vehicleid] = tickcount()+UPDATE_TIME;
        	CarData[ids][carDistance] += floatround(GetVehicleDistanceFromPoint(vehicleid,  CarLastPos[vehicleid][0], CarLastPos[vehicleid][1], CarLastPos[vehicleid][2])) *2;
			GetVehiclePos(vehicleid, CarLastPos[vehicleid][0], CarLastPos[vehicleid][1], CarLastPos[vehicleid][2]);
			Car_Save(vehicleid);
		}
	}
	if(PlayerData[playerid][pTaksiKabul] != -1)
	{
 		static
			Float:x,
			Float:y,
			Float:z;

		GetPlayerLocationEx(PlayerData[playerid][pTaksiKabul], x, y, z);
		Waypoint_Set(playerid, GetPlayerLocation(PlayerData[playerid][pTaksiKabul]), x, y, z);
	}
	if(PaintballOyunundami(playerid))
	{
	    //for(new i=0; i < sizeof(PBSkorTablosu[]); i++) PlayerTextDrawShow(playerid, PBSkorTablosu[playerid][i]);
	    new pbid = PlayerData[playerid][pPaintball], string[256];
	    if(Paintball[pbid][odaTur] == 1)
	    {
			format(string, sizeof(string), "~w~K: ~r~%d ~w~- D: ~r~%d", PlayerData[playerid][pPaintballKill], PlayerData[playerid][pPaintballDeath]);
	       // PlayerTextDrawSetString(playerid, PBSkorTablosu[playerid][3], string);
	    }
	    else {
	        format(string, sizeof(string), "~w~A: ~r~%d ~w~- B: ~r~%d", Paintball[pbid][odaTakimPuan][1], Paintball[pbid][odaTakimPuan][0]);
	      //  PlayerTextDrawSetString(playerid, PBSkorTablosu[playerid][3], string);
	    }

	    static
		    hours,
		    minutes,
	     	seconds;

		GetElapsedTime(Paintball[pbid][odaSure], hours, minutes, seconds);
        format(string, sizeof(string), "%02d:%02d", minutes, seconds);
		//PlayerTextDrawSetString(playerid, PBSkorTablosu[playerid][5], string);
	} //else for(new i=0; i < sizeof(PBSkorTablosu[]); i++) PlayerTextDrawHide(playerid, PBSkorTablosu[playerid][i]);
    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new Float:vec[3];
		GetPlayerCameraFrontVector(playerid, vec[0], vec[1], vec[2]);
		new bool:possible_crasher = false;
		for (new i = 0; !possible_crasher && i < sizeof(vec); i++)
			if (floatabs(vec[i]) > 10.0)
				possible_crasher = true;

		if (possible_crasher)
			_Kick(playerid);
	}

	if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID && GetPVarInt(playerid, "AnkesorludenmiAriyor") == 1 && !AnkesorluTelefonaYakinMi(playerid))
	{
	    CancelCall(playerid);
	    SendServerMessage(playerid, "Ankesörlü telefondan uzaklaþtýðýnýz için arama iptal oldu.");
	}
/*	if( PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID && !BazIstasyonunaYakinMi(playerid) && GetPVarInt(playerid, "AnkesorludenmiAriyor") == 0 && (GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0))
	{
	    CancelCall(playerid);
	    SendServerMessage(playerid, "Sinyal düþtüðü için baðlantý koptu.");
	}*/

	DestekGuncelle(playerid);
	static
		s_iVehicle
	;

    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new Float:vec[3];
		GetPlayerCameraFrontVector(playerid, vec[0], vec[1], vec[2]);
		new bool:possible_crasher = false;
		for (new i = 0; !possible_crasher && i < sizeof(vec); i++)
			if (floatabs(vec[i]) > 10.0)
				possible_crasher = true;

		if (possible_crasher)
			_Kick(playerid);
	}
	if ( g_fSpeedCap[ playerid ] != 0.0 && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
	{
		s_iVehicle = GetPlayerVehicleID( playerid );

		if ( s_iVehicle )
		{
			static
				Float:s_fX,
				Float:s_fY,
				Float:s_fZ,
				Float:s_fVX,
				Float:s_fVY,
				Float:s_fVZ
			;

			GetVehiclePos( s_iVehicle, s_fX, s_fY, s_fZ );
			GetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );

			if ( !IsPlayerInRangeOfPoint( playerid, g_fSpeedCap[ playerid ] + 0.05, s_fX + s_fVX, s_fY + s_fVY, s_fZ + s_fVZ ) )
			{
				static
					Float:s_fLength
				;

				s_fLength = floatsqroot( ( s_fVX * s_fVX ) + ( s_fVY * s_fVY ) + ( s_fVZ * s_fVZ ) );

				s_fVX = ( s_fVX / s_fLength ) * g_fSpeedCap[ playerid ];
				s_fVY = ( s_fVY / s_fLength ) * g_fSpeedCap[ playerid ];
				s_fVZ = ( s_fVZ / s_fLength ) * g_fSpeedCap[ playerid ];

				if ( s_iVehicle )
					SetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );
				else
					SetPlayerVelocity( playerid, s_fVX, s_fVY, s_fVZ );
			}
		}
	}

/*	if(PlayerData[playerid][pFaction] != -1 && PlayerData[playerid][pOnDuty])
	{
		new strs[1024];
		new factionid = PlayerData[playerid][pFaction];
		format(strs, sizeof(strs), "[%s]", Faction_GetRank(playerid));
		if(factionid == 2) format(strs, sizeof(strs), "[Basýn Kartý]");
		if(GetFactionType(playerid) == FACTION_AKADEMI)
		{
		    format(strs, sizeof(strs), "[%s]", Faction_GetRank(playerid));
		    UpdateDynamic3DTextLabelText(rozet[playerid], COLOR_LIGHTBLUE, strs);
		}
		switch(factionid)
		{
		    case 0: UpdateDynamic3DTextLabelText(rozet[playerid], COLOR_RADIO, strs);
		    case 1: UpdateDynamic3DTextLabelText(rozet[playerid], COLOR_HOSPITAL, strs);
		    case 2: UpdateDynamic3DTextLabelText(rozet[playerid], COLOR_ORANGE, strs);
		    case 3: UpdateDynamic3DTextLabelText(rozet[playerid], COLOR_GREY, strs);
		    case 7: UpdateDynamic3DTextLabelText(rozet[playerid], COLOR_LSPDNEW, strs);
  		}
	}
	else UpdateDynamic3DTextLabelText(rozet[playerid], -1, "");*/

	if (GetPlayerMoney(playerid) != PlayerData[playerid][pMoney])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	}
	if (GetPlayerWantedLevel(playerid) != PlayerData[playerid][pWantedLevel])
	{
	SetPlayerWantedLevel(playerid, PlayerData[playerid][pWantedLevel]);
	}
	if (GetPlayerScore(playerid) != PlayerData[playerid][pLevel])
	{
		SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
	}
	if (PlayerData[playerid][pWaypoint])
	{
	    format(str, sizeof(str), "~b~Hedef:~w~ %s (%.2f metre)", PlayerData[playerid][pLocation], GetPlayerDistanceFromPoint(playerid, PlayerData[playerid][pWaypointPos][0], PlayerData[playerid][pWaypointPos][1], PlayerData[playerid][pWaypointPos][2]));
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][69], str);
	}
		if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo])
	    {
      		static
		        Float:fDamage;

	  		GetVehicleHealth(vehicleid, fDamage);

	  		fDamage = floatdiv(1000 - fDamage, 10) * 1.42999; // 1.33334;
 	 		if (fDamage < 0.0) fDamage = 0.0;
			else if (fDamage > 100.0) fDamage = 100.0;


	switch (GetEngineStatus(vehicleid))
		{

		    case false:
		    {
		    format(str,	 sizeof(str), "~l~yakit: %d%c", CoreVehicles[vehicleid][vehFuel], '%');

			PlayerTextDrawSetString(playerid, AracGostergesi[1][playerid], str);

			format(str, sizeof(str), "~l~hiz: %d km/h", GetVehicleSpeed(vehicleid));
			PlayerTextDrawSetString(playerid, AracGostergesi[0][playerid], str);
			new sid = Car_GetID(GetPlayerVehicleID(playerid));
			new motormetre;
			motormetre = floatround(CarData[sid][carDistance] / 1000);
			format(str, sizeof(str), "~l~motor: %d km", motormetre);
			PlayerTextDrawSetString(playerid, AracGostergesi[2][playerid], str);

			}
			case true:
			{
			   format(str,	 sizeof(str), "~b~yakit: ~w~%d ~g~lt", CoreVehicles[vehicleid][vehFuel]);
			PlayerTextDrawSetString(playerid, AracGostergesi[1][playerid], str);
            new sid = Car_GetID(GetPlayerVehicleID(playerid));
			format(str, sizeof(str), "~b~hiz: ~w~%d~g~km/h", GetVehicleSpeed(vehicleid));
			PlayerTextDrawSetString(playerid, AracGostergesi[0][playerid], str);
			new motormetre;
   			motormetre = floatround(CarData[sid][carDistance] / 1000);
			format(str, sizeof(str), "~b~motor: ~w~%d ~g~km", motormetre);
			PlayerTextDrawSetString(playerid, AracGostergesi[2][playerid], str);
			}
	}






		}
		for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
		{
			static
			    tires[4];

			GetVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], tires[3]);

			if (tires[3] != 1111) {
			    UpdateVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], 1111);
			}
			break;
		}
	}
	switch (PlayerData[playerid][pHouseLights])
	{
	    case 0:
	    {
	        if ((id = House_Inside(playerid)) != -1 && !HouseData[id][houseLights])
			{
	        	PlayerData[playerid][pHouseLights] = true;
	            PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][62]);
	        }
	        else PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][62]);
	    }
	    case 1:
	    {
	        if ((id = House_Inside(playerid)) == -1 || (id != -1 && HouseData[id][houseLights]))
			{
	            PlayerData[playerid][pHouseLights] = false;
                PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][62]);
	        }
	    }
	}
	if (PlayerData[playerid][pDrinking] && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_SPRUNK && !IsPlayerInAnyVehicle(playerid))
	{
 		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
 		PlayerData[playerid][pDrinking] = 0;
	}
	if ((id = Speed_Nearest(playerid)) != -1 && GetPlayerSpeed2(playerid) > SpeedData[id][speedLimit] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsEngineVehicle(vehicleid) && !PlayerData[playerid][pSpeedTime])
	{
	    if (!IsACruiser(vehicleid) && !IsABoat(vehicleid) && !IsAPlane(vehicleid) && !IsAHelicopter(vehicleid))
	    {
	 		new price = 100 + floatround(GetPlayerSpeed2(playerid) - SpeedData[id][speedLimit]);

	   		format(str, sizeof(str), "Hiz: (%.0f/%.0f kmh)", GetPlayerSpeed2(playerid), SpeedData[id][speedLimit]);
	        SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFFFFFF66));

			if (Ticket_Add(playerid, price, str) != -1)
			{
	    		format(str, sizeof(str), "Radara yakalandin ve ~r~%s~w~ para cezasi yedin.", FormatNumber(price));
	     		ShowPlayerFooter(playerid, str);
			}
            else {
                PlayerData[playerid][pWarrants]++;
		    	AddWarrantEx(playerid, "Sistem", "Gecikmiþ Ceza");
		    	SendFactionMessage(1, COLOR_RADIO, "RADIO: %s adlý vatandaþa APB eklendi. Sebep: \"Gecikmiþ Ceza\" .", ReturnName(playerid, 0));
			}
			PlayerData[playerid][pSpeedTime] = 5;
		}
	}
	if (Detector_Nearest(playerid) != -1)
	{
		if (IsPlayerArmed(playerid) && gettime() > PlayerData[playerid][pDetectorTime])
		{
			PlayerData[playerid][pDetectorTime] = gettime() + 5;

			SendNearbyMessage(playerid, 30.0, COLOR_GREEN, "** Dedektör öttü. (( %s ))", ReturnName(playerid, 0));
			PlayerPlaySoundEx(playerid, 43000);
		}
	}
	if ((keys[0] & KEY_FIRE) && GetPlayerWeapon(playerid) == 42)
	{
        static
	        Float:fX,
	        Float:fY,
	        Float:fZ;

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if ((IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ)) && ++ g_aFireExtinguished[i] == 32)
   			{
   			    SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

      			DestroyDynamicObject(g_aFireObjects[i]);
	        	g_aFireExtinguished[i] = 0;
			}
		}
 }
	if ((keys[0] & KEY_FIRE) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fVector[3],
			Float:fCamera[3];

	    GetPlayerCameraFrontVector(playerid, fVector[0], fVector[1], fVector[2]);
	    GetPlayerCameraPos(playerid, fCamera[0], fCamera[1], fCamera[2]);

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if (IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 3050, fX, fY, fZ))
			{
				if (++g_aFireExtinguished[i] == 64 && DistanceCameraTargetToLocation(fCamera[0], fCamera[1], fCamera[2], fX, fY, fZ + 2.5, fVector[0], fVector[1], fVector[2]) < 12.0)
   				{
   			    	SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

	      			DestroyDynamicObject(g_aFireObjects[i]);
		        	g_aFireExtinguished[i] = 0;
				}
		  	}
	    }
	}
	return 1;
}


CMD:oykullan(playerid, params[])
{
	new id = Sandik_Yakinmi(playerid);

	if(id == -1)
	    return SendErrorMessage(playerid, "Sandýða yakýn deðilsin.");

    if (PlayerData[playerid][pOyVerdimi] == 1)
	    return SendErrorMessage(playerid, "Zaten oy kullanmýþsýn.");

	if (PlayerData[playerid][pLevel] <= 1)
	    return SendErrorMessage(playerid, "Oy kullanabilmeniz için 2 seviyeden yüksek olmanýz gerekmektedir.");

	SendServerMessage(playerid, "Teþekkürler! {2ECC71}'%s'{FFFFFF} isimli sandýða oy kullandýn!", Sandiklar[id][sandikBaslik]);
	PlayerData[playerid][pOyVerdimi] = 1;
	Sandiklar[id][sandikOy]++;
	Sandik_Yenile(id);
	Sandik_Kaydet(id);
	return 1;
}

/*CMD:maas(playerid, params[])
{
	if(!PlayerData[playerid][pPay])
	    return SendErrorMessage(playerid, "Henüz maaþ kodu almadýn.");

	if(isnull(params))
		return SendErrorMessage(playerid, "Kod kýsmýný boþ býrakmayýn.");

	if(PlayerData[playerid][pPayCode] != strval(params))
		return SendErrorMessage(playerid, "Geçersiz bir kod girdiniz.");

    new vergi = GetPVarInt(playerid, "Vergi");
	new paycheck = GetPVarInt(playerid, "Maas");
	new mevduataeklenecek = GetPVarInt(playerid, "Mevduat");

	PlayerData[playerid][pEXP]++;
 	if(PlayerData[playerid][pEXP] >= PlayerData[playerid][pLevel]*3)
	{
		PlayerData[playerid][pEXP] = 0;
		PlayerData[playerid][pLevel]++;
		SendServerMessage(playerid, "{7EFB1A}Seviye atladýnýz!");
	}

	PlayerData[playerid][pBankMoney] += paycheck - vergi;
	PlayerData[playerid][pSavings] += mevduataeklenecek;

	CallLocalFunction("MaasSifirla", "d", playerid);
	SendServerMessage(playerid, "Maaþ alýndý.");
	return 1;
}*/

forward HastaneTimer(playerid);
public HastaneTimer(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward GirisTimers(playerid);
public GirisTimers(playerid)
{

	//if(GirisTimer[playerid] == 1) return KickEx(playerid);
    GirisTimer[playerid] = 0;
	return 1;
}
public OnPlayerConnect(playerid)
{
shotTime[playerid] = 0;
PlayerData[playerid][pGirisYapti] = 0;
shot[playerid] = 0;
PlayerData[playerid][pSpawnOldu] = 1;
KomutSpamSuresi[playerid] = SetTimerEx("KomutSure", 5000, 1, "i", playerid);
onlinepl++;
pDrunkLevelLast[playerid] = 0;
pFPS[playerid] = 0;
PlayerData[playerid][pYukAldi] = 0;
// REMOVE BAÞLANGIÇ
RemoveBuildingForPlayer(playerid, 16619, 199.3359, 1943.8750, 18.2031, 0.25);
RemoveBuildingForPlayer(playerid, 3267, 188.2422, 2081.6484, 22.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3277, 188.2422, 2081.6484, 22.4063, 0.25);
RemoveBuildingForPlayer(playerid, 16294, 15.1797, 1719.3906, 21.6172, 0.25);
RemoveBuildingForPlayer(playerid, 3267, 15.6172, 1719.1641, 22.4141, 0.25);
RemoveBuildingForPlayer(playerid, 3277, 15.6016, 1719.1719, 22.3750, 0.25);
RemoveBuildingForPlayer(playerid, 3267, 237.6953, 1696.8750, 22.4141, 0.25);
RemoveBuildingForPlayer(playerid, 3277, 237.6797, 1696.8828, 22.3750, 0.25);
RemoveBuildingForPlayer(playerid, 16293, 238.0703, 1697.5547, 21.6328, 0.25);
RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
RemoveBuildingForPlayer(playerid, 3279, 165.9531, 1849.9922, 16.8203, 0.25);
RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3279, 161.9063, 1933.0938, 16.8203, 0.25);
RemoveBuildingForPlayer(playerid, 16323, 199.3359, 1943.8750, 18.2031, 0.25);
RemoveBuildingForPlayer(playerid, 16671, 193.9531, 2051.7969, 20.1797, 0.25);
RemoveBuildingForPlayer(playerid, 3279, 233.4297, 1934.8438, 16.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3279, 267.0625, 1895.2969, 16.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3267, 354.4297, 2028.4922, 22.4141, 0.25);
RemoveBuildingForPlayer(playerid, 3277, 354.4141, 2028.5000, 22.3750, 0.25);
RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);
RemoveBuildingForPlayer(playerid, 3662, 2142.7031, -1657.9297, 17.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3662, 2164.9375, -1666.3047, 17.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3662, 2141.8672, -1693.3516, 17.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3662, 2154.3516, -1713.6641, 17.4844, 0.25);
RemoveBuildingForPlayer(playerid, 5633, 2089.3594, -1643.9297, 18.2188, 0.25);
RemoveBuildingForPlayer(playerid, 1501, 2138.3438, -1697.1094, 14.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3661, 2141.8672, -1693.3516, 17.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3661, 2154.3516, -1713.6641, 17.4844, 0.25);
RemoveBuildingForPlayer(playerid, 1501, 2150.8281, -1717.4297, 14.0703, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2138.8984, -1678.9688, 14.1797, 0.25);
RemoveBuildingForPlayer(playerid, 3661, 2142.7031, -1657.9297, 17.5547, 0.25);
RemoveBuildingForPlayer(playerid, 1501, 2142.8594, -1663.0859, 14.0703, 0.25);
RemoveBuildingForPlayer(playerid, 1501, 2165.1094, -1671.4531, 14.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3661, 2164.9375, -1666.3047, 17.5547, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2809.4219, -1567.6328, 9.5469, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2809.2734, -1556.3125, 9.5469, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 2808.7109, -1562.2578, 15.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 4.437, -271.835, 6.000, 0.250);
RemoveBuildingForPlayer(playerid, 1408, 4.445, -277.390, 6.000, 0.250);
RemoveBuildingForPlayer(playerid, 12956, 96.328, -261.195, 3.859, 0.250);
RemoveBuildingForPlayer(playerid, 12932, -117.960, -337.453, 3.617, 0.250);
RemoveBuildingForPlayer(playerid, 3378, -149.914, -324.343, 1.578, 0.250);
RemoveBuildingForPlayer(playerid, 3377, -149.914, -324.343, 1.578, 0.250);
RemoveBuildingForPlayer(playerid, 3250, -348.671, -1041.959, 58.312, 0.250);
RemoveBuildingForPlayer(playerid, 3246, -378.890, -1040.880, 57.859, 0.250);
RemoveBuildingForPlayer(playerid, 3276, -336.664, -1042.510, 58.898, 0.250);
RemoveBuildingForPlayer(playerid, 1408, 4.437, -271.835, 6.000, 0.250);
RemoveBuildingForPlayer(playerid, 1408, 4.445, -277.390, 6.000, 0.250);
RemoveBuildingForPlayer(playerid, 647, 1688.719, -1096.890, 24.546, 0.250);
RemoveBuildingForPlayer(playerid, 700, 1688.339, -1137.160, 23.523, 0.250);
RemoveBuildingForPlayer(playerid, 4729, 1850.520, -1050.739, 34.875, 0.250);
RemoveBuildingForPlayer(playerid, 4754, 1850.520, -1050.739, 34.875, 0.250);
RemoveBuildingForPlayer(playerid, 1260, 1850.680, -1050.819, 28.804, 0.250);
RemoveBuildingForPlayer(playerid, 1266, 1850.680, -1050.819, 28.804, 0.250);
RemoveBuildingForPlayer(playerid, 729, 1839.020, -1047.589, 23.890, 0.250);
RemoveBuildingForPlayer(playerid, 4691, 1646.349, -1108.880, 23.039, 0.250);
RemoveBuildingForPlayer(playerid, 1226, 2085.7578, -1863.3750, 16.3906, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2420.280, -1535.109, 23.210, 0.250);
RemoveBuildingForPlayer(playerid, 1297, 2400.949, -1528.829, 26.226, 0.250);
RemoveBuildingForPlayer(playerid, 1315, 2420.580, -1526.969, 26.289, 0.250);
RemoveBuildingForPlayer(playerid, 1297, 2426.419, -1534.920, 26.226, 0.250);
RemoveBuildingForPlayer(playerid, 1490, 2399.409, -1552.030, 28.750, 0.250);
RemoveBuildingForPlayer(playerid, 1260, 2410.270, -1555.640, 36.281, 0.250);
//can karapinar
RemoveBuildingForPlayer(playerid, 620, 2809.4219, -1567.6328, 9.5469, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2809.2734, -1556.3125, 9.5469, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 2808.7109, -1562.2578, 15.9844, 0.25);
for(new i; i < sizeof(GuvenliBolge); ++i)
{
GangZoneShowForPlayer(playerid, GuvenliBolge[i][Zone], COLOR_GREEN);
}

// REMOVE BÝTÝÞ
PlayerData[playerid][pInt] = 0;
EditingCopObjectID[playerid] = -1;
UsedPlayerAttach[playerid] = -1;
DestroyDynamic3DTextLabel(aDutyText[playerid]);
DestroyDynamic3DTextLabel(hDutyText[playerid]);
Hacker[playerid] = 0;


new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	
new connecting_ip[32+1];
GetPlayerIp(playerid,connecting_ip,32);
new num_players_on_ip = GetNumberOfPlayersOnThisIP(connecting_ip);
if(num_players_on_ip > MAX_BAGLANTI) {
SendClientMessage(playerid, -1, "Bir ip den maksimum 3 kiþi giriþ saðlayabilir.");
Kick(playerid);
}


CurrentAccountID[playerid] = -1;
	LogListType[playerid] = TYPE_NONE;
	LogListPage[playerid] = 0;

	EditingATMMID[playerid] = -1;
Downloaded[playerid] = 0;
	PlayerTick[playerid] = GetTickCount();

for(new i; papaganInfo:i < papaganInfo; i++) PapaganInfo[playerid][papaganInfo:i] = 0;


//===================[EV SÝSTEMÝ]===============================
EV_PlayerInit(playerid);
    //KillTimer(PapaganInfo[playerid][papagan->Timer]);

//new model,b;
//for(new o=0; o<60; o++) CreatePlayerObject(playerid, sModel, 0,0,0,0,0,0);
        Spawned[playerid] = 0;
      //  ToggleBlizzard(1);
Injourney[playerid] = 0;
	Watching[playerid] = 0;
	SetPlayerVirtualWorld(playerid, playerid+1);
	SetPlayerScore(playerid, 0);
	for (new i = 0; i < 30; i ++) {
	    SendClientMessage(playerid, -1, "");
	}

    SendClientMessageEx(playerid, 0xE74C3CFF, "Server: {FFFFFF}Veritabaný kontrol ediliyor.");
    //PlayAudioStreamForPlayer(playerid, "http://mp3.pilo.ovh/951b32c10e377.mp3");
    PlayerTextDrawShow(playerid, Giris[playerid]);

	for(new i; i < MAX_BALIK_SLOT; ++i)
	{
	    OyuncuBaliklari[playerid][BalikID][i] = -1;
	    OyuncuBaliklari[playerid][BalikGram][i] = 0;
	}

    for(new i; i < MAX_BALIK_SLOT; ++i)
	{
	    KovaBaliklari[playerid][BalikID][i] = -1;
	    KovaBaliklari[playerid][BalikGram][i] = 0;
	}
    BalikTimer[playerid] = -1;
    BalikBari[playerid] = CreatePlayerProgressBar(playerid, 250.0, 300.0, 135.0, 10.7, 0x048DEBFF, 15.0, 0);
    ApplyAnimation(playerid, "SAMP", "null", 0.0, 0, 0, 0, 0, 0);
    SetPVarInt(playerid, "OltaSlot", -1);


    for (new i = 0; i < 2; i ++) {
		TextDrawShowForPlayer(playerid, NewLoginTD[i]);
	}

    AimbotWarnings[playerid] = 0;
	playerspeedtimer[playerid] = SetTimerEx("VehicleSpeed", 100, 1, "i", playerid);
    InfoSkate[playerid][sActive] = false;
    
	for(new i; i < MAX_PLAYERS; ++i)
	{
	    if(IzlenenID[i] != INVALID_PLAYER_ID) continue;
		Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, OyuncuLabel[playerid], E_STREAMER_PLAYER_ID, i);
	}

	SpecSuresi[playerid] = -1;

	IzlenenID[playerid] = INVALID_PLAYER_ID;
	Streamer_ToggleIdleUpdate(playerid, true);

	SpecTitle[playerid] = CreatePlayerTextDraw(playerid, 155.000000, 344.000000, "Izlenen Oyuncu: ~b~~h~isim(playerid)");
	PlayerTextDrawBackgroundColor(playerid, SpecTitle[playerid], 255);
	PlayerTextDrawFont(playerid, SpecTitle[playerid], 2);
	PlayerTextDrawLetterSize(playerid, SpecTitle[playerid], 0.210000, 1.200000);
	PlayerTextDrawColor(playerid, SpecTitle[playerid], -1);
	PlayerTextDrawSetOutline(playerid, SpecTitle[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SpecTitle[playerid], 1);
	PlayerTextDrawUseBox(playerid, SpecTitle[playerid], 1);
	PlayerTextDrawBoxColor(playerid, SpecTitle[playerid], 255);
	PlayerTextDrawTextSize(playerid, SpecTitle[playerid], 410.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, SpecTitle[playerid], 0);

	SpecHPText[playerid] = CreatePlayerTextDraw(playerid, 169.000000, 360.000000, "~w~HP: ~r~100 ~y~/ ~w~Zirh: 100");
	PlayerTextDrawBackgroundColor(playerid, SpecHPText[playerid], 255);
	PlayerTextDrawFont(playerid, SpecHPText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, SpecHPText[playerid], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid, SpecHPText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, SpecHPText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SpecHPText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, SpecHPText[playerid], 0);

	SpecGunText[playerid] = CreatePlayerTextDraw(playerid, 169.000000, 374.000000, "~w~Silah Adi ~y~/ ~r~9999 ~w~Mermi");
	PlayerTextDrawBackgroundColor(playerid, SpecGunText[playerid], 255);
	PlayerTextDrawFont(playerid, SpecGunText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, SpecGunText[playerid], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid, SpecGunText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, SpecGunText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SpecGunText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, SpecGunText[playerid], 0);

	SpecCarText[playerid] = CreatePlayerTextDraw(playerid, 169.000000, 389.000000, "Arac Modeli ~y~/ HP: ~r~1000");
	PlayerTextDrawBackgroundColor(playerid, SpecCarText[playerid], 255);
	PlayerTextDrawFont(playerid, SpecCarText[playerid], 1);
	PlayerTextDrawLetterSize(playerid, SpecCarText[playerid], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid, SpecCarText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, SpecCarText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SpecCarText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, SpecCarText[playerid], 0);

	SpecCarModel[playerid] = CreatePlayerTextDraw(playerid, 364.000000, 356.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, SpecCarModel[playerid], 0);
	PlayerTextDrawFont(playerid, SpecCarModel[playerid], 5);
	PlayerTextDrawLetterSize(playerid, SpecCarModel[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, SpecCarModel[playerid], -1);
	PlayerTextDrawSetOutline(playerid, SpecCarModel[playerid], 0);
	PlayerTextDrawSetProportional(playerid, SpecCarModel[playerid], 1);
	PlayerTextDrawSetShadow(playerid, SpecCarModel[playerid], 1);
	PlayerTextDrawUseBox(playerid, SpecCarModel[playerid], 1);
	PlayerTextDrawBoxColor(playerid, SpecCarModel[playerid], 0);
	PlayerTextDrawTextSize(playerid, SpecCarModel[playerid], 45.000000, 45.000000);
	PlayerTextDrawSetPreviewModel(playerid, SpecCarModel[playerid], 401);
	PlayerTextDrawSetPreviewRot(playerid, SpecCarModel[playerid], -16.000000, 0.000000, 45.000000, 0.899999);
	PlayerTextDrawSetSelectable(playerid, SpecCarModel[playerid], 0);

    SetPlayerColor(playerid, COLOR_WHITE);
    gPlayerUsingLoopingAnim[playerid] = 0;
	gPlayerAnimLibsPreloaded[playerid] = 0;

    LoadPlayerTextDraws(playerid);
    CevapSifirla(playerid);

    GymButton[playerid] = 0; GymLoop[playerid] = 0; GymPointvariable[playerid] = 0; GymPointX[playerid] = 0;

//	rozet[playerid] = CreateDynamic3DTextLabel("", 0xFFFFFFFF, 0, 0, 0, 8, 0, 1 );


	GirisTimer[playerid] = 1;
    SetTimerEx("GirisTimers", 500000, false, "d", playerid);

    ZirhDegistir(playerid, 0);
	CanDegistir(playerid, 100);

    Speedlimit[playerid] = 0;/*
	if ((GetTickCount() - PlayerData[playerid][pLeaveTime]) < 2000 && !strcmp(ReturnIP(playerid), PlayerData[playerid][pLeaveIP]))
	{
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s (%s) tekrar girmeye çalýþtýðý için oyundan atýldý.", ReturnName(playerid), ReturnIP(playerid));
	    _Kick(playerid);
		return 1;
	}*/
   //============================================REMOVELER=======================================//
   //**********************City Hall Remove Building******************************//
   //RemoveBuildingForPlayer(playerid, 620, 1547.569, -1661.030, 13.046, 0.250);
//RemoveBuildingForPlayer(playerid, 647, 1546.599, -1664.630, 14.437, 0.250);
//RemoveBuildingForPlayer(playerid, 647, 1546.869, -1658.339, 14.437, 0.250);
   //RemoveBuildingForPlayer(playerid, 3644, 2069.620, -1556.699, 15.062, 0.250);
	//RemoveBuildingForPlayer(playerid, 3645, 2069.620, -1556.699, 15.062, 0.250);
	//RemoveBuildingForPlayer(playerid, 3644, 2070.760, -1586.020, 15.062, 0.250);
	//RemoveBuildingForPlayer(playerid, 3645, 2070.760, -1586.020, 15.062, 0.250);
	//RemoveBuildingForPlayer(playerid, 1524, 2074.179, -1579.150, 14.031, 0.250);
	//RemoveBuildingForPlayer(playerid, 1412, 2055.270, -1594.229, 13.765, 0.250);
	//RemoveBuildingForPlayer(playerid, 1412, 2055.270, -1599.500, 13.765, 0.250);
	//RemoveBuildingForPlayer(playerid, 1412, 2058.050, -1602.229, 13.765, 0.250);
	//RemoveBuildingForPlayer(playerid, 1412, 2063.330, -1602.229, 13.765, 0.250);
	//RemoveBuildingForPlayer(playerid, 1412, 2078.489, -1602.229, 13.765, 0.250);
	//RemoveBuildingForPlayer(playerid, 1412, 2083.770, -1602.229, 13.765, 0.250);
	//RemoveBuildingForPlayer(playerid, 1412, 2086.459, -1599.589, 13.765, 0.250);
	//RemoveBuildingForPlayer(playerid, 1412, 2086.459, -1594.319, 13.765, 0.250);
   //RemoveBuildingForPlayer(playerid, 627, 406.5156, -1763.3672, 8.5938, 0.25);
//RemoveBuildingForPlayer(playerid, 1280, 409.8359, -1762.7266, 7.3516, 0.25);
//RemoveBuildingForPlayer(playerid, 625, 412.5938, -1758.9063, 8.1484, 0.25);
//RemoveBuildingForPlayer(playerid, 1280, 415.6875, -1762.7266, 7.3750, 0.25);
//RemoveBuildingForPlayer(playerid, 1280, 390.0469, -1762.7266, 7.3438, 0.25);
//RemoveBuildingForPlayer(playerid, 627, 388.1016, -1763.8828, 8.5938, 0.25);
//RemoveBuildingForPlayer(playerid, 1280, 396.1250, -1762.7266, 7.3594, 0.25);
//RemoveBuildingForPlayer(playerid, 627, 393.6172, -1763.6641, 8.5938, 0.25);
//RemoveBuildingForPlayer(playerid, 643, 402.0781, -1762.1094, 7.3750, 0.25);
//RemoveBuildingForPlayer(playerid, 625, 402.0234, -1758.6719, 7.8828, 0.25);

   //RemoveBuildingForPlayer(playerid, 955, 1928.729, -1772.449, 12.945, 0.250);
//RemoveBuildingForPlayer(playerid, 1226, 1951.930, -1756.520, 16.359, 0.250);
//RemoveBuildingForPlayer(playerid, 1283, 1952.520, -1751.380, 15.554, 0.250);
   //RemoveBuildingForPlayer(playerid, 3582, 2018.119, -1656.229, 15.203, 0.250);
//RemoveBuildingForPlayer(playerid, 3562, 2018.119, -1656.229, 15.203, 0.250);
//RemoveBuildingForPlayer(playerid, 673, 2033.630, -1638.109, 12.515, 0.250);
   //RemoveBuildingForPlayer(playerid, 6430, 121.0313, -1580.4063, 10.4688, 0.25);
   //RemoveBuildingForPlayer(playerid, 17905, 2568.0234, -1098.3203, 59.5391, 0.25);
//RemoveBuildingForPlayer(playerid, 1297, 2656.2578, -1066.4297, 71.5625, 0.25);
//RemoveBuildingForPlayer(playerid, 1315, 2648.2734, -1063.7500, 71.7578, 0.25);
//RemoveBuildingForPlayer(playerid, 1297, 2638.1563, -1064.2969, 71.8672, 0.25);
   //RemoveBuildingForPlayer(playerid, 4098, 1622.6250, -1824.7891, 17.4922, 0.25);
//RemoveBuildingForPlayer(playerid, 1266, 1648.0156, -1795.0703, 25.0391, 0.25);
//RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
//RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
//RemoveBuildingForPlayer(playerid, 4085, 1622.6250, -1824.7891, 17.4922, 0.25);
//RemoveBuildingForPlayer(playerid, 1260, 1648.0156, -1795.0703, 25.0391, 0.25);
   //RemoveBuildingForPlayer(playerid, 3695, 2239.9297, -1790.6953, 17.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 3695, 2282.9922, -1790.6953, 17.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 3695, 2314.8203, -1790.6953, 17.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 3695, 2352.7188, -1790.6953, 17.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 3695, 2387.8203, -1790.6953, 17.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 3584, 2239.9297, -1790.6953, 17.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 620, 2258.3438, -1804.7422, 12.0938, 0.25);
//RemoveBuildingForPlayer(playerid, 645, 2259.2656, -1773.2422, 11.1250, 0.25);
//RemoveBuildingForPlayer(playerid, 17886, 2264.0391, -1789.2578, 20.7734, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1791.0000, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1796.4531, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1807.3281, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1801.8672, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1770.0469, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1775.5078, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1780.9844, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 620, 2275.3906, -1820.7266, 12.0938, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2268.1875, -1810.0313, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2273.6953, -1810.0313, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 3584, 2282.9922, -1790.6953, 17.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2267.8125, -1767.2734, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2273.3359, -1767.3438, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 620, 2271.6484, -1772.3984, 8.3516, 0.25);
//RemoveBuildingForPlayer(playerid, 645, 2285.7578, -1762.1250, 12.2891, 0.25);
//RemoveBuildingForPlayer(playerid, 1226, 2297.8984, -1793.8203, 16.4219, 0.25);
//RemoveBuildingForPlayer(playerid, 620, 2297.3828, -1798.5391, 8.3516, 0.25);
//RemoveBuildingForPlayer(playerid, 620, 2297.1484, -1775.8750, 8.3516, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2305.0625, -1810.0313, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1807.3281, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1801.8672, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1791.0000, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1796.4531, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 3584, 2314.8203, -1790.6953, 17.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1775.5078, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1770.0469, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1780.9844, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2304.7813, -1767.3828, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1307, 2322.6484, -1815.4141, 12.7500, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2341.7578, -1810.0313, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1807.3281, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1801.8672, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1226, 2335.6484, -1796.6328, 16.4219, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1791.0000, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1796.4531, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 620, 2334.7109, -1785.0625, 12.0938, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1775.5078, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1780.9844, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 17887, 2343.6094, -1784.5078, 20.3125, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1770.0469, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2341.3828, -1767.2734, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1307, 2295.7031, -1742.1953, 12.7500, 0.25);
//RemoveBuildingForPlayer(playerid, 1307, 2331.2656, -1742.4141, 12.7500, 0.25);
//RemoveBuildingForPlayer(playerid, 3584, 2352.7188, -1790.6953, 17.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 1307, 2364.2500, -1742.1172, 12.7500, 0.25);
//RemoveBuildingForPlayer(playerid, 620, 2367.6484, -1780.7734, 11.0469, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1800.4688, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1805.9297, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2376.9922, -1813.9297, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1811.3828, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1780.9844, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1789.6016, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1795.0547, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2376.6172, -1767.2734, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1770.0469, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1775.5078, 13.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 3584, 2387.8203, -1790.6953, 17.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 17518, 2361.9375, -1699.9375, 15.9219, 0.25);
//RemoveBuildingForPlayer(playerid, 5110, 2443.63281, -1901.32031, 18.00781, 0.25); //removeWorldObject (mexcrnershp2_las2) (1)
    //RemoveBuildingForPlayer(playerid, 5226, 2443.63281, -1901.32031, 18.00781, 0.25); //LOD Remove Object 5110
    //RemoveBuildingForPlayer(playerid, 1635, 2441.4375, -1901.69531, 14.72656, 0.25); //removeWorldObject (nt_aircon1dbl) (1)
    //RemoveBuildingForPlayer(playerid, 1687, 2430.51563, -1917.72656, 18.96094, 0.25); //removeWorldObject (gen_roofbit1) (1)
    //RemoveBuildingForPlayer(playerid, 5179, 2439.72656, -1952.09375, 16.02344, 0.25); //removeWorldObject (mexcrnershp_las2) (1)
    //RemoveBuildingForPlayer(playerid, 5248, 2439.72656, -1952.09375, 16.02344, 0.25); //LOD Remove Object 5179
    //RemoveBuildingForPlayer(playerid, 5187, 2439.28125, -1979.96094, 15.75, 0.25); //removeWorldObject (mexcrnrxc_las2) (1)
    //RemoveBuildingForPlayer(playerid, 5249, 2439.28125, -1979.96094, 15.75, 0.25); //LOD Remove Object 5187
    //RemoveBuildingForPlayer(playerid, 1635, 2440.35938, -1974.92969, 16.03906, 0.25); //removeWorldObject (nt_aircon1dbl) (2)
    //RemoveBuildingForPlayer(playerid, 1687, 2446.28125, -1992.58594, 18.35938, 0.25); //removeWorldObject (gen_roofbit1) (2)
    //RemoveBuildingForPlayer(playerid, 1687, 2430.47656, -1967.78906, 18.35938, 0.25); //removeWorldObject (gen_roofbit1) (3)
    //RemoveBuildingForPlayer(playerid, 1635, 2456.39844, -1959.5625, 16.03906, 0.25); //removeWorldObject (nt_aircon1dbl) (3)
    //RemoveBuildingForPlayer(playerid, 1687, 2437.21094, -1946.64844, 18.35938, 0.25); //removeWorldObject (gen_roofbit1) (4)
   //RemoveBuildingForPlayer(playerid, 13241, 681.4766, -459.0000, 15.5313, 0.25);
//RemoveBuildingForPlayer(playerid, 785, 637.6406, -328.6875, 10.3203, 0.25);
//RemoveBuildingForPlayer(playerid, 3172, 713.3125, -468.0703, 15.1328, 0.25);
//RemoveBuildingForPlayer(playerid, 12976, 681.4766, -459.0000, 15.5313, 0.25);
//RemoveBuildingForPlayer(playerid, 12977, 679.1406, -455.7734, 16.3359, 0.25);
//RemoveBuildingForPlayer(playerid, 1332, 656.0000, -439.2734, 16.2813, 0.25);
//RemoveBuildingForPlayer(playerid, 1335, 659.2266, -439.3906, 16.3750, 0.25);
//RemoveBuildingForPlayer(playerid, 1688, 686.7578, -455.4141, 20.6406, 0.25);
//RemoveBuildingForPlayer(playerid, 1691, 686.1172, -452.2578, 20.0391, 0.25);
//RemoveBuildingForPlayer(playerid, 1345, 693.2891, -456.0156, 16.0078, 0.25);
//RemoveBuildingForPlayer(playerid, 705, 658.0078, -429.7266, 14.6328, 0.25);
//RemoveBuildingForPlayer(playerid, 791, 637.6406, -328.6875, 10.3203, 0.25); //<<<<<<<<<<<<<<<<<<<<
   //RemoveBuildingForPlayer(playerid, 5681, 1921.479, -1778.910, 18.578, 0.250);
//RemoveBuildingForPlayer(playerid, 5409, 1918.849, -1776.329, 16.976, 0.250);
//RemoveBuildingForPlayer(playerid, 5535, 1918.849, -1776.329, 16.976, 0.250);
//RemoveBuildingForPlayer(playerid, 1524, 1910.160, -1779.660, 18.750, 0.250);
//RemoveBuildingForPlayer(playerid, 1308, 2110.699, -1742.579, 12.703, 0.250);
//RemoveBuildingForPlayer(playerid, 5410, 2140.520, -1735.140, 15.890, 0.250);
//RemoveBuildingForPlayer(playerid, 5551, 2140.520, -1735.140, 15.890, 0.250);
//RemoveBuildingForPlayer(playerid, 1308, 2175.310, -1730.890, 12.703, 0.250);
//RemoveBuildingForPlayer(playerid, 3558, 2018.239, -1732.170, 15.500, 0.250);
//RemoveBuildingForPlayer(playerid, 3559, 2018.239, -1732.170, 15.500, 0.250);
//RemoveBuildingForPlayer(playerid, 1412, 2116.810, -1708.369, 13.703, 0.250);
//RemoveBuildingForPlayer(playerid, 1412, 2175.129, -1716.290, 13.703, 0.250);
//RemoveBuildingForPlayer(playerid, 5418, 2112.939, -1797.089, 19.335, 0.250);
//RemoveBuildingForPlayer(playerid, 5530, 2112.939, -1797.089, 19.335, 0.250);
//RemoveBuildingForPlayer(playerid, 3976, 1571.599, -1675.750, 35.679, 0.250);
//RemoveBuildingForPlayer(playerid, 4064, 1571.599, -1675.750, 35.679, 0.250);
   //RemoveBuildingForPlayer(playerid, 4976, 1931.0000, -1871.3906, 15.8438, 0.25);
   //RemoveBuildingForPlayer(playerid, 3662, 2142.7031, -1657.9297, 17.5547, 0.25);
//RemoveBuildingForPlayer(playerid, 3662, 2164.9375, -1666.3047, 17.5547, 0.25);
//RemoveBuildingForPlayer(playerid, 3662, 2141.8672, -1693.3516, 17.5547, 0.25);
//RemoveBuildingForPlayer(playerid, 3662, 2154.3516, -1713.6641, 17.4844, 0.25);
//RemoveBuildingForPlayer(playerid, 5547, 2041.6484, -1682.1875, 12.5703, 0.25);
//RemoveBuildingForPlayer(playerid, 5549, 2137.9844, -1672.5547, 12.7734, 0.25);
//RemoveBuildingForPlayer(playerid, 5633, 2089.3594, -1643.9297, 18.2188, 0.25);
//RemoveBuildingForPlayer(playerid, 5670, 2059.8672, -1701.2500, 15.9609, 0.25);
//RemoveBuildingForPlayer(playerid, 1308, 2011.7734, -1734.3438, 12.7031, 0.25);
//RemoveBuildingForPlayer(playerid, 1308, 2011.5859, -1694.5703, 12.7734, 0.25);
//RemoveBuildingForPlayer(playerid, 673, 2032.5000, -1737.6953, 12.5156, 0.25);
//RemoveBuildingForPlayer(playerid, 673, 2034.6250, -1699.8438, 12.5156, 0.25);
//RemoveBuildingForPlayer(playerid, 5407, 2041.6484, -1682.1875, 12.5703, 0.25);
//RemoveBuildingForPlayer(playerid, 673, 2049.0547, -1733.7813, 12.0938, 0.25);
//RemoveBuildingForPlayer(playerid, 5421, 2059.8672, -1701.2500, 15.9609, 0.25);
//RemoveBuildingForPlayer(playerid, 1307, 2124.9609, -1680.7891, 12.6875, 0.25);
//RemoveBuildingForPlayer(playerid, 1501, 2138.3438, -1697.1094, 14.0703, 0.25);
//RemoveBuildingForPlayer(playerid, 3661, 2141.8672, -1693.3516, 17.5547, 0.25);
//RemoveBuildingForPlayer(playerid, 3661, 2154.3516, -1713.6641, 17.4844, 0.25);
//RemoveBuildingForPlayer(playerid, 1501, 2150.8281, -1717.4297, 14.0703, 0.25);
//RemoveBuildingForPlayer(playerid, 5518, 2137.9844, -1672.5547, 12.7734, 0.25);
//RemoveBuildingForPlayer(playerid, 1308, 2138.8984, -1678.9688, 14.1797, 0.25);
//RemoveBuildingForPlayer(playerid, 3661, 2142.7031, -1657.9297, 17.5547, 0.25);
//RemoveBuildingForPlayer(playerid, 1501, 2142.8594, -1663.0859, 14.0703, 0.25);
//RemoveBuildingForPlayer(playerid, 1308, 2159.2422, -1655.2813, 14.1797, 0.25);
//RemoveBuildingForPlayer(playerid, 1501, 2165.1094, -1671.4531, 14.0703, 0.25);
//RemoveBuildingForPlayer(playerid, 3661, 2164.9375, -1666.3047, 17.5547, 0.25);
//RemoveBuildingForPlayer(playerid, 1264, 2175.5234, -1664.0781, 14.5703, 0.25);
//RemoveBuildingForPlayer(playerid, 1413, 1879.9922, -1879.8906, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 1413, 1885.2578, -1879.8984, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 1413, 1869.4609, -1879.6641, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 1412, 1874.7344, -1879.6641, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 1412, 1890.5234, -1879.6641, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 1413, 1904.3750, -1879.7344, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 1413, 1909.6563, -1879.7344, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 1412, 1914.9297, -1879.7344, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 1413, 1920.1953, -1879.9531, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 1413, 1925.4609, -1879.9609, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 1412, 1930.7188, -1879.7344, 13.6797, 0.25);
//RemoveBuildingForPlayer(playerid, 4848, 1931.0000, -1871.3906, 15.8438, 0.25);
//RemoveBuildingForPlayer(playerid, 1226, 1931.8750, -1863.4609, 16.3203, 0.25);
//RemoveBuildingForPlayer(playerid, 1226, 1915.7422, -1863.4609, 16.3203, 0.25);
   //RemoveBuildingForPlayer(playerid, 1268, 1032.6875, -2074.8203, 15.6875, 0.25);
//RemoveBuildingForPlayer(playerid, 762, 980.8047, -2186.8984, 16.0859, 0.25);
//RemoveBuildingForPlayer(playerid, 762, 1000.1328, -2132.2656, 16.0859, 0.25);
//RemoveBuildingForPlayer(playerid, 762, 1015.9531, -2078.9766, 16.0859, 0.25);
//RemoveBuildingForPlayer(playerid, 4988, 1030.9688, -2074.8672, 22.1563, 0.25);
//RemoveBuildingForPlayer(playerid, 1259, 1032.6875, -2074.8203, 15.6875, 0.25);
//RemoveBuildingForPlayer(playerid, 762, 1011.8594, -2043.5000, 16.0859, 0.25);
		//RemoveBuildingForPlayer(playerid, 1297, 2446.340, -1281.150, 26.226, 0.250);
//RemoveBuildingForPlayer(playerid, 1297, 2446.340, -1316.290, 26.226, 0.250);
//RemoveBuildingForPlayer(playerid, 3655, 2432.129, -1358.170, 25.742, 0.250);
//RemoveBuildingForPlayer(playerid, 3656, 2432.129, -1358.170, 25.742, 0.250);
//RemoveBuildingForPlayer(playerid, 760, 2438.350, -1347.339, 22.898, 0.250);
//RemoveBuildingForPlayer(playerid, 1297, 2446.340, -1355.280, 26.226, 0.250);
//RemoveBuildingForPlayer(playerid, 1307, 2409.050, -1268.550, 23.390, 0.250);
		//***********************LS MALL Remove Building***********************************//
		//RemoveBuildingForPlayer(playerid, 6048, 1117.585, -1490.007, 32.718, 0.250);
		//RemoveBuildingForPlayer(playerid, 6130, 1117.585, -1490.007, 32.718, 0.250);
		//RemoveBuildingForPlayer(playerid, 6131, 1117.585, -1490.007, 32.718, 0.250);
		//RemoveBuildingForPlayer(playerid, 6255, 1117.585, -1490.007, 32.718, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1050.132, -1566.437, 12.640, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1119.601, -1566.437, 12.625, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1105.609, -1566.437, 12.578, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1075.648, -1566.437, 12.593, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1141.578, -1566.437, 12.617, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1159.609, -1566.437, 12.640, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1185.531, -1566.437, 12.625, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1190.257, -1545.601, 12.664, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1128.734, -1518.492, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1111.257, -1512.359, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 3586, 1128.968, -1502.023, 18.296, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1106.437, -1501.375, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 712, 1134.078, -1500.375, 22.281, 0.250);
		//RemoveBuildingForPlayer(playerid, 712, 1123.250, -1500.531, 22.281, 0.250);
		//RemoveBuildingForPlayer(playerid, 6051, 1110.328, -1489.093, 18.992, 0.250);
		//RemoveBuildingForPlayer(playerid, 3586, 1129.007, -1476.718, 18.289, 0.250);
		//RemoveBuildingForPlayer(playerid, 712, 1124.367, -1476.984, 22.281, 0.250);
		//RemoveBuildingForPlayer(playerid, 712, 1133.226, -1476.226, 22.281, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1144.398, -1512.789, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1152.382, -1502.539, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1190.257, -1503.390, 12.664, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1118.015, -1467.468, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1139.921, -1467.468, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1139.921, -1456.437, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1118.015, -1456.437, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1139.921, -1445.101, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1118.015, -1445.101, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1139.921, -1434.070, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1118.015, -1434.070, 15.210, 0.250);
		//RemoveBuildingForPlayer(playerid, 762, 1175.359, -1420.187, 19.882, 0.250);
		//RemoveBuildingForPlayer(playerid, 762, 1077.179, -1420.812, 17.953, 0.250);
		//RemoveBuildingForPlayer(playerid, 615, 1075.101, -1418.484, 12.476, 0.250);
		//RemoveBuildingForPlayer(playerid, 615, 1110.546, -1416.726, 13.953, 0.250);
		//RemoveBuildingForPlayer(playerid, 615, 1166.351, -1417.695, 13.953, 0.250);
		//RemoveBuildingForPlayer(playerid, 615, 1147.601, -1416.875, 13.953, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1190.257, -1458.734, 12.664, 0.250);
		//RemoveBuildingForPlayer(playerid, 792, 1190.257, -1426.351, 12.664, 0.250);
		//RemoveBuildingForPlayer(playerid, 615, 1182.046, -1418.625, 13.953, 0.250);
		//RemoveBuildingForPlayer(playerid, 759, 1183.187, -1421.273, 14.304, 0.250);
		PlayerData[playerid][pAksesuar] = 0;
		//RemoveBuildingForPlayer(playerid, 759, 1182.812, -1418.851, 14.304, 0.250);

//can karapýnar map
//RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
//RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
//RemoveBuildingForPlayer(playerid, 700, 1801.8828, -1817.3047, 13.3516, 0.25);
//RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);
//RemoveBuildingForPlayer(playerid, 1280, 1714.9609, -1909.6328, 12.9375, 0.25);
//RemoveBuildingForPlayer(playerid, 1280, 1714.9609, -1914.2969, 12.9375, 0.25);
//RemoveBuildingForPlayer(playerid, 1226, 1724.8750, -1859.5391, 16.3516, 0.25);
//RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);
//RemoveBuildingForPlayer(playerid, 5083, 1748.8438, -1883.0313, 14.1875, 0.25);
//RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1901.5391, 16.3750, 0.25);
//RemoveBuildingForPlayer(playerid, 1226, 1755.8203, -1859.5391, 16.3516, 0.25);
//RemoveBuildingForPlayer(playerid, 1226, 1808.1250, -1859.5391, 16.3516, 0.25);
//RemoveBuildingForPlayer(playerid, 1226, 1783.6719, -1859.5391, 16.3516, 0.25);





	PlayerTextDrawOlustur(playerid);


	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);
    PreloadAnimations(playerid);

	if (g_ServerRestart) {
		TextDrawShowForPlayer(playerid, gServerTextdraws[3]);
	}
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
	    RemovePlayerAttachedObject(playerid, i);
	}
	CancelSelectTextDraw(playerid);

	GetPlayerIp(playerid, PlayerData[playerid][pIP], 16);
	GetPlayerName(playerid, PlayerData[playerid][pUsername], MAX_PLAYER_NAME + 1);

	ResetStatistics(playerid);
	CreateTextDraws(playerid);



	new strex[1024];
	format(strex, sizeof(strex), "SELECT * FROM `blacklist` WHERE `Username` = '%s' OR `IP` = '%s'", ReturnName(playerid), PlayerData[playerid][pIP]);
	mysql_function_query(g_iHandle, strex, true, "OnQueryFinished", "dd", playerid, THREAD_BAN_LOOKUP);
	return 1;
}
public OnPlayerFinishedDownloading(playerid, virtualworld)
{
	if(Downloaded[playerid] == 1) return 1;
	if(GetTickDiff(GetTickCount(), PlayerTick[playerid]) > 1000)
	{
    	Downloaded[playerid] = 1;
    	new Float: bytesOfPlayer = NetStats_BytesSent(playerid);
		new Float: Megabytes = bytesOfPlayer / 1024 / 1024;
		CallRemoteFunction("OnPlayerFinishDownloading", "df", playerid, Megabytes);
	}
	else
	{
		Downloaded[playerid] = 1;
		// Player changed virtual worlds
	}
    return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
PlayerData[playerid][pYanKoltuk] = 0;
PlayerData[playerid][pSilahSikti] = 1;
PlayerData[playerid][pGirisYapti] = 0;
PlayerData[playerid][pGercekSilah] = 0;
DestroyDynamic3DTextLabel(pdrozet[playerid]);
Delete3DTextLabel(pdrozet[playerid]);
KillTimer(KomutSpamSuresi[playerid]);
KomutFloodSistemi[playerid] = 0;
PlayerData[playerid][pSpawnOldu] = 0;
UpdateWeapons(playerid);
PlayerData[playerid][pSexAnim] = 0;
onlinepl--;
PlayerData[playerid][pOtobusTur]= 0;
PlayerData[playerid][pYukAldi] = 0;
PlayerData[playerid][pInt] = 0;
	if (GetPVarInt(playerid, "EMO") == 1)
    {
    new carid = Car_NearestEx(playerid);

    new tempobjid = UsedPlayerAttach[playerid];
    if(IsValidDynamicObject(VehicleData[carid][TempObject][tempobjid])) DestroyDynamicObject(VehicleData[carid][TempObject][tempobjid]);
    GiveWeaponToPlayer(playerid, CarData[carid][carWeapons][tempobjid], CarData[carid][carAmmo][tempobjid]);
    CarData[carid][carWeapons][tempobjid] = 0;
    DeletePVar(playerid, "EMO");
    CarData[carid][carAmmo][tempobjid] = 0;
    UsedPlayerAttach[playerid] = -1;
    SendServerMessage(playerid, "Silah objesini yerleþtirirken oyundan çýktýðýnýz için obje yerleþtirilmedi!");
    }
    UsedPlayerAttach[playerid] = -1;
    PlayerData[playerid][pLSPD] = 0;
Delete3DTextLabel(rozet[playerid]);
DestroyDynamic3DTextLabel(aDutyText[playerid]);
DestroyDynamic3DTextLabel(hDutyText[playerid]);

CPotobus[playerid] = 0;
new vehicleid = GetPlayerVehicleID(playerid);
CoreVehicles[vehicleid][vehCimento] = 0;
CoreVehicles[vehicleid][vehTasimaci] = 0;
sonkomut[playerid] = 0;
if(IsValidDynamic3DTextLabel(PapaganInfo[playerid][papagan_labelid])) DestroyDynamic3DTextLabel(PapaganInfo[playerid][papagan_labelid]);
if(IsValidDynamic3DTextLabel(HPLabel[playerid])) DestroyDynamic3DTextLabel(HPLabel[playerid]);
format(PapaganInfo[playerid][papagan->Name], 24, "");
PapaganInfo[playerid][papagan->Called] = false;
PapaganInfo[playerid][papagan->Model] = 0;
KillTimer(PapaganInfo[playerid][papagan->Timer]);
////FCNPC_Destroy(PapaganInfo[playerid][papagan_id]);

/////////////////////////////////////////////////////////////////////////
Injourney[playerid] = 0;
	Watching[playerid] = 0;
    if(SweeperJob[playerid] && GetVehicleModel(GetPlayerVehicleID(playerid)) == 574 && SweeperUpdate[playerid] < tickcount()) ResetSweeperInfo(playerid);
    if(CiftciJob[playerid] && GetVehicleModel(GetPlayerVehicleID(playerid)) == 574 && CiftciUpdate[playerid] < tickcount()) ResetCiftciInfo(playerid);
	KillTimer(playerspeedtimer[playerid]);
    KillTimer(CrashTimer[playerid]);
    if(IzlenenID[playerid] != INVALID_PLAYER_ID) IzlemeBitir(playerid);
    InfoSkate[playerid][sActive] = false;
    DestroyObject(InfoSkate[playerid][sSkate]);
    foreach(new i : Player)
	{
		if(IzlenenID[i] == playerid)
		{
			TogglePlayerSpectating(i, false);
			IzlemeBitir(i);
		}
	}
	if(IsValidDynamic3DTextLabel(OyuncuLabel[playerid])) DestroyDynamic3DTextLabel(OyuncuLabel[playerid]);
    if (KampAtesleri[playerid][atesVarmi])  	KampAtesi_Sil(playerid);
    if (NargileAtesleri[playerid][nargileVarmi])  	NargileAtesi_Sil(playerid);

	if(PlayerData[playerid][pCaptureFactory] != -1)
    {
        Fabrika_CaptureReset(PlayerData[playerid][pCaptureFactory]);
    }

     if(BallHolder == playerid)
	     RecreateBall();
    if(PoolAimer == playerid)
	{
        PoolAimer = -1;
        TextDrawHideForPlayer(playerid, PoolTD[0]);
        TextDrawHideForPlayer(playerid, PoolTD[1]);
        TextDrawHideForPlayer(playerid, PoolTD[2]);
        TextDrawHideForPlayer(playerid, PoolTD[3]);
        DestroyObject(AimObject);
	}
    if(PlayingPool[playerid])
    {
        PlayingPool[playerid] = 0;
        new
		    count = GetPoolPlayersCount();
        if(count <= 0)
        {
			PoolStarted = 0;
			RespawnPoolBalls();
        }
    }

	if(PlayerData[playerid][pPaintball] != -1) Paintball_Ayril(playerid);
    if(GetPVarInt(playerid, "TV") == 1) YayinBitir(playerid);
    CevapSifirla(playerid);

    BackupClear(playerid, 0);
     ResetRobbery(playerid, 1);
	if(IsPlayerSpawned(playerid) && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING) {
	    switch(reason)
	    {
	        case 0: SendNearbyMessage(playerid, 15.0, COLOR_WHITE, "%s oyundan çýkýþ yaptý. [Baðlantýsý Koptu / Crash]", ReturnName(playerid, 0));
	        case 1: SendNearbyMessage(playerid, 15.0, COLOR_WHITE, "%s oyundan çýkýþ yaptý. [Kendi Ýsteði]", ReturnName(playerid, 0));
	        case 2: SendNearbyMessage(playerid, 15.0, COLOR_WHITE, "%s oyundan çýkýþ yaptý. [Atýldý/Yasaklandý]", ReturnName(playerid, 0));
	    }
    }
    foreach(new i : Player)
    {
		if(TakiptekiYarali[i] == playerid)
		{
		    SendServerMessage(i, "Doktor çaðýran kiþi hayatýný kaybettiði için otomatik olarak iptal edildi.");
		    DisablePlayerCheckpoint(i);
		    PlayerData[i][pCP] = 0;
		}
	}

    KillTimer(GymTimer[playerid]);
	PlayerData[playerid][pLeaveTime] = GetTickCount();

	format(PlayerData[playerid][pLeaveIP], 16, PlayerData[playerid][pIP]);
 	TerminateConnection(playerid);

	if(GetPVarInt(playerid, "ModifiyeYapiyormu") == 1)
	{
	    ModifiyeCik(playerid);
	}
	return 1;
}
Server_Save()
{
	new
	    File:file = fopen("server.ini", io_write),
	    str[128];

	format(str, sizeof(str), "TaxMoney = %d\n", g_TaxVault);
	fwrite(file, str);
	format(str, sizeof(str), "SoygunZamani = %d\n", g_soygunZamani);
	fwrite(file, str);
	format(str, sizeof(str), "ServerMOTD = %s\n", g_ServerMOTD);
	fwrite(file, str);
	return fclose(file);
}

/*Rapor_Arttir()
{
	new dosyaadi[128];

	format(dosyaadi, 128, "raporlar/%s/%d-%d-%d.ini", ReturnName(playerid), gun, ay, yil);

	new
	    File:file = fopen(dosyaadi, io_write),
	    str[128];

	format(str, sizeof(str), "TaxMoney = %d\n", g_TaxVault);
	fwrite(file, str);
	format(str, sizeof(str), "SoygunZamani = %d\n", g_soygunZamani);
	fwrite(file, str);
	format(str, sizeof(str), "ServerMOTD = %s\n", g_ServerMOTD);
	fwrite(file, str);
	return fclose(file);
}*/

Server_Load()
{
	new File:file = fopen("server.ini", io_read);

	if (file) {
		g_TaxVault = file_parse_int(file, "TaxMoney");
		g_soygunZamani = file_parse_int(file, "SoygunZamani");
		file_parse(file, "ServerMOTD", g_ServerMOTD, 128);
		fclose(file);
	}
	return 1;
}
// PET SÝSTEMÝ
stock ParrotTextdraw(playerid, bool: hs)
{
	switch(hs)
	{
	    case true:
	    {
	        PapaganInfo[playerid][papagan->Timer] = SetTimerEx("ParrotTextdrawT", 1000, true, "i", playerid);
	    }
	    case false:
	    {
	        KillTimer(PapaganInfo[playerid][papagan->Timer]);
	    }
	}
	return true;
}

forward ParrotTextdrawT(playerid); public ParrotTextdrawT(playerid)
{


	return true;
}
stock GetParrotMood(playerid)
{
	new ruhinput[10] = "";
	switch(PapaganInfo[playerid][papagan->Can])
	{
	    case 0..9: ruhinput = "Kritik";
	    case 10..25: ruhinput = "Hasta";
	    case 26..35: ruhinput = "Halsiz";
	    case 36..60: ruhinput = "Iyimser";
	    case 61..80: ruhinput = "Mutlu";
	    case 81..100: ruhinput = "Keyifli";
	}
	return ruhinput;
}

stock GetParrotHunger(playerid)
{
	new ruhinput[10] = "";
	switch(PapaganInfo[playerid][papagan->Can])
	{
	    case 0..25: ruhinput = "Cok Ac";
	    case 26..40: ruhinput = "Ac";
	    case 41..100: ruhinput = "Tok";
	}
	return ruhinput;
}

stock GetParrotHealth(playerid, type)
{
	new healthinput[16] = "";
	switch(type)
	{
	    case 0:
	    {
			switch(PapaganInfo[playerid][papagan->Can])
			{
			    case 0..10: healthinput = "=~r~~h~========";
			    case 11..20: healthinput = "==~r~~h~=======";
			    case 21..30: healthinput = "===~r~~h~======";
			    case 31..40: healthinput = "====~r~~h~=====";
			    case 41..50: healthinput = "=====~r~~h~====";
			    case 51..60: healthinput = "======~r~~h~===";
			    case 61..80: healthinput = "=======~r~~h~==";
			    case 81..99: healthinput = "========~r~~h~=";
			    case 100: healthinput = "=========";
			}
		}
		case 1:
		{
		    format(healthinput, sizeof healthinput, "%d.0", PapaganInfo[playerid][papagan->Can]);
		}
	}
	return healthinput;
}

public OnGameModeExit()
{
db_close(ObjectDB);

    print("  [Bank System] Unloaded.");



	//=================[EV SÝSTEMÝ]===================
	foreach(new i : EVs) if(EVData[i][Save]) SaveEV(i);
	KillTimer(EVTimer);
	//Bitiþ kodu
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
	    if(PapaganInfo[i][papagan->Called] == false) continue;
    	//SavePapagan(i);
    	RemovePlayerAttachedObject(i, 0);
    	KillTimer(PapaganInfo[i][papagan->Timer]);
	}
    for(new i; i < GetMaxPlayers(); ++i)
    {
    	if(!IsPlayerConnected(i)) continue;
        if(SweeperJob[i]) ResetSweeperInfo(i);
        if(CiftciJob[i]) ResetCiftciInfo(i);
    }
   	for(new i, size = GetPlayerPoolSize(); i <= size; ++i)
	{
	    if(!IsPlayerConnected(i)) continue;
	    if(BalikTimer[i] == -1) continue;
	    if(GetPVarInt(i, "OltaSlot") != -1) RemovePlayerAttachedObject(i, GetPVarInt(i, "OltaSlot"));
		if(!IsPlayerInAnyVehicle(i)) ClearAnimations(i);
		TextDrawHideForPlayer(i, BalikText);
		HidePlayerProgressBar(i, BalikBari[i]);
		SetPVarInt(i, "BalikBekle", tickcount() + 6000);
		KillTimer(BalikTimer[i]);
		BalikTimer[i] = -1;
		SetPVarInt(i, "OltaSlot", -1);
	}


	foreach(new i : Player) { SQL_SaveCharacter(i);	}
    djson_GameModeExit();


        for(new i; i < GetMaxPlayers(); ++i)
        {
            if(!IsPlayerConnected(i)) continue;
            if(GetPVarInt(i, "Alarm"))
            {
                        SetPVarInt(i, "Alarm", 0);
                PlayerPlaySound(i, 3402, 0.0, 0.0, 0.0);
                }

            ClearAnimations(i, 1);
                ResetRobbery(i, 1);
        }
        mysql_close(g_iHandle);

	return 1;
}
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == RoadblockList)
	{
	    if(!response) return 1;
		new id = GetFreeObjectID();
	    if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Obje limiti aþýlmýþ!");
	    CopObjectData[id][ObjCreated] = true;
	    GetPlayerName(playerid, CopObjectData[id][Owner], MAX_PLAYER_NAME);
	    CopObjectData[id][Type] = OBJECT_TYPE_ROADBLOCK;
	    CopObjectData[id][ObjModel] = modelid;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = a;
		CopObjectData[id][ObjID] = CreateDynamicObject(modelid, x, y, z, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = -1;

		new string[96];
		format(string, sizeof(string), "(ID: %d)\n{FFFFFF}%s tarafýndan koyulmuþ.", id, CopObjectData[id][Owner]);
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z + 1.35, 10.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		InsertObjectToDB(id);
	}

	if(listid == SignList)
	{
	    if(!response) return 1;
		new id = GetFreeObjectID();
	    if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Obje limiti aþýlmýþ!");
	    CopObjectData[id][ObjCreated] = true;
	    GetPlayerName(playerid, CopObjectData[id][Owner], MAX_PLAYER_NAME);
	    CopObjectData[id][Type] = OBJECT_TYPE_SIGN;
	    CopObjectData[id][ObjModel] = modelid;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z - 1.25;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = a;
		CopObjectData[id][ObjID] = CreateDynamicObject(modelid, x, y, z - 1.25, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = -1;

		new string[96];
		format(string, sizeof(string), "(ID: %d)\n{FFFFFF}%s tarafýndan koyulmuþ.", id, CopObjectData[id][Owner]);
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z + 2.0, 10.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		InsertObjectToDB(id);
	}

	return 1;
}


public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == SÉTASTILUS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SetPlayerWalkingStyle (playerid, WALK_NORMAL);
			}
			if(listitem == 1)
			{
				SetPlayerWalkingStyle (playerid, WALK_PED);
			}
			if(listitem == 2)
			{
			    SetPlayerWalkingStyle (playerid, WALK_GANGSTA);
			}
			if(listitem == 3)
			{
				SetPlayerWalkingStyle (playerid, WALK_GANGSTA2);
			}
			if(listitem == 4)
			{
			    SetPlayerWalkingStyle (playerid, WALK_OLD);
			}
			if(listitem == 5)
			{
			    SetPlayerWalkingStyle (playerid, WALK_FAT_OLD);
			}
			if(listitem == 6)
			{
			    SetPlayerWalkingStyle (playerid, WALK_FAT);
			}
			if(listitem == 7)
			{
			    SetPlayerWalkingStyle (playerid, WALK_LADY);
			}
			if(listitem == 8)
			{
			    SetPlayerWalkingStyle (playerid, WALK_LADY2);
			}
			if(listitem == 9)
			{
			    SetPlayerWalkingStyle (playerid, WALK_WHORE);
			}
			if(listitem == 10)
			{
			    SetPlayerWalkingStyle (playerid, WALK_WHORE2);
			}
			if(listitem == 11)
			{
			    SetPlayerWalkingStyle (playerid, WALK_DRUNK);
			}
			if(listitem == 12)
			{
			    SetPlayerWalkingStyle (playerid, WALK_BLIND);
			}
			if(listitem == 13)
			{
			    SetPlayerWalkingStyle (playerid, WALK_DEFAULT);
			}
			}
			}
if(dialogid == COPOBJECTS_DIALOG)
	{
		if(!response) return 1;
		if(listitem == 0) ShowModelSelectionMenu(playerid, RoadblockList, "Barikatlar", 0x393939BB, 0x3498DBBB);
		if(listitem == 1) ShowModelSelectionMenu(playerid, SignList, "Tabelalar", 0x393939BB, 0x3498DBBB);

		if(listitem == 2)
		{
		    new id = GetFreeObjectID();
		    if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Obje limiti aþýlmýþ!");
		    CopObjectData[id][ObjCreated] = true;
		    GetPlayerName(playerid, CopObjectData[id][Owner], MAX_PLAYER_NAME);
		    CopObjectData[id][Type] = OBJECT_TYPE_POLICELINE;
		    CopObjectData[id][ObjModel] = 19834;
		    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
		    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

		    new Float: x, Float: y, Float: z, Float: a;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, a);
		    x += (2.0 * floatsin(-a, degrees));
			y += (2.0 * floatcos(-a, degrees));
			CopObjectData[id][ObjX] = x;
			CopObjectData[id][ObjY] = y;
			CopObjectData[id][ObjZ] = z;
			CopObjectData[id][ObjRX] = 0.0;
			CopObjectData[id][ObjRY] = 0.0;
			CopObjectData[id][ObjRZ] = a;
			CopObjectData[id][ObjID] = CreateDynamicObject(19834, x, y, z, 0.0, 0.0, a, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
			CopObjectData[id][ObjArea] = -1;

			new string[96];
			format(string, sizeof(string), "(ID: %d)\n{FFFFFF}%s tarafýndan koyulmuþ.", id, CopObjectData[id][Owner]);
			CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z + 0.35, 5.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
            InsertObjectToDB(id);
		}

		if(listitem == 3)
		{
		    new id = GetFreeObjectID();
		    if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Obje limiti aþýlmýþ!");
		    CopObjectData[id][ObjCreated] = true;
		    GetPlayerName(playerid, CopObjectData[id][Owner], MAX_PLAYER_NAME);
		    CopObjectData[id][Type] = OBJECT_TYPE_SPIKE;
		    CopObjectData[id][ObjModel] = 2899;
		    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
		    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

		    new Float: x, Float: y, Float: z, Float: a;
		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, a);
		    x += (2.0 * floatsin(-a, degrees));
			y += (2.0 * floatcos(-a, degrees));

			CopObjectData[id][ObjX] = x;
			CopObjectData[id][ObjY] = y;
			CopObjectData[id][ObjZ] = z - 0.85;
			CopObjectData[id][ObjRX] = 0.0;
			CopObjectData[id][ObjRY] = 0.0;
			CopObjectData[id][ObjRZ] = a + 90.0;
			CopObjectData[id][ObjID] = CreateDynamicObject(2899, x, y, z - 0.85, 0.0, 0.0, a + 90.0, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
			CopObjectData[id][ObjArea] = CreateDynamicSphere(x, y, z - 0.85, 2.5, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);

			new string[96];
			format(string, sizeof(string), "(ID: %d)\n{FFFFFF}%s tarafýndan koyulmuþ.", id, CopObjectData[id][Owner]);
			CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z - 0.4, 3.0, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
            InsertObjectToDB(id);
		}

		if(listitem == 4) ShowPlayerDialog(playerid, COPOBJECTS_DIALOG+1, DIALOG_STYLE_INPUT, "Hiz Limiti Kamerasi", "Hiz limitini yaziniz.", "Kur", "Iptal");
	    return 1;
	}

	if(dialogid == COPOBJECTS_DIALOG+1)
	{
		if(!response) return 1;
		if(!strlen(inputtext)) return ShowPlayerDialog(playerid, COPOBJECTS_DIALOG+1, DIALOG_STYLE_INPUT, "Hiz Limiti Kamerasi", "Hiz limitini yaziniz.", "Kur", "Iptal");
		new id = GetFreeObjectID(), limit = strval(inputtext);
	    if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Obje limiti aþýlmýþ!");
	    CopObjectData[id][ObjCreated] = true;
	    GetPlayerName(playerid, CopObjectData[id][Owner], MAX_PLAYER_NAME);
	    CopObjectData[id][Type] = OBJECT_TYPE_SPEEDCAM;
	    CopObjectData[id][ObjData] = limit;
	    CopObjectData[id][ObjModel] = 18880;
	    CopObjectData[id][ObjInterior] = GetPlayerInterior(playerid);
	    CopObjectData[id][ObjVirtualWorld] = GetPlayerVirtualWorld(playerid);

	    new Float: x, Float: y, Float: z, Float: a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    x += (2.0 * floatsin(-a, degrees));
		y += (2.0 * floatcos(-a, degrees));
		CopObjectData[id][ObjX] = x;
		CopObjectData[id][ObjY] = y;
		CopObjectData[id][ObjZ] = z - 1.5;
		CopObjectData[id][ObjRX] = 0.0;
		CopObjectData[id][ObjRY] = 0.0;
		CopObjectData[id][ObjRZ] = 0.0;
		CopObjectData[id][ObjID] = CreateDynamicObject(18880, x, y, z - 1.5, 0.0, 0.0, 0.0, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
		CopObjectData[id][ObjArea] = CreateDynamicSphere(x, y, z - 1.5, SPEEDCAM_RANGE, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);

		new string[128];
		format(string, sizeof(string), "(ID: %d)\n{FFFFFF}Hiz Limiti: {E74C3C}%d\n{FFFFFF}%s tarafýndan koyulmuþ.", id, limit, CopObjectData[id][Owner]);
		CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(string, 0x3498DBFF, x, y, z + 3.85, SPEEDCAM_RANGE, _, _, _, CopObjectData[id][ObjVirtualWorld], CopObjectData[id][ObjInterior]);
        InsertObjectToDB(id);
		return 1;
	}
	//ev sistemi
	if(dialogid == DIALOG_BUY_EV)
	{
		if(!response) return 1;
		new id = GetPVarInt(playerid, "PickupEVID");
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ])) return SendClientMessage(playerid, 0xE74C3CFF, "You're not near any EV.");
        #if LIMIT_PER_PLAYER > 0
		if(OwnedEVs(playerid) + 1 > LIMIT_PER_PLAYER) return SendClientMessage(playerid, 0xE74C3CFF, "You can't buy any more EVs.");
		#endif
		if(EVData[id][Price] > GetMoney(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "You can't afford this EV.");
		if(strcmp(EVData[id][Owner], "-")) return SendClientMessage(playerid, 0xE74C3CFF, "Someone already owns this EV.");
		GiveMoney(playerid, -EVData[id][Price]);
		GetPlayerName(playerid, EVData[id][Owner], MAX_PLAYER_NAME);
		EVData[id][LastEntered] = gettime();
		EVData[id][Save] = true;

		UpdateEVLabel(id);
		Streamer_SetIntData(STREAMER_TYPE_PICKUP, EVData[id][EVPickup], E_STREAMER_MODEL_ID, 19522);
		Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, EVData[id][EVIcon], E_STREAMER_TYPE, 32);
		SendToEV(playerid, id);
		return 1;
	}

	if(dialogid == DIALOG_EV_PASSWORD)
	{
	    if(!response) return 1;
	    new id = GetPVarInt(playerid, "PickupEVID");
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ])) return SendClientMessage(playerid, 0xE74C3CFF, "You're not near any EV.");
		if(!(1 <= strlen(inputtext) <= MAX_EV_PASSWORD)) return ShowPlayerDialog(playerid, DIALOG_EV_PASSWORD, DIALOG_STYLE_INPUT, "EV Password", "This EV is password protected.\n\nEnter EV password:\n\n{E74C3C}The password you entered is either too short or too long.", "Try Again", "Close");
		if(strcmp(EVData[id][Password], inputtext)) return ShowPlayerDialog(playerid, DIALOG_EV_PASSWORD, DIALOG_STYLE_INPUT, "EV Password", "This EV is password protected.\n\nEnter EV password:\n\n{E74C3C}Wrong password.", "Try Again", "Close");
		SendToEV(playerid, id);
		return 1;
	}

	if(dialogid == DIALOG_EV_MENU)
	{
	    if(!response) return 1;
	    new id = InEV[playerid];
	    if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");

		if(listitem == 0) ShowPlayerDialog(playerid, DIALOG_EV_NAME, DIALOG_STYLE_INPUT, "EV Name", "Write a new name for this EV:", "Change", "Back");
		if(listitem == 1) ShowPlayerDialog(playerid, DIALOG_EV_NEW_PASSWORD, DIALOG_STYLE_INPUT, "EV Password", "Write a new password for this EV:", "Change", "Back");
		if(listitem == 2) ShowPlayerDialog(playerid, DIALOG_EV_LOCK, DIALOG_STYLE_LIST, "EV Lock", "Not Locked\nPassword Lock\nKeys\nOwner Only", "Change", "Back");
		if(listitem == 3)
		{
		    if(EVData[id][SalePrice] > 0)
			{
				SendClientMessage(playerid, 0xE74C3CFF, "You can't use this feature while the EV is for sale.");
				return ShowEVMenu(playerid);
			}

		    new string[144];
		    format(string, sizeof(string), "Take Money From Safe {2ECC71}(TL%s)\nPut Money To Safe {2ECC71}(TL%s)\nView Safe History\nClear Safe History", convertNumber(EVData[id][SafeMoney]), convertNumber(GetMoney(playerid)));
			ShowPlayerDialog(playerid, DIALOG_SAFE_MENU, DIALOG_STYLE_LIST, "EV Safe", string, "Choose", "Back");
		}

		if(listitem == 4)
		{
		    if(EVData[id][SalePrice] > 0)
			{
				SendClientMessage(playerid, 0xE74C3CFF, "You can't use this feature while the EV is for sale.");
				return ShowEVMenu(playerid);
			}

			ShowPlayerDialog(playerid, DIALOG_FURNITURE_MENU, DIALOG_STYLE_LIST, "Furnitures", "Buy Furniture\nEdit Furniture\nSell Furniture\nSell All Furnitures", "Choose", "Back");
		}

		if(listitem == 5) ShowPlayerDialog(playerid, DIALOG_GUNS_MENU, DIALOG_STYLE_LIST, "Guns", "Put Gun\nTake Gun", "Choose", "Back");
        if(listitem == 6)
		{
		    ListPage[playerid] = 0;
			ShowPlayerDialog(playerid, DIALOG_VISITORS_MENU, DIALOG_STYLE_LIST, "Visitors", "Look Visitor History\nClear Visitor History", "Choose", "Back");
		}

		if(listitem == 7)
		{
		    ListPage[playerid] = 0;
			ShowPlayerDialog(playerid, DIALOG_KEYS_MENU, DIALOG_STYLE_LIST, "Keys", "View Key Owners\nChange Locks", "Choose", "Back");
		}

		if(listitem == 8)
		{
		    new string[128];
		    format(string, sizeof(string), "EV owner %s kicked everybody from the EV.", EVData[id][Owner]);

			foreach(new i : Player)
			{
			    if(i == playerid) continue;
			    if(InEV[i] == id)
			    {
		            SetPVarInt(i, "EVPickupCooldown", gettime() + EV_COOLDOWN);
		        	SetPlayerVirtualWorld(i, 0);
			        SetPlayerInterior(i, 0);
			        SetPlayerPos(i, EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ]);
			        InEV[i] = INVALID_EV_ID;
			        SendClientMessage(i, -1, string);
			    }
			}

			SendClientMessage(playerid, -1, "You kicked everybody from your EV.");
		}

		if(listitem == 9)
		{
		    new string[128];
		    format(string, sizeof(string), "Sell Instantly\t{2ECC71}TL%s\n%s", convertNumber(floatround(EVData[id][Price]*0.85)), (EVData[id][SalePrice] > 0) ? ("Remove From Sale") : ("Put For Sale"));
			ShowPlayerDialog(playerid, DIALOG_SELL_EV, DIALOG_STYLE_TABLIST, "Sell EV", string, "Choose", "Back");
		}

		return 1;
	}

	if(dialogid == DIALOG_EV_NAME)
	{
	    if(!response) return ShowEVMenu(playerid);
        new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(!(1 <= strlen(inputtext) <= MAX_EV_NAME)) return ShowPlayerDialog(playerid, DIALOG_EV_NAME, DIALOG_STYLE_INPUT, "EV Name", "Write a new name for this EV:\n\n{E74C3C}The name you entered is either too short or too long.", "Change", "Back");
        format(EVData[id][Name], MAX_EV_NAME, "%s", inputtext);
        EVData[id][Save] = true;

        UpdateEVLabel(id);
        ShowEVMenu(playerid);
	    return 1;
	}

	if(dialogid == DIALOG_EV_NEW_PASSWORD)
	{
	    if(!response) return ShowEVMenu(playerid);
        new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(!(1 <= strlen(inputtext) <= MAX_EV_PASSWORD)) return ShowPlayerDialog(playerid, DIALOG_EV_NEW_PASSWORD, DIALOG_STYLE_INPUT, "EV Password", "Write a new password for this EV:\n\n{E74C3C}The pasword you entered is either too short or too long.", "Change", "Back");
        format(EVData[id][Password], MAX_EV_PASSWORD, "%s", inputtext);
        EVData[id][Save] = true;
        ShowEVMenu(playerid);
	    return 1;
	}

	if(dialogid == DIALOG_EV_LOCK)
	{
	    if(!response) return ShowEVMenu(playerid);
        new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		EVData[id][LockMode] = listitem;
		EVData[id][Save] = true;

		UpdateEVLabel(id);
        ShowEVMenu(playerid);
	    return 1;
	}

	if(dialogid == DIALOG_SAFE_MENU)
	{
	    if(!response) return ShowEVMenu(playerid);
	    new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(EVData[id][SalePrice] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "You can't use this feature while the EV is for sale.");
		if(listitem == 0) ShowPlayerDialog(playerid, DIALOG_SAFE_TAKE, DIALOG_STYLE_INPUT, "Safe: Take Money", "Write the amount you want to take from safe:", "Take", "Back");
		if(listitem == 1) ShowPlayerDialog(playerid, DIALOG_SAFE_PUT, DIALOG_STYLE_INPUT, "Safe: Put Money", "Write the amount you want to put to safe:", "Put", "Back");
        if(listitem == 2)
        {
			ListPage[playerid] = 0;

            new query[200], Cache: safelog;
		    mysql_format(g_iHandle, query, sizeof(query), "SELECT Type, Amount, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as TransactionDate FROM EVsafelogs WHERE EVID=%d ORDER BY Date DESC LIMIT 0, 15", id);
			safelog = mysql_query(g_iHandle, query);
			new rows = cache_num_rows();
			if(rows) {
			    new list[1024], date[20];
			    format(list, sizeof(list), "Action\tDate\n");
			    for(new i; i < rows; ++i)
			    {
		        	cache_get_field_content(i, "TransactionDate", date);
			        format(list, sizeof(list), "%s%s TL%s\t{FFFFFF}%s\n", list, TransactionNames[ cache_get_field_content_int(i, "Type") ], convertNumber(cache_get_field_content_int(i, "Amount")), date);
			    }

			    ShowPlayerDialog(playerid, DIALOG_SAFE_HISTORY, DIALOG_STYLE_TABLIST_HEADERS, "Safe History (Page 1)", list, "Next", "Previous");
			}else{
				SendClientMessage(playerid, 0xE74C3CFF, "Can't find any safe history.");
			}

		    cache_delete(safelog);
        }

        if(listitem == 3)
		{
		    new query[64];
		    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVsafelogs WHERE EVID=%d", id);
    		mysql_tquery(g_iHandle, query, "", "");
    		ShowEVMenu(playerid);
		}

		return 1;
	}

	if(dialogid == DIALOG_SAFE_TAKE)
	{
	    if(!response) return ShowEVMenu(playerid);
        new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(EVData[id][SalePrice] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "You can't use this feature while the EV is for sale.");
        new amount = strval(inputtext);
		if(!(1 <= amount <= 10000000)) return ShowPlayerDialog(playerid, DIALOG_SAFE_TAKE, DIALOG_STYLE_INPUT, "Safe: Take Money", "Write the amount you want to take from safe:\n\n{E74C3C}Invalid amount. You can take between $1 - $10,000,000 at a time.", "Take", "Back");
		if(amount > EVData[id][SafeMoney]) return ShowPlayerDialog(playerid, DIALOG_SAFE_TAKE, DIALOG_STYLE_INPUT, "Safe: Take Money", "Write the amount you want to take from safe:\n\n{E74C3C}You don't have that much money in your safe.", "Take", "Back");
        new query[128];
		mysql_format(g_iHandle, query, sizeof(query), "INSERT INTO EVsafelogs SET EVID=%d, Type=0, Amount=%d, Date=UNIX_TIMESTAMP()", id, amount);
		mysql_tquery(g_iHandle, query, "", "");

		GiveMoney(playerid, amount);
		EVData[id][SafeMoney] -= amount;
		EVData[id][Save] = true;
		ShowEVMenu(playerid);
	    return 1;
	}

	if(dialogid == DIALOG_SAFE_PUT)
	{
	    if(!response) return ShowEVMenu(playerid);
        new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
        new amount = strval(inputtext);
		if(!(1 <= amount <= 10000000)) return ShowPlayerDialog(playerid, DIALOG_SAFE_PUT, DIALOG_STYLE_INPUT, "Safe: Put Money", "Write the amount you want to put to safe:\n\n{E74C3C}Invalid amount. You can put between $1 - $10,000,000 at a time.", "Put", "Back");
		if(amount > GetMoney(playerid)) return ShowPlayerDialog(playerid, DIALOG_SAFE_PUT, DIALOG_STYLE_INPUT, "Safe: Put Money", "Write the amount you want to put to safe:\n\n{E74C3C}You don't have that much money on you.", "Put", "Back");
        new query[128];
		mysql_format(g_iHandle, query, sizeof(query), "INSERT INTO EVsafelogs SET EVID=%d, Type=1, Amount=%d, Date=UNIX_TIMESTAMP()", id, amount);
		mysql_tquery(g_iHandle, query, "", "");

		GiveMoney(playerid, -amount);
		EVData[id][SafeMoney] += amount;
		EVData[id][Save] = true;
		ShowEVMenu(playerid);
	    return 1;
	}

	if(dialogid == DIALOG_GUNS_MENU)
	{
		if(!response) return ShowEVMenu(playerid);
		new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(listitem == 0)
		{
			if(GetPlayerWeapon(playerid) == 0) return SendClientMessage(playerid, 0xE74C3CFF, "You can't put your fists in your EV.");
			new query[128], weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid);
            RemovePlayerWeapon(playerid, weapon);
			mysql_format(g_iHandle, query, sizeof(query), "INSERT INTO EVguns VALUES (%d, %d, %d) ON DUPLICATE KEY UPDATE Ammo=Ammo+%d", id, weapon, ammo, ammo);
			mysql_tquery(g_iHandle, query, "", "");
			ShowEVMenu(playerid);
		}

		if(listitem == 1)
		{
		    new query[80], Cache: weapons;
		    mysql_format(g_iHandle, query, sizeof(query), "SELECT WeaponID, Ammo FROM EVguns WHERE EVID=%d ORDER BY WeaponID ASC", id);
			weapons = mysql_query(g_iHandle, query);
			new rows = cache_num_rows();
			if(rows) {
			    new list[512], weapname[32];
			    format(list, sizeof(list), "#\tWeapon Name\tAmmo\n");
			    for(new i; i < rows; ++i)
			    {
			        GetWeaponName(cache_get_field_content_int(i, "WeaponID"), weapname, sizeof(weapname));
			        format(list, sizeof(list), "%s%d\t%s\t%s\n", list, i+1, weapname, convertNumber(cache_get_field_content_int(i, "Ammo")));
			    }

			    ShowPlayerDialog(playerid, DIALOG_GUNS_TAKE, DIALOG_STYLE_TABLIST_HEADERS, "EV Guns", list, "Take", "Back");
			}else{
				SendClientMessage(playerid, 0xE74C3CFF, "You don't have any guns in your EV.");
			}

		    cache_delete(weapons);
		}

		return 1;
	}

	if(dialogid == DIALOG_GUNS_TAKE)
	{
		if(!response) return ShowEVMenu(playerid);
		new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
  		new query[96], Cache: weapon;
    	mysql_format(g_iHandle, query, sizeof(query), "SELECT WeaponID, Ammo FROM EVguns WHERE EVID=%d ORDER BY WeaponID ASC LIMIT %d, 1", id, listitem);
		weapon = mysql_query(g_iHandle, query);
		new rows = cache_num_rows();
		if(rows) {
  			new string[64], weapname[32], weaponid = cache_get_field_content_int(0, "WeaponID");
  			GetWeaponName(weaponid, weapname, sizeof(weapname));
  			GivePlayerWeapon(playerid, weaponid, cache_get_field_content_int(0, "Ammo"));
			format(string, sizeof(string), "You've taken a %s from your EV.", weapname);
			SendClientMessage(playerid, 0xFFFFFFFF, string);
			mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVguns WHERE EVID=%d AND WeaponID=%d", id, weaponid);
			mysql_tquery(g_iHandle, query, "", "");
		}else{
			SendClientMessage(playerid, 0xE74C3CFF, "Can't find that weapon.");
		}

		cache_delete(weapon);
		return 1;
	}

    if(dialogid == DIALOG_FURNITURE_MENU)
	{
	    if(!response) return ShowEVMenu(playerid);
        new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(EVData[id][SalePrice] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "You can't use this feature while the EV is for sale.");

		if(listitem == 0)
		{
		    new list[512];
		    format(list, sizeof(list), "#\tFurniture Name\tPrice\n");
		    for(new i; i < sizeof(EVFurnitures); ++i)
		    {
		        format(list, sizeof(list), "%s%d\t%s\tTL%s\n", list, i+1, EVFurnitures[i][Name], convertNumber(EVFurnitures[i][Price]));
		    }

		    ShowPlayerDialog(playerid, DIALOG_FURNITURE_BUY, DIALOG_STYLE_TABLIST_HEADERS, "Buy Furniture", list, "Buy", "Back");
		}

		if(listitem == 1)
		{
			SelectMode[playerid] = SELECT_MODE_EDIT;
		    SelectObject(playerid);
		    SendClientMessage(playerid, 0xFFFFFFFF, "Click on the furniture you want to edit.");
		}

		if(listitem == 2)
		{
		    SelectMode[playerid] = SELECT_MODE_SELL;
		    SelectObject(playerid);
		    SendClientMessage(playerid, 0xFFFFFFFF, "Click on the furniture you want to sell.");
		}

		if(listitem == 3)
		{
		    new money, sold, data[e_furniture], query[64];
		    for(new i; i < Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); ++i)
		    {
		        if(!IsValidDynamicObject(i)) continue;
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
				if(data[SQLID] > 0 && data[EVID] == id)
				{
				    sold++;
				    money += EVFurnitures[ data[ArrayID] ][Price];
					DestroyDynamicObject(i);
				}
		    }

		    new string[64];
		    format(string, sizeof(string), "Sold %d furnitures for TL%s.", sold, convertNumber(money));
		    SendClientMessage(playerid, -1, string);
		    GiveMoney(playerid, money);

		    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVfurnitures WHERE EVID=%d", id);
		    mysql_tquery(g_iHandle, query, "", "");
		}

	    return 1;
	}

	if(dialogid == DIALOG_FURNITURE_BUY)
	{
	    if(!response) return ShowEVMenu(playerid);
        new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(EVData[id][SalePrice] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "You can't use this feature while the EV is for sale.");
		if(EVFurnitures[listitem][Price] > GetMoney(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "You can't afford this furniture.");
		GiveMoney(playerid, -EVFurnitures[listitem][Price]);
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
        GetXYInFrontOfPlayer(playerid, x, y, 3.0);
        new objectid = CreateDynamicObject(EVFurnitures[listitem][ModelID], x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)), query[256];
		mysql_format(g_iHandle, query, sizeof(query), "INSERT INTO EVfurnitures SET EVID=%d, FurnitureID=%d, FurnitureX=%f, FurnitureY=%f, FurnitureZ=%f, FurnitureVW=%d, FurnitureInt=%d", id, listitem, x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        new Cache: add = mysql_query(g_iHandle, query), data[e_furniture];
        data[SQLID] = cache_insert_id();
		data[EVID] = id;
        data[ArrayID] = listitem;
		data[furnitureX] = x;
		data[furnitureY] = y;
		data[furnitureZ] = z;
		data[furnitureRX] = 0.0;
		data[furnitureRY] = 0.0;
		data[furnitureRZ] = 0.0;
		cache_delete(add);
		Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

		EditingFurniture[playerid] = true;
		EditDynamicObject(playerid, objectid);
		return 1;
	}

	if(dialogid == DIALOG_FURNITURE_SELL)
	{
	    if(!response) return 1;
        new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(EVData[id][SalePrice] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "You can't use this feature while the EV is for sale.");
		new objectid = GetPVarInt(playerid, "SelectedFurniture"), query[64], data[e_furniture];
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
		GiveMoney(playerid, EVFurnitures[ data[ArrayID] ][Price]);
		mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVfurnitures WHERE ID=%d", data[SQLID]);
		mysql_tquery(g_iHandle, query, "", "");
		DestroyDynamicObject(objectid);
		DeletePVar(playerid, "SelectedFurniture");
		return 1;
	}

	if(dialogid == DIALOG_VISITORS_MENU)
	{
		if(!response) return ShowEVMenu(playerid);
		new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(listitem == 0)
		{
		    new query[200], Cache: visitors;
		    mysql_format(g_iHandle, query, sizeof(query), "SELECT Visitor, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as VisitDate FROM EVvisitors WHERE EVID=%d ORDER BY Date DESC LIMIT 0, 15", id);
			visitors = mysql_query(g_iHandle, query);
			new rows = cache_num_rows();
			if(rows) {
			    new list[1024], visitor_name[MAX_PLAYER_NAME], visit_date[20];
			    format(list, sizeof(list), "Visitor Name\tDate\n");
			    for(new i; i < rows; ++i)
			    {
			        cache_get_field_content(i, "Visitor", visitor_name);
			        cache_get_field_content(i, "VisitDate", visit_date);
			        format(list, sizeof(list), "%s%s\t%s\n", list, visitor_name, visit_date);
			    }

			    ShowPlayerDialog(playerid, DIALOG_VISITORS, DIALOG_STYLE_TABLIST_HEADERS, "EV Visitors (Page 1)", list, "Next", "Previous");
			}else{
				SendClientMessage(playerid, 0xE74C3CFF, "You didn't had any visitors.");
			}

		    cache_delete(visitors);
		}

		if(listitem == 1)
		{
		    new query[64];
		    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVvisitors WHERE EVID=%d", id);
    		mysql_tquery(g_iHandle, query, "", "");
    		ShowEVMenu(playerid);
		}

		return 1;
	}

	if(dialogid == DIALOG_VISITORS)
	{
		if(!response) {
			ListPage[playerid]--;
			if(ListPage[playerid] < 0)
			{
			    ListPage[playerid] = 0;
			    ShowEVMenu(playerid);
			    return 1;
			}
		}else{
		    ListPage[playerid]++;
		}

		new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
  		new query[200], Cache: visitors;
    	mysql_format(g_iHandle, query, sizeof(query), "SELECT Visitor, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as VisitDate FROM EVvisitors WHERE EVID=%d ORDER BY Date DESC LIMIT %d, 15", id, ListPage[playerid]*15);
		visitors = mysql_query(g_iHandle, query);
		new rows = cache_num_rows();
		if(rows) {
  			new list[1024], visitor_name[MAX_PLAYER_NAME], visit_date[20];
	    	format(list, sizeof(list), "Visitor Name\tDate\n");
		    for(new i; i < rows; ++i)
		    {
      			cache_get_field_content(i, "Visitor", visitor_name);
	        	cache_get_field_content(i, "VisitDate", visit_date);
		        format(list, sizeof(list), "%s%s\t%s\n", list, visitor_name, visit_date);
		    }

			new title[32];
			format(title, sizeof(title), "EV Visitors (Page %d)", ListPage[playerid]+1);
			ShowPlayerDialog(playerid, DIALOG_VISITORS, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Next", "Previous");
		}else{
			SendClientMessage(playerid, 0xE74C3CFF, "Can't find any more visitors.");
			ListPage[playerid] = 0;
   			ShowEVMenu(playerid);
		}

		cache_delete(visitors);
		return 1;
	}

	if(dialogid == DIALOG_KEYS_MENU)
	{
		if(!response) return ShowEVMenu(playerid);
		new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(listitem == 0)
		{
		    new query[200], Cache: keyowners;
		    mysql_format(g_iHandle, query, sizeof(query), "SELECT Player, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as KeyDate FROM EVkeys WHERE EVID=%d ORDER BY Date DESC LIMIT %d, 15", id, ListPage[playerid]*15);
			keyowners = mysql_query(g_iHandle, query);
			new rows = cache_num_rows();
			if(rows) {
			    new list[1024], key_name[MAX_PLAYER_NAME], key_date[20];
			    format(list, sizeof(list), "Key Owner\tKey Given On\n");
			    for(new i; i < rows; ++i)
			    {
			        cache_get_field_content(i, "Player", key_name);
			        cache_get_field_content(i, "KeyDate", key_date);
			        format(list, sizeof(list), "%s%s\t%s\n", list, key_name, key_date);
			    }

			    ShowPlayerDialog(playerid, DIALOG_KEYS, DIALOG_STYLE_TABLIST_HEADERS, "Key Owners (Page 1)", list, "Next", "Previous");
			}else{
				SendClientMessage(playerid, 0xE74C3CFF, "Can't find any key owners.");
			}

		    cache_delete(keyowners);
		}

		if(listitem == 1)
		{
		    foreach(new i : Player)
		    {
		        if(Iter_Contains(EVKeys[i], id)) Iter_Remove(EVKeys[i], id);
		    }

		    new query[64];
		    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVkeys WHERE EVID=%d", id);
    		mysql_tquery(g_iHandle, query, "", "");
    		ShowEVMenu(playerid);
		}

		return 1;
	}

	if(dialogid == DIALOG_KEYS)
	{
	    if(!response) {
			ListPage[playerid]--;
			if(ListPage[playerid] < 0)
			{
			    ListPage[playerid] = 0;
			    ShowEVMenu(playerid);
			    return 1;
			}
		}else{
		    ListPage[playerid]++;
		}

		new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
        new query[200], Cache: keyowners;
  		mysql_format(g_iHandle, query, sizeof(query), "SELECT Player, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as KeyDate FROM EVkeys WHERE EVID=%d ORDER BY Date DESC LIMIT %d, 15", id, ListPage[playerid]*15);
		keyowners = mysql_query(g_iHandle, query);
		new rows = cache_num_rows();
		if(rows) {
  			new list[1024], key_name[MAX_PLAYER_NAME], key_date[20];
	    	format(list, sizeof(list), "Key Owner\tKey Given On\n");
		    for(new i; i < rows; ++i)
		    {
      			cache_get_field_content(i, "Player", key_name);
	        	cache_get_field_content(i, "KeyDate", key_date);
		        format(list, sizeof(list), "%s%s\t%s\n", list, key_name, key_date);
		    }

            new title[32];
			format(title, sizeof(title), "Key Owners (Page %d)", ListPage[playerid]+1);
			ShowPlayerDialog(playerid, DIALOG_KEYS, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Next", "Previous");
		}else{
		    ListPage[playerid] = 0;
   			ShowEVMenu(playerid);
			SendClientMessage(playerid, 0xE74C3CFF, "Can't find any more key owners.");
		}

		cache_delete(keyowners);
	    return 1;
	}

	if(dialogid == DIALOG_SAFE_HISTORY)
	{
	    if(!response) {
			ListPage[playerid]--;
			if(ListPage[playerid] < 0)
			{
			    ListPage[playerid] = 0;
			    ShowEVMenu(playerid);
			    return 1;
			}
		}else{
		    ListPage[playerid]++;
		}

		new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
        new query[200], Cache: safelog;
  		mysql_format(g_iHandle, query, sizeof(query), "SELECT Type, Amount, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as TransactionDate FROM EVsafelogs WHERE EVID=%d ORDER BY Date DESC LIMIT %d, 15", id, ListPage[playerid]*15);
		safelog = mysql_query(g_iHandle, query);
		new rows = cache_num_rows();
		if(rows) {
  			new list[1024], date[20];
	    	format(list, sizeof(list), "Action\tDate\n");
		    for(new i; i < rows; ++i)
		    {
	        	cache_get_field_content(i, "TransactionDate", date);
		        format(list, sizeof(list), "%s%s TL%s\t{FFFFFF}%s\n", list, TransactionNames[ cache_get_field_content_int(i, "Type") ], convertNumber(cache_get_field_content_int(i, "Amount")), date);
		    }

            new title[32];
			format(title, sizeof(title), "Safe History (Page %d)", ListPage[playerid]+1);
			ShowPlayerDialog(playerid, DIALOG_SAFE_HISTORY, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Next", "Previous");
		}else{
			SendClientMessage(playerid, 0xE74C3CFF, "Can't find any more safe history.");
		}

		cache_delete(safelog);
	    return 1;
	}

	if(dialogid == DIALOG_MY_KEYS)
	{
	    if(!response) {
			ListPage[playerid]--;
			if(ListPage[playerid] < 0)
			{
			    ListPage[playerid] = 0;
			    return 1;
			}
		}else{
		    ListPage[playerid]++;
		}

        new query[200], Cache: mykeys;
	    mysql_format(g_iHandle, query, sizeof(query), "SELECT EVID, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as KeyDate FROM EVkeys WHERE Player='%e' ORDER BY Date DESC LIMIT %d, 15", Player_GetName(playerid), ListPage[playerid]*15);
		mykeys = mysql_query(g_iHandle, query);

		new rows = cache_num_rows();
		if(rows) {
  			new list[1024], id, key_date[20];
	   		format(list, sizeof(list), "EV Info\tKey Given On\n");
		    for(new i; i < rows; ++i)
		    {
		        id = cache_get_field_content_int(i, "EVID");
	       		cache_get_field_content(i, "KeyDate", key_date);
		        format(list, sizeof(list), "%s%s's %s\t%s\n", list, EVData[id][Owner], EVData[id][Name], key_date);
		    }

            new title[32];
			format(title, sizeof(title), "My Keys (Page %d)", ListPage[playerid]+1);
			ShowPlayerDialog(playerid, DIALOG_MY_KEYS, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Next", "Previous");
		}else{
		    ListPage[playerid] = 0;
			SendClientMessage(playerid, 0xE74C3CFF, "Can't find any more keys.");
		}

		cache_delete(mykeys);
	    return 1;
	}

	if(dialogid == DIALOG_BUY_EV_FROM_OWNER)
	{
		if(!response) return 1;
		new id = GetPVarInt(playerid, "PickupEVID");
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ])) return SendClientMessage(playerid, 0xE74C3CFF, "You're not near any EV.");
        #if LIMIT_PER_PLAYER > 0
		if(OwnedEVs(playerid) + 1 > LIMIT_PER_PLAYER) return SendClientMessage(playerid, 0xE74C3CFF, "You can't buy any more EVs.");
		#endif
		if(EVData[id][SalePrice] > GetMoney(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "You can't afford this EV.");
		if(EVData[id][SalePrice] < 1) return SendClientMessage(playerid, 0xE74C3CFF, "Someone already owns this EV.");
  		new old_owner[MAX_PLAYER_NAME], price = EVData[id][SalePrice], owner_id = INVALID_PLAYER_ID;
  		format(old_owner, MAX_PLAYER_NAME, "%s", EVData[id][Owner]);

		foreach(new i : Player)
		{
			if(!strcmp(EVData[id][Owner], Player_GetName(i)))
			{
				owner_id = i;
				break;
			}
		}

		GiveMoney(playerid, -EVData[id][SalePrice]);
		GetPlayerName(playerid, EVData[id][Owner], MAX_PLAYER_NAME);
  		EVData[id][LastEntered] = gettime();
  		EVData[id][SalePrice] = 0;
		EVData[id][Save] = true;

		UpdateEVLabel(id);
		Streamer_SetIntData(STREAMER_TYPE_PICKUP, EVData[id][EVPickup], E_STREAMER_MODEL_ID, 19522);
		Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, EVData[id][EVIcon], E_STREAMER_TYPE, 32);
		SendToEV(playerid, id);

		foreach(new i : Player)
	    {
	        if(i == playerid) continue;
	        if(InEV[i] == id)
	        {
	            SetPVarInt(i, "EVPickupCooldown", gettime() + EV_COOLDOWN);
	        	SetPlayerVirtualWorld(i, 0);
		        SetPlayerInterior(i, 0);
		        SetPlayerPos(i, EVData[id][EVX], EVData[id][EVY], EVData[id][EVZ]);
		        InEV[i] = INVALID_EV_ID;
	        }

	        if(Iter_Contains(EVKeys[i], id)) Iter_Remove(EVKeys[i], id);
	   	}

	    new query[128];
	    if(IsPlayerConnected(owner_id)) {
	        GiveMoney(owner_id, price);

			new string[128];
			format(string, sizeof(string), "%s(%d) has bought your EV for TL%s.", EVData[id][Owner], playerid, convertNumber(price));
			SendClientMessage(owner_id, -1, string);
	    }else{
	        mysql_format(g_iHandle, query, sizeof(query), "INSERT INTO EVsales SET OldOwner='%e', NewOwner='%e', Price=%d", old_owner, EVData[id][Owner], price);
	    	mysql_tquery(g_iHandle, query, "", "");
	    }

	    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVvisitors WHERE EVID=%d", id);
	    mysql_tquery(g_iHandle, query, "", "");

	    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVkeys WHERE EVID=%d", id);
	    mysql_tquery(g_iHandle, query, "", "");

	    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM EVsafelogs WHERE EVID=%d", id);
	    mysql_tquery(g_iHandle, query, "", "");
		return 1;
	}

	if(dialogid == DIALOG_SELL_EV)
	{
	    if(!response) return ShowEVMenu(playerid);
        new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
		if(listitem == 0)
		{
		    new money = floatround(EVData[id][Price] * 0.85) + EVData[id][SafeMoney];
		    GiveMoney(playerid, money);
			ResetEV(id);
		}

		if(listitem == 1)
		{
		    if(EVData[id][SalePrice] > 0) {
			    EVData[id][SalePrice] = 0;
			    EVData[id][Save] = true;

			    UpdateEVLabel(id);
				Streamer_SetIntData(STREAMER_TYPE_PICKUP, EVData[id][EVPickup], E_STREAMER_MODEL_ID, 19522);
				Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, EVData[id][EVIcon], E_STREAMER_TYPE, 32);
			    SendClientMessage(playerid, -1, "Your EV is no longer for sale.");
			}else{
				if(EVData[id][SafeMoney] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "You can't put your EV for sale if there's money in the safe.");
				ShowPlayerDialog(playerid, DIALOG_SELLING_PRICE, DIALOG_STYLE_INPUT, "Sell EV", "How much do you want for your EV?", "Put For Sale", "Cancel");
			}
		}

	    return 1;
	}

	if(dialogid == DIALOG_SELLING_PRICE)
	{
	    if(!response) return ShowEVMenu(playerid);
        new id = InEV[playerid];
        if(id == INVALID_EV_ID) return SendClientMessage(playerid, 0xE74C3CFF, "You're not in a EV.");
		if(strcmp(EVData[id][Owner], Player_GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "You're not the owner of this EV.");
        new amount = strval(inputtext);
		if(!(1 <= amount <= 10000000)) return ShowPlayerDialog(playerid, DIALOG_SELLING_PRICE, DIALOG_STYLE_INPUT, "Sell EV", "{E74C3C}You can't put your EV for sale for less than $1 or more than $100,000,000.\n\n{FFFFFF}How much do you want for your EV?", "Put For Sale", "Cancel");
		EVData[id][SalePrice] = amount;
		EVData[id][Save] = true;

		UpdateEVLabel(id);
		Streamer_SetIntData(STREAMER_TYPE_PICKUP, EVData[id][EVPickup], E_STREAMER_MODEL_ID, 1273);
		Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, EVData[id][EVIcon], E_STREAMER_TYPE, 31);

		new string[128];
		format(string, sizeof(string), "You put your EV for sale for TL%s.", convertNumber(amount));
		SendClientMessage(playerid, -1, string);
	    return 1;
	}
	//bitiþ
    if(dialogid == PD_ENGEL)
	{
	    if(response)
		{
		    static
        		Float:fX,
        		Float:fY,
    	    	Float:fZ,
	        	Float:fA;

   	 		GetPlayerPos(playerid, fX, fY, fZ);
    		GetPlayerFacingAngle(playerid, fA);
		    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    	{
	            BarricadeData[i][cadeExists] = true;
	            BarricadeData[i][cadeType] = 2;

	            BarricadeData[i][cadePos][0] = fX;
	            BarricadeData[i][cadePos][1] = fY;
	            BarricadeData[i][cadePos][2] = fZ;

	            BarricadeData[i][cadeObject] = CreateDynamicObject(Dialog_GetModel(playerid, listitem), fX+0.5, fY+0.5, fZ-0.5, 0.0, 0.0, fA);

				EditDynamicObject(playerid, BarricadeData[i][cadeObject]);
				SetPVarInt(playerid, "DBI", i);
				SetPVarInt(playerid, "DBD", 1);
				SetPVarInt(playerid, "DBM", Dialog_GetModel(playerid, listitem));
				SendServerMessage(playerid, "%d %d | %s", Dialog_GetModel(playerid, listitem), Dialog_GetModel(playerid, listitem), inputtext);
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir barikat koyar.", ReturnName(playerid, 0));
				SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADYO: %s bir barikat koydu. (Bölge: %s)", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "Sunucu barikat sýnýrýna ulaþmýþtýr.");
		}
	}
	if(dialogid == AKSESUAR_SATINAL)
	{
	    if(GetPVarInt(playerid, "AttachmentUsed") == 1) EditAttachedObject(playerid, Dialog_GetModel(playerid, listitem));
	    else if(response)
	    {
	        if( GetPVarInt(playerid, "PolisAksesuar") == 0) {
				if(GetMoney(playerid) < 50) return SendErrorMessage(playerid, "Aksesuar satýn alabilmek için $50 gereklidir.");
				GiveMoney(playerid, -50);
	       		SendServerMessage(playerid, "Aksesuar $50'e satýn alýndý.");
	        }
	    	SetPVarInt(playerid, "AttachmentModelSel", Dialog_GetModel(playerid, listitem));
	        new string[256+1];
	        for(new x;x<sizeof(AttachmentBones);x++)
	        {
	        	format(string, sizeof(string), "%s%s\n", string, AttachmentBones[x]);
	        }
	        ShowPlayerDialog(playerid, DIALOG_ATTACH_BONE_SELECTION, DIALOG_STYLE_LIST, \
	        "{FF0000}Kemik Seçimi", string, "Seç", "{FF6347}Iptal");
		}
        //DeletePVar(playerid, "AttachmentlistitemSel");
	}


	if ((response) && (dialogid == MODEL_SELECTION_SKIN))
	{

	    PlayerData[playerid][pSkin] = Dialog_GetModel(playerid, listitem);
		SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], 1684.4392, 1771.6658, 10.8203, 270.0000, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, 0);
 	}
 	if ((response) && (dialogid == MODEL_SELECTION_VIP))
 	{
 	PlayerData[playerid][pSkin] = Dialog_GetModel(playerid, listitem);
    SetPlayerSkin(playerid, Dialog_GetModel(playerid, listitem));
 	}
 	if ((response) && (dialogid == MODEL_SELECTION_MAYOLAR))
	{
	new secilen;
	    secilen = Dialog_GetModel(playerid, listitem);
	    SetPlayerSkin(playerid, secilen);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s kýyafetlerini çýkartarak soyunur. ", ReturnName(playerid, 0));
        KiyafetDurum[playerid] = true;

 	}
 	if ((response) && (dialogid == MODEL_SELECTION_CLOTHES))
	{
	    new
			bizid = -1,
			price;

	    if ((bizid = Business_Inside(playerid)) == -1 || BusinessData[bizid][bizType] != 3)
	        return 0;

		if (BusinessData[bizid][bizProducts] < 1)
		    return SendErrorMessage(playerid, "Dükkanda ürün kalmamýþ.");

	    price = BusinessData[bizid][bizPrices][PlayerData[playerid][pClothesType] - 1];

	    if (GetMoney(playerid) < 100)
	        return SendErrorMessage(playerid, "100 dolarýn yok.");

		GiveMoney(playerid, -100);

		BusinessData[bizid][bizProducts]--;
		BusinessData[bizid][bizVault] += Tax_Percent(price);

		Business_Save(bizid);
		Tax_AddPercent(price);

	    switch (PlayerData[playerid][pClothesType])
	    {
	        case 1:
	        {
	            PlayerData[playerid][pSkin] = Dialog_GetModel(playerid, listitem);
	            SetPlayerSkin(playerid, Dialog_GetModel(playerid, listitem));

	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s 100$ ödedi ve kýyafet aldý.", ReturnName(playerid, 0));
			}

	    }
	}
	if ((response) && (dialogid == MODEL_SELECTION_LSPD))
	{
//	    new factionid = PlayerData[playerid][pFaction];

		if (Dialog_GetModel(playerid, listitem) == 19300)
		    return SendErrorMessage(playerid, "Seçtiðiniz slot boþ.");

  		SetPlayerSkin(playerid, Dialog_GetModel(playerid, listitem));
		PlayerData[playerid][pSkin] = Dialog_GetModel(playerid, listitem);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s üniformasýný deðiþtirir.", ReturnName(playerid, 0));
	}
	if ((response) && (dialogid == MODEL_SELECTION_DEALER))
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
 	    {
	        if (!DealershipCars[id][listitem][vehModel])
	        {
	            Dialog_Show(playerid, AddVehicle, DIALOG_STYLE_LIST, "Add Vehicle", "Add by Name\nAdd by Thumbnail", "Seç", "{FF6347}Iptal");
			}
			else
			{
			    PlayerData[playerid][pDealerCar] = listitem;
			    Dialog_Show(playerid, CarOptions, DIALOG_STYLE_LIST, "Dealership Vehicle", "Set Price (%s)\nRemove Vehicle", "Seç", "{FF6347}Iptal", FormatNumber(DealershipCars[id][listitem][vehPrice]));
			}
	    }
	}
	if ((response) && (dialogid == MODEL_SELECTION_DEALER_ADD))
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
	        for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == Dialog_GetModel(playerid, listitem))
	            	return SendErrorMessage(playerid, "This vehicle is already sold at this dealership.");
			}
			PlayerData[playerid][pDealerCar] = Dialog_GetModel(playerid, listitem);
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Enter Price", "Please enter a price for '%s':", "Submit", "Cancel", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		}
	}
		if ((response) && (dialogid == MODEL_SELECTION_BUY_CAR))
	{
	    new id = Business_Inside(playerid);

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (!DealershipCars[id][listitem][vehModel])
		        return SendErrorMessage(playerid, "Seçtiðiniz slot boþ.");
		        
		        if (PlayerData[playerid][pLevel] < 2)
				{
		        SendErrorMessage(playerid, "Level 2 iken araba satýn alamazsýn!");
		        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý oyuncu level 2 deðilken araç satýn almaya çalýþtý, bug abuse yapýyor olabilir. /kontrol ve /izle yap!", ReturnName(playerid, 0));
		        }
		        else {


		    if (GetMoney(playerid) < DealershipCars[id][listitem][vehPrice])
	    	    return SendErrorMessage(playerid, "Seçtiðiniz aracý satýn almak için yeterli paranýz yok. (%s).", FormatNumber(DealershipCars[id][listitem][vehPrice]));

			PlayerData[playerid][pDealerCar] = listitem;
			Dialog_Show(playerid, Renk1, DIALOG_STYLE_MSGBOX, "Araç Alýmý Kabul", "Seçtiðiniz '%s' model aracý satýn almak istiyor musunuz?\n\nNot: Aracýn satýn alma fiyatý %s'dýr.", "Ileri", "{FF6347}Iptal", ReturnVehicleModelName(Dialog_GetModel(playerid, listitem)), FormatNumber(DealershipCars[id][listitem][vehPrice]));
			}
		}
	}
	if ((response) && (dialogid == MODEL_SELECTION_FURNITURE))
	{
        new
			id = Business_Inside(playerid),
			type = PlayerData[playerid][pFurnitureType],
			price;

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 7)
	    {
	        price = BusinessData[id][bizPrices][type];

	        if (GetMoney(playerid) < price)
	            return SendErrorMessage(playerid, "Yeterli paran yok.");

			if (BusinessData[id][bizProducts] < 1)
		    	return SendErrorMessage(playerid, "Dükkanda ürün kalmamýþ.");

			new item = Inventory_Add(playerid, GetFurnitureNameByModel(Dialog_GetModel(playerid, listitem)), Dialog_GetModel(playerid, listitem));

            if (item == -1)
   	        	return SendErrorMessage(playerid, "Envanterde boþ yer yok.");

			GiveMoney(playerid, -price);
			SendServerMessage(playerid, "\"%s\" eþyasýný %s ödeyerek satýn aldýn.", GetFurnitureNameByModel(Dialog_GetModel(playerid, listitem)), FormatNumber(price));

			BusinessData[id][bizProducts]++;
			BusinessData[id][bizVault] += Tax_Percent(price);

			Business_Save(id);
			Tax_AddPercent(price);
	    }
	}
	if ((response) && (dialogid == MODEL_SELECTION_COLOR))
	{
	    new vehicleid = GetNearestVehicle(playerid);

        if (vehicleid == INVALID_VEHICLE_ID)
		    return SendErrorMessage(playerid, "Yanýnda araç yok.");

		if (!Inventory_HasItem(playerid, "Sprey Kutusu"))
		    return SendErrorMessage(playerid, "Sprey kutun yok.");

	    ApplyAnimation(playerid, "GRAFFITI", "null", 4.0, 0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
        ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Arac boyaniyor...", 3000, 3);
		SetTimerEx("ResprayCar", 3000, false, "ddd", playerid, vehicleid, Dialog_GetModel(playerid, listitem));
	}
	if ((response) && (dialogid == MODEL_SELECTION_SKINS))
	{
	    Dialog_Show(playerid, FactionSkin, DIALOG_STYLE_LIST, "Edit Skin", "Add by Model ID\nAdd by Thumbnail\nClear Slot", "Seç", "{FF6347}Iptal");
	    PlayerData[playerid][pSelectedSlot] = listitem;
	}
	if ((response) && (dialogid == MODEL_SELECTION_ADD_SKIN))
	{
	    FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = Dialog_GetModel(playerid, listitem);
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		SendServerMessage(playerid, "You have set the skin ID in slot %d to %d.", PlayerData[playerid][pSelectedSlot], Dialog_GetModel(playerid, listitem));
	}
	if ((response) && (dialogid == MODEL_SELECTION_FACTION_SKIN))
	{
	    new factionid = PlayerData[playerid][pFaction];

		if (factionid == -1 || !IsNearFactionLocker(playerid))
	    	return 0;

		if (Dialog_GetModel(playerid, listitem) == 19300)
		    return SendErrorMessage(playerid, "Seçtiðiniz slot boþ.");

  		SetPlayerSkin(playerid, Dialog_GetModel(playerid, listitem));
		PlayerData[playerid][pSkin] = Dialog_GetModel(playerid, listitem);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s üniformasýný deðiþtirir.", ReturnName(playerid, 0));
	}
	if ((response) && (dialogid == MODEL_SELECTION_WHEELS))
	{
        new vehicleid = GetPlayerVehicleID(playerid);

		if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    	return 0;


	    AddComponent(vehicleid, Dialog_GetModel(playerid, listitem));
	    SendServerMessage(playerid, "You have added the \"%s\" wheels to this vehicle.", GetWheelName(Dialog_GetModel(playerid, listitem)));
	}
	if ((dialogid == MODEL_SELECTION_INVENTORY && response) && InventoryData[playerid][listitem][invExists])
	{
	    new
	        name[48],
			id = -1,
			backpack = GetPlayerBackpack(playerid);

		strunpack(name, InventoryData[playerid][listitem][invItem]);
	    PlayerData[playerid][pInventoryItem] = listitem;

		switch (PlayerData[playerid][pStorageSelect])
		{
		    case 1:
		    {
		    	if ((id = House_Inside(playerid)) != -1 && House_IsOwner(playerid, id))
				{
					if (InventoryData[playerid][listitem][invQuantity] == 1)
					{
					    if (!strcmp(name, "Sirtcantasi") && GetHouseBackpack(id) != -1)
					        return SendErrorMessage(playerid, "Evinde en fazla bir adet sýrtçantasý bulundurabilirsin.");

                        if ( PlayerData[playerid][pHoldWeapon] > 0 ) return SendErrorMessage(playerid, "Silah tutarken bagaja birþey koyamazsýn.");
		        		House_AddItem(id, name, InventoryData[playerid][listitem][invModel], 1);
		        		Inventory_Remove(playerid, name);

		        		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s evine \"%s\" koyar.", ReturnName(playerid, 0), name);
				 		House_ShowItems(playerid, id);

				 		if (!strcmp(name, "Sirtcantasi") && backpack != -1)
						{
					        BackpackData[backpack][backpackPlayer] = 0;
					        BackpackData[backpack][backpackHouse] = HouseData[id][houseID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
					    }
		        	}
		        	else Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Evden Al", "Eþya: %s (Miktar: %d)\n\nLütfen koymak istediðiniz miktarý girin.", "Koy", "Ýptal", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 2:
		    {
		    	if ((id = Car_Nearest(playerid)) != -1 && !CarData[id][carLocked])
				{
					if (InventoryData[playerid][listitem][invQuantity] == 1)
					{
					    if (!strcmp(name, "Sirtcantasi") && GetVehicleBackpack(id) != -1)
					        return SendErrorMessage(playerid, "Bagajda en fazla bir adet sýrtçantasý bulundurabilirsin.");

						if ( PlayerData[playerid][pHoldWeapon] ) return SendErrorMessage(playerid, "Silah tutarken bagaja birþey koyamazsýn.");
		        		Car_AddItem(id, name, InventoryData[playerid][listitem][invModel], 1);
		        		Inventory_Remove(playerid, name);

		        		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s bagaja \"%s\" koyar.", ReturnName(playerid, 0), name);
				 		Car_ShowTrunk(playerid, id);

				 		if (!strcmp(name, "Sirtcantasi") && backpack != -1)
						{
					        BackpackData[backpack][backpackPlayer] = 0;
					        BackpackData[backpack][backpackVehicle] = CarData[id][carID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
					    }
		        	}
		        	else Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Bagajdan Al", "Eþya: %s (Miktar: %d)\n\nLütfen miktar girin:", "Sakla", "<< Geri", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 3:
		    {
		        if (!strcmp(name, "Sirtcantasi"))
		            return SendErrorMessage(playerid, "Bu eþya koyulamaz.");

		    	if (InventoryData[playerid][listitem][invQuantity] == 1)
				{
				    if (Backpack_GetItems(GetPlayerBackpack(playerid)) >= MAX_BACKPACK_CAPACITY)
	            		return SendErrorMessage(playerid, "Sýrtçantasý maksimum kapasiteye(%d) ulaþmýþtýr.", MAX_BACKPACK_CAPACITY);

					Backpack_Add(GetPlayerBackpack(playerid), name, InventoryData[playerid][listitem][invModel], 1);
   					Inventory_Remove(playerid, name);

					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s çantasýna \"%s\" yerleþtirir.", ReturnName(playerid, 0), name);
					Backpack_Open(playerid);
				}
   				else
	   			{
				   	Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			default:
			{
			    if (PlayerData[playerid][pTutorialStage] == 3 && !strcmp(name, "Demo Soda", true))
			    {
			        SendClientMessage(playerid, COLOR_SERVER, "Click on the first option to use the selected item.");
			    }
		    	format(name, sizeof(name), "%s (%d)", name, InventoryData[playerid][listitem][invQuantity]);

		    	if (Garbage_Nearest(playerid) != -1) {
					Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Kullan\nEþyayý Ver\nÇöpe At", "Seç", "{FF6347}Iptal");
				}
				else {
				    Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Kullan\nEþyayý Ver\nYere At", "Seç", "{FF6347}Iptal");
				}
			}
		}
	}
    if(dialogid == DIALOG_BALIK)
	{
	    // atýlacak balýðý seçme dialogu
	    if(!response) return 1;
	    if(listitem == MAX_BALIK_SLOT) {
	        SetPVarInt(playerid, "HepsiniAt", 1);
	        ShowPlayerDialog(playerid, DIALOG_BALIK+1, DIALOG_STYLE_MSGBOX, "Balýklarý At", "Tüm balýklarýný atmak istiyor musun?", "At", "Geri");
	    }else{
		    if(OyuncuBaliklari[playerid][BalikID][listitem] == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu slotta balýk yok.");
			SetPVarInt(playerid, "SecilenBalik", listitem);
            SetPVarInt(playerid, "HepsiniAt", 0);

		    new string[128], baslik[64];
		    format(baslik, sizeof(baslik), "Balýðý At: {3498DB}%s", BalikTurleri[ OyuncuBaliklari[playerid][BalikID][listitem] ][TurAdi]);
		    format(string, sizeof(string), "{FFFFFF}Aðýrlýk:\t\t{3498DB}%d gram\n{FFFFFF}Fiyat:\t\t{2ECC71}$%d",
		    	OyuncuBaliklari[playerid][BalikGram][listitem],
				floatround(OyuncuBaliklari[playerid][BalikGram][listitem]*BalikTurleri[ OyuncuBaliklari[playerid][BalikID][listitem] ][GramFiyat])
			);

			format(string, sizeof(string), "%s\n\n{FFFFFF}Balýðý atmak istiyor musun?", string);
			ShowPlayerDialog(playerid, DIALOG_BALIK+1, DIALOG_STYLE_MSGBOX, baslik, string, "At", "Geri");
		}

	    return 1;
	}

	if(dialogid == DIALOG_BALIK+1)
	{
	    // atýlacak balýðý onaylama dialogu
		if(!response) return BaliklariListele(playerid);
		if(GetPVarInt(playerid, "HepsiniAt")) {
			SetPVarInt(playerid, "HepsiniAt", 0);
			SendClientMessage(playerid, -1, "Tüm balýklarýnýzý attýnýz.");

			for(new i; i < MAX_BALIK_SLOT; ++i)
			{
			    OyuncuBaliklari[playerid][BalikID][i] = -1;
			    OyuncuBaliklari[playerid][BalikGram][i] = 0;
			}
		}else{
		    new id = GetPVarInt(playerid, "SecilenBalik");
			if(OyuncuBaliklari[playerid][BalikID][id] == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu slotta balýk yok.");
	        OyuncuBaliklari[playerid][BalikID][id] = -1;
	        OyuncuBaliklari[playerid][BalikGram][id] = 0;
	        SendClientMessage(playerid, -1, "Balýðý attýnýz.");
	        BaliklariListele(playerid);
		}
	}

	if(dialogid == DIALOG_BALIK+2)
	{
	    // satýlacak balýðý seçme dialogu
	    if(!response) return 1;
	    if(listitem == MAX_BALIK_SLOT) {
	        SetPVarInt(playerid, "HepsiniSat", 1);
	        ShowPlayerDialog(playerid, DIALOG_BALIK+3, DIALOG_STYLE_MSGBOX, "Balýklarý Sat", "Tüm balýklarýný satmak istiyor musun?", "Sat", "Geri");
	    }else{
		    if(OyuncuBaliklari[playerid][BalikID][listitem] == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu slotta balýk yok.");
			SetPVarInt(playerid, "SecilenBalik", listitem);
            SetPVarInt(playerid, "HepsiniSat", 0);

		    new string[128], baslik[64];
		    format(baslik, sizeof(baslik), "Balýðý Sat: {3498DB}%s", BalikTurleri[ OyuncuBaliklari[playerid][BalikID][listitem] ][TurAdi]);
		    format(string, sizeof(string), "{FFFFFF}Aðýrlýk:\t\t{3498DB}%d gram\n{FFFFFF}Fiyat:\t\t{2ECC71}$%d",
		    	OyuncuBaliklari[playerid][BalikGram][listitem],
				floatround(OyuncuBaliklari[playerid][BalikGram][listitem]*BalikTurleri[ OyuncuBaliklari[playerid][BalikID][listitem] ][GramFiyat])
			);

			format(string, sizeof(string), "%s\n\n{FFFFFF}Balýðý satmak istiyor musun?", string);
			ShowPlayerDialog(playerid, DIALOG_BALIK+3, DIALOG_STYLE_MSGBOX, baslik, string, "Sat", "Geri");
		}

	    return 1;
	}

	if(dialogid == DIALOG_BALIK+3)
	{
	    // satýlacak balýðý onaylama dialogu
		if(!response) return BaliklariListele(playerid, 1);
		if(GetPVarInt(playerid, "HepsiniSat")) {
		    new string[64], toplam, satilan;
		    for(new i; i < MAX_BALIK_SLOT; ++i)
			{
			    if(OyuncuBaliklari[playerid][BalikID][i] == -1) continue;
			    satilan++;
			    toplam += floatround(OyuncuBaliklari[playerid][BalikGram][i]*BalikTurleri[ OyuncuBaliklari[playerid][BalikID][i] ][GramFiyat]);

			    OyuncuBaliklari[playerid][BalikID][i] = -1;
			    OyuncuBaliklari[playerid][BalikGram][i] = 0;

			    if(KovaBaliklari[playerid][BalikID][i] == -1) continue;
			    satilan++;
			    toplam += floatround(KovaBaliklari[playerid][BalikGram][i]*BalikTurleri[ KovaBaliklari[playerid][BalikID][i] ][GramFiyat]);

			    KovaBaliklari[playerid][BalikID][i] = -1;
			    KovaBaliklari[playerid][BalikGram][i] = 0;
			}
			SetPVarInt(playerid, "HepsiniSat", 0);
			GiveMoney(playerid, toplam);
			format(string, sizeof(string), "%d balýk sattýnýz ve {2ECC71}$%d {FFFFFF}aldýnýz.", satilan, toplam);
			SendClientMessage(playerid, -1, string);

		}else{
		    new id = GetPVarInt(playerid, "SecilenBalik");
			if(OyuncuBaliklari[playerid][BalikID][id] == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu slotta balýk yok.");
			new para = floatround(OyuncuBaliklari[playerid][BalikGram][id]*BalikTurleri[ OyuncuBaliklari[playerid][BalikID][id] ][GramFiyat]), string[64];
			GiveMoney(playerid, para);
			OyuncuBaliklari[playerid][BalikID][id] = -1;
	        OyuncuBaliklari[playerid][BalikGram][id] = 0;
	        BaliklariListele(playerid, 1);
	        format(string, sizeof(string), "Balýðý {2ECC71}$%d {FFFFFF}karþýlýðýnda sattýnýz.", para);
			SendClientMessage(playerid, -1, string);
		}
	}

	switch(dialogid)
    {
    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_MENU_NOLOGIN:
	    {
	        if(!response) return 1;
	        if(listitem == 0)
	        {
	            if(GetPVarInt(playerid, "usingATMM"))
				{
				    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu iþlem için bankaya baþvurmalýsýnýz.");
					return Bank_ShowMenu(playerid);
				}

	            if(ACCOUNT_PRICE > GetMoney(playerid))
	            {
	                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Banka hesabý oluþturabilmek için yeterli paranýz yok.");
	                return Bank_ShowMenu(playerid);
	            }

				#if defined ACCOUNT_CLIMIT
				if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
	            {
	                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Daha fazla Banka Hesabý açamassýnýz.");
	                return Bank_ShowMenu(playerid);
	            }
				#endif

				ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "Banka hesabýnýz için bir þifre giriniz:", "Oluþtur", "Geri");
	        }

	        if(listitem == 1) Bank_ListAccounts(playerid);
	        if(listitem == 2) ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_ID, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}gÝRÝÞ", "Hesap NO:", "Devam Et", "Iptal");
	        return 1;
	    }
     	/* ---------------------------------------------------------------------- */
     	case DIALOG_BANK_MENU:
		{
		    if(!response) return 1;
		    if(listitem == 0)
	        {
	            if(GetPVarInt(playerid, "usingATMM"))
				{
				    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu iþlem için bankaya baþvurmalýsýnýz.");
					return Bank_ShowMenu(playerid);
				}

	            if(ACCOUNT_PRICE > GetMoney(playerid))
	            {
	                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Banka hesabý oluþturabilmek için yeterli paranýz yok.");
	                return Bank_ShowMenu(playerid);
	            }

				#if defined ACCOUNT_CLIMIT
				if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
	            {
	                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Daha fazla Banka Hesabý açamassýnýz.");
	                return Bank_ShowMenu(playerid);
	            }
				#endif

				ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþturma", "Yeni hesabýnýz için bir þifre seçiniz:", "Oluþtur", "Geri");
	        }

	        if(listitem == 1) Bank_ListAccounts(playerid);
	        if(listitem == 2) ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatýrma", "Ne kadar para yatýrmak istiyorsunuz?", "Para Yatýr", "Geri");
            if(listitem == 3) ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çekme", "Ne kadar para çekmek istiyorsunuz?", "Para Çek", "Geri");
			if(listitem == 4) ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Transfer", "Transfer yapmak istediðiniz hesap numarasý:", "Devam", "Geri");
            if(listitem == 5)
			{
			    if(GetPVarInt(playerid, "usingATMM"))
				{
				    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu iþlemi yapmak için bankayý ziyaret ediniz.");
					return Bank_ShowMenu(playerid);
				}

				Bank_ShowLogMenu(playerid);
			}

			if(listitem == 6)
			{
			    if(GetPVarInt(playerid, "usingATMM"))
				{
				    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu iþlemi yapmak için bankayý ziyaret ediniz.");
					return Bank_ShowMenu(playerid);
				}

				if(strcmp(Bank_GetOwner(CurrentAccountID[playerid]), Player_GetName(playerid)))
				{
				    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu hesabýn sahibi deðilsiniz.");
				    return Bank_ShowMenu(playerid);
				}

				ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Þifre Deðiþtir", "Lütfen yeni þifrenizi giriniz:", "Deðiþtir", "Geri");
			}

			if(listitem == 7)
			{
			    if(GetPVarInt(playerid, "usingATMM"))
				{
				    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu iþlemi yapmak için bankayý ziyaret ediniz.");
					return Bank_ShowMenu(playerid);
				}

			    if(strcmp(Bank_GetOwner(CurrentAccountID[playerid]), Player_GetName(playerid)))
				{
				    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu hesabýn sahibi deðilsiniz.");
				    return Bank_ShowMenu(playerid);
				}

				ShowPlayerDialog(playerid, DIALOG_BANK_REMOVE, DIALOG_STYLE_MSGBOX, "{F1C40F}Banka: {FFFFFF}Hesap Sil", "Emin misiniz? Hesabýnýz silinirse {E74C3C}geri alamassýnýz.", "Evet", "Geri");
				// https://youtu.be/rcjpags7JT8 - because it doesn't get deleted actually
			}

			if(listitem == 8)
			{
			    SendClientMessage(playerid, 0x3498DBFF, "BANKA: {FFFFFF}Baþarýyla çýkýþ yaptýnýz.");

			    CurrentAccountID[playerid] = -1;
			    Bank_ShowMenu(playerid);
			}
		}
        /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_CREATE_ACCOUNT:
	    {
	        if(!response) return Bank_ShowMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþturma", "{E74C3C}Hesap þifresi boþ býrakýlamaz.\n\n{FFFFFF}Lütfen yeni hesap þifresi giriniz:", "Oluþtur", "Geri");
			if(strlen(inputtext) > 16) return ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþturma", "{E74C3C}Hesap þifresi 16 karakterden fazla olamaz.\n\n{FFFFFF}Lütfen yeni hesap þifresi giriniz:", "Oluþtur", "Geri");
			if(ACCOUNT_PRICE > GetMoney(playerid))
            {
                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Hesap oluþturmak için yeterli paran yok.");
                return Bank_ShowMenu(playerid);
            }

			#if defined ACCOUNT_CLIMIT
			if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
            {
                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Daha fazla banka hesabý oluþturamazsýn.");
                return Bank_ShowMenu(playerid);
            }
			#endif

			new queryy[144];
			mysql_format(g_iHandle, queryy, sizeof(queryy), "INSERT INTO bank_accounts SET Owner='%e', Password=md5('%e'), CreatedOn=UNIX_TIMESTAMP()", Player_GetName(playerid), inputtext);
			mysql_tquery(g_iHandle, queryy, "OnBankAccountCreated", "is", playerid, inputtext);
	        return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_ACCOUNTS:
	    {
            if(!response) return Bank_ShowMenu(playerid);

            SetPVarInt(playerid, "bankLoginAccount", strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Giriþ", "Hesap Þifre:", "Giris", "Cikis");
	        return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_LOGIN_ID:
	    {
	        if(!response) return Bank_ShowMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_ID, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Giriþ", "{E74C3C}ID boþ olamaz\n\n{FFFFFF}Hesap ID:", "Devam", "Cikis");

			SetPVarInt(playerid, "bankLoginAccount", strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Giriþ", "Hesap Giriþi:", "Giriþ", "Çýkýþ");
			return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_LOGIN_PASS:
	    {
	        if(!response) return Bank_ShowMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Giriþ", "{E74C3C}Þifreyi boþ giremezsin.\n\n{FFFFFF}Hesap Giriþi", "Giriþ", "Çýkýþ");

			new queryy[200], id = GetPVarInt(playerid, "bankLoginAccount");
			mysql_format(g_iHandle, queryy, sizeof(queryy), "SELECT Owner, LastAccess, FROM_UNIXTIME(LastAccess, '%%d/%%m/%%Y %%H:%%i:%%s') AS Last FROM bank_accounts WHERE ID=%d && Password=md5('%e') && Disabled=0 LIMIT 1", id, inputtext);
			mysql_tquery(g_iHandle, queryy, "OnBankAccountLogin", "ii", playerid, id);
			return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_DEPOSIT:
	    {
			if(!response) return Bank_ShowMenu(playerid);
			if(CurrentAccountID[playerid] == -1) return 1;
     		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Deposit", "{E74C3C}You can't leave the input empty.\n\n{FFFFFF}How much money do you want to deposit?", "Deposit", "Back");
			new amount = strval(inputtext);
			if(!(1 <= amount <= (GetPVarInt(playerid, "usingATMM") ? 5000000 : 250000000))) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Deposit", "{E74C3C}You can't deposit less than $1 or more than $250,000,000 at once. ($5,000,000 at once on ATMMs)\n\n{FFFFFF}How much money do you want to deposit?", "Deposit", "Back");
			if(amount > GetMoney(playerid)) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Deposit", "{E74C3C}You don't have enough money.\n\n{FFFFFF}How much money do you want to deposit?", "Deposit", "Back");
			if((amount + Bank_GetBalance(CurrentAccountID[playerid])) > ACCOUNT_LIMIT)
			{
   				SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}You can't deposit any more money to this account.");
			    return Bank_ShowMenu(playerid);
			}

			new queryy[96];
			mysql_format(g_iHandle, queryy, sizeof(queryy), "UPDATE bank_accounts SET Balance=Balance+%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
			mysql_tquery(g_iHandle, queryy, "OnBankAccountDeposit", "ii", playerid, amount);
			return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_WITHDRAW:
	    {
			if(!response) return Bank_ShowMenu(playerid);
			if(CurrentAccountID[playerid] == -1) return 1;
     		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Withdraw", "{E74C3C}You can't leave the input empty.\n\n{FFFFFF}How much money do you want to withdraw?", "Withdraw", "Back");
			new amount = strval(inputtext);
			if(!(1 <= amount <= (GetPVarInt(playerid, "usingATMM") ? 5000000 : 250000000))) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Withdraw", "{E74C3C}You can't withdraw less than $1 or more than $250,000,000 at once. ($5,000,000 at once on ATMMs)\n\n{FFFFFF}How much money do you want to withdraw?", "Withdraw", "Back");
			if(amount > Bank_GetBalance(CurrentAccountID[playerid])) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Withdraw", "{E74C3C}Account doesn't have enough money.\n\n{FFFFFF}How much money do you want to withdraw?", "Withdraw", "Back");

			new queryy[96];
			mysql_format(g_iHandle, queryy, sizeof(queryy), "UPDATE bank_accounts SET Balance=Balance-%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
			mysql_tquery(g_iHandle, queryy, "OnBankAccountWithdraw", "ii", playerid, amount);
			return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_TRANSFER_1:
	    {
			if(!response) return Bank_ShowMenu(playerid);
			if(CurrentAccountID[playerid] == -1) return 1;
     		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Transfer", "{E74C3C}You can't leave the input empty.\n\n{FFFFFF}Specify an account ID:", "Continue", "Back");
            if(strval(inputtext) == CurrentAccountID[playerid]) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Transfer", "{E74C3C}You can't transfer money to your current account.\n\n{FFFFFF}Specify an account ID:", "Continue", "Back");
            SetPVarInt(playerid, "bankTransferAccount", strval(inputtext));
            ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Transfer", "Specify an amount:", "Transfer", "Back");
            return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_TRANSFER_2:
        {
            if(!response) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Transfer", "Specify an account ID:", "Continue", "Back");
            if(CurrentAccountID[playerid] == -1) return 1;
			if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Transfer", "{E74C3C}You can't leave the input empty.\n\n{FFFFFF}Specify an amount:", "Transfer", "Back");
            new amount = strval(inputtext);
			if(!(1 <= amount <= (GetPVarInt(playerid, "usingATMM") ? 5000000 : 250000000))) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Transfer", "{E74C3C}You can't transfer less than $1 or more than $250,000,000 at once. ($5,000,000 on ATMMs)\n\n{FFFFFF}Specify an amount:", "Transfer", "Back");
            if(amount > Bank_GetBalance(CurrentAccountID[playerid])) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Transfer", "{E74C3C}Account doesn't have enough money.\n\n{FFFFFF}Specify an amount:", "Transfer", "Back");
			new id = GetPVarInt(playerid, "bankTransferAccount");
			if((amount + Bank_GetBalance(id)) > ACCOUNT_LIMIT)
			{
				SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Can't deposit any more money to the account you specified.");
				return Bank_ShowMenu(playerid);
			}

			new queryy[96];
			mysql_format(g_iHandle, queryy, sizeof(queryy), "UPDATE bank_accounts SET Balance=Balance+%d WHERE ID=%d && Disabled=0", amount, id);
			mysql_tquery(g_iHandle, queryy, "OnBankAccountTransfer", "iii", playerid, id, amount);
            return 1;
        }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_PASSWORD:
        {
        	if(!response) return Bank_ShowMenu(playerid);
        	if(CurrentAccountID[playerid] == -1) return 1;
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Change Password", "{E74C3C}You can't leave the input empty.\n\n{FFFFFF}Write a new password:", "Change", "Back");
			if(strlen(inputtext) > 16) return ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Bank: {FFFFFF}Change Password", "{E74C3C}New password can't be more than 16 characters.\n\n{FFFFFF}Write a new password:", "Change", "Back");

			new queryy[128];
			mysql_format(g_iHandle, queryy, sizeof(queryy), "UPDATE bank_accounts SET Password=md5('%e') WHERE ID=%d && Disabled=0", inputtext, CurrentAccountID[playerid]);
			mysql_tquery(g_iHandle, queryy, "OnBankAccountPassChange", "is", playerid, inputtext);
	        return 1;
	    }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_REMOVE:
        {
            if(!response) return Bank_ShowMenu(playerid);
            if(CurrentAccountID[playerid] == -1) return 1;

            new queryy[96], amount = Bank_GetBalance(CurrentAccountID[playerid]);
			mysql_format(g_iHandle, queryy, sizeof(queryy), "UPDATE bank_accounts SET Disabled=1 WHERE ID=%d", CurrentAccountID[playerid]);
			mysql_tquery(g_iHandle, queryy, "OnBankAccountDeleted", "iii", playerid, CurrentAccountID[playerid], amount);
            return 1;
        }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_LOGS:
        {
            if(!response) return Bank_ShowMenu(playerid);
            if(CurrentAccountID[playerid] == -1) return 1;

            new typelist[6] = {TYPE_NONE, TYPE_DEPOSIT, TYPE_WITHDRAW, TYPE_TRANSFER, TYPE_LOGIN, TYPE_PASSCHANGE};
            LogListType[playerid] = typelist[listitem + 1];
            LogListPage[playerid] = 0;
            Bank_ShowLogs(playerid);
            return 1;
   		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_LOG_PAGE:
		{
		    if(CurrentAccountID[playerid] == -1 || LogListType[playerid] == TYPE_NONE) return 1;
			if(!response) {
			    LogListPage[playerid]--;
			    if(LogListPage[playerid] < 0) return Bank_ShowLogMenu(playerid);
			}else{
			    LogListPage[playerid]++;
			}

			Bank_ShowLogs(playerid);
		    return 1;
		}
        /* ---------------------------------------------------------------------- */
       case DIALOG_PAPAGAN:
	    {
			if(!response) return true;
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(strlen(PapaganInfo[playerid][papagan->Name]) != 0) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Zaten bir köpeðe sahipsin!");
	                if(GetMoney(playerid) < PAPAGAN_FIYAT) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet almak icin paran yetersiz!");
	                else {
	                 PapaganInfo[playerid][papagan->Model] = 1;
					ShowPlayerDialog(playerid, DIALOG_PAPAGAN_2, DIALOG_STYLE_INPUT, "Pet Yapýlandýrma", "{ecf0f1}Merhaba, köpeði almak icin gerekli paran var.\n\n{ecf0f1}Pet icin bir isim gir ve belirle butonuna bas.", "Belirle", "Vazgec");
					}
	            }
	            case 1:
	            {
	                if(strlen(PapaganInfo[playerid][papagan->Name]) != 0) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Zaten bir köpeðe sahipsin!");
	                if(GetMoney(playerid) < PAPAGAN_FIYAT) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet almak icin paran yetersiz!");
	                else {
	                 PapaganInfo[playerid][papagan->Model] = 2;
					ShowPlayerDialog(playerid, DIALOG_PAPAGAN_2, DIALOG_STYLE_INPUT, "Pet Yapýlandýrma", "{ecf0f1}Merhaba, köpeði almak icin gerekli paran var.\n\n{ecf0f1}Pet icin bir isim gir ve belirle butonuna bas.", "Belirle", "Vazgec");
					}
	            }
	            case 2:
	            {
	                if(strlen(PapaganInfo[playerid][papagan->Name]) != 0) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Zaten bir köpeðe sahipsin!");
	                if(GetMoney(playerid) < PAPAGAN_FIYAT) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet almak icin paran yetersiz!");
	                else {
	                 PapaganInfo[playerid][papagan->Model] = 3;
					ShowPlayerDialog(playerid, DIALOG_PAPAGAN_2, DIALOG_STYLE_INPUT, "Pet Yapýlandýrma", "{ecf0f1}Merhaba, köpeði almak icin gerekli paran var.\n\n{ecf0f1}Pet icin bir isim gir ve belirle butonuna bas.", "Belirle", "Vazgec");
					}
	            }
	            case 3:
	            {
	                if(strlen(PapaganInfo[playerid][papagan->Name]) != 0) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Zaten bir köpeðe sahipsin!");
	                if(GetMoney(playerid) < PAPAGAN_FIYAT) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet almak icin paran yetersiz!");
	                else {
	                 PapaganInfo[playerid][papagan->Model] = 4;
					ShowPlayerDialog(playerid, DIALOG_PAPAGAN_2, DIALOG_STYLE_INPUT, "Pet Yapýlandýrma", "{ecf0f1}Merhaba, köpeði almak icin gerekli paran var.\n\n{ecf0f1}Pet icin bir isim gir ve belirle butonuna bas.", "Belirle", "Vazgec");
					}
	            }
	            case 4:
	            {
	                if(strlen(PapaganInfo[playerid][papagan->Name]) != 0) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Zaten bir köpeðe sahipsin!");
	                if(GetMoney(playerid) < PAPAGAN_FIYAT) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet almak icin paran yetersiz!");
	                else {
	                 PapaganInfo[playerid][papagan->Model] = 5;
					ShowPlayerDialog(playerid, DIALOG_PAPAGAN_2, DIALOG_STYLE_INPUT, "Pet Yapýlandýrma", "{ecf0f1}Merhaba, köpeði almak icin gerekli paran var.\n\n{ecf0f1}Pet icin bir isim gir ve belirle butonuna bas.", "Belirle", "Vazgec");
					}
	            }
	            case 5:
	            {
	                if(strlen(PapaganInfo[playerid][papagan->Name]) != 0) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Zaten bir pete sahipsin!");
	                if(GetMoney(playerid) < PAPAGAN_FIYAT) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Kedi almak icin paran yetersiz!");
	                else {
	                 PapaganInfo[playerid][papagan->Model] = 6;
					ShowPlayerDialog(playerid, DIALOG_PAPAGAN_2, DIALOG_STYLE_INPUT, "Kedi Yapýlandýrma", "{ecf0f1}Merhaba, kediyi almak icin gerekli paran var.\n\n{ecf0f1}Kedi icin bir isim gir ve belirle butonuna bas.", "Belirle", "Vazgec");
					}
	            }

	        }
	    }


	   case DIALOG_KARAKTER:
	    {
			if(!response) return true;
	        switch(listitem)
	        {
	            case 0:
	            {
   				SelectCharacter(playerid, 1);
				}
	            case 1:
	            {
	            if(PlayerData[playerid][pExtraSlot] < 1)
			 	{
				SendErrorMessage(playerid, "Bu slot için marketten premium slot almanýz gerekmektedir.");
				new dialog[512], string[56];
			    format(string, sizeof string, "%s\n" , (!PlayerCharacters[playerid][0][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][0]));
			    strcat(dialog, string);
			    format(string, sizeof string, "%s\n", (!PlayerCharacters[playerid][1][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][1]));
			    strcat(dialog, string);
			     format(string, sizeof string, "%s", (!PlayerCharacters[playerid][2][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][2]));
			    strcat(dialog, string);
			    ShowPlayerDialog(playerid, DIALOG_KARAKTER, DIALOG_STYLE_LIST, "vBeta - Karakter Seçim Ekraný", dialog, "Sec", "Kapat");
				}
				else SelectCharacter(playerid, 2);
	            }
	            case 2:
	            {
	            if(PlayerData[playerid][pExtraSlot] < 1)
	            {
				SendErrorMessage(playerid, "Bu slot için marketten premium slot almanýz gerekmektedir.");
				new dialog[512], string[56];
			    format(string, sizeof string, "%s\n" , (!PlayerCharacters[playerid][0][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][0]));
			    strcat(dialog, string);
			    format(string, sizeof string, "%s\n", (!PlayerCharacters[playerid][1][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][1]));
			    strcat(dialog, string);
			     format(string, sizeof string, "%s", (!PlayerCharacters[playerid][2][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][2]));
			    strcat(dialog, string);
			    ShowPlayerDialog(playerid, DIALOG_KARAKTER, DIALOG_STYLE_LIST, "vBeta - Karakter Seçim Ekraný", dialog, "Sec", "Kapat");
				}
				else SelectCharacter(playerid, 3);
	            }

	        }
	    }
	    case DIALOG_PAPAGAN_2:
	    {
	        switch(response)
	        {
	            case 0: return true;
	            case 1:
	            {
	                if(strlen(PapaganInfo[playerid][papagan->Name]) != 0) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Zaten bir köpeðe sahipsin!");
	                if(GetMoney(playerid) < PAPAGAN_FIYAT) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet almak icin paran yetersiz!");
	                if(strlen(inputtext) < 1 || strlen(inputtext) > 24) return OnDialogResponse(playerid, DIALOG_PAPAGAN, 1, 0, ""), SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Minimum 1, maximum 24 karakter girebilirsiniz.");
	                else {
	              //  new string[156];
					format(PapaganInfo[playerid][papagan->Name], 24, "%s", inputtext);
					PapaganInfo[playerid][papagan->Kilo] = 45;
					GiveParrotHealth(playerid, 100);
	                SendClientMessage(playerid, -1, "{e67e22}BILGI: {ecf0f1}Pet satýn alýndý. Yönetimi icin {f1c40f}/petmenu {ecf0f1}komutunu kullaniniz.");
					}
	            }
	        }
	    }
	    case DIALOG_PAPAGAN_YONETIM:
	    {
	        if(!response) return true;
			switch(listitem)
			{
			    case 0:
			    {
			        switch(PapaganInfo[playerid][papagan->Called])
			        {

			            case false:
			   			{
			   			new Float:x,Float:y,Float:z,Float:angle;
						PapaganInfo[playerid][papagan->Called] = true;
						SendClientMessage(playerid, -1, "{e67e22}BILGI: {ecf0f1}Pet cagirildi.");
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						x += 1.0 * floatsin(-angle, degrees);
						y += 1.0 * floatcos(-angle, degrees);
						 ParrotTextdraw(playerid, true);
						if(PapaganInfo[playerid][papagan->Model] == 1)
	  					{
				        new string[126];
	  					format(string, 126, "%s_%d",PapaganInfo[playerid][papagan->Name],PapaganInfo[playerid][papagan_id]);
					//	//PapaganInfo[playerid][papagan_id] = string;
						//FCNPC_Spawn(PapaganInfo[playerid][papagan_id],120,x,y,z);
						//FCNPC_SetSkin(PapaganInfo[playerid][papagan_id], 20005);
						//FCNPC_SetVirtualWorld(PapaganInfo[playerid][papagan_id],GetPlayerVirtualWorld(playerid));
						//FCNPC_SetInterior(PapaganInfo[playerid][papagan_id],GetPlayerInterior(playerid));
   						}
   						if(PapaganInfo[playerid][papagan->Model] == 2)
	  					{
	  					new string[126];
	  					format(string, 126, "%s_%d",PapaganInfo[playerid][papagan->Name],PapaganInfo[playerid][papagan_id]);
						//PapaganInfo[playerid][papagan_id] = string;
						//FCNPC_Spawn(PapaganInfo[playerid][papagan_id],120,x,y,z);
						//FCNPC_SetSkin(PapaganInfo[playerid][papagan_id], 20026);
						//FCNPC_SetVirtualWorld(PapaganInfo[playerid][papagan_id],GetPlayerVirtualWorld(playerid));
						//FCNPC_SetInterior(PapaganInfo[playerid][papagan_id],GetPlayerInterior(playerid));
   						}
   						if(PapaganInfo[playerid][papagan->Model] == 3)
	  					{
						new string[126];
	  					format(string, 126, "%s_%d",PapaganInfo[playerid][papagan->Name],PapaganInfo[playerid][papagan_id]);
						//PapaganInfo[playerid][papagan_id] = string;
						//FCNPC_Spawn(PapaganInfo[playerid][papagan_id],120,x,y,z);
						//FCNPC_SetSkin(PapaganInfo[playerid][papagan_id], 20027);
						//FCNPC_SetVirtualWorld(PapaganInfo[playerid][papagan_id],GetPlayerVirtualWorld(playerid));
						//FCNPC_SetInterior(PapaganInfo[playerid][papagan_id],GetPlayerInterior(playerid));
   						}
   						if(PapaganInfo[playerid][papagan->Model] == 4)
	  					{
						new string[126];
	  					format(string, 126, "%s_%d",PapaganInfo[playerid][papagan->Name],PapaganInfo[playerid][papagan_id]);
//						PapaganInfo[playerid][papagan_id] = FCNPC_Createstring;
						//FCNPC_Spawn(PapaganInfo[playerid][papagan_id],120,x,y,z);
						//FCNPC_SetSkin(PapaganInfo[playerid][papagan_id], 20025);
						//FCNPC_SetVirtualWorld(PapaganInfo[playerid][papagan_id],GetPlayerVirtualWorld(playerid));
						//FCNPC_SetInterior(PapaganInfo[playerid][papagan_id],GetPlayerInterior(playerid));
   						}
   						if(PapaganInfo[playerid][papagan->Model] == 5)
	  					{
	  					new string[126];
	  					format(string, 126, "%s_%d",PapaganInfo[playerid][papagan->Name],PapaganInfo[playerid][papagan_id]);
						//PapaganInfo[playerid][papagan_id] = string;
						//FCNPC_Spawn(PapaganInfo[playerid][papagan_id],120,x,y,z);
						//FCNPC_SetSkin(PapaganInfo[playerid][papagan_id], 20028);
						//FCNPC_SetVirtualWorld(PapaganInfo[playerid][papagan_id],GetPlayerVirtualWorld(playerid));
						//FCNPC_SetInterior(PapaganInfo[playerid][papagan_id],GetPlayerInterior(playerid));
						}
						if(PapaganInfo[playerid][papagan->Model] == 6)
	  					{
	  					new string[126];
	  					format(string, 126, "%s_%d",PapaganInfo[playerid][papagan->Name],PapaganInfo[playerid][papagan_id]);
						//PapaganInfo[playerid][papagan_id] = string;
						//FCNPC_Spawn(PapaganInfo[playerid][papagan_id],120,x,y,z);
						//FCNPC_SetSkin(PapaganInfo[playerid][papagan_id], 20129);
						//FCNPC_SetVirtualWorld(PapaganInfo[playerid][papagan_id],GetPlayerVirtualWorld(playerid));
						//FCNPC_SetInterior(PapaganInfo[playerid][papagan_id],GetPlayerInterior(playerid));

						}
			      		new labelformat[380];
            			format(labelformat, 380, "\n\n({33CC00}%d{FFFFFF})%s{BEBEBE}\nAclik:%s\nDurum:%s",PapaganInfo[playerid][papagan_id], PapaganInfo[playerid][papagan->Name],GetParrotHunger(playerid),GetParrotMood(playerid));
        				PapaganInfo[playerid][papagan_labelid] = CreateDynamic3DTextLabel(labelformat, COLOR_WHITE, 0, 0, 0, 10.0, PapaganInfo[playerid][papagan_id] , 0, true);
        				//FCNPC_SetInvulnerable(PapaganInfo[playerid][papagan_id],true);

						}
			            case true:
			            {
						PapaganInfo[playerid][papagan->Called] = false;
					 	SendClientMessage(playerid, -1, "{e67e22}BILGI: {ecf0f1}Pet gonderildi.");
					 	//FCNPC_Destroy(PapaganInfo[playerid][papagan_id]);
					 	if(IsValidDynamic3DTextLabel(PapaganInfo[playerid][papagan_labelid])) DestroyDynamic3DTextLabel(PapaganInfo[playerid][papagan_labelid]);
						ParrotTextdraw(playerid, false);
                        }
			        }
			    }
				case 1:
				{
	                if(GetMoney(playerid) < PAPAGAN_NICK_FIYAT) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet ismini degistirmek icin paran yetersiz!");
	                else {
					ShowPlayerDialog(playerid, DIALOG_PAPAGAN_NICK, DIALOG_STYLE_INPUT, "Kopek Ismini Degistir", "{ecf0f1}Merhaba, Pet ismini degistirmek istiyorsun.\n\n{ecf0f1}Pet icin yeni bir isim gir ve belirle butonuna bas.", "Belirle", "Vazgec");
					}
				}
				case 2:
				{
				//FCNPC_GoToPlayer(PapaganInfo[playerid][papagan_id],playerid,//FCNPC_MOVE_TYPE_WALK);
				}
				case 3:
				{
                //FCNPC_GoToPlayer(PapaganInfo[playerid][papagan_id],playerid,//FCNPC_MOVE_TYPE_RUN);
				}
				case 4:
				{
				    new dialog[356];
				    strcat(dialog, "Yiyecek\tFiyat\tVeren Gram\n");
				    strcat(dialog, "{1abc9c}Küçük Mama\t$25\t1 gr.\n");
				    strcat(dialog, "{f1c40f}Orta Boy Mama\t$50\t3 gr.\n");
				    strcat(dialog, "{1abc9c}Büyük Boy Mama\t$300\t35 gr.\n");
					ShowPlayerDialog(playerid, DIALOG_PAPAGAN_YIYECEKLER, DIALOG_STYLE_TABLIST_HEADERS, "Pet Yiyecekleri", dialog, "Yedir", "Kapat");
				}

				case 5:
				{
	                if(PapaganInfo[playerid][papagan->Called] == true) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Once köpeði göndermelisiniz!");
					for(new i; papaganInfo:i < papaganInfo; i++) PapaganInfo[playerid][papaganInfo:i] = 0;
//				    new string[156];
	                SendClientMessage(playerid, -1, "{e67e22}BILGI: {ecf0f1}Köpeði saldiniz ve artik bir köpeðiniz yok.");
					format(PapaganInfo[playerid][papagan->Name], 24, "");
					PapaganInfo[playerid][papagan->Called] = false;
				}
			}
	    }
	    case DIALOG_PAPAGAN_NICK:
	    {
	        switch(response)
	        {
	            case 0: return true;
	            case 1:
	            {
	                if(GetMoney(playerid) < PAPAGAN_NICK_FIYAT) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet ismini degistirmek icin paran yetersiz!");
	                if(strlen(inputtext) < 1 || strlen(inputtext) > 24) return OnDialogResponse(playerid, DIALOG_PAPAGAN_YONETIM, 1, 1, ""), SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Minimum 1, maximum 24 karakter girebilirsiniz.");
	                SendClientMessage(playerid, -1, "{e67e22}BILGI: {ecf0f1}Basariyla köpeðin ismi degistirildi.");
	                new string[156];
	                format(string, sizeof string, "{e67e22}BILGI: {ecf0f1}Köpeðin yeni ismi {3498db}\"%s\" {ecf0f1}oldu.", inputtext);
	                SendClientMessage(playerid, -1, string);
					format(PapaganInfo[playerid][papagan->Name], 24, "%s", inputtext);
	            }
	        }
	    }
	    case DIALOG_PAPAGAN_YIYECEKLER:
	    {
	        if(!response) return true;
	        switch(listitem)
	        {
	            case 0:
				{
	                if(PapaganInfo[playerid][papagan->Called] == false) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Beslemek icin köpeðinizi cagirmalisiniz.");
	                if(GetMoney(playerid) < 25) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet yiyecegi icin $25 ihtiyacin var!");
					GivePapaganKilo(playerid, 1);
					GiveMoney(playerid, -25);
					SendClientMessage(playerid, -1, "{e67e22}BILGI: {ecf0f1}Pet beslendi.");
					GiveParrotHealth(playerid, 15);
				}
	            case 1:
				{
	                if(PapaganInfo[playerid][papagan->Called] == false) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Beslemek icin köpeðinizi cagirmalisiniz.");
	                if(GetMoney(playerid) < 50) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet yiyecegi icin $50 ihtiyacin var!");
					GivePapaganKilo(playerid, 3);
					GiveMoney(playerid, -50);
					SendClientMessage(playerid, -1, "{e67e22}BILGI: {ecf0f1}Pet beslendi.");
					GiveParrotHealth(playerid, 25);
				}
	            case 2:
				{
	                if(PapaganInfo[playerid][papagan->Called] == false) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Beslemek icin köpeðinizi cagirmalisiniz.");
	                if(GetMoney(playerid) < 300) return SendClientMessage(playerid, -1, "{c0392b}HATA: {ecf0f1}Pet yiyecegi icin $300 ihtiyacin var!");
					GivePapaganKilo(playerid, 35);
					GiveMoney(playerid, -300);
					SendClientMessage(playerid, -1, "{e67e22}BILGI: {ecf0f1}Pet beslendi.");
					GiveParrotHealth(playerid, 50);
				}
	        }
	    }
             case dialog_TUNING: {
                if( response ) {
                    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Araçta deðilsin." );
                    if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Þöför koltuðunda olmalýsýn." );
                                new vehicleid = GetPlayerVehicleID( playerid ), Float:Pos[6];

                    TPInfo[ playerid ][ tID ] = -1;

                                switch( listitem ) {
                        case 0: {

                                                for( new i = 0; i < NUMBER_TYPE_PAINTJOB; i++ ) {
                                        if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
                                                TPInfo[ playerid ][ tID ] = i;
                                                                break;
                                                        }
                                        }
                                                if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir paintjob yok.");

                                                new pid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tPaintjob ] = true;

												new carid = Car_GetID(vehicleid);
												TPInfo[ playerid ][ PJColor ][ 0 ] = CarData[carid][carColor1];
												TPInfo[ playerid ][ PJColor ][ 1 ] = CarData[carid][carColor2];


                            TuningTDControl( playerid, true );

                        ChangeVehicleColor( vehicleid, 1, 1 );
                        ChangeVehiclePaintjob( vehicleid, pjInfo[ pid ][ pNumber ] );
											//	GiveMoney(playerid, -TEKRENK);
                            format( globalstring, sizeof( globalstring ), "%s", pjInfo[ pid ][ pName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", pjInfo[ pid ][ pPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", pjInfo[ pid ][ pPriceEx ] );
												}
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 5 );
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                                        }
                        case 1: {
                                                ShowPlayerDialog( playerid, dialog_TUNING_2, DIALOG_STYLE_INPUT, "Modifiye Menüsü", "Input Color1 ID and Color2 ID.\nExample: 0 1", "Tamam", "{FF6347}Iptal" );
                        }
                        case 2: {

                            for( new i = 0; i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == CARMODTYPE_EXHAUST ) {
                                            if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                    TPInfo[ playerid ][ tID ] = i;
                                                                        break;
                                                                }
                                        }
                                                }
                            if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir eklenti yok.");

                                                new cid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tType ] = CARMODTYPE_EXHAUST;
                                                TPInfo[ playerid ][ tPaintjob ] = false;


                            TuningTDControl( playerid, true );

                            format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );

                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPriceEx ] );
												}

                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], -2, -5, 0 );
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        case 3: {

                            for( new i = 0; i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == CARMODTYPE_FRONT_BUMPER ) {
                                            if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                    TPInfo[ playerid ][ tID ] = i;
                                                                        break;
                                                                }
                                        }
                                                }
                            if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir eklenti yok.");

                                                new cid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tType ] = CARMODTYPE_FRONT_BUMPER;
                                                TPInfo[ playerid ][ tPaintjob ] = false;


                            TuningTDControl( playerid, true );

                            format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPriceEx ] );
												}
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 0.5 ); // done
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        case 4: {

                            for( new i = 0; i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == CARMODTYPE_REAR_BUMPER ) {
                                            if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                    TPInfo[ playerid ][ tID ] = i;
                                                                        break;
                                                                }
                                        }
                                                }
                            if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir eklenti yok.");

                                                new cid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tType ] = CARMODTYPE_REAR_BUMPER;
                                                TPInfo[ playerid ][ tPaintjob ] = false;


                            TuningTDControl( playerid, true );

                            format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPriceEx ] );
												}
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 0.5 ); // done
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        case 5: {

                            for( new i = 0; i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == CARMODTYPE_ROOF ) {
                                            if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                    TPInfo[ playerid ][ tID ] = i;
                                                                        break;
                                                                }
                                        }
                                                }
                            if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir eklenti yok.");

                                                new cid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tType ] = CARMODTYPE_ROOF;
                                                TPInfo[ playerid ][ tPaintjob ] = false;


                            TuningTDControl( playerid, true );

                            format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPriceEx ] );
												}
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 ); // done
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        case 6: {

                            for( new i = 0; i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == CARMODTYPE_SPOILER ) {
                                            if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                    TPInfo[ playerid ][ tID ] = i;
                                                                        break;
                                                                }
                                        }
                                                }
                            if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir eklenti yok.");

                                                new cid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tType ] = CARMODTYPE_SPOILER;
                                                TPInfo[ playerid ][ tPaintjob ] = false;


                            TuningTDControl( playerid, true );

                            format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPriceEx ] );
												}
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        case 7: {

                            for( new i = 0; i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == CARMODTYPE_SIDESKIRT ) {
                                            if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                    TPInfo[ playerid ][ tID ] = i;
                                                                        break;
                                                                }
                                        }
                                                }
                            if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir eklenti yok.");

                                                new cid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tType ] = CARMODTYPE_SIDESKIRT;
                                                TPInfo[ playerid ][ tPaintjob ] = false;


                            TuningTDControl( playerid, true );

                            format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPriceEx ] );
												}
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 );
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        case 8: {

                            for( new i = 0; i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == CARMODTYPE_WHEELS ) {
                                            if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                    TPInfo[ playerid ][ tID ] = i;
                                                                        break;
                                                                }
                                        }
                                                }
                            if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir eklenti yok.");

                                                new cid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tType ] = CARMODTYPE_WHEELS;
                                                TPInfo[ playerid ][ tPaintjob ] = false;


                            TuningTDControl( playerid, true );

                            format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPriceEx ] );
												}
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 ); // done
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        case 9: {

                            for( new i = 0; i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == CARMODTYPE_STEREO ) {
                                            if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                    TPInfo[ playerid ][ tID ] = i;
                                                                        break;
                                                                }
                                        }
                                                }
                            if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir eklenti yok.");

                                                new cid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tType ] = CARMODTYPE_STEREO;
                                                TPInfo[ playerid ][ tPaintjob ] = false;


                            TuningTDControl( playerid, true );

                            format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPriceEx ] );
												}
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 );
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        case 10: {

                            for( new i = 0; i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == CARMODTYPE_HYDRAULICS ) {
                                            if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                    TPInfo[ playerid ][ tID ] = i;
                                                                        break;
                                                                }
                                        }
                                                }
                            if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir eklenti yok.");

                                                new cid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tType ] = CARMODTYPE_HYDRAULICS;
                                                TPInfo[ playerid ][ tPaintjob ] = false;


                            TuningTDControl( playerid, true );

                            format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPriceEx ] );
												}
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 2, 2, 2 );
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        case 11: {

                            for( new i = 0; i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == CARMODTYPE_NITRO ) {
                                            if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                    TPInfo[ playerid ][ tID ] = i;
                                                                        break;
                                                                }
                                        }
                                                }
                            if( TPInfo[ playerid ][ tID ] == -1 ) return ModMenu(playerid, "Bu araç ile uyumlu baþka bir eklenti yok.");

                                                new cid = TPInfo[ playerid ][ tID ];
                                                TPInfo[ playerid ][ tType ] = CARMODTYPE_NITRO;
                                                TPInfo[ playerid ][ tPaintjob ] = false;


                            TuningTDControl( playerid, true );

                            format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ cid ][ cPriceEx ] );
												}
                                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                    }
                }
                else
				{
        			if(GetPVarInt(playerid, "Garajdami"))
				    {
				        SetCameraBehindPlayer(playerid);
				    }
			     	else ModifiyeCik(playerid);
				}


            }
            case dialog_TUNING_2:
			{
                        if( response )
						{
                            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Araçta deðilsin." );
                    		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Þöför koltuðunda olmalýsýn." );
                      		new vehicleid = GetPlayerVehicleID( playerid );
                            if( GetMoney( playerid ) < COLOR_PRICE ) return SendErrorMessage( playerid, "Yeterli paran yok!" );
                            new b1, b2;
                            if( sscanf( inputtext, "ii", b1, b2 ) ) return ShowPlayerDialog( playerid, dialog_TUNING_2, DIALOG_STYLE_INPUT, "Modifiye Menüsü", "Input Color1 ID and Color2 ID.\nExample: 0 1", "Tamam", "{FF6347}Iptal" );
                                if( b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255 ) return SendErrorMessage( playerid, "Renk kodu 0'dan küçük 255'ten büyük olamaz!");

                                SetVehicleColor( vehicleid, b1, b2 );
                                GiveMoney( playerid, -COLOR_PRICE );

                                ShowPlayerDialog( playerid, dialog_TUNING, DIALOG_STYLE_LIST, "Modifiye Menüsü", D_TEXT, "Tamam", "{FF6347}Iptal" );
                        }
                        else ModMenu(playerid, "Renk seçme iptal edildi.");
            }
	    	case DIALOG_ATTACH_INDEX_SELECTION:
	        {
        		if(response)
                {
//                    static id;
                    if(PlayerData[playerid][pASlot][listitem] != 0)
                    {
                        ShowPlayerDialog(playerid, DIALOG_ATTACH_EDITREPLACE, DIALOG_STYLE_LIST, \
                        "{FF0000}Aksesuar Seçenekleri", "Tak/Çýkar\nDüzenle\nSil", "Seç", "{FF6347}Iptal");
                        SetPVarInt(playerid, "AttachmentIndexSel", listitem);
					}
					else
                	{
                	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1558.7247,-1328.6305,1135.8818) && (GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL || GetFactionType(playerid) == FACTION_GOV ||  GetFactionType(playerid) == FACTION_MEDIC))
		   				{
	  					   	new modeller[sizeof(AttachCops)], modeller_str[sizeof(AttachCops)][24];
						 	for(new i; i < sizeof(modeller); ++i)
				 			{
								modeller[i] = AttachCops[i][olusumamodel];
								format(modeller_str[i], 24, "");
						 	}
						 	ShowPlayerPreviewModelDialog(playerid, AKSESUAR_SATINAL, DIALOG_STYLE_PREVMODEL, "Aksesuarlar", modeller, modeller_str, "Sec", "Iptal", sizeof (AttachCops));

                     		SetPVarInt(playerid, "AttachmentIndexSel", listitem);
                     		SetPVarInt(playerid, "PolisAksesuar", 1);
	           	        }
                        else if ((Business_Inside(playerid)) != -1)
						{
						    SetPVarInt(playerid, "PolisAksesuar", 0);
						//	if (BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner])
						//	    return SendErrorMessage(playerid, "Bu iþyeri kilitli, yada kimse satýn almamýþ!");

							new _modeller[sizeof(AttachmentObjects)], _modeller_str[sizeof(AttachmentObjects)][24];
						 	for(new i; i < sizeof(_modeller); ++i)
				 			{
								_modeller[i] = AttachmentObjects[i][attachmodel];
								format(_modeller_str[i], 24, "");
						 	}
						 	ShowPlayerPreviewModelDialog(playerid, AKSESUAR_SATINAL, DIALOG_STYLE_PREVMODEL, "Aksesuarlar", _modeller, _modeller_str, "Sec", "Iptal", sizeof (AttachmentObjects));
            	        	SetPVarInt(playerid, "AttachmentIndexSel", listitem);
            	        }
						else SendErrorMessage(playerid, "Bu slot boþ, slotu doldurmak için kýyafet maðazalarýna gidiniz.");
                    }
                }
                SQL_SaveAccessories(playerid);
                return 1;
            }
            case DIALOG_ATTACH_EDITREPLACE:
            {
                if(!response) return 0;
                switch(listitem)
                {
                    case 0:
                    {
						new slotid =  GetPVarInt(playerid, "AttachmentIndexSel");
						if(PlayerData[playerid][pTSlot][slotid])
						{
						    SendServerMessage(playerid, "Aksesuar çýkartýldý.");
							PlayerData[playerid][pTSlot][slotid] = false;
							RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
						}
						else
						{
							PlayerData[playerid][pTSlot][slotid] = true;
							SendServerMessage(playerid, "Aksesuar takýldý.");
							SetPlayerAttachedObject(playerid, slotid, PlayerData[playerid][pASlot][slotid], PlayerData[playerid][pABone][slotid], AccessoryData[playerid][slotid][0], AccessoryData[playerid][slotid][1], AccessoryData[playerid][slotid][2], AccessoryData[playerid][slotid][3], AccessoryData[playerid][slotid][4], AccessoryData[playerid][slotid][5], AccessoryData[playerid][slotid][6], AccessoryData[playerid][slotid][7], AccessoryData[playerid][slotid][8]);
						}
					}
					case 1:
					{
					    SendServerMessage(playerid, "ÝPUCU: {FFFF00}~k~~PED_SPRINT~{FFFFFF}'e basýlý tutarak kamerayý oynatabilirsiniz.");
					    EditAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
					}
					case 2:
					{
					    RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
                        new slotid =  GetPVarInt(playerid, "AttachmentIndexSel");
                        PlayerData[playerid][pASlot][slotid] = 0;
						DeletePVar(playerid, "AttachmentIndexSel");
						SendServerMessage(playerid, "Aksesuar silindi.");
					}
				}
				SQL_SaveAccessories(playerid);
                return 1;
            }
            case DIALOG_ATTACH_BONE_SELECTION:
            {
                if(response)
                {
                    SetPlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"), GetPVarInt(playerid, "AttachmentModelSel"), listitem+1);
                    EditAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
                    SendServerMessage(playerid, "ÝPUCU: {FFFF00}~k~~PED_SPRINT~{FFFFFF}'e basýlý tutarak kamerayý oynatabilirsiniz.");
                }
                new slotid = GetPVarInt(playerid, "AttachmentIndexSel");
                new modelid = GetPVarInt(playerid, "AttachmentModelSel");
    			PlayerData[playerid][pASlot][slotid] = modelid;
                DeletePVar(playerid, "AttachmentIndexSel");
                DeletePVar(playerid, "AttachmentModelSel");
                SQL_SaveAccessories(playerid);
                return 1;
            }
        }
		return 1;
}
stock GivePapaganKilo(playerid, kilo) PapaganInfo[playerid][papagan->Kilo] += kilo;
stock GiveParrotHealth(playerid, health)
{
	PapaganInfo[playerid][papagan->Can] += health;
	if(PapaganInfo[playerid][papagan->Can] > 100) return PapaganInfo[playerid][papagan->Can] = 100;
	return true;
}
public OnPlayerMakeCBug(playerid)
{
SendErrorMessage(playerid, "C-BUG yaptýðýn için atýldýn!");
KickEx(playerid);
return 1;
}
public SurfYapmissa(playerid, vehicleid)
{
new model = GetVehicleModel(vehicleid);
static Float:x, Float:y, Float:z;
if (model != 422 && model!= 452 && model!= 453 && model!= 454 && model!= 472 && model != 473 && model!= 484 && model!= 493 && model != 539 && model != 543 && model != 478 && model != 554)
{
GetPlayerPos(playerid, x, y, z);
JBC_SetPlayerPos(playerid, x + 8, y, z);
SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s'in ayaðý kaydý ve yere düþtü.", ReturnName(playerid, 0));
}
return 1;
}
public HizHilesiKullanmissa(playerid, speedtype)
{
Dialog_Show(playerid, Antihile, DIALOG_STYLE_MSGBOX, "ANTI-HILE DEVREDE!", " Sunucudan Kicklendiniz! \n Kickleyen: Sistem \n Kicklenme Gerekçeniz: Hile Kullanimi \n ", "Kapat", "");
KickEx(playerid);
    return 1;
}
public ModifiyeHilesiKullanmissa(playerid, vehicleid, componentid, illegal)
{
    if(illegal)
    {
Dialog_Show(playerid, Antihile, DIALOG_STYLE_MSGBOX, "ANTI-HILE DEVREDE!", " Sunucudan Kicklendiniz! \n Kickleyen: Sistem \n Kicklenme Gerekçeniz: Hile Kullanimi \n ", "Kapat", "");
KickEx(playerid);
    }
    return 1;
}
public HileyleTamirEdiyorsa(playerid)
{
Dialog_Show(playerid, Antihile, DIALOG_STYLE_MSGBOX, "ANTI-HILE DEVREDE!", " Sunucudan Kicklendiniz! \n Kickleyen: Sistem \n Kicklenme Gerekçeniz: Hile Kullanimi \n ", "Kapat", "");
KickEx(playerid);
return 1;
}

stock GetTickDiff(newtick, oldtick)
{
	if (oldtick < 0 && newtick >= 0) {
		return newtick - oldtick;
	} else if (oldtick >= 0 && newtick < 0 || oldtick > newtick) {
		return (cellmax - oldtick + 1) - (cellmin - newtick);
	}
	return newtick - oldtick;
}
public OnGameModeInit()
{

CreateDynamicObject(12938, 2149.31860, -1700.24500, 17.98168,   0.00000, 0.00000, -88.80000);
CreateDynamicObject(12940, 2148.39282, -1666.28088, 17.90306,   0.00000, 0.00000, -87.24002);
CreateDynamicObject(1264, 2175.75977, -1664.65320, 14.57031,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2175.12280, -1664.71887, 14.57031,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2174.78638, -1664.25952, 14.57031,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2175.23853, -1663.81653, 14.57031,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2174.99268, -1664.23755, 14.86930,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2175.29199, -1664.69495, 14.86930,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2175.41211, -1664.20374, 14.86930,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(14497, 2150.76831, -1692.10657, 14.58194,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1710, 2139.34204, -1677.13025, 14.07798,   0.00000, 0.00000, 59.88000);
CreateDynamicObject(1710, 2142.60400, -1681.23267, 14.07798,   0.00000, 0.00000, 147.48000);
CreateDynamicObject(1710, 2144.61060, -1676.07129, 14.07798,   0.00000, 0.00000, -98.57999);
CreateDynamicObject(1264, 2149.87866, -1668.77222, 14.27568,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2149.90942, -1668.16968, 14.27568,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2149.88501, -1667.67004, 14.27568,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2149.51147, -1668.22961, 14.27568,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2142.06396, -1672.97314, 14.27568,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2141.83276, -1672.45911, 14.27568,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2141.17041, -1672.52234, 14.27568,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1292, 2142.60107, -1698.29944, 14.58457,   0.00000, 0.00000, -135.00002);
CreateDynamicObject(1292, 2144.95630, -1668.28503, 14.58457,   0.00000, 0.00000, 35.45998);
CreateDynamicObject(1369, 2138.32373, -1697.41809, 14.67586,   0.00000, 0.00000, 145.91997);
CreateDynamicObject(1362, 2152.49536, -1692.97339, 14.66582,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1362, 2147.37793, -1695.83325, 14.66582,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1362, 2156.25806, -1684.60071, 14.66582,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1362, 2156.22729, -1686.21960, 14.66582,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1362, 2141.84131, -1677.72009, 14.66582,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3127, 2156.73511, -1677.40479, 10.35010,   0.00000, 0.00000, -151.07999);
CreateDynamicObject(3127, 2137.63330, -1689.36658, 10.28839,   0.00000, 0.00000, -151.07999);
CreateDynamicObject(1211, 2153.03320, -1684.62415, 14.13390,   68.93999, 91.92005, 0.00000);
CreateDynamicObject(1211, 2139.59253, -1683.14478, 14.13390,   68.93999, 91.92005, -99.89999);
CreateDynamicObject(1299, 2145.62036, -1701.98303, 14.04797,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1327, 2145.38452, -1678.47900, 14.43393,   -3.00000, 44.82001, 133.98000);
CreateDynamicObject(1440, 2143.98193, -1687.22375, 14.59416,   0.00000, 0.00000, 89.82001);
CreateDynamicObject(1440, 2147.37256, -1666.01880, 14.59416,   0.00000, 0.00000, 7.92000);
CreateDynamicObject(1227, 2128.45239, -1693.67664, 14.87828,   0.00000, 0.00000, 270.59988);
CreateDynamicObject(1227, 2128.56006, -1696.48328, 14.87828,   0.00000, 0.00000, 270.59988);
CreateDynamicObject(1227, 2167.95361, -1692.68176, 14.87583,   0.00000, 0.00000, 90.96001);
CreateDynamicObject(1227, 2167.93604, -1695.25269, 14.87583,   0.00000, 0.00000, 90.96001);
CreateDynamicObject(1264, 2168.69727, -1691.36865, 14.45872,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2168.02222, -1691.11560, 14.45872,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2168.88184, -1691.91138, 14.45872,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2168.54468, -1693.94714, 14.45872,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2168.28540, -1696.57434, 14.45872,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2167.50439, -1696.73254, 14.45872,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1264, 2167.46704, -1693.87158, 15.91056,   3.14159, 0.00000, 2.53073);
CreateDynamicObject(1946, 2148.16333, -1691.21643, 14.21075,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1946, 2141.51416, -1678.62427, 14.23054,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(946, 2147.35400, -1667.18530, 16.26323,   3.14159, 0.00000, -175.98010);
CreateDynamicObject(946, 2148.11987, -1698.82495, 16.26323,   3.14159, 0.00000, 361.68005);
CreateDynamicObject(19868, 2162.65942, -1718.58044, 14.28498,   0.00000, 0.00000, 0.72000);
CreateDynamicObject(19868, 2167.85425, -1718.52075, 14.28498,   0.00000, 0.00000, 0.72000);
CreateDynamicObject(19868, 2170.76270, -1715.86023, 14.28498,   0.00000, 0.00000, 82.01997);
CreateDynamicObject(19868, 2171.30444, -1710.68750, 14.28498,   0.00000, 0.00000, 86.99994);
CreateDynamicObject(19868, 2168.83154, -1707.44458, 14.28498,   0.00000, 0.00000, 165.89992);
CreateDynamicObject(19868, 2159.98926, -1715.91345, 14.28498,   0.00000, 0.00000, -84.83998);
CreateDynamicObject(19868, 2160.48926, -1710.82532, 14.28498,   0.00000, 0.00000, -106.01999);
CreateDynamicObject(946, 2161.38257, -1717.29382, 16.41716,   3.14159, 0.00000, 309.17996);
CreateDynamicObject(1946, 2166.35425, -1715.52869, 14.39479,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(946, 2170.12476, -1709.08154, 16.60114,   3.14159, 0.00000, 492.30029);
CreateDynamicObject(18663, 2137.72095, -1655.48169, 15.45434,   0.00000, 0.00000, 2.76000);
CreateDynamicObject(18663, 2131.69751, -1662.99036, 15.40218,   0.00000, 0.00000, 92.76000);
CreateDynamicObject(18663, 2155.69482, -1654.35889, 15.50738,   0.00000, 0.00000, 3.00000);
CreateDynamicObject(18663, 2155.78320, -1656.58044, 15.44910,   16.02000, 0.42000, 3.00000);
CreateDynamicObject(18663, 2166.64160, -1671.72937, 15.54291,   0.00000, 0.00000, 2.64000);
CreateDynamicObject(18663, 2164.26465, -1704.31567, 15.45391,   0.00000, 0.00000, 91.25999);
CreateDynamicObject(18663, 2139.51953, -1711.24780, 15.46285,   0.00000, 0.00000, 1.26000);
CreateDynamicObject(18663, 2132.32568, -1704.96716, 15.46772,   0.00000, 0.00000, -88.86000);
CreateDynamicObject(18663, 2134.03784, -1704.96008, 15.46772,   -59.22000, 178.31992, -88.86000);
CreateDynamicObject(2672, 2149.63647, -1695.53955, 14.37355,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2672, 2142.94458, -1675.05530, 14.37355,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19868, 2181.57593, -1654.95923, 14.28498,   0.00000, 0.00000, 79.19994);
CreateDynamicObject(19868, 2181.03491, -1656.71863, 14.28498,   0.00000, 0.00000, 67.61992);
CreateDynamicObject(19868, 2174.55078, -1659.72925, 14.28498,   0.00000, 0.00000, -24.24007);
CreateDynamicObject(19868, 2171.31445, -1656.17920, 14.28498,   0.00000, 0.00000, -70.98006);
CreateDynamicObject(19868, 2172.50854, -1652.10095, 14.28498,   0.00000, 0.00000, -140.82008);
CreateDynamicObject(19868, 2177.09375, -1651.07593, 14.28498,   0.00000, 0.00000, -191.40012);
CreateDynamicObject(19868, 2179.64380, -1651.64246, 14.28498,   0.00000, 0.00000, -198.24010);
CreateDynamicObject(2629, 2174.67749, -1652.40247, 14.05883,   0.00000, 0.00000, 23.40000);
CreateDynamicObject(2629, 2172.73193, -1654.55139, 14.05883,   0.00000, 0.00000, 70.13999);
CreateDynamicObject(2629, 2179.14209, -1652.88477, 14.05883,   0.00000, 0.00000, -31.08002);
CreateDynamicObject(11730, 2172.68091, -1658.40649, 14.08169,   0.00000, 0.00000, 136.14001);
CreateDynamicObject(11730, 2172.12280, -1657.50256, 14.08169,   0.00000, 0.00000, 117.36003);
CreateDynamicObject(11730, 2138.01465, -1679.24353, 14.08057,   0.00000, 0.00000, 126.71999);
CreateDynamicObject(11730, 2138.09863, -1677.57227, 14.08057,   0.00000, 37.56000, 83.03996);
CreateDynamicObject(11730, 2137.73022, -1678.23840, 14.08057,   0.00000, 0.00000, 95.21998);
CreateDynamicObject(11730, 2139.29150, -1680.90515, 14.08057,   -1.86000, 54.06001, 126.71999);
CreateDynamicObject(11730, 2157.13599, -1689.40576, 14.08040,   -34.26001, 7.32001, 197.69989);
CreateDynamicObject(2632, 2179.62744, -1656.36475, 14.08060,   -1.32000, 1.44000, -113.22002);
CreateDynamicObject(19868, 2172.24170, -1652.47778, 14.28498,   0.00000, 0.00000, -140.82008);
CreateDynamicObject(19868, 2171.15210, -1655.78076, 14.28498,   0.00000, 0.00000, -70.98006);
CreateDynamicObject(19868, 2174.04639, -1659.50635, 14.28498,   0.00000, 0.00000, -24.24007);
CreateDynamicObject(19868, 2180.80786, -1657.27942, 14.28498,   0.00000, 0.00000, 67.61992);
CreateDynamicObject(19868, 2181.66284, -1654.51196, 14.28498,   0.00000, 0.00000, 79.19994);
CreateDynamicObject(19868, 2170.77539, -1715.32190, 14.28498,   0.00000, 0.00000, 82.01997);
CreateDynamicObject(19868, 2171.25781, -1710.27747, 14.28498,   0.00000, 0.00000, 86.99994);
CreateDynamicObject(19868, 2168.06226, -1707.29675, 14.28498,   0.00000, 0.00000, 165.89992);
CreateDynamicObject(19868, 2160.33423, -1711.65112, 14.28498,   0.00000, 0.00000, -106.01999);
CreateDynamicObject(19868, 2159.93555, -1716.53259, 14.28498,   0.00000, 0.00000, -84.83998);
CreateDynamicObject(19868, 2163.12598, -1718.62549, 14.28498,   0.00000, 0.00000, 0.72000);
CreateDynamicObject(19868, 2168.21167, -1718.47168, 14.28498,   0.00000, 0.00000, 0.72000);
CreateDynamicObject(2063, 2139.78345, -1691.31750, 14.92751,   0.00000, 0.00000, 62.93998);
CreateDynamicObject(2063, 2156.92480, -1674.36243, 14.92751,   -8.58000, 0.00000, -128.28003);
CreateDynamicObject(2693, 2156.10254, -1690.90527, 14.77523,   0.00000, 0.00000, -129.65997);
CreateDynamicObject(2693, 2180.54004, -1659.34082, 14.77523,   0.00000, 0.00000, 7.08001);
CreateDynamicObject(2692, 2139.13208, -1697.93457, 14.64941,   0.00000, 0.00000, 164.04004);
CreateDynamicObject(2691, 2147.18018, -1664.98438, 15.45279,   0.00000, 0.00000, 2.70000);
CreateDynamicObject(2696, 2166.55762, -1669.55566, 15.54572,   0.00000, 0.00000, 91.73999);
CreateDynamicObject(2680, 2173.17603, -1658.13184, 15.07598,   0.00000, 0.00000, 122.88004);
CreateDynamicObject(2680, 2172.68091, -1657.39270, 15.07598,   0.00000, 0.00000, 122.88004);
CreateDynamicObject(2695, 2166.47974, -1704.25659, 15.90061,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2696, 2165.87915, -1704.27734, 15.90174,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2696, 2138.15430, -1678.12537, 15.11956,   0.00000, 0.00000, 122.16007);
CreateDynamicObject(2695, 2147.29517, -1667.27710, 17.82212,   -2.16000, 63.42003, 4.50000);

// LSFD interior

CreateDynamicObject(14595,1589.9450684,1799.3917236,2086.3300781,0.0000000,0.0000000,0.0000000); //object(paperchase02) (1)
CreateDynamicObject(14596,1599.3665771,1784.0727539,2081.4682617,0.0000000,0.0000000,0.0000000); //object(paperchase_stairs) (1)
CreateDynamicObject(14597,1580.4884033,1787.5781250,2090.1713867,0.0000000,0.0000000,0.0000000); //object(paperchase07) (1)
CreateDynamicObject(8079,1539.7926025,1806.0776367,2095.6491699,0.0000000,0.0000000,0.0000000); //object(hospital01_lvs) (1)
CreateDynamicObject(3051,1568.5115967,1790.4226074,2089.4978027,0.0000000,0.0000000,135.9999695); //object(lift_dr) (1)
CreateDynamicObject(3051,1569.6156006,1790.4393311,2089.5146484,0.0000000,0.0000000,316.0000000); //object(lift_dr) (2)
CreateDynamicObject(3051,1573.7093506,1790.4393311,2089.5146484,0.0000000,0.0000000,316.0000000); //object(lift_dr) (3)
CreateDynamicObject(3051,1572.5886230,1790.4226074,2089.4978027,0.0000000,0.0000000,135.9999084); //object(lift_dr) (4)
CreateDynamicObject(3857,1574.9459229,1790.9359131,2089.8664551,0.0000000,0.0000000,45.0000000); //object(ottosmash3) (1)
CreateDynamicObject(3857,1584.1228027,1790.9359131,2090.0646973,0.0000000,0.0000000,45.0000000); //object(ottosmash3) (2)
CreateDynamicObject(3857,1593.4812012,1790.9359131,2090.4116211,0.0000000,0.0000000,45.0000000); //object(ottosmash3) (3)
CreateDynamicObject(3857,1593.4812012,1784.2333984,2091.2202148,0.0000000,0.0000000,45.0000000); //object(ottosmash3) (4)
CreateDynamicObject(3857,1584.1060791,1784.2333984,2090.9072266,0.0000000,0.0000000,45.0000000); //object(ottosmash3) (5)
CreateDynamicObject(3857,1574.8790283,1784.2333984,2091.0559082,0.0000000,0.0000000,45.0000000); //object(ottosmash3) (6)
CreateDynamicObject(3857,1576.2326660,1782.9293213,2090.3620605,0.0000000,0.0000000,315.0000000); //object(ottosmash3) (7)
CreateDynamicObject(3857,1576.2326660,1792.1396484,2090.9562988,0.0000000,0.0000000,315.0000000); //object(ottosmash3) (8)
CreateDynamicObject(1997,1577.7744141,1791.7384033,2088.1691895,0.0000000,0.0000000,93.6999817); //object(hos_trolley) (1)
CreateDynamicObject(1997,1571.7353516,1785.3128662,2088.1691895,0.0000000,0.0000000,270.2698975); //object(hos_trolley) (2)
CreateDynamicObject(3394,1590.7586670,1794.7896729,2088.1691895,0.0000000,0.0000000,0.0000000); //object(a51_sdsk_2_) (1)
CreateDynamicObject(3395,1590.7562256,1798.6584473,2088.1691895,0.0000000,0.0000000,0.0000000); //object(a51_sdsk_3_) (1)
CreateDynamicObject(3396,1586.1424561,1774.6240234,2088.1691895,0.0000000,0.0000000,270.2694092); //object(a51_sdsk_4_) (1)
CreateDynamicObject(3397,1591.0815430,1781.3328857,2088.1765137,0.0000000,0.0000000,358.9191895); //object(a51_sdsk_1_) (1)
CreateDynamicObject(1990,1591.2563477,1774.5240479,2088.1691895,0.0000000,0.0000000,270.2698975); //object(kb_coolerlft) (1)
CreateDynamicObject(962,1584.4102783,1777.9465332,2089.2172852,89.9999695,0.0000000,89.7300110); //object(cj_t_ticket_ped) (1)
CreateDynamicObject(2202,1590.0156250,1783.4755859,2088.1791992,0.0000000,0.0000000,0.0000000); //object(photocopier_2) (1)
CreateDynamicObject(2186,1589.3861084,1774.6271973,2088.1691895,0.0000000,0.0000000,179.4597778); //object(photocopier_1) (1)
CreateDynamicObject(1808,1584.2253418,1784.8415527,2088.1691895,0.0000000,0.0000000,179.4597168); //object(cj_watercooler2) (1)
CreateDynamicObject(3386,1584.8519287,1800.5590820,2088.1791992,0.0000000,0.0000000,89.7299805); //object(a51_srack2_) (1)
CreateDynamicObject(3389,1591.3702393,1778.4584961,2087.5249023,0.0000000,0.0000000,0.0000000); //object(a51_srack1_) (1)
CreateDynamicObject(3383,1587.7800293,1796.1627197,2088.1691895,0.0000000,0.0000000,270.2698975); //object(a51_labtable1_) (1)
CreateDynamicObject(3383,1580.1687012,1796.1627197,2088.1691895,0.0000000,0.0000000,270.2698975); //object(a51_labtable1_) (2)
CreateDynamicObject(1997,1585.0085449,1792.4909668,2088.1691895,0.0000000,0.0000000,0.0000000); //object(hos_trolley) (3)
CreateDynamicObject(3384,1589.6893311,1774.9047852,2089.6118164,0.0000000,0.0000000,270.2698975); //object(a51_halbox_) (1)
CreateDynamicObject(2202,1589.4118652,1774.2114258,2090.9436035,0.0000000,180.0000000,358.9192505); //object(photocopier_2) (2)
CreateDynamicObject(2902,1588.6843262,1774.5859375,2089.5056152,0.0000000,270.0000000,0.0000000); //object(kmb_smokecan) (1)
CreateDynamicObject(2976,1586.3276367,1774.2121582,2089.0117188,0.0000000,0.0000000,0.0000000); //object(green_gloop) (1)
CreateDynamicObject(1990,1591.2563477,1775.5152588,2088.1691895,0.0000000,0.0000000,270.2698975); //object(kb_coolerlft) (2)
CreateDynamicObject(1990,1591.2563477,1776.5064697,2088.1691895,0.0000000,0.0000000,270.2698975); //object(kb_coolerlft) (3)
CreateDynamicObject(1990,1591.2563477,1777.4976807,2088.1691895,0.0000000,0.0000000,270.2698975); //object(kb_coolerlft) (4)
CreateDynamicObject(1990,1591.2563477,1778.4888916,2088.1691895,0.0000000,0.0000000,270.2698975); //object(kb_coolerlft) (5)
CreateDynamicObject(3383,1585.2055664,1780.7377930,2088.1765137,0.0000000,0.0000000,270.2698975); //object(a51_labtable1_) (3)
CreateDynamicObject(1997,1585.9125977,1783.3193359,2088.1765137,0.0000000,0.0000000,89.7294922); //object(hos_trolley) (4)
CreateDynamicObject(3387,1584.8109131,1776.9387207,2088.1691895,0.0000000,0.0000000,179.4597168); //object(a51_srack3_) (2)
CreateDynamicObject(3387,1584.8109131,1775.9475098,2088.1691895,0.0000000,0.0000000,179.4597168); //object(a51_srack3_) (3)
CreateDynamicObject(3394,1577.3962402,1796.8905029,2088.1691895,0.0000000,0.0000000,179.4597168); //object(a51_sdsk_2_) (2)
CreateDynamicObject(3396,1580.1514893,1800.4331055,2088.1765137,0.0000000,0.0000000,89.7291260); //object(a51_sdsk_4_) (2)
CreateDynamicObject(1990,1583.4355469,1800.7070312,2088.1691895,0.0000000,0.0000000,359.9995117); //object(kb_coolerlft) (6)
CreateDynamicObject(1990,1582.4443359,1800.7070312,2088.1691895,0.0000000,0.0000000,359.9995117); //object(kb_coolerlft) (7)
CreateDynamicObject(3395,1582.9207764,1792.9595947,2088.1691895,0.0000000,0.0000000,0.0000000); //object(a51_sdsk_3_) (2)
CreateDynamicObject(18084,1586.6721191,1790.2438965,2089.9707031,0.0000000,0.0000000,179.4597778); //object(barber_blinds) (1)
CreateDynamicObject(18084,1581.5871582,1790.2438965,2089.9707031,0.0000000,0.0000000,179.4597168); //object(barber_blinds) (2)
CreateDynamicObject(18084,1584.1457520,1790.2438965,2089.9707031,0.0000000,0.0000000,179.4597168); //object(barber_blinds) (3)
CreateDynamicObject(18084,1590.9790039,1790.2438965,2089.9707031,0.0000000,0.0000000,179.4597168); //object(barber_blinds) (4)
CreateDynamicObject(18084,1577.3292236,1790.2438965,2089.9707031,0.0000000,0.0000000,179.4597168); //object(barber_blinds) (5)
CreateDynamicObject(18084,1577.2629395,1784.9445801,2089.9707031,0.0000000,0.0000000,0.0000000); //object(barber_blinds) (9)
CreateDynamicObject(18084,1581.5877686,1784.9445801,2089.9707031,0.0000000,0.0000000,0.0000000); //object(barber_blinds) (10)
CreateDynamicObject(18084,1586.6894531,1784.9445801,2089.9707031,0.0000000,0.0000000,0.0000000); //object(barber_blinds) (11)
CreateDynamicObject(18084,1584.1469727,1784.9445801,2089.9707031,0.0000000,0.0000000,0.0000000); //object(barber_blinds) (12)
CreateDynamicObject(18084,1590.9473877,1784.9445801,2089.9707031,0.0000000,0.0000000,0.0000000); //object(barber_blinds) (13)
CreateDynamicObject(3383,1580.0610352,1779.3131104,2088.1865234,0.0000000,0.0000000,89.7296143); //object(a51_labtable1_) (4)
CreateDynamicObject(3394,1577.2227783,1778.8144531,2088.1791992,0.0000000,0.0000000,179.4592285); //object(a51_sdsk_2_) (3)
CreateDynamicObject(3396,1582.1047363,1774.8587646,2088.1791992,0.0000000,0.0000000,271.1735840); //object(a51_sdsk_4_) (3)
CreateDynamicObject(1990,1577.9779053,1774.3818359,2088.1791992,0.0000000,0.0000000,179.4592285); //object(kb_coolerlft) (8)
CreateDynamicObject(1990,1577.0046387,1774.3818359,2088.1791992,0.0000000,0.0000000,179.4592285); //object(kb_coolerlft) (9)
CreateDynamicObject(1990,1578.9356689,1774.3818359,2088.1791992,0.0000000,0.0000000,179.4592285); //object(kb_coolerlft) (10)
CreateDynamicObject(1997,1583.2911377,1782.7126465,2088.1791992,0.0000000,0.0000000,0.0000000); //object(hos_trolley) (5)
CreateDynamicObject(1997,1577.0897217,1781.5904541,2088.1791992,0.0000000,0.0000000,179.4597778); //object(hos_trolley) (6)
CreateDynamicObject(2604,1593.5015869,1795.4328613,2083.1738281,0.0000000,0.0000000,89.7299805); //object(cj_police_counter) (1)
CreateDynamicObject(2604,1593.5015869,1799.1140137,2083.1738281,0.0000000,0.0000000,89.7299805); //object(cj_police_counter) (2)
CreateDynamicObject(2199,1596.6538086,1794.5462646,2082.3769531,0.0000000,0.0000000,179.4597168); //object(med_office6_mc_1) (1)
CreateDynamicObject(2608,1598.8349609,1795.7137451,2084.5415039,0.0000000,0.0000000,270.2698975); //object(polce_shelf) (1)
CreateDynamicObject(2610,1598.6072998,1797.3149414,2083.2023926,0.0000000,0.0000000,269.1895752); //object(cj_p_fileing2) (1)
CreateDynamicObject(2610,1598.6072998,1797.8105469,2083.2023926,0.0000000,0.0000000,269.1895752); //object(cj_p_fileing2) (2)
CreateDynamicObject(2610,1598.6072998,1798.6022949,2083.2023926,0.0000000,0.0000000,269.1895752); //object(cj_p_fileing2) (3)
CreateDynamicObject(2610,1598.6072998,1799.0644531,2083.2023926,0.0000000,0.0000000,269.1895752); //object(cj_p_fileing2) (4)
CreateDynamicObject(2185,1598.2806396,1799.8857422,2082.3769531,0.0000000,0.0000000,89.7299805); //object(med_office6_desk_1) (1)
CreateDynamicObject(2558,1578.0596924,1823.5137939,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (1)
CreateDynamicObject(1997,1575.7210693,1823.3817139,2082.3769531,0.0000000,0.0000000,0.0000000); //object(hos_trolley) (7)
CreateDynamicObject(2558,1578.0596924,1821.6149902,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (2)
CreateDynamicObject(2558,1578.0596924,1821.6149902,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (3)
CreateDynamicObject(2185,1597.2491455,1803.8681641,2082.3769531,0.0000000,0.0000000,179.4597778); //object(med_office6_desk_1) (2)
CreateDynamicObject(2608,1596.1477051,1804.2321777,2084.5048828,0.0000000,0.0000000,359.9995117); //object(polce_shelf) (2)
CreateDynamicObject(2558,1577.2858887,1824.4554443,2082.3769531,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (4)
CreateDynamicObject(2558,1577.2858887,1822.6062012,2082.3769531,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (5)
CreateDynamicObject(2558,1582.1212158,1823.5137939,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (6)
CreateDynamicObject(2558,1585.7205811,1823.5137939,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (7)
CreateDynamicObject(2558,1585.7205811,1821.6149902,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (8)
CreateDynamicObject(2558,1582.1212158,1821.6472168,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (9)
CreateDynamicObject(2558,1581.3127441,1824.5408936,2082.3769531,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (10)
CreateDynamicObject(2558,1581.3127441,1822.6575928,2082.3769531,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (11)
CreateDynamicObject(2558,1584.9282227,1822.6575928,2082.3769531,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (12)
CreateDynamicObject(2558,1584.9282227,1824.5563965,2082.3769531,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (13)
CreateDynamicObject(1997,1579.7462158,1823.1849365,2082.3769531,0.0000000,0.0000000,0.0000000); //object(hos_trolley) (8)
CreateDynamicObject(1997,1583.4434814,1823.1849365,2082.3769531,0.0000000,0.0000000,0.0000000); //object(hos_trolley) (9)
CreateDynamicObject(1997,1587.4058838,1823.1849365,2082.3769531,0.0000000,0.0000000,0.0000000); //object(hos_trolley) (10)
CreateDynamicObject(2558,1578.0596924,1823.5137939,2083.6982422,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (14)
CreateDynamicObject(2558,1578.0596924,1821.6317139,2083.6982422,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (15)
CreateDynamicObject(2558,1577.2858887,1824.4554443,2083.6811523,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (16)
CreateDynamicObject(2558,1577.2858887,1822.6390381,2083.6811523,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (17)
CreateDynamicObject(2558,1582.1212158,1823.5137939,2083.7145996,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (18)
CreateDynamicObject(2558,1582.1212158,1821.6317139,2083.7145996,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (19)
CreateDynamicObject(2558,1585.7373047,1823.5150146,2083.7145996,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (20)
CreateDynamicObject(2558,1585.7373047,1821.6329346,2083.7145996,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (21)
CreateDynamicObject(2558,1581.3145752,1824.5545654,2083.7138672,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (22)
CreateDynamicObject(2558,1581.3145752,1822.6724854,2083.7138672,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (23)
CreateDynamicObject(2558,1584.9306641,1824.5062256,2083.7138672,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (24)
CreateDynamicObject(2558,1584.9306641,1822.7065430,2083.7138672,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (25)
CreateDynamicObject(2558,1578.0596924,1813.4597168,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (26)
CreateDynamicObject(2558,1578.0596924,1815.3746338,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (27)
CreateDynamicObject(2558,1582.1212158,1813.4597168,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (28)
CreateDynamicObject(2558,1582.1212158,1815.3746338,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (29)
CreateDynamicObject(2558,1585.7205811,1813.4101562,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (30)
CreateDynamicObject(2558,1585.7205811,1815.2755127,2082.3769531,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (31)
CreateDynamicObject(2558,1585.7205811,1815.2755127,2083.6818848,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (32)
CreateDynamicObject(2558,1585.7205811,1813.3773193,2083.6818848,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (33)
CreateDynamicObject(2558,1582.1212158,1815.3746338,2083.7145996,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (34)
CreateDynamicObject(2558,1582.1212158,1813.5092773,2083.7145996,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (35)
CreateDynamicObject(2558,1578.0596924,1815.3746338,2083.7150879,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (36)
CreateDynamicObject(2558,1578.0596924,1813.4925537,2083.7150879,0.0000000,0.0000000,89.9999390); //object(curtain_1_closed) (37)
CreateDynamicObject(2558,1577.2858887,1816.3676758,2082.3769531,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (38)
CreateDynamicObject(2558,1577.2858887,1814.4694824,2082.3769531,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (39)
CreateDynamicObject(2558,1577.2858887,1814.4694824,2083.7304688,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (40)
CreateDynamicObject(2558,1577.2858887,1816.3843994,2083.7304688,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (41)
CreateDynamicObject(2558,1581.3306885,1816.3843994,2083.7304688,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (42)
CreateDynamicObject(2558,1581.3306885,1816.3843994,2082.3928223,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (43)
CreateDynamicObject(2558,1581.3306885,1814.5017090,2082.3928223,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (44)
CreateDynamicObject(2558,1581.3306885,1814.5017090,2083.7307129,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (45)
CreateDynamicObject(2558,1584.9282227,1814.5017090,2083.6811523,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (46)
CreateDynamicObject(2558,1584.9282227,1816.2518311,2083.6811523,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (47)
CreateDynamicObject(2558,1584.9282227,1816.2518311,2082.3764648,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (48)
CreateDynamicObject(2558,1584.9282227,1814.3864746,2082.3764648,0.0000000,0.0000000,270.0000000); //object(curtain_1_closed) (49)
CreateDynamicObject(1997,1579.8160400,1814.4199219,2082.3769531,0.0000000,0.0000000,179.4597168); //object(hos_trolley) (11)
CreateDynamicObject(1997,1575.8034668,1814.4199219,2082.3769531,0.0000000,0.0000000,179.4597168); //object(hos_trolley) (12)
CreateDynamicObject(1997,1583.4786377,1814.4199219,2082.3769531,0.0000000,0.0000000,179.4597168); //object(hos_trolley) (13)
CreateDynamicObject(1722,1574.3746338,1824.5329590,2082.3769531,0.0000000,0.0000000,189.4298096); //object(off_chairnu) (1)
CreateDynamicObject(1722,1584.8319092,1824.4156494,2082.3769531,0.0000000,0.0000000,139.5797119); //object(off_chairnu) (2)
CreateDynamicObject(1722,1590.3077393,1819.8892822,2082.3769531,0.0000000,0.0000000,89.4602661); //object(off_chairnu) (3)
CreateDynamicObject(1722,1590.2502441,1820.9119873,2082.3769531,0.0000000,0.0000000,119.3702087); //object(off_chairnu) (4)
CreateDynamicObject(1722,1585.0869141,1815.1040039,2082.3769531,0.0000000,0.0000000,89.4602356); //object(off_chairnu) (5)
CreateDynamicObject(1808,1587.0848389,1813.1579590,2082.3769531,0.0000000,0.0000000,179.4597168); //object(cj_watercooler2) (2)
CreateDynamicObject(1808,1574.1185303,1819.1594238,2082.3769531,0.0000000,0.0000000,89.7296143); //object(cj_watercooler2) (3)
CreateDynamicObject(1713,1591.3900146,1818.7053223,2082.3769531,0.0000000,0.0000000,270.0000000); //object(kb_couch04) (1)
CreateDynamicObject(1713,1591.3900146,1815.3878174,2082.3769531,0.0000000,0.0000000,270.0000000); //object(kb_couch04) (2)
CreateDynamicObject(1997,1579.7867432,1803.8851318,2082.3769531,0.0000000,0.0000000,89.7296143); //object(hos_trolley) (14)
CreateDynamicObject(1997,1571.3593750,1795.5272217,2082.3769531,0.0000000,0.0000000,299.0991211); //object(hos_trolley) (15)
CreateDynamicObject(1997,1573.6788330,1795.1413574,2082.3837891,0.0000000,0.0000000,269.1890869); //object(hos_trolley) (16)
CreateDynamicObject(1808,1582.8746338,1794.6979980,2082.3769531,0.0000000,0.0000000,179.4597168); //object(cj_watercooler2) (4)
CreateDynamicObject(1533,1566.3669434,1794.3979492,2082.3837891,0.0000000,0.0000000,179.4597778); //object(gen_doorext12) (1)
CreateDynamicObject(1713,1590.7554932,1783.2221680,2082.3769531,0.0000000,0.0000000,180.2697144); //object(kb_couch04) (3)
CreateDynamicObject(1713,1587.5203857,1784.9072266,2082.3769531,0.0000000,0.0000000,90.5395813); //object(kb_couch04) (4)
CreateDynamicObject(1713,1587.5203857,1787.8443604,2082.3769531,0.0000000,0.0000000,90.5395813); //object(kb_couch04) (5)
CreateDynamicObject(14401,1586.6789551,1772.0677490,2082.7026367,0.0000000,0.0000000,0.0000000); //object(bench1) (1)
CreateDynamicObject(14532,1574.6597900,1820.3315430,2083.3596191,0.0000000,0.0000000,330.0898438); //object(tv_stand_driv) (1)
CreateDynamicObject(2186,1598.3822021,1803.2591553,2082.3769531,0.0000000,0.0000000,270.2698975); //object(photocopier_1) (2)
CreateDynamicObject(2380,1578.3051758,1785.6319580,2083.8366699,0.0000000,0.0000000,180.0000000); //object(cj_suits) (1)
CreateDynamicObject(14401,1563.6298828,1782.5660400,2082.7026367,0.0000000,0.0000000,270.2698975); //object(bench1) (2)
CreateDynamicObject(14401,1562.6882324,1782.5660400,2082.7026367,0.0000000,0.0000000,270.2698975); //object(bench1) (3)
CreateDynamicObject(2384,1577.8652344,1793.0686035,2083.1367188,0.0000000,0.0000000,29.9100037); //object(cj_8_jeans_dark) (1)
CreateDynamicObject(14782,1581.9439697,1790.5592041,2083.3999023,0.0000000,0.0000000,270.2698975); //object(int3int_boxing30) (1)
CreateDynamicObject(2517,1574.9835205,1793.1630859,2082.3837891,0.0000000,0.0000000,89.7299805); //object(cj_shower1) (1)
CreateDynamicObject(2517,1574.9835205,1792.0411377,2082.3837891,0.0000000,0.0000000,89.7299805); //object(cj_shower1) (2)
CreateDynamicObject(2517,1574.9835205,1790.9018555,2082.3837891,0.0000000,0.0000000,89.7299805); //object(cj_shower1) (3)
CreateDynamicObject(2517,1574.9835205,1789.7792969,2082.3837891,0.0000000,0.0000000,89.7299805); //object(cj_shower1) (4)
CreateDynamicObject(955,1585.2828369,1804.0130615,2082.7734375,0.0000000,0.0000000,0.0000000); //object(cj_ext_sprunk) (1)
CreateDynamicObject(2082,1587.0937500,1782.7861328,2082.3769531,0.0000000,0.0000000,0.0000000); //object(coffee_med_3) (1)
CreateDynamicObject(16656,1591.3635254,1795.9122314,2073.7622070,0.0000000,0.0000000,179.4597168); //object(a51_rocketlab) (1)
CreateDynamicObject(16656,1590.3562012,1795.9122314,2073.5144043,0.0000000,0.0000000,179.4597168); //object(a51_rocketlab) (2)
CreateDynamicObject(2004,1591.0203857,1787.3232422,2071.7194824,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (1)
CreateDynamicObject(2004,1591.0203857,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (2)
CreateDynamicObject(2004,1590.1778564,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (3)
CreateDynamicObject(2004,1589.3693848,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (4)
CreateDynamicObject(2004,1588.5274658,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (5)
CreateDynamicObject(2004,1587.7183838,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (6)
CreateDynamicObject(2004,1586.8758545,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (7)
CreateDynamicObject(2004,1586.0333252,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (8)
CreateDynamicObject(2004,1585.1907959,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (9)
CreateDynamicObject(2004,1584.3482666,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (10)
CreateDynamicObject(2004,1583.5057373,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (11)
CreateDynamicObject(2004,1582.6632080,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (12)
CreateDynamicObject(2004,1581.8206787,1787.3232422,2072.5620117,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (13)
CreateDynamicObject(2004,1590.1778564,1787.3232422,2071.7033691,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (14)
CreateDynamicObject(2004,1589.3693848,1787.3232422,2071.7021484,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (16)
CreateDynamicObject(2004,1588.5274658,1787.3232422,2071.6875000,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (17)
CreateDynamicObject(2004,1587.7183838,1787.3232422,2071.6860352,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (18)
CreateDynamicObject(2004,1586.8758545,1787.3232422,2071.6877441,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (19)
CreateDynamicObject(2004,1586.0333252,1787.3232422,2071.6860352,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (20)
CreateDynamicObject(2004,1585.1907959,1787.3232422,2071.6855469,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (21)
CreateDynamicObject(2004,1584.3482666,1787.3232422,2071.6853027,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (22)
CreateDynamicObject(2004,1583.5057373,1787.3232422,2071.6862793,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (23)
CreateDynamicObject(2004,1582.6632080,1787.3232422,2071.6857910,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (24)
CreateDynamicObject(2004,1581.8206787,1787.3232422,2071.7028809,0.0000000,0.0000000,179.4597168); //object(cr_safe_door) (25)
CreateDynamicObject(3051,1586.4233398,1804.7360840,2072.1245117,0.0000000,0.0000000,316.0000000); //object(lift_dr) (5)
CreateDynamicObject(3051,1585.2846680,1804.7360840,2072.1245117,0.0000000,0.0000000,135.4598389); //object(lift_dr) (6)
CreateDynamicObject(1990,1591.0474854,1801.3507080,2070.7126465,0.0000000,0.0000000,270.2696533); //object(kb_coolerlft) (11)
CreateDynamicObject(1990,1591.0474854,1800.3929443,2070.7126465,0.0000000,0.0000000,270.2696533); //object(kb_coolerlft) (12)
CreateDynamicObject(1990,1591.0474854,1799.4184570,2070.7126465,0.0000000,0.0000000,270.2696533); //object(kb_coolerlft) (13)
CreateDynamicObject(1990,1591.0474854,1798.4439697,2070.7126465,0.0000000,0.0000000,270.2696533); //object(kb_coolerlft) (14)
CreateDynamicObject(1990,1591.0970459,1798.4439697,2070.7126465,0.0000000,0.0000000,89.7293701); //object(kb_coolerlft) (15)
CreateDynamicObject(3383,1583.2536621,1799.3745117,2070.7622070,0.0000000,0.0000000,270.2698975); //object(a51_labtable1_) (5)
CreateDynamicObject(3383,1597.2316895,1795.5308838,2070.7622070,0.0000000,0.0000000,180.5397949); //object(a51_labtable1_) (6)
CreateDynamicObject(2419,1581.4709473,1790.3934326,2070.7692871,0.0000000,0.0000000,89.7299805); //object(cj_ff_worktop_2) (1)
CreateDynamicObject(2419,1590.5161133,1797.1351318,2070.7692871,0.0000000,0.0000000,270.2698975); //object(cj_ff_worktop_2) (2)
CreateDynamicObject(2419,1601.4829102,1790.3630371,2070.7622070,0.0000000,0.0000000,270.2698975); //object(cj_ff_worktop_2) (3)
CreateDynamicObject(1990,1601.7761230,1796.6184082,2070.7622070,0.0000000,0.0000000,270.2696533); //object(kb_coolerlft) (16)
CreateDynamicObject(1990,1601.7761230,1795.6271973,2070.7622070,0.0000000,0.0000000,270.2696533); //object(kb_coolerlft) (17)
CreateDynamicObject(1990,1601.7761230,1794.6359863,2070.7622070,0.0000000,0.0000000,270.2696533); //object(kb_coolerlft) (18)
CreateDynamicObject(1990,1601.7761230,1793.6447754,2070.7622070,0.0000000,0.0000000,270.2696533); //object(kb_coolerlft) (19)
CreateDynamicObject(1990,1601.8256836,1793.6447754,2070.7622070,0.0000000,0.0000000,89.7293701); //object(kb_coolerlft) (20)
CreateDynamicObject(2146,1590.1684570,1789.1000977,2071.2478027,0.0000000,0.0000000,0.0000000); //object(cj_trolly1) (1)
CreateDynamicObject(2146,1593.6528320,1788.2913818,2071.2478027,0.0000000,0.0000000,0.0000000); //object(cj_trolly1) (2)
CreateDynamicObject(2146,1593.5150146,1795.3706055,2071.2478027,0.0000000,0.0000000,0.0000000); //object(cj_trolly1) (3)
CreateDynamicObject(2146,1589.3315430,1802.9776611,2071.2548828,0.0000000,0.0000000,250.3298950); //object(cj_trolly1) (4)
CreateDynamicObject(1533,1594.2753906,1787.0407715,2076.5749512,0.0000000,0.0000000,89.7299805); //object(gen_doorext12) (2)
CreateDynamicObject(2419,1591.8536377,1800.8330078,2072.6525879,0.0000000,0.0000000,270.2698975); //object(cj_ff_worktop_2) (4)
CreateDynamicObject(2419,1591.8536377,1799.3641357,2072.6525879,0.0000000,0.0000000,270.2698975); //object(cj_ff_worktop_2) (5)
CreateDynamicObject(1806,1594.6705322,1796.1933594,2082.3769531,0.0000000,0.0000000,29.9100037); //object(med_office_chair) (1)
CreateDynamicObject(1806,1597.1790771,1800.7668457,2082.3769531,0.0000000,0.0000000,280.2398682); //object(med_office_chair) (2)
CreateDynamicObject(1806,1596.7473145,1802.6975098,2082.3769531,0.0000000,0.0000000,19.9395752); //object(med_office_chair) (3)

// LSPD Ýnt

CreateDynamicObject(1649,250.7998000,119.1992200,1005.0799600,6.0040000,0.0000000,0.0000000); //object(wglasssmash) (1)
CreateDynamicObject(1649,246.3994100,119.1992200,1005.0799600,6.0040000,0.0000000,0.0000000); //object(wglasssmash) (2)
CreateDynamicObject(1649,241.9892600,119.1992200,1005.0799600,6.0040000,0.0000000,0.0000000); //object(wglasssmash) (3)
CreateDynamicObject(1649,246.3000000,119.2000000,1005.0999800,354.0000000,0.0000000,180.0000000); //object(wglasssmash) (5)
CreateDynamicObject(1649,242.0000000,119.1992200,1005.0999800,353.9960000,0.0000000,179.9950000); //object(wglasssmash) (6)
CreateDynamicObject(1649,250.6992200,119.1992200,1005.0799600,353.9960000,0.0000000,179.9950000); //object(wglasssmash) (7)
CreateDynamicObject(8674,253.0996100,118.6992200,1005.0999800,0.0000000,179.9950000,270.0000000); //object(csrsfence02_lvs) (1)
CreateDynamicObject(8674,239.7000000,109.0000000,1005.0999800,0.0000000,180.0000000,270.0000000); //object(csrsfence02_lvs) (2)
CreateDynamicObject(1722,259.2000100,107.8000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (1)
CreateDynamicObject(1722,259.2000100,108.6000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (2)
CreateDynamicObject(1722,259.2000100,109.4000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (3)
CreateDynamicObject(1722,259.2000100,110.2000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (4)
CreateDynamicObject(1722,259.2000100,111.0000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (5)
CreateDynamicObject(1722,260.3999900,107.8000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (6)
CreateDynamicObject(1722,260.3999900,108.6000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (7)
CreateDynamicObject(1722,260.3999900,109.4000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (8)
CreateDynamicObject(1722,260.3999900,110.2000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (9)
CreateDynamicObject(1722,260.3999900,111.0000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (10)
CreateDynamicObject(1722,261.7000100,107.8000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (11)
CreateDynamicObject(1722,261.7000100,108.6000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (12)
CreateDynamicObject(1722,261.7000100,109.4000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (13)
CreateDynamicObject(1722,261.7000100,110.2000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (14)
CreateDynamicObject(1722,261.7000100,111.0000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(off_chairnu) (15)
CreateDynamicObject(4100,226.1000100,116.6000000,999.5000000,0.0000000,0.0000000,140.2500000); //object(meshfence1_lan) (1)
CreateDynamicObject(4100,228.8000000,118.3500100,999.4000200,0.2500000,0.0000000,318.8500000); //object(meshfence1_lan) (2)
CreateDynamicObject(2463,213.2700000,119.3000000,997.7999900,0.0000000,0.0000000,90.0000000); //object(cj_hobby_shelf_2) (1)
CreateDynamicObject(2463,213.2700000,120.7950000,997.7999900,0.0000000,0.0000000,90.0000000); //object(cj_hobby_shelf_2) (2)
CreateDynamicObject(1616,219.7000000,117.2000000,1001.5999800,0.0000000,0.0000000,0.0000000); //object(nt_securecam1_01) (1)
CreateDynamicObject(4100,222.3000000,124.9000000,999.7000100,0.0000000,0.0000000,320.0000000); //object(meshfence1_lan) (3)
CreateDynamicObject(1649,223.8000000,112.9000000,1011.5999800,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (4)
CreateDynamicObject(1649,219.3000000,113.0000000,1011.5999800,0.0000000,0.0000000,179.9950000); //object(wglasssmash) (8)
CreateDynamicObject(1649,223.7000000,113.0000000,1011.5999800,0.0000000,0.0000000,179.9950000); //object(wglasssmash) (9)
CreateDynamicObject(1649,219.3999900,112.9000000,1011.5999800,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (10)
CreateDynamicObject(1649,232.8000000,122.2000000,1010.7999900,0.0000000,0.0000000,90.0000000); //object(wglasssmash) (11)
CreateDynamicObject(1649,232.8000000,126.5500000,1010.7999900,0.0000000,0.0000000,90.0000000); //object(wglasssmash) (12)
CreateDynamicObject(3051,239.3000000,114.2890000,1010.5000000,0.0000000,0.0000000,45.0000000); //object(lift_dr) (1)
CreateDynamicObject(3051,239.3100000,115.5000000,1010.5000000,0.0000000,0.0000000,226.7500000); //object(lift_dr) (2)
CreateDynamicObject(14782,271.0996100,119.3994100,1004.5999800,0.0000000,0.0000000,90.0000000); //object(int3int_boxing30) (1)
CreateDynamicObject(14401,274.7999900,104.2000000,1003.9000200,0.0000000,0.0000000,0.5000000); //object(bench1) (1)
CreateDynamicObject(2517,269.0000000,120.3000000,1003.5999800,0.0000000,0.0000000,272.5000000); //object(cj_shower1) (1)
CreateDynamicObject(2517,265.2000100,120.1000000,1003.5999800,0.0000000,0.0000000,90.4990000); //object(cj_shower1) (2)
CreateDynamicObject(2518,267.3999900,120.2000000,1003.5999800,0.0000000,0.0000000,0.0000000); //object(cj_b_sink2) (1)
CreateDynamicObject(2518,266.1000100,120.3000000,1003.5999800,0.0000000,0.0000000,0.0000000); //object(cj_b_sink2) (2)
CreateDynamicObject(2520,269.0000000,116.6000000,1003.5999800,0.0000000,0.0000000,270.7500000); //object(cj_shower2) (1)
CreateDynamicObject(2700,264.1000100,116.4000000,1006.4000200,0.0000000,5.7500000,28.7500000); //object(cj_sex_tv2) (1)
CreateDynamicObject(14401,264.6000100,134.7000000,1003.9000200,0.0000000,0.0000000,180.0000000); //object(bench1) (2)
CreateDynamicObject(2844,272.3999900,119.8000000,1004.2000100,0.0000000,0.0000000,79.0000000); //object(gb_bedclothes03) (1)
CreateDynamicObject(2843,272.3999900,120.0000000,1004.2000100,0.0000000,0.0000000,0.0000000); //object(gb_bedclothes02) (1)
CreateDynamicObject(1892,245.8999900,107.6000000,1002.2000100,0.0000000,0.0000000,0.0000000); //object(security_gatsh) (1)
CreateDynamicObject(1808,268.7000100,107.5000000,1007.7999900,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (1)
CreateDynamicObject(1893,222.0000000,109.8000000,1013.2000100,0.0000000,0.0000000,0.0000000); //object(shoplight1) (1)
CreateDynamicObject(1671,218.5000000,110.9000000,1002.7000100,0.0000000,0.0000000,182.2500000); //object(swivelchair_a) (1)
CreateDynamicObject(1671,215.8999900,110.8000000,1002.7000100,0.0000000,0.0000000,194.4970000); //object(swivelchair_a) (2)
CreateDynamicObject(1671,219.8000000,114.2000000,1002.7000100,0.0000000,0.0000000,185.2470000); //object(swivelchair_a) (3)
CreateDynamicObject(1671,215.3999900,114.2000000,1002.7000100,0.0000000,0.0000000,185.2460000); //object(swivelchair_a) (4)
CreateDynamicObject(1671,222.2998000,107.7998000,1002.7000100,0.0000000,0.0000000,97.9930000); //object(swivelchair_a) (5)
CreateDynamicObject(9257,147.8000000,130.0549900,1034.5000000,0.0000000,0.0000000,0.0000000); //object(sfn_coast05) (1)
CreateDynamicObject(1671,222.3000000,110.3000000,1002.7000100,0.0000000,0.0000000,97.9930000); //object(swivelchair_a) (6)
CreateDynamicObject(1998,235.1000100,122.6000000,1002.2000100,0.0000000,0.0000000,90.0000000); //object(officedesk1l) (1)
CreateDynamicObject(2008,234.1000100,125.6000000,1002.2000100,0.0000000,0.0000000,90.2500000); //object(officedesk1) (1)
CreateDynamicObject(2606,232.2000000,124.7000000,1003.9000200,0.0000000,0.0000000,91.0000000); //object(cj_police_counter2) (1)
CreateDynamicObject(1616,218.1000100,107.4000000,1012.9000200,0.0000000,0.0000000,249.2500000); //object(nt_securecam1_01) (2)
CreateDynamicObject(2606,232.2000000,124.7000000,1004.3499800,0.0000000,0.0000000,91.0000000); //object(cj_police_counter2) (2)
CreateDynamicObject(1671,235.1000100,126.3000000,1002.7000100,0.0000000,0.0000000,270.0000000); //object(swivelchair_a) (7)
CreateDynamicObject(1671,235.1000100,123.7000000,1002.7000100,0.0000000,0.0000000,277.5000000); //object(swivelchair_a) (8)
CreateDynamicObject(2186,214.1000100,107.7000000,1002.2000100,0.0000000,0.0000000,90.7500000); //object(photocopier_1) (1)
CreateDynamicObject(1808,235.3000000,119.8000000,1002.2000100,0.0000000,0.0000000,271.0000000); //object(cj_watercooler2) (2)
CreateDynamicObject(2008,226.0000000,112.2000000,1002.2000100,0.0000000,0.0000000,270.0000000); //object(officedesk1) (2)
CreateDynamicObject(2008,230.0000000,111.2000000,1002.2000100,0.0000000,0.0000000,90.5000000); //object(officedesk1) (3)
CreateDynamicObject(2008,225.8999900,108.7000000,1002.2000100,0.0000000,0.0000000,269.0000000); //object(officedesk1) (4)
CreateDynamicObject(2008,230.0000000,107.6000000,1002.2000100,0.0000000,0.0000000,90.2500000); //object(officedesk1) (5)
CreateDynamicObject(638,243.2000000,107.5000000,1002.9000200,0.0000000,0.0000000,270.0000000); //object(kb_planter_bush) (1)
CreateDynamicObject(638,249.5000000,107.5000000,1002.9000200,0.0000000,0.0000000,270.0000000); //object(kb_planter_bush) (2)
CreateDynamicObject(1671,225.0000000,111.6000000,1002.7000100,0.0000000,0.0000000,85.7500000); //object(swivelchair_a) (9)
CreateDynamicObject(1671,224.8999900,108.0000000,1002.7000100,0.0000000,0.0000000,87.7480000); //object(swivelchair_a) (10)
CreateDynamicObject(1671,230.8999900,108.3000000,1002.7000100,0.0000000,0.0000000,271.2480000); //object(swivelchair_a) (11)
CreateDynamicObject(1671,231.0000000,111.9000000,1002.7000100,0.0000000,0.0000000,271.2470000); //object(swivelchair_a) (12)
CreateDynamicObject(2186,229.8999900,115.3000000,1002.2000100,0.0000000,0.0000000,0.0000000); //object(photocopier_1) (2)
CreateDynamicObject(1808,227.7000000,115.6000000,1002.2000100,0.0000000,0.0000000,0.0000000); //object(cj_watercooler2) (3)
CreateDynamicObject(2260,224.8000000,110.4000000,1004.0999800,0.0000000,0.0000000,89.7500000); //object(frame_slim_1) (1)
CreateDynamicObject(2256,229.2000000,115.7000000,1004.5999800,0.0000000,0.0000000,0.0000000); //object(frame_clip_3) (1)
CreateDynamicObject(2258,231.8000000,110.6000000,1004.5000000,0.0000000,0.0000000,271.7500000); //object(frame_clip_5) (1)
CreateDynamicObject(1722,228.6000100,111.4000000,1002.2000100,0.0000000,0.2500000,277.7500000); //object(off_chairnu) (16)
CreateDynamicObject(1722,227.3000000,112.2000000,1002.2000100,0.0000000,0.2470000,97.9980000); //object(off_chairnu) (17)
CreateDynamicObject(1722,227.3000000,111.2000000,1002.2000100,0.0000000,0.2470000,85.7430000); //object(off_chairnu) (30)
CreateDynamicObject(1722,227.3000000,108.5000000,1002.2000100,0.0000000,0.2470000,90.9870000); //object(off_chairnu) (31)
CreateDynamicObject(1722,228.6000100,107.8000000,1002.2000100,0.0000000,0.2470000,277.9830000); //object(off_chairnu) (34)
CreateDynamicObject(2828,230.0000000,125.2000000,1010.1400100,0.0000000,0.0000000,0.0000000); //object(gb_ornament02) (1)
CreateDynamicObject(1722,223.7000000,109.1000000,1009.2000100,0.0000000,0.0000000,79.2500000); //object(off_chairnu) (35)
CreateDynamicObject(1722,223.7000000,110.3000000,1009.2000100,0.0000000,0.0000000,97.7490000); //object(off_chairnu) (40)
CreateDynamicObject(1722,221.1000100,109.8000000,1009.2000100,0.0000000,0.0000000,269.7480000); //object(off_chairnu) (41)
CreateDynamicObject(2173,271.1000100,108.6000000,1007.7999900,0.0000000,0.0000000,270.0000000); //object(med_office_desk_3) (1)
CreateDynamicObject(2173,270.8999900,112.1000000,1007.7999900,0.0000000,0.0000000,269.4970000); //object(med_office_desk_3) (2)
CreateDynamicObject(2173,273.2999900,108.6000000,1007.7999900,0.0000000,0.0000000,269.7470000); //object(med_office_desk_3) (4)
CreateDynamicObject(2173,275.5000000,108.6000000,1007.7999900,0.0000000,0.0000000,269.7470000); //object(med_office_desk_3) (5)
CreateDynamicObject(2173,273.2000100,112.1000000,1007.7999900,0.0000000,0.0000000,269.4920000); //object(med_office_desk_3) (6)
CreateDynamicObject(2491,277.6992200,109.8994100,1007.0999800,0.0000000,4.2460000,0.0000000); //object(model_stand) (1)
CreateDynamicObject(2173,275.5000000,112.1000000,1007.7999900,0.0000000,0.0000000,269.9920000); //object(med_office_desk_3) (7)
CreateDynamicObject(1722,274.5000000,108.5000000,1007.7999900,0.0000000,0.0000000,269.7500000); //object(off_chairnu) (42)
CreateDynamicObject(1722,274.5000000,107.6000000,1007.7999900,0.0000000,0.0000000,272.9970000); //object(off_chairnu) (43)
CreateDynamicObject(1722,272.3999900,107.6000000,1007.7999900,0.0000000,0.0000000,274.2470000); //object(off_chairnu) (44)
CreateDynamicObject(1722,272.3999900,108.5000000,1007.7999900,0.0000000,0.0000000,269.7470000); //object(off_chairnu) (45)
CreateDynamicObject(1722,270.1000100,108.5000000,1007.7999900,0.0000000,0.0000000,269.7470000); //object(off_chairnu) (46)
CreateDynamicObject(1722,270.1000100,107.6000000,1007.7999900,0.0000000,0.0000000,274.9970000); //object(off_chairnu) (47)
CreateDynamicObject(1722,269.7999900,111.1000000,1007.7999900,0.0000000,0.0000000,269.7470000); //object(off_chairnu) (48)
CreateDynamicObject(1722,269.7999900,112.1000000,1007.7999900,0.0000000,0.0000000,264.7470000); //object(off_chairnu) (49)
CreateDynamicObject(1722,272.2000100,111.1000000,1007.7999900,0.0000000,0.0000000,269.7470000); //object(off_chairnu) (50)
CreateDynamicObject(1722,272.2000100,112.1000000,1007.7999900,0.0000000,0.0000000,264.4970000); //object(off_chairnu) (51)
CreateDynamicObject(1722,274.5000000,111.2000000,1007.7999900,0.0000000,0.0000000,269.7470000); //object(off_chairnu) (52)
CreateDynamicObject(1722,274.5000000,112.2000000,1007.7999900,0.0000000,0.0000000,262.2470000); //object(off_chairnu) (53)
CreateDynamicObject(2190,271.6000100,116.4000000,1008.5999800,0.0000000,0.0000000,269.0000000); //object(pc_1) (1)
CreateDynamicObject(2190,275.7999900,116.5000000,1008.5999800,0.0000000,0.0000000,91.9950000); //object(pc_1) (2)
CreateDynamicObject(2190,275.3999900,116.3000000,1008.5999800,0.0000000,0.0000000,267.9940000); //object(pc_1) (3)
CreateDynamicObject(1671,274.2000100,116.6000000,1008.2999900,0.0000000,0.0000000,92.0000000); //object(swivelchair_a) (13)
CreateDynamicObject(1671,270.2000100,116.5000000,1008.2999900,0.0000000,0.0000000,94.5000000); //object(swivelchair_a) (14)
CreateDynamicObject(1671,273.2000100,116.3000000,1008.2999900,0.0000000,0.0000000,272.0000000); //object(swivelchair_a) (15)
CreateDynamicObject(1671,277.1000100,116.6000000,1008.2999900,0.0000000,0.0000000,273.5000000); //object(swivelchair_a) (16)
CreateDynamicObject(2202,273.6000100,113.4000000,1007.7999900,0.0000000,0.0000000,180.2500000); //object(photocopier_2) (1)
CreateDynamicObject(2608,276.6000100,113.2000000,1008.5000000,0.0000000,0.0000000,179.0000000); //object(polce_shelf) (1)
CreateDynamicObject(2637,272.3999900,109.5000000,1004.0000000,0.0000000,0.0000000,0.0000000); //object(cj_pizza_table2) (1)
CreateDynamicObject(2637,274.3999900,109.5000000,1004.0000000,0.0000000,0.0000000,0.0000000); //object(cj_pizza_table2) (2)
CreateDynamicObject(1671,274.8999900,110.7000000,1004.0999800,0.0000000,0.0000000,0.0000000); //object(swivelchair_a) (17)
CreateDynamicObject(1671,274.0000000,110.7000000,1004.0999800,0.0000000,0.0000000,1.5000000); //object(swivelchair_a) (18)
CreateDynamicObject(1671,272.8999900,110.7000000,1004.0999800,0.0000000,0.0000000,2.2500000); //object(swivelchair_a) (19)
CreateDynamicObject(1671,271.8999900,110.7000000,1004.0999800,0.0000000,0.0000000,2.2470000); //object(swivelchair_a) (20)
CreateDynamicObject(1671,271.7999900,108.3000000,1004.0999800,0.0000000,0.0000000,178.2470000); //object(swivelchair_a) (21)
CreateDynamicObject(1671,272.7000100,108.3000000,1004.0999800,0.0000000,0.0000000,180.2420000); //object(swivelchair_a) (22)
CreateDynamicObject(1671,273.7999900,108.3000000,1004.0999800,0.0000000,0.0000000,182.2410000); //object(swivelchair_a) (23)
CreateDynamicObject(1671,274.7999900,108.4000000,1004.0999800,0.0000000,0.0000000,182.4910000); //object(swivelchair_a) (24)
CreateDynamicObject(1671,276.0000000,109.6000000,1004.0999800,0.0000000,0.0000000,272.2390000); //object(swivelchair_a) (25)
CreateDynamicObject(1671,270.7999900,109.5000000,1004.0999800,0.0000000,0.0000000,92.2420000); //object(swivelchair_a) (26)
CreateDynamicObject(1808,268.8999900,112.2000000,1003.5999800,0.0000000,0.0000000,0.0000000); //object(cj_watercooler2) (4)
CreateDynamicObject(2258,273.6000100,112.4000000,1005.5999800,0.0000000,0.0000000,0.0000000); //object(frame_clip_5) (2)
CreateDynamicObject(2001,269.0000000,107.5000000,1003.5999800,0.0000000,0.0000000,0.0000000); //object(nu_plant_ofc) (1)
CreateDynamicObject(2001,278.5000000,107.4000000,1003.5999800,0.0000000,0.0000000,0.0000000); //object(nu_plant_ofc) (2)
CreateDynamicObject(2008,222.3999900,126.8000000,1009.2000100,0.0000000,0.0000000,179.2500000); //object(officedesk1) (6)
CreateDynamicObject(2008,224.1000100,123.0000000,1009.2000100,0.0000000,0.0000000,179.4970000); //object(officedesk1) (7)
CreateDynamicObject(1671,221.6000100,127.7000000,1009.7000100,0.0000000,0.0000000,0.0000000); //object(swivelchair_a) (27)
CreateDynamicObject(1671,223.2000000,123.9000000,1009.7000100,0.0000000,0.0000000,0.0000000); //object(swivelchair_a) (28)
CreateDynamicObject(1722,223.2000000,121.7000000,1009.2000100,0.0000000,0.0000000,351.7500000); //object(off_chairnu) (54)
CreateDynamicObject(1722,224.2000000,121.7000000,1009.2000100,0.0000000,1.0000000,1.2470000); //object(off_chairnu) (55)
CreateDynamicObject(1722,221.3999900,125.5000000,1009.2000100,0.0000000,0.0000000,351.7490000); //object(off_chairnu) (56)
CreateDynamicObject(1722,222.3999900,125.5000000,1009.2000100,0.0000000,0.0000000,4.4990000); //object(off_chairnu) (57)
CreateDynamicObject(2257,222.8000000,122.1000000,1004.7999900,0.0000000,0.0000000,359.7500000); //object(frame_clip_4) (1)
CreateDynamicObject(1703,220.3999900,121.7000000,1002.0999800,0.0000000,0.0000000,0.0000000); //object(kb_couch02) (1)
CreateDynamicObject(1703,224.2000000,121.7000000,1002.0999800,0.0000000,0.0000000,0.0000000); //object(kb_couch02) (2)
CreateDynamicObject(2957,266.0000000,111.2000000,1002.0000000,0.0000000,0.0000000,0.2500000); //object(chinatgaragedoor) (1)
CreateDynamicObject(2957,262.6000100,111.2000000,1002.0000000,0.0000000,0.0000000,359.9970000); //object(chinatgaragedoor) (2)
CreateDynamicObject(2957,263.7999900,109.0000000,1002.0000000,0.0000000,0.0000000,268.7470000); //object(chinatgaragedoor) (3)
CreateDynamicObject(1671,247.0000000,122.4000000,1009.7000100,0.0000000,0.0000000,269.7500000); //object(swivelchair_a) (29)
CreateDynamicObject(1671,247.0000000,120.4000000,1009.7000100,0.0000000,0.0000000,269.7470000); //object(swivelchair_a) (30)
CreateDynamicObject(1671,250.8999900,120.3000000,1009.7000100,0.0000000,0.0000000,269.7470000); //object(swivelchair_a) (31)
CreateDynamicObject(14604,218.3000000,107.7000000,1010.2000100,0.0000000,0.0000000,308.0000000); //object(tv_stand_bike) (2)
CreateDynamicObject(1671,252.0000000,120.4000000,1009.7000100,0.0000000,0.0000000,90.9970000); //object(swivelchair_a) (32)
CreateDynamicObject(1671,240.3000000,121.8000000,1009.7000100,0.0000000,0.0000000,181.2470000); //object(swivelchair_a) (33)
CreateDynamicObject(1671,240.3000000,119.8000000,1009.7000100,0.0000000,0.0000000,181.7470000); //object(swivelchair_a) (34)
CreateDynamicObject(2190,240.5000000,121.0000000,1010.0000000,0.0000000,0.0000000,0.0000000); //object(pc_1) (4)
CreateDynamicObject(2190,240.5000000,123.1000000,1010.0000000,0.0000000,0.0000000,358.2500000); //object(pc_1) (5)
CreateDynamicObject(2169,222.3000000,110.3000000,1009.2000100,0.0000000,0.0000000,272.0000000); //object(med_office3_desk_1) (1)
CreateDynamicObject(2685,235.2000000,119.0550000,1004.2000100,0.0000000,270.0000000,0.0000000); //object(cj_food_post1) (1)
CreateDynamicObject(2686,264.1000100,112.7000000,1005.5799800,0.0000000,270.0000000,180.0000000); //object(cj_food_post2) (1)
CreateDynamicObject(2684,268.8999900,112.7000000,1005.5999800,0.0000000,269.7500000,179.5000000); //object(cj_food_post) (1)


	AntiDeAMX();
	WasteDeAMXersTime();

new	string[STR], File:file;
if((file = fopen("SerialBans.txt",io_read)))
{
while(fread(file,string))
{
for(new i = 0, j = strlen(string); i < j; i++) if(string[i] == '\n' || string[i] == '\r') string[i] = '\0';
Swears[num_words] = string;
num_words++;
}
fclose(file);
}
	RoadblockList = LoadModelSelectionMenu("roadblocks.txt");
	SignList = LoadModelSelectionMenu("signs.txt");
    onlinepl=Konektovano();
	ObjectDB = db_open("cop_objects.db");
    db_query(ObjectDB, "CREATE TABLE IF NOT EXISTS objects (id INTEGER, owner TEXT, type INTEGER, data INTEGER, model INTEGER, posx FLOAT, posy FLOAT, posz FLOAT, rotx FLOAT, roty FLOAT, rotz FLOAT, interior INTEGER, virtualworld INTEGER)");

    LoadObjects = db_prepare(ObjectDB, "SELECT * FROM objects");
    AddObject = db_prepare(ObjectDB, "INSERT INTO objects (id, owner, type, data, model, posx, posy, posz, rotx, roty, rotz, interior, virtualworld) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    UpdateObject = db_prepare(ObjectDB, "UPDATE objects SET posx=?, posy=?, posz=?, rotx=?, roty=?, rotz=? WHERE id=?");
	RemoveObject = db_prepare(ObjectDB, "DELETE FROM objects WHERE id=?");

	new id, type, data, model, owner[MAX_PLAYER_NAME], Float: pos[3], Float: rot[3], interior, vworld;
	stmt_bind_result_field(LoadObjects, 0, DB::TYPE_INTEGER, id);
	stmt_bind_result_field(LoadObjects, 1, DB::TYPE_STRING, owner, MAX_PLAYER_NAME);
	stmt_bind_result_field(LoadObjects, 2, DB::TYPE_INTEGER, type);
	stmt_bind_result_field(LoadObjects, 3, DB::TYPE_INTEGER, data);
	stmt_bind_result_field(LoadObjects, 4, DB::TYPE_INTEGER, model);
	stmt_bind_result_field(LoadObjects, 5, DB::TYPE_FLOAT, pos[0]);
	stmt_bind_result_field(LoadObjects, 6, DB::TYPE_FLOAT, pos[1]);
	stmt_bind_result_field(LoadObjects, 7, DB::TYPE_FLOAT, pos[2]);
	stmt_bind_result_field(LoadObjects, 8, DB::TYPE_FLOAT, rot[0]);
	stmt_bind_result_field(LoadObjects, 9, DB::TYPE_FLOAT, rot[1]);
	stmt_bind_result_field(LoadObjects, 10, DB::TYPE_FLOAT, rot[2]);
	stmt_bind_result_field(LoadObjects, 11, DB::TYPE_INTEGER, interior);
	stmt_bind_result_field(LoadObjects, 12, DB::TYPE_INTEGER, vworld);

	if(stmt_execute(LoadObjects))
	{
	    new label[96];
	    while(stmt_fetch_row(LoadObjects))
	    {
            CopObjectData[id][ObjCreated] = true;
            CopObjectData[id][Owner] = owner;
		    CopObjectData[id][Type] = type;
		    CopObjectData[id][ObjData] = data;
		    CopObjectData[id][ObjModel] = model;
		    CopObjectData[id][ObjInterior] = interior;
		    CopObjectData[id][ObjVirtualWorld] = vworld;
			CopObjectData[id][ObjX] = pos[0];
			CopObjectData[id][ObjY] = pos[1];
			CopObjectData[id][ObjZ] = pos[2];
			CopObjectData[id][ObjRX] = rot[0];
			CopObjectData[id][ObjRY] = rot[1];
			CopObjectData[id][ObjRZ] = rot[2];
			CopObjectData[id][ObjID] = CreateDynamicObject(model, pos[0], pos[1], pos[2], rot[0], rot[1], rot[2], vworld, interior);
			CopObjectData[id][ObjArea] = -1;

			switch(type)
			{
			    case OBJECT_TYPE_ROADBLOCK: format(label, sizeof(label), "(ID: %d)\n{FFFFFF}%s tarafýndan koyulmuþ.", id, CopObjectData[id][Owner]);
			    case OBJECT_TYPE_SIGN: format(label, sizeof(label), "(ID: %d)\n{FFFFFF}%s tarafýndan koyulmuþ.", id, CopObjectData[id][Owner]);
			    case OBJECT_TYPE_POLICELINE: format(label, sizeof(label), "(ID: %d)\n{FFFFFF}%s tarafýndan koyulmuþ.", id, CopObjectData[id][Owner]);
			    case OBJECT_TYPE_SPIKE:
				{
					format(label, sizeof(label), "(ID: %d)\n{FFFFFF}%s tarafýndan koyulmuþ.", id, CopObjectData[id][Owner]);
					CopObjectData[id][ObjArea] = CreateDynamicSphere(pos[0], pos[1], pos[2], 2.5, vworld, interior);
				}

				case OBJECT_TYPE_SPEEDCAM:
				{
					format(label, sizeof(label), "(ID: %d)\n{FFFFFF}Hiz Limiti: {E74C3C}%d\n{FFFFFF}%s tarafýndan koyulmuþ.", id, data, CopObjectData[id][Owner]);
					CopObjectData[id][ObjArea] = CreateDynamicSphere(pos[0], pos[1], pos[2], SPEEDCAM_RANGE, vworld, interior);
				}
			}

			CopObjectData[id][ObjLabel] = CreateDynamic3DTextLabel(label, 0x3498DBFF, pos[0], pos[1], pos[2] + zOffsets[type], streamDistances[type], _, _, _, vworld, interior);
		}
	}
LoadCCTVs();
    #if defined cctv_OnGameModeInit
        cctv_OnGameModeInit();
    #endif
Load_VehicleData();
CreateDynamic3DTextLabel("{2F4F4F}[Uyuþturucu Kaçakçýlýðý]\n{FFFFFF}/kututasi", COLOR_WHITE, 2213.3701,-2289.8210,14.7647, 10.0);
CreateDynamicPickup(1239, 23, 2213.3701,-2289.8210,14.7647);
CreatePickup(1239, 1, 979.0511, -1255.4989, 16.9495, 0);
CreateDynamic3DTextLabel("[Uyuþturucu Kaçakçýlýðý]\n{FFFFFF}Yük teslim için /kututeslim yazýn.", COLOR_DARKBLUE, 979.0511, -1255.4989, 16.9495, 10.0);
ShowPlayerMarkers(PLAYER_MARKERS_MODE_OFF);
CreateDynamicPickup(1239, 23, 1579.6626,-1338.6537,1134.4834);
CreateDynamic3DTextLabel("[Memur Çaðýrma]\n{FFFFFF}/memurcagir", COLOR_RADIO, 1579.6626,-1338.6537,1134.4834, 10.0);
CreateDynamicPickup(1239, 23, 710.4725, -569.2228, 16.3359);
CreateDynamicPickup(1210, 23, 1558.7191, -1328.5900, 1135.8818);
CreateDynamic3DTextLabel("{2F4F4F}[LSPD Dolabý]\n{FFFFFF}/pddolap", COLOR_WHITE, 1558.7191, -1328.5900, 1135.8818, 10.0);
CreateDynamic3DTextLabel("{2F4F4F}[Araç Parçalatma]\n{FFFFFF}/aracparcalat", COLOR_WHITE, 710.4725, -569.2228, 16.3359, 10.0);
CreateDynamic3DTextLabel("{2F4F4F}[Çimento Yükleme Noktasý]\n{FFFFFF}/cimentoyukle", COLOR_WHITE, 2157.1555, -2146.9797, 13.5469, 10.0);
CreateDynamicPickup(1239, 23, 1238.8019,310.6930,-11.7422);
	CreateDynamic3DTextLabel("{2F4F4F}[Baðýmlýlýktan Kurtulma]\n{FFFFFF}/bagimliliktankurtul", COLOR_WHITE, 1238.8019,310.6930,-11.7422, 10.0);
CreateDynamicPickup(1239, 23, 218.7441, 204.3321, 1042.1980);
	CreateDynamic3DTextLabel("{2F4F4F}[CCTV]\n{FFFFFF}/cctv", COLOR_WHITE, 1567.2769,-1335.5885,1140.0850, 10.0);
CreateDynamicPickup(1239, 23, 1567.2769,-1335.5885,1140.0850);
	CreateDynamic3DTextLabel("{2F4F4F}[CCTV]\n{FFFFFF}CCTV ID: 1", COLOR_WHITE, 2087.7622, -1742.7292, 19.9337, 10.0);
    CreateDynamicPickup(1239, 23, 2460.9548,-2120.6494,13.5530);
	CreateDynamic3DTextLabel("{2F4F4F}[Yük Alma Noktasý]\n{FFFFFF}/yuka.", COLOR_WHITE, 2460.9548,-2120.6494,13.5530, 10.0);
ShowNameTags(1);
	SQL_Connect();

	//=================[rootcouse Banka Sistemi]===================//
	print("  [Banka Sistemi] yükleniyor....");

    for(new i; i < MAX_BANKERS; i++)
    {
        BankerData[i][bankerActorID] = -1;

        #if defined BANKER_USE_MAPICON
        BankerData[i][bankerIconID] = -1;
        #endif

        BankerData[i][bankerLabel] = Text3D: -1;
    }

    for(new i; i < MAX_ATMMS; i++)
    {
        ATMMData[i][atmmObjID] = -1;

        ATMMData[i][atmmLabel] = Text3D: -1;
    }


	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML);
	if(mysql_errno()) return printf("  [Bank System] Can't connect to MySQL. (Error #%d)", mysql_errno());

	// create tables if they don't exist
	mysql_tquery(g_iHandle, "CREATE TABLE IF NOT EXISTS `bankers` (\
	  `ID` int(11) NOT NULL,\
	  `Skin` smallint(3) NOT NULL,\
	  `PosX` float NOT NULL,\
	  `PosY` float NOT NULL,\
	  `PosZ` float NOT NULL,\
	  `PosA` float NOT NULL\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

    mysql_tquery(g_iHandle, "CREATE TABLE IF NOT EXISTS `bank_atmms` (\
	  `ID` int(11) NOT NULL,\
	  `PosX` float NOT NULL,\
	  `PosY` float NOT NULL,\
	  `PosZ` float NOT NULL,\
	  `RotX` float NOT NULL,\
	  `RotY` float NOT NULL,\
	  `RotZ` float NOT NULL\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

	mysql_tquery(g_iHandle, "CREATE TABLE IF NOT EXISTS `bank_accounts` (\
	  `ID` int(11) NOT NULL auto_increment,\
	  `Owner` varchar(24) NOT NULL,\
	  `Password` varchar(32) NOT NULL,\
	  `Balance` int(11) NOT NULL,\
	  `CreatedOn` int(11) NOT NULL,\
	  `LastAccess` int(11) NOT NULL,\
	  `Disabled` smallint(1) NOT NULL,\
	  PRIMARY KEY  (`ID`)\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

	new queryy[512];
	mysql_format(g_iHandle, queryy, sizeof(queryy), "CREATE TABLE IF NOT EXISTS `bank_logs` (\
	  	`ID` int(11) NOT NULL auto_increment,\
	  	`AccountID` int(11) NOT NULL,\
	  	`ToAccountID` int(11) NOT NULL default '-1',\
	  	`Type` smallint(1) NOT NULL,\
	  	`Player` varchar(24) NOT NULL,\
	  	`Amount` int(11) NOT NULL,\
	  	`Date` int(11) NOT NULL,");

	mysql_format(g_iHandle, queryy, sizeof(queryy), "%s\
 		PRIMARY KEY  (`ID`),\
 		KEY `bank_logs_ibfk_1` (`AccountID`),\
 		CONSTRAINT `bank_logs_ibfk_1` FOREIGN KEY (`AccountID`) REFERENCES `bank_accounts` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE\
		) ENGINE=InnoDB DEFAULT CHARSET=utf8;", queryy);

	mysql_tquery(g_iHandle, queryy);

    print("  [Bank System] Connected to MySQL, loading data...");
//	mysql_tquery(g_iHandle, "SELECT * FROM bankers", "LoadBankers");
//	mysql_tquery(g_iHandle, "SELECT * FROM bank_atmms", "LoadATMMs");
   k_saat = 24;
	k_dakika = 24;
	// ankarkoala
	// pet sistemi
/*	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
	    LoadPapagan(i);
	}*/
	for(new i, size = GetPlayerPoolSize(); i <= size; ++i)
	{
	    if(!IsPlayerConnected(i)) continue;

	    for(new x; x < MAX_BALIK_SLOT; ++x)
	    {
	        OyuncuBaliklari[i][BalikID][x] = -1;
	    	OyuncuBaliklari[i][BalikGram][x] = 0;
	    }

	    BalikTimer[i] = -1;
	    BalikBari[i] = CreatePlayerProgressBar(i, 250.0, 300.0, 135.0, 10.7, 0x048DEBFF, 100.0, 0);
	    ApplyAnimation(i, "SAMP", "null", 0.0, 0, 0, 0, 0, 0);
	    SetPVarInt(i, "OltaSlot", -1);
	}


    SetVehiclePassengerDamage(true);
    SetDisableSyncBugs(true);
    SetDamageSounds(1, 1);
    LoadPool();
    CreateBall();
	LoadCollisions();
	LoadTextDraws();
	//GRATEX EV SÝSTEMÝ//
	for(new i; i < MAX_EVS; ++i)
	{
		EVData[i][EVLabel] = Text3D: INVALID_3DTEXT_ID;
		EVData[i][EVPickup] = -1;
		EVData[i][EVIcon] = -1;
		EVData[i][Save] = false;
	}

	for(new i; i < sizeof(EVInteriors); ++i)
	{
	    //EVInteriors[i][intLabel] = CreateDynamic3DTextLabel("Leave EV", 0xE67E22FF, EVInteriors[i][intX], EVInteriors[i][intY], EVInteriors[i][intZ]+0.35, 10.0, .testlos = 1, .interiorid = EVInteriors[i][intID]);
		EVInteriors[i][intPickup] = CreateDynamicPickup(19605, 1, EVInteriors[i][intX], EVInteriors[i][intY], EVInteriors[i][intZ], .interiorid = EVInteriors[i][intID]);
	}

	Iter_Init(EVKeys);
	DisableInteriorEnterExits();
	//ConnectNPC("Kacakci","Trainfix");

	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML);
	if(mysql_errno() != 0) return print(" [EV System] Can't connect to MySQL.");

	/* Create Tables */
	new query[1024];
	strcat(query, "CREATE TABLE IF NOT EXISTS `EVs` (\
	  `ID` int(11) NOT NULL,\
	  `EVName` varchar(48) NOT NULL default 'EV For Sale',\
	  `EVOwner` varchar(24) NOT NULL default '-',\
	  `EVPassword` varchar(16) NOT NULL default '-',\
	  `EVX` float NOT NULL,\
	  `EVY` float NOT NULL,\
	  `EVZ` float NOT NULL,\
	  `EVPrice` int(11) NOT NULL,\
	  `EVInterior` tinyint(4) NOT NULL default '0',\
	  `EVLock` tinyint(4) NOT NULL default '0',\
	  `EVMoney` int(11) NOT NULL default '0',"
 	);

 	strcat(query, "`LastEntered` int(11) NOT NULL,\
		  PRIMARY KEY  (`ID`),\
		  UNIQUE KEY `ID_2` (`ID`),\
		  KEY `ID` (`ID`)\
		) ENGINE=InnoDB DEFAULT CHARSET=utf8;"
	);

	mysql_tquery(g_iHandle, query, "", "");

	mysql_tquery(g_iHandle, "CREATE TABLE IF NOT EXISTS `EVfurnitures` (\
	  `ID` int(11) NOT NULL auto_increment,\
	  `EVID` int(11) NOT NULL,\
	  `FurnitureID` tinyint(11) NOT NULL,\
	  `FurnitureX` float NOT NULL,\
	  `FurnitureY` float NOT NULL,\
	  `FurnitureZ` float NOT NULL,\
	  `FurnitureRX` float NOT NULL,\
	  `FurnitureRY` float NOT NULL,\
	  `FurnitureRZ` float NOT NULL,\
	  `FurnitureVW` int(11) NOT NULL,\
	  `FurnitureInt` int(11) NOT NULL,\
	  PRIMARY KEY  (`ID`)\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(g_iHandle, "CREATE TABLE IF NOT EXISTS `EVguns` (\
	  `EVID` int(11) NOT NULL,\
	  `WeaponID` tinyint(4) NOT NULL,\
	  `Ammo` int(11) NOT NULL,\
	  UNIQUE KEY `EVID_2` (`EVID`,`WeaponID`),\
	  KEY `EVID` (`EVID`),\
	  CONSTRAINT `EVguns_ibfk_1` FOREIGN KEY (`EVID`) REFERENCES `EVs` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(g_iHandle, "CREATE TABLE IF NOT EXISTS `EVvisitors` (\
	  `EVID` int(11) NOT NULL,\
	  `Visitor` varchar(24) NOT NULL,\
	  `Date` int(11) NOT NULL\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(g_iHandle, "CREATE TABLE IF NOT EXISTS `EVkeys` (\
	  `EVID` int(11) NOT NULL,\
	  `Player` varchar(24) NOT NULL,\
	  `Date` int(11) NOT NULL\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(g_iHandle, "CREATE TABLE IF NOT EXISTS `EVsafelogs` (\
	  `EVID` int(11) NOT NULL,\
	  `Type` int(11) NOT NULL,\
	  `Amount` int(11) NOT NULL,\
	  `Date` int(11) NOT NULL\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(g_iHandle, "CREATE TABLE IF NOT EXISTS `EVsales` (\
	  `ID` int(11) NOT NULL AUTO_INCREMENT,\
	  `OldOwner` varchar(24) NOT NULL,\
	  `NewOwner` varchar(24) NOT NULL,\
	  `Price` int(11) NOT NULL,\
	  PRIMARY KEY (`ID`)\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	// 1.3 update, add EVSalePrice to the EVs table
	if(!fexist("EV_updated.txt"))
	{
		mysql_tquery(g_iHandle, "ALTER TABLE EVs ADD EVSalePrice INT(11) NOT NULL AFTER EVPrice");

		new File: updateFile = fopen("EV_updated.txt", io_append);
		if(updateFile)
		{
		    fwrite(updateFile, "Don't remove this file.");
			fclose(updateFile);
		}
	}

	/* Loading & Stuff */
	mysql_tquery(g_iHandle, "SELECT * FROM EVs", "LoadEVs", "");
	mysql_tquery(g_iHandle, "SELECT * FROM EVfurnitures", "LoadFurnitures", "");

	EVTimer = SetTimer("ResetAndSaveEVs", 10000, true);
SetWeaponDamage(0, DAMAGE_TYPE_STATIC, 2.5);
    SetWeaponDamage(1, DAMAGE_TYPE_STATIC, 4.0);
	SetWeaponDamage(2, DAMAGE_TYPE_STATIC, 4.5);
	SetWeaponDamage(3, DAMAGE_TYPE_STATIC, 5.5);
	SetWeaponDamage(4, DAMAGE_TYPE_STATIC, 11.0);
    SetWeaponDamage(5, DAMAGE_TYPE_STATIC, 6.0);
    SetWeaponDamage(6, DAMAGE_TYPE_STATIC, 5.0);
    SetWeaponDamage(7, DAMAGE_TYPE_STATIC, 4.0);
    SetWeaponDamage(8, DAMAGE_TYPE_STATIC, 8.0);
    SetWeaponDamage(9, DAMAGE_TYPE_STATIC, 0.0);
   // SetWeaponDamage(25, DAMAGE_TYPE_STATIC, 48.0);

    SetWeaponDamage(WEAPON_COLT45, DAMAGE_TYPE_RANGE, 15.0, 20.0, 7.5, 60.0, 5.0);
    SetWeaponDamage(WEAPON_DEAGLE, DAMAGE_TYPE_RANGE, 50.0, 20.0, 15.5, 60.0, 10.0);
    SetWeaponDamage(WEAPON_RIFLE, DAMAGE_TYPE_RANGE, 45.0, 20.0, 40.5, 60.0, 30.0);
    SetWeaponDamage(WEAPON_M4, DAMAGE_TYPE_RANGE, 16.0, 20.0, 21.0, 60.0, 21.0);
    SetWeaponDamage(WEAPON_AK47, DAMAGE_TYPE_RANGE, 18.0, 20.0, 21.0, 60.0, 21.0);
    SetWeaponDamage(WEAPON_SNIPER, DAMAGE_TYPE_STATIC, 1000.0, 20.0,  250.0, 60.0, 100.0);
    SetWeaponDamage(WEAPON_UZI, DAMAGE_TYPE_STATIC, 6);
    SetWeaponDamage(WEAPON_TEC9, DAMAGE_TYPE_STATIC, 6);

    SetWeaponDamage(35, DAMAGE_TYPE_STATIC, 0);
    SetWeaponDamage(36, DAMAGE_TYPE_STATIC, 0);
    SetWeaponDamage(37, DAMAGE_TYPE_STATIC, 0);
    SetWeaponDamage(38, DAMAGE_TYPE_STATIC, 0);



    Textdraw88 = TextDrawCreate(551.000000,23.000000,"--");
    TextDrawAlignment(Textdraw88,0);

    TextDrawBackgroundColor(Textdraw88,0x0000ffff);


    TextDrawFont(Textdraw88,2);
    TextDrawLetterSize(Textdraw88,0.399999,2.000000);
    TextDrawColor(Textdraw88,0x00ffffff);

    TextDrawSetOutline(Textdraw88,1);

    TextDrawSetProportional(Textdraw88,1);
    TextDrawSetShadow(Textdraw88,1);
    // AKTÖR GELMESÝ ÝÇÝN BUGLU OLAN NPCLER
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Tarifeci", 46, 1005.3574,54.8825,55.3221,176.6702, 0, 2897);
    AktorEkle("Keþ", 22, 2355.6331,-646.9376,128.0547,179.9879, 0, 2897);
    AktorEkle("Keþ", 22, 2355.6331,-646.9376,128.0547,179.9879, 0, 2897);
    AktorEkle("Keþ", 22, 2355.6331,-646.9376,128.0547,179.9879, 0, 2897);
    AktorEkle("Keþ", 22, 2355.6331,-646.9376,128.0547,179.9879, 0, 2897);
    AktorEkle("Keþ", 22, 2355.6331,-646.9376,128.0547,179.9879, 0, 2897); // AKTÖR GELMESÝ ÝÇÝN BUGLU OLAN NPCLER BÝTÝÞ
    
	AktorEkle("Tarifeci", 46, 1559.9335,-1330.0323,1135.8818,138.7596, 0, 6210);
	AktorEkle("Keþ", 22, 2355.6331,-646.9376,128.0547,179.9879, 0, 0);
  	 AktorEkle("Fred", 112, 1827.2732,-1376.9325,14.4219,-41.1200, 0, 2897);
    AktorEkle("Fred", 112, 1827.2732,-1376.9325,14.4219,41.1200, 0, 2897);
	AktorEkle("Silah Satýcýsý", 183, 1423.8284,-1291.6599,13.5582,176.7546, 0, 0);
    AktorEkle("Mermi Satýcýsý", 179, 1405.1896,-1300.1237,13.5446,273.0580, 0, 0);
    AktorEkle("Tüccar", 8, 2441.4717,-1972.8158,13.5469,270.3135, 0, 0);


        // GOV


    AktorEkle("Güvenlik Görevlisi", 164, 1476.6154,-1778.5828,15.2323,0.6477);
    AktorEkle("Güvenlik Görevlisi", 164, 1481.9572,-1778.6228,15.2278,2.2143);
	AktorEkle("Halkla Ýliþkiler Sorumlusu", 141, 359.7170,173.6192,1008.3893,270.1684, 0, 0);
	AktorEkle("Halkla Ýliþkiler Sorumlusu", 141, 1448.9670,-1799.2914,3235.6521,180.4677, 0, -1);

	    // BANKA

		// BALIKÇILAR

	AktorEkle("Test", 221, 360.8477,-2032.1234,7.8359,270.3737,2897,2897);
	AktorEkle("Balýkçý", 78, 376.3629,-2055.4121,8.0156,0.8592);

		// BÝLET SATICILARI

    AktorEkle("Bilet Satýcýsý", 171, 2.2406,-3994.7409,1003.5265,179.4009, 0, 1);
    AktorEkle("Bilet Satýcýsý", 172, 3.9091,-3993.5693,1003.5265,269.6417, 0, 1);
    AktorEkle("Bilet Satýcýsý", 171, 3.9055,-3988.1545,1003.5265,269.01509, 0, 1);
    AktorEkle("Güvenlik Görevlisi", 71, 6.2846,-4030.5095,1003.5165,271.5942, 0, 1);

    AktorEkle("Bilet Satýcýsý", 171, -1870.7299,46.1865,1055.1890,270.9237, 0, 1);
    AktorEkle("Bilet Satýcýsý", 172, -1876.1644,48.4303,1055.1890,0.9236, 0, 1);
    AktorEkle("Güvenlik Görevlisi", 71, -1854.6549,48.7961,1055.1890,93.7929, 0, 1);
    AktorEkle("Güvenlik Görevlisi", 71, -1868.8525,48.4181,1055.1890,268.6111, 0, 1);

		// SEX SHOP

	AktorEkle("Sex Shop Tezgahtarý", 178, -103.9582,-24.2077,1000.7187,0.5861, 0, 1);

    AktorEkle("Dövüþ Eðitmeni", 123, 765.9959,14.2297,1000.7010,177.4607, 5, 0);

	KomutYukle();


NewLoginTD[0] = TextDrawCreate(-3.000000, -5.999994, "mdl-2004:thumb-1920-587534");
TextDrawLetterSize(NewLoginTD[0], 0.000000, 0.000000);
TextDrawTextSize(NewLoginTD[0], 661.000000, 455.000000);
TextDrawAlignment(NewLoginTD[0], 1);
TextDrawColor(NewLoginTD[0], -1);
TextDrawSetShadow(NewLoginTD[0], 0);
TextDrawSetOutline(NewLoginTD[0], 0);
TextDrawBackgroundColor(NewLoginTD[0], 255);
TextDrawFont(NewLoginTD[0], 4);
TextDrawSetProportional(NewLoginTD[0], 0);
TextDrawSetShadow(NewLoginTD[0], 0);




	/*
    SoruEkle("Oyunda ateþ altýna düþtünüz ve ölmek istemiyorsunuz. Nasýl bir yol izlerdiniz?", "ESC tuþuna basar ve caným azalmasýný engellerdim.\nHayatta kalmaya çalýþmak için role play'e uygun bir yol arardým.\nOyundan hemen çýkýþ yapardým ve hazýr olduðumda oyuna girerdim.", 1);
	SoruEkle("Oyun içinde silahlý çatýþmaya girdiniz ne yaparsýnýz?", "q çeker ve oyundan çýkarým.\nOyun dýþý kanaldan yalvarýrým.\nHayatta kalmaya çalýþýrým.", 2);
	SoruEkle("Rapor attýnýz ve geri dönüþ olmadý ne yaparsýnýz?", "Adminlerin müsait olmadýðýný düþünürüm ve beklerim.\nAdmine pm atmaya çalýþýrým.\nForumda daha yüksek rütbeli adminlere þikayet ederim.", 0);
	SoruEkle("Birisi size GOOA yaparak silah çýkarýp sýkmaya baþladý.", "Bende karþýlýk veririm.\nEmote verip sýkmaya baþlarým.\nSs alýp foruma þikayet açarým.", 2);
	SoruEkle("Oyunda BUG buldunuz ne yaparsýnýz?", "Forumda gerekli mevkilere iletirim.\nKullanýrým.\nArkadaþlarýma öðretirim.", 0);
	SoruEkle("Bir sorununuz için rapor attýnýz ve 20-30 dakikadýr raporunuza cevap verilmedi. Nasýl bir yol izlersiniz?", "Adminlere PM kanalý aracýlýðýyla ulaþmaya çalýþýr, raporumun incelenmesi konusunda ýsrar ederim.\nYoðunluktan dolayý anlayýþ gösterir, raporumun incelenmesini beklerim.\nForumda hemen bir konu açýp, yönetim ekibini topa tutarým.", 1);
	SoruEkle("Ýllegal rol sýrasýnda, bir anda polis baskýnýna uðradýnýz. Bunun mix olduðunu düþünüyorsunuz. Nasýl bir yol izlersiniz?","/b kanalý aracýlýðýyla hemen rolü böler ve kiþilerin nasýl geldiðini öðrenmeye çalýþýrým.\n Rapor atar ve rapora cevap verilene kadar role devam etmem.\nRole uyum saðlayarak olayý yatýþtýrmaya çalýþýrým.", 2);
	SoruEkle("Birisi size Güvenli Bölge'de saldýrdý ve öldünüz. Bu durumda nasýl bir yol izlersiniz?", "PM kanalý aracýlýðýyla kiþiye ana, avrat, din, dil, ýrk, tutursuzca küfür ederim.\nArdý ardýna rapor atarak spam yaparým.\nForumda oyuncu þikayetleri alanýnýn altýnda sslerimle birlikte konu açarým.", 2);
    */
    Streamer_MaxItems(STREAMER_TYPE_OBJECT , -1);
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT , -1);
	Streamer_SetMaxItems(STREAMER_TYPE_OBJECT , -1);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT , -1);


      SendRconCommand("rcon_password mVHL8TxW3em4Ðüevtyr%&^!");


        AlarmArea = CreateDynamicRectangle(2130.6169, 1607.9010, 2156.9197,1625.2343, VAULT_VIRTUALWORLD, 1);

        VaultObjects[0] = CreateDynamicObject(19446, 2144.333, 1601.475, 1001.387, 90.000, 90.199, 0.000, VAULT_VIRTUALWORLD); // wall
        VaultObjects[1] = CreateDynamicObject(2947, 2145.037, 1601.421, 996.776, 0.000, 0.000, -89.500, VAULT_VIRTUALWORLD); // door
        VaultObjects[TYPE_LASER1] = CreateDynamicObject(18643, 2142.983, 1606.679, 993.188, 0.000, 0.000, 0.000, VAULT_VIRTUALWORLD); // laser
        VaultObjects[TYPE_LASER2] = CreateDynamicObject(18643, 2142.983, 1606.679, 993.938, 0.000, 0.000, 0.000, VAULT_VIRTUALWORLD); // laser
        VaultObjects[TYPE_LASER3] = CreateDynamicObject(18643, 2142.983, 1606.679, 994.688, 0.000, 0.000, 0.000, VAULT_VIRTUALWORLD); // laser
    VaultObjects[5] = CreateDynamicObject(19273, 2146.116, 1604.895, 994.118, 0.000, 0.000, 270.000, VAULT_VIRTUALWORLD); // keypad
    VaultObjects[TYPE_VAULTDOOR] = CreateDynamicObject(19799, 2143.185, 1626.965, 994.298, 0.000, -0.400, -180.000, VAULT_VIRTUALWORLD); // vault door
    VaultObjects[7] = CreateDynamicObject(2922, 2140.361, 1626.826, 993.978, 0.000, 0.000, 180.000, VAULT_VIRTUALWORLD); // timelock

    VaultLabels[TYPE_KEYPAD] = CreateDynamic3DTextLabel("Keypad\n{FFFFFF}/hackle ile lazerleri kapat.", 0xF39C12FF, 2145.85, 1604.9456, 993.5684, 15.0, .testlos = 1, .worldid = VAULT_VIRTUALWORLD);
    VaultLabels[TYPE_EXPLOSIVE] = CreateDynamic3DTextLabel("Kasa Kapýsý - Opsiyon 1\n{FFFFFF}/bombakur (hýzlý & sesli)", 0xF39C12FF, 2144.1624, 1626.25, 993.6882, 10.0, .testlos = 1, .worldid = VAULT_VIRTUALWORLD);
    VaultLabels[TYPE_TIMELOCK] = CreateDynamic3DTextLabel("Kasa Kapýsý - Opsiyon 2\n{FFFFFF}/zamanlayici (yavaþ & sessiz)", 0xF39C12FF, 2140.2610, 1626.25, 993.6882, 10.0, .testlos = 1, .worldid = VAULT_VIRTUALWORLD);

        for(new i; i < sizeof(InsideVaultLabels); ++i)
        {
                InsideVaultLabels[i] = CreateDynamic3DTextLabel("Kasa\n{FFFFFF}/kasabosalt", 0x2ECC71FF, DepositCoords[i][0], DepositCoords[i][1], DepositCoords[i][2], 15.0, .testlos = 1, .worldid = VAULT_VIRTUALWORLD);
        }

    BankControls[LasersOn] = true;
	new olusturulan;
	for(new i; i < sizeof(Ankesorlu); ++i)
	{
		Ankesorlu[i][ankesorLabel] = CreateDynamic3DTextLabel("\n\n{FFFFFF}/ara", COLOR_GREEN, Ankesorlu[i][ankesorX], Ankesorlu[i][ankesorY], Ankesorlu[i][ankesorZ]+1.5, 15.0, .testlos = 1);
		olusturulan++;
	}

	printf(" %d ankesörlü telefon oluþturuldu.", olusturulan);
	olusturulan = 0;
	for(new i; i < sizeof(BazIstasyonu); ++i)
	{
		BazIstasyonu[i][bazLabel] = CreateDynamic3DTextLabel("Baz Ýstasyonu", COLOR_BLUE, BazIstasyonu[i][bazX], BazIstasyonu[i][bazY], BazIstasyonu[i][bazZ]+2.5, 15.0, .testlos = 1);
        BazIstasyonu[i][bazObject] = CreateDynamicObject(3763,  BazIstasyonu[i][bazX], BazIstasyonu[i][bazY], BazIstasyonu[i][bazZ], 0.0, 0.0, 0.0);
		olusturulan++;
	}
	printf(" %d baz istasyonu oluþturuldu.", olusturulan);
	olusturulan = 0;
	for(new i; i < sizeof(GuvenliBolge); ++i)
	{
	    GuvenliBolge[i][Rectangle] = CreateDynamicRectangle(GuvenliBolge[i][minX], GuvenliBolge[i][minY], GuvenliBolge[i][maxX], GuvenliBolge[i][maxY], 0, 0);
	    GuvenliBolge[i][Zone] = GangZoneCreate(GuvenliBolge[i][minX], GuvenliBolge[i][minY], GuvenliBolge[i][maxX], GuvenliBolge[i][maxY]);
		olusturulan++;
	}
	printf(" %d güvenli bölge oluþturuldu.", olusturulan);
	olusturulan = 0;
    for(new i; i < sizeof(HaberKutulari); ++i)
	{
		//CreateDynamic3DTextLabel("Haber Kutusu\n{FFFFFF}/haberler", COLOR_DEPARTMENT, HaberKutulari[i][0], HaberKutulari[i][1], HaberKutulari[i][2]+1.0, 15.0, .testlos = 1);
		olusturulan++;
	}
	printf(" %d haber kutusu oluþturuldu.", olusturulan);
	olusturulan = 0;
	for(new i; i < sizeof(Agaclar); ++i)
	{
		Agaclar[i][agacObject] = CreateDynamicObject(Agaclar[i][agacModel], Agaclar[i][agacX], Agaclar[i][agacY], Agaclar[i][agacZ], 0.0, 0.0, 0.0);
    	Agaclar[i][agacLabel] = CreateDynamic3DTextLabel("Hasar: 15/15", COLOR_RED, Agaclar[i][agacX], Agaclar[i][agacY], Agaclar[i][agacZ]+3, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		Agaclar[i][agacKesildimi] = false;
		Agaclar[i][agacHasar] = 15;
		olusturulan++;
	}
	printf(" %d aðaç oluþturuldu.", olusturulan);
	olusturulan = 0;
	for(new i; i < sizeof(ModifiyeGarajlari); ++i)
	{
    	ModifiyeGarajlari[i][modifiyeLabel] = CreateDynamic3DTextLabel("[Modifiye, Araç Yükseltme]\n{FFFFFF}'/aracyukselt'\n{FFFFFF}'/modifiye'", 0xF39C12FF,  ModifiyeGarajlari[i][modifiyeX], ModifiyeGarajlari[i][modifiyeY], ModifiyeGarajlari[i][modifiyeZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		ModifiyeGarajlari[i][modifiyePickup] = CreateDynamicPickup(19627, 23, ModifiyeGarajlari[i][modifiyeX], ModifiyeGarajlari[i][modifiyeY], ModifiyeGarajlari[i][modifiyeZ], 0, 0);
        ModifiyeGarajlari[i][modifiyeMapIcon] = CreateDynamicMapIcon(ModifiyeGarajlari[i][modifiyeX], ModifiyeGarajlari[i][modifiyeY], ModifiyeGarajlari[i][modifiyeZ], 27, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		olusturulan++;
	}
	printf(" %d modifiye garajý oluþturuldu.", olusturulan);
	olusturulan = 0;

    td_ObjelerYukleniyor =  TextDrawCreate(320, 212, "HARITA YUKLENIYOR");
    TextDrawBackgroundColor    (td_ObjelerYukleniyor , 255);
    TextDrawFont            (td_ObjelerYukleniyor , 2);
    TextDrawLetterSize        (td_ObjelerYukleniyor , 0.260000, 1.300000);
    TextDrawColor            (td_ObjelerYukleniyor , COLOR_RED);
    TextDrawSetOutline        (td_ObjelerYukleniyor , 0);
    TextDrawSetProportional    (td_ObjelerYukleniyor , 1);
    TextDrawSetShadow        (td_ObjelerYukleniyor , 1);


	TelefonTD[0] = TextDrawCreate(517.064697, 192.333404, "LD_POOL:ball");
	TextDrawLetterSize(TelefonTD[0], 0.000000, 0.000000);
	TextDrawTextSize(TelefonTD[0], 18.000000, 17.000000);
	TextDrawAlignment(TelefonTD[0], 1);
	TextDrawColor(TelefonTD[0], 255);
	TextDrawSetShadow(TelefonTD[0], 0);
	TextDrawSetOutline(TelefonTD[0], 0);
	TextDrawBackgroundColor(TelefonTD[0], 255);
	TextDrawFont(TelefonTD[0], 4);
	TextDrawSetProportional(TelefonTD[0], 0);
	TextDrawSetShadow(TelefonTD[0], 0);

	TelefonTD[1] = TextDrawCreate(604.678466, 192.333404, "LD_POOL:ball");
	TextDrawLetterSize(TelefonTD[1], 0.000000, 0.000000);
	TextDrawTextSize(TelefonTD[1], 20.000000, 14.000000);
	TextDrawAlignment(TelefonTD[1], 1);
	TextDrawColor(TelefonTD[1], 255);
	TextDrawSetShadow(TelefonTD[1], 0);
	TextDrawSetOutline(TelefonTD[1], 0);
	TextDrawBackgroundColor(TelefonTD[1], 255);
	TextDrawFont(TelefonTD[1], 4);
	TextDrawSetProportional(TelefonTD[1], 0);
	TextDrawSetShadow(TelefonTD[1], 0);

	TelefonTD[2] = TextDrawCreate(517.064880, 389.500000, "LD_POOL:ball");
	TextDrawLetterSize(TelefonTD[2], 0.000000, 0.000000);
	TextDrawTextSize(TelefonTD[2], 23.000000, 17.000000);
	TextDrawAlignment(TelefonTD[2], 1);
	TextDrawColor(TelefonTD[2], 255);
	TextDrawSetShadow(TelefonTD[2], 0);
	TextDrawSetOutline(TelefonTD[2], 0);
	TextDrawBackgroundColor(TelefonTD[2], 255);
	TextDrawFont(TelefonTD[2], 4);
	TextDrawSetProportional(TelefonTD[2], 0);
	TextDrawSetShadow(TelefonTD[2], 0);

	TelefonTD[3] = TextDrawCreate(603.741027, 388.916625, "LD_POOL:ball");
	TextDrawLetterSize(TelefonTD[3], 0.000000, 0.000000);
	TextDrawTextSize(TelefonTD[3], 21.000000, 17.000000);
	TextDrawAlignment(TelefonTD[3], 1);
	TextDrawColor(TelefonTD[3], 255);
	TextDrawSetShadow(TelefonTD[3], 0);
	TextDrawSetOutline(TelefonTD[3], 0);
	TextDrawBackgroundColor(TelefonTD[3], 255);
	TextDrawFont(TelefonTD[3], 4);
	TextDrawSetProportional(TelefonTD[3], 0);
	TextDrawSetShadow(TelefonTD[3], 0);

	TelefonTD[4] = TextDrawCreate(519.575622, 201.666625, "box");
	TextDrawLetterSize(TelefonTD[4], 0.000000, 21.666175);
	TextDrawTextSize(TelefonTD[4], 623.000000, 0.000000);
	TextDrawAlignment(TelefonTD[4], 1);
	TextDrawColor(TelefonTD[4], -1);
	TextDrawUseBox(TelefonTD[4], 1);
	TextDrawBoxColor(TelefonTD[4], 255);
	TextDrawSetShadow(TelefonTD[4], 0);
	TextDrawSetOutline(TelefonTD[4], 0);
	TextDrawBackgroundColor(TelefonTD[4], 255);
	TextDrawFont(TelefonTD[4], 1);
	TextDrawSetProportional(TelefonTD[4], 1);
	TextDrawSetShadow(TelefonTD[4], 0);

	TelefonTD[5] = TextDrawCreate(527.072204, 195.250000, "box");
	TextDrawLetterSize(TelefonTD[5], 0.000000, 1.707175);
	TextDrawTextSize(TelefonTD[5], 619.000000, 0.000000);
	TextDrawAlignment(TelefonTD[5], 1);
	TextDrawColor(TelefonTD[5], -1);
	TextDrawUseBox(TelefonTD[5], 1);
	TextDrawBoxColor(TelefonTD[5], 255);
	TextDrawSetShadow(TelefonTD[5], 0);
	TextDrawSetOutline(TelefonTD[5], 0);
	TextDrawBackgroundColor(TelefonTD[5], 255);
	TextDrawFont(TelefonTD[5], 1);
	TextDrawSetProportional(TelefonTD[5], 1);
	TextDrawSetShadow(TelefonTD[5], 0);

	TelefonTD[6] = TextDrawCreate(532.694458, 391.249908, "box");
	TextDrawLetterSize(TelefonTD[6], 0.000000, 1.426061);
	TextDrawTextSize(TelefonTD[6], 612.000000, 0.000000);
	TextDrawAlignment(TelefonTD[6], 1);
	TextDrawColor(TelefonTD[6], -1);
	TextDrawUseBox(TelefonTD[6], 1);
	TextDrawBoxColor(TelefonTD[6], 255);
	TextDrawSetShadow(TelefonTD[6], 0);
	TextDrawSetOutline(TelefonTD[6], 0);
	TextDrawBackgroundColor(TelefonTD[6], 255);
	TextDrawFont(TelefonTD[6], 1);
	TextDrawSetProportional(TelefonTD[6], 1);
	TextDrawSetShadow(TelefonTD[6], 0);

	TelefonTD[7] = TextDrawCreate(523.323730, 220.333389, "box");
	TextDrawLetterSize(TelefonTD[7], 0.000000, 17.871154);
	TextDrawTextSize(TelefonTD[7], 619.000000, 0.000000);
	TextDrawAlignment(TelefonTD[7], 1);
	TextDrawColor(TelefonTD[7], -1);
	TextDrawUseBox(TelefonTD[7], 1);
	TextDrawBoxColor(TelefonTD[7], -1061109505);
	TextDrawSetShadow(TelefonTD[7], 0);
	TextDrawSetOutline(TelefonTD[7], 0);
	TextDrawBackgroundColor(TelefonTD[7], 255);
	TextDrawFont(TelefonTD[7], 1);
	TextDrawSetProportional(TelefonTD[7], 1);
	TextDrawSetShadow(TelefonTD[7], 0);

	TelefonTD[8] = TextDrawCreate(562.511169, 385.999908, "ld_beat:square");
	TextDrawLetterSize(TelefonTD[8], 0.000000, 0.000000);
	TextDrawTextSize(TelefonTD[8], 16.000000, 17.000000);
	TextDrawAlignment(TelefonTD[8], 1);
	TextDrawColor(TelefonTD[8], -2139062017);
	TextDrawSetShadow(TelefonTD[8], 0);
	TextDrawSetOutline(TelefonTD[8], 0);
	TextDrawBackgroundColor(TelefonTD[8], 255);
	TextDrawFont(TelefonTD[8], 4);
	TextDrawSetProportional(TelefonTD[8], 0);
	TextDrawSetShadow(TelefonTD[8], 0);
	TextDrawSetSelectable(TelefonTD[8], 1);

	TelefonTD[9] = TextDrawCreate(558.294616, 206.916564, "LD_POOL:ball");
	TextDrawLetterSize(TelefonTD[9], 0.000000, 0.000000);
	TextDrawTextSize(TelefonTD[9], 22.000000, -4.000000);
	TextDrawAlignment(TelefonTD[9], 1);
	TextDrawColor(TelefonTD[9], -2139062017);
	TextDrawSetShadow(TelefonTD[9], 0);
	TextDrawSetOutline(TelefonTD[9], 0);
	TextDrawBackgroundColor(TelefonTD[9], 255);
	TextDrawFont(TelefonTD[9], 4);
	TextDrawSetProportional(TelefonTD[9], 0);
	TextDrawSetShadow(TelefonTD[9], 0);

	TelefonTD[10] = TextDrawCreate(583.126525, 207.499893, "LD_POOL:ball");
	TextDrawLetterSize(TelefonTD[10], 0.000000, 0.000000);
	TextDrawTextSize(TelefonTD[10], 4.000000, -5.000000);
	TextDrawAlignment(TelefonTD[10], 1);
	TextDrawColor(TelefonTD[10], -2139062017);
	TextDrawSetShadow(TelefonTD[10], 0);
	TextDrawSetOutline(TelefonTD[10], 0);
	TextDrawBackgroundColor(TelefonTD[10], 255);
	TextDrawFont(TelefonTD[10], 4);
	TextDrawSetProportional(TelefonTD[10], 0);
	TextDrawSetShadow(TelefonTD[10], 0);

	TelefonTD[11] = TextDrawCreate(522.855163, 217.999954, "box");
	TextDrawLetterSize(TelefonTD[11], 0.000000, 0.957542);
	TextDrawTextSize(TelefonTD[11], 620.000000, 0.000000);
	TextDrawAlignment(TelefonTD[11], 1);
	TextDrawColor(TelefonTD[11], -1);
	TextDrawUseBox(TelefonTD[11], 1);
	TextDrawBoxColor(TelefonTD[11], 268435600);
	TextDrawSetShadow(TelefonTD[11], 0);
	TextDrawSetOutline(TelefonTD[11], 0);
	TextDrawBackgroundColor(TelefonTD[11], 255);
	TextDrawFont(TelefonTD[11], 1);
	TextDrawSetProportional(TelefonTD[11], 1);
	TextDrawSetShadow(TelefonTD[11], 0);

	TelefonTD[12] = TextDrawCreate(522.855346, 219.166625, "iiII");
	TextDrawLetterSize(TelefonTD[12], 0.243513, 0.829999);
	TextDrawAlignment(TelefonTD[12], 1);
	TextDrawColor(TelefonTD[12], -1);
	TextDrawSetShadow(TelefonTD[12], 0);
	TextDrawSetOutline(TelefonTD[12], 0);
	TextDrawBackgroundColor(TelefonTD[12], 255);
	TextDrawFont(TelefonTD[12], 1);
	TextDrawSetProportional(TelefonTD[12], 1);
	TextDrawSetShadow(TelefonTD[12], 0);

	TelefonTD[13] = TextDrawCreate(571.581298, 218.000015, "12:50");
	TextDrawLetterSize(TelefonTD[13], 0.193848, 1.004999);
	TextDrawAlignment(TelefonTD[13], 2);
	TextDrawColor(TelefonTD[13], -1);
	TextDrawSetShadow(TelefonTD[13], 0);
	TextDrawSetOutline(TelefonTD[13], 0);
	TextDrawBackgroundColor(TelefonTD[13], 255);
	TextDrawFont(TelefonTD[13], 2);
	TextDrawSetProportional(TelefonTD[13], 1);
	TextDrawSetShadow(TelefonTD[13], 0);

	TelefonTD[14] = TextDrawCreate(621.245117, 221.499984, "box");
	TextDrawLetterSize(TelefonTD[14], 0.000000, 0.442169);
	TextDrawTextSize(TelefonTD[14], 613.000000, 0.000000);
	TextDrawAlignment(TelefonTD[14], 1);
	TextDrawColor(TelefonTD[14], 8388863);
	TextDrawUseBox(TelefonTD[14], 1);
	TextDrawBoxColor(TelefonTD[14], 16711935);
	TextDrawSetShadow(TelefonTD[14], 0);
	TextDrawSetOutline(TelefonTD[14], 0);
	TextDrawBackgroundColor(TelefonTD[14], 255);
	TextDrawFont(TelefonTD[14], 0);
	TextDrawSetProportional(TelefonTD[14], 1);
	TextDrawSetShadow(TelefonTD[14], 0);

	TelefonTD[15] = TextDrawCreate(621.245117, 221.499984, "box");
	TextDrawLetterSize(TelefonTD[15], 0.000000, -0.260612);
	TextDrawTextSize(TelefonTD[15], 613.000000, 0.000000);
	TextDrawAlignment(TelefonTD[15], 1);
	TextDrawColor(TelefonTD[15], 16711935);
	TextDrawUseBox(TelefonTD[15], 1);
	TextDrawBoxColor(TelefonTD[15], -1378294017);
	TextDrawSetShadow(TelefonTD[15], 0);
	TextDrawSetOutline(TelefonTD[15], 0);
	TextDrawBackgroundColor(TelefonTD[15], 255);
	TextDrawFont(TelefonTD[15], 0);
	TextDrawSetProportional(TelefonTD[15], 1);
	TextDrawSetShadow(TelefonTD[15], 0);

	TelefonTD[16] = TextDrawCreate(605.783630, 219.750045, "%85");
	TextDrawLetterSize(TelefonTD[16], 0.166207, 0.759998);
	TextDrawAlignment(TelefonTD[16], 2);
	TextDrawColor(TelefonTD[16], -1);
	TextDrawSetShadow(TelefonTD[16], 0);
	TextDrawSetOutline(TelefonTD[16], 0);
	TextDrawBackgroundColor(TelefonTD[16], 255);
	TextDrawFont(TelefonTD[16], 2);
	TextDrawSetProportional(TelefonTD[16], 1);
	TextDrawSetShadow(TelefonTD[16], 0);

	TelefonTD[17] = TextDrawCreate(605.783630, 219.750045, "%85");
	TextDrawLetterSize(TelefonTD[17], 0.166207, 0.759998);
	TextDrawAlignment(TelefonTD[17], 2);
	TextDrawColor(TelefonTD[17], -1);
	TextDrawSetShadow(TelefonTD[17], 0);
	TextDrawSetOutline(TelefonTD[17], 0);
	TextDrawBackgroundColor(TelefonTD[17], 255);
	TextDrawFont(TelefonTD[17], 2);
	TextDrawSetProportional(TelefonTD[17], 1);
	TextDrawSetShadow(TelefonTD[17], 0);



	TelefonMenu[0] = TextDrawCreate(523.623779, 233.166595, "LD_POOL:ball");
	TextDrawLetterSize(TelefonMenu[0], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[0], 30.000000, 32.000000);
	TextDrawAlignment(TelefonMenu[0], 1);
	TextDrawColor(TelefonMenu[0], -1523963137);
	TextDrawSetShadow(TelefonMenu[0], 0);
	TextDrawSetOutline(TelefonMenu[0], 0);
	TextDrawBackgroundColor(TelefonMenu[0], 255);
	TextDrawFont(TelefonMenu[0], 4);
	TextDrawSetProportional(TelefonMenu[0], 0);
	TextDrawSetShadow(TelefonMenu[0], 0);
	TextDrawSetSelectable(TelefonMenu[0], true);

	TelefonMenu[1] = TextDrawCreate(556.420532, 232.583251, "LD_POOL:ball");
	TextDrawLetterSize(TelefonMenu[1], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[1], 30.000000, 32.000000);
	TextDrawAlignment(TelefonMenu[1], 1);
	TextDrawColor(TelefonMenu[1], -65281);
	TextDrawSetShadow(TelefonMenu[1], 0);
	TextDrawSetOutline(TelefonMenu[1], 0);
	TextDrawBackgroundColor(TelefonMenu[1], 255);
	TextDrawFont(TelefonMenu[1], 4);
	TextDrawSetProportional(TelefonMenu[1], 0);
	TextDrawSetShadow(TelefonMenu[1], 0);
	TextDrawSetSelectable(TelefonMenu[1], true);

	TelefonMenu[2] = TextDrawCreate(589.685729, 232.583282, "LD_POOL:ball");
	TextDrawLetterSize(TelefonMenu[2], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[2], 30.000000, 32.000000);
	TextDrawAlignment(TelefonMenu[2], 1);
	TextDrawColor(TelefonMenu[2], -5963521);
	TextDrawSetShadow(TelefonMenu[2], 0);
	TextDrawSetOutline(TelefonMenu[2], 0);
	TextDrawBackgroundColor(TelefonMenu[2], 255);
	TextDrawFont(TelefonMenu[2], 4);
	TextDrawSetProportional(TelefonMenu[2], 0);
	TextDrawSetShadow(TelefonMenu[2], 0);
	TextDrawSetSelectable(TelefonMenu[2], true);

	TelefonMenu[3] = TextDrawCreate(524.092529, 279.833312, "LD_POOL:ball");
	TextDrawLetterSize(TelefonMenu[3], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[3], 30.000000, 32.000000);
	TextDrawAlignment(TelefonMenu[3], 1);
	TextDrawColor(TelefonMenu[3], -1378294017);
	TextDrawSetShadow(TelefonMenu[3], 0);
	TextDrawSetOutline(TelefonMenu[3], 0);
	TextDrawBackgroundColor(TelefonMenu[3], 255);
	TextDrawFont(TelefonMenu[3], 4);
	TextDrawSetProportional(TelefonMenu[3], 0);
	TextDrawSetShadow(TelefonMenu[3], 0);
	TextDrawSetSelectable(TelefonMenu[3], true);

	TelefonMenu[4] = TextDrawCreate(556.420898, 279.833374, "LD_POOL:ball");
	TextDrawLetterSize(TelefonMenu[4], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[4], 30.000000, 32.000000);
	TextDrawAlignment(TelefonMenu[4], 1);
	TextDrawColor(TelefonMenu[4], 8388863);
	TextDrawSetShadow(TelefonMenu[4], 0);
	TextDrawSetOutline(TelefonMenu[4], 0);
	TextDrawBackgroundColor(TelefonMenu[4], 255);
	TextDrawFont(TelefonMenu[4], 4);
	TextDrawSetProportional(TelefonMenu[4], 0);
	TextDrawSetShadow(TelefonMenu[4], 0);
	TextDrawSetSelectable(TelefonMenu[4], true);

	TelefonMenu[5] = TextDrawCreate(589.217651, 280.416748, "LD_POOL:ball");
	TextDrawLetterSize(TelefonMenu[5], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[5], 30.000000, 32.000000);
	TextDrawAlignment(TelefonMenu[5], 1);
	TextDrawColor(TelefonMenu[5], -2147450625);
	TextDrawSetShadow(TelefonMenu[5], 0);
	TextDrawSetOutline(TelefonMenu[5], 0);
	TextDrawBackgroundColor(TelefonMenu[5], 255);
	TextDrawFont(TelefonMenu[5], 4);
	TextDrawSetProportional(TelefonMenu[5], 0);
	TextDrawSetShadow(TelefonMenu[5], 0);
	TextDrawSetSelectable(TelefonMenu[5], true);

	TelefonMenu[6] = TextDrawCreate(524.092956, 325.333343, "LD_POOL:ball");
	TextDrawLetterSize(TelefonMenu[6], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[6], 30.000000, 32.000000);
	TextDrawAlignment(TelefonMenu[6], 1);
	TextDrawColor(TelefonMenu[6], -2147450625);
	TextDrawSetShadow(TelefonMenu[6], 0);
	TextDrawSetOutline(TelefonMenu[6], 0);
	TextDrawBackgroundColor(TelefonMenu[6], 255);
	TextDrawFont(TelefonMenu[6], 4);
	TextDrawSetProportional(TelefonMenu[6], 0);
	TextDrawSetShadow(TelefonMenu[6], 0);
	TextDrawSetSelectable(TelefonMenu[6], true);

	TelefonMenu[7] = TextDrawCreate(556.889099, 325.916595, "LD_POOL:ball");
	TextDrawLetterSize(TelefonMenu[7], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[7], 30.000000, 32.000000);
	TextDrawAlignment(TelefonMenu[7], 1);
	TextDrawColor(TelefonMenu[7], -1523963137);
	TextDrawSetShadow(TelefonMenu[7], 0);
	TextDrawSetOutline(TelefonMenu[7], 0);
	TextDrawBackgroundColor(TelefonMenu[7], 255);
	TextDrawFont(TelefonMenu[7], 4);
	TextDrawSetProportional(TelefonMenu[7], 0);
	TextDrawSetShadow(TelefonMenu[7], 0);
	TextDrawSetSelectable(TelefonMenu[7], true);

	TelefonMenu[8] = TextDrawCreate(589.686218, 327.666687, "LD_POOL:ball");
	TextDrawLetterSize(TelefonMenu[8], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[8], 30.000000, 32.000000);
	TextDrawAlignment(TelefonMenu[8], 1);
	TextDrawColor(TelefonMenu[8], -5963521);
	TextDrawSetShadow(TelefonMenu[8], 0);
	TextDrawSetOutline(TelefonMenu[8], 0);
	TextDrawBackgroundColor(TelefonMenu[8], 255);
	TextDrawFont(TelefonMenu[8], 4);
	TextDrawSetProportional(TelefonMenu[8], 0);
	TextDrawSetShadow(TelefonMenu[8], 0);
	TextDrawSetSelectable(TelefonMenu[8], true);

	TelefonMenu[9] = TextDrawCreate(531.288391, 265.833404, "SMS     ARAMA   KAMERA");
	TextDrawLetterSize(TelefonMenu[9], 0.182604, 0.905833);
	TextDrawAlignment(TelefonMenu[9], 1);
	TextDrawColor(TelefonMenu[9], 255);
	TextDrawSetShadow(TelefonMenu[9], 0);
	TextDrawSetOutline(TelefonMenu[9], 0);
	TextDrawBackgroundColor(TelefonMenu[9], 255);
	TextDrawFont(TelefonMenu[9], 2);
	TextDrawSetProportional(TelefonMenu[9], 1);
	TextDrawSetShadow(TelefonMenu[9], 0);

	TelefonMenu[10] = TextDrawCreate(526.134643, 313.666870, "REHBER     HARITA    GECMIS");
	TextDrawLetterSize(TelefonMenu[10], 0.161522, 0.923332);
	TextDrawAlignment(TelefonMenu[10], 1);
	TextDrawColor(TelefonMenu[10], 255);
	TextDrawSetShadow(TelefonMenu[10], 0);
	TextDrawSetOutline(TelefonMenu[10], 0);
	TextDrawBackgroundColor(TelefonMenu[10], 255);
	TextDrawFont(TelefonMenu[10], 2);
	TextDrawSetProportional(TelefonMenu[10], 1);
	TextDrawSetShadow(TelefonMenu[10], 0);

	TelefonMenu[11] = TextDrawCreate(526.603271, 361.500335, "MARKET     ALARM    TELEFON");
	TextDrawLetterSize(TelefonMenu[11], 0.160585, 0.876666);
	TextDrawAlignment(TelefonMenu[11], 1);
	TextDrawColor(TelefonMenu[11], 255);
	TextDrawSetShadow(TelefonMenu[11], 0);
	TextDrawSetOutline(TelefonMenu[11], 0);
	TextDrawBackgroundColor(TelefonMenu[11], 255);
	TextDrawFont(TelefonMenu[11], 2);
	TextDrawSetProportional(TelefonMenu[11], 1);
	TextDrawSetShadow(TelefonMenu[11], 0);

	TelefonMenu[12] = TextDrawCreate(531.588745, 239.103042, "ld_chat:goodcha");
	TextDrawLetterSize(TelefonMenu[12], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[12], 15.000000, 17.000000);
	TextDrawAlignment(TelefonMenu[12], 1);
	TextDrawColor(TelefonMenu[12], -1);
	TextDrawSetShadow(TelefonMenu[12], 0);
	TextDrawSetOutline(TelefonMenu[12], 0);
	TextDrawBackgroundColor(TelefonMenu[12], 255);
	TextDrawFont(TelefonMenu[12], 4);
	TextDrawSetProportional(TelefonMenu[12], 0);
	TextDrawSetShadow(TelefonMenu[12], 0);

	TelefonMenu[13] = TextDrawCreate(564.853576, 240.853027, "ld_chat:goodcha");
	TextDrawLetterSize(TelefonMenu[13], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[13], 15.000000, 17.000000);
	TextDrawAlignment(TelefonMenu[13], 1);
	TextDrawColor(TelefonMenu[13], -1);
	TextDrawSetShadow(TelefonMenu[13], 0);
	TextDrawSetOutline(TelefonMenu[13], 0);
	TextDrawBackgroundColor(TelefonMenu[13], 255);
	TextDrawFont(TelefonMenu[13], 4);
	TextDrawSetProportional(TelefonMenu[13], 0);
	TextDrawSetShadow(TelefonMenu[13], 0);

	TelefonMenu[14] = TextDrawCreate(564.853576, 241.436355, "ld_chat:thumbup");
	TextDrawLetterSize(TelefonMenu[14], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[14], 15.000000, 17.000000);
	TextDrawAlignment(TelefonMenu[14], 1);
	TextDrawColor(TelefonMenu[14], -1);
	TextDrawSetShadow(TelefonMenu[14], 0);
	TextDrawSetOutline(TelefonMenu[14], 0);
	TextDrawBackgroundColor(TelefonMenu[14], 255);
	TextDrawFont(TelefonMenu[14], 4);
	TextDrawSetProportional(TelefonMenu[14], 0);
	TextDrawSetShadow(TelefonMenu[14], 0);

	TelefonMenu[15] = TextDrawCreate(564.853576, 241.436355, "ld_chat:thumbup");
	TextDrawLetterSize(TelefonMenu[15], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[15], 15.000000, 17.000000);
	TextDrawAlignment(TelefonMenu[15], 1);
	TextDrawColor(TelefonMenu[15], -1);
	TextDrawSetShadow(TelefonMenu[15], 0);
	TextDrawSetOutline(TelefonMenu[15], 0);
	TextDrawBackgroundColor(TelefonMenu[15], 255);
	TextDrawFont(TelefonMenu[15], 4);
	TextDrawSetProportional(TelefonMenu[15], 0);
	TextDrawSetShadow(TelefonMenu[15], 0);

	TelefonMenu[16] = TextDrawCreate(589.685180, 232.686386, "ld_beat:cring");
	TextDrawLetterSize(TelefonMenu[16], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[16], 30.000000, 31.000000);
	TextDrawAlignment(TelefonMenu[16], 1);
	TextDrawColor(TelefonMenu[16], -1);
	TextDrawSetShadow(TelefonMenu[16], 0);
	TextDrawSetOutline(TelefonMenu[16], 0);
	TextDrawBackgroundColor(TelefonMenu[16], 255);
	TextDrawFont(TelefonMenu[16], 4);
	TextDrawSetProportional(TelefonMenu[16], 0);
	TextDrawSetShadow(TelefonMenu[16], 0);

	TelefonMenu[17] = TextDrawCreate(531.588256, 285.852966, "hud:radar_gangb");
	TextDrawLetterSize(TelefonMenu[17], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[17], 14.000000, 19.000000);
	TextDrawAlignment(TelefonMenu[17], 1);
	TextDrawColor(TelefonMenu[17], -1);
	TextDrawSetShadow(TelefonMenu[17], 0);
	TextDrawSetOutline(TelefonMenu[17], 0);
	TextDrawBackgroundColor(TelefonMenu[17], 255);
	TextDrawFont(TelefonMenu[17], 4);
	TextDrawSetProportional(TelefonMenu[17], 0);
	TextDrawSetShadow(TelefonMenu[17], 0);

	TelefonMenu[18] = TextDrawCreate(563.916137, 286.202301, "hud:radar_chicken");
	TextDrawLetterSize(TelefonMenu[18], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[18], 14.000000, 19.000000);
	TextDrawAlignment(TelefonMenu[18], 1);
	TextDrawColor(TelefonMenu[18], -1);
	TextDrawSetShadow(TelefonMenu[18], 0);
	TextDrawSetOutline(TelefonMenu[18], 0);
	TextDrawBackgroundColor(TelefonMenu[18], 255);
	TextDrawFont(TelefonMenu[18], 4);
	TextDrawSetProportional(TelefonMenu[18], 0);
	TextDrawSetShadow(TelefonMenu[18], 0);

	TelefonMenu[19] = TextDrawCreate(597.181030, 286.436431, "hud:radar_airyard");
	TextDrawLetterSize(TelefonMenu[19], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[19], 14.000000, 19.000000);
	TextDrawAlignment(TelefonMenu[19], 1);
	TextDrawColor(TelefonMenu[19], -1);
	TextDrawSetShadow(TelefonMenu[19], 0);
	TextDrawSetOutline(TelefonMenu[19], 0);
	TextDrawBackgroundColor(TelefonMenu[19], 255);
	TextDrawFont(TelefonMenu[19], 4);
	TextDrawSetProportional(TelefonMenu[19], 0);
	TextDrawSetShadow(TelefonMenu[19], 0);

	TelefonMenu[20] = TextDrawCreate(531.587951, 331.936370, "hud:radar_cash");
	TextDrawLetterSize(TelefonMenu[20], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[20], 14.000000, 19.000000);
	TextDrawAlignment(TelefonMenu[20], 1);
	TextDrawColor(TelefonMenu[20], -1);
	TextDrawSetShadow(TelefonMenu[20], 0);
	TextDrawSetOutline(TelefonMenu[20], 0);
	TextDrawBackgroundColor(TelefonMenu[20], 255);
	TextDrawFont(TelefonMenu[20], 4);
	TextDrawSetProportional(TelefonMenu[20], 0);
	TextDrawSetShadow(TelefonMenu[20], 0);

	TelefonMenu[21] = TextDrawCreate(564.384582, 332.519744, "hud:radar_datedisco");
	TextDrawLetterSize(TelefonMenu[21], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[21], 16.000000, 19.000000);
	TextDrawAlignment(TelefonMenu[21], 1);
	TextDrawColor(TelefonMenu[21], -1);
	TextDrawSetShadow(TelefonMenu[21], 0);
	TextDrawSetOutline(TelefonMenu[21], 0);
	TextDrawBackgroundColor(TelefonMenu[21], 255);
	TextDrawFont(TelefonMenu[21], 4);
	TextDrawSetProportional(TelefonMenu[21], 0);
	TextDrawSetShadow(TelefonMenu[21], 0);

	TelefonMenu[22] = TextDrawCreate(597.181518, 333.103179, "hud:radar_modgarage");
	TextDrawLetterSize(TelefonMenu[22], 0.000000, 0.000000);
	TextDrawTextSize(TelefonMenu[22], 14.000000, 19.000000);
	TextDrawAlignment(TelefonMenu[22], 1);
	TextDrawColor(TelefonMenu[22], -1);
	TextDrawSetShadow(TelefonMenu[22], 0);
	TextDrawSetOutline(TelefonMenu[22], 0);
	TextDrawBackgroundColor(TelefonMenu[22], 255);
	TextDrawFont(TelefonMenu[22], 4);
	TextDrawSetProportional(TelefonMenu[22], 0);
	TextDrawSetShadow(TelefonMenu[22], 0);



	TelefonGiris[0] = TextDrawCreate(523.323364, 255.916702, "box");
	TextDrawLetterSize(TelefonGiris[0], 0.000000, 1.566619);
	TextDrawTextSize(TelefonGiris[0], 621.000000, 0.000000);
	TextDrawAlignment(TelefonGiris[0], 1);
	TextDrawColor(TelefonGiris[0], 1090519152);
	TextDrawUseBox(TelefonGiris[0], 1);
	TextDrawBoxColor(TelefonGiris[0], 144);
	TextDrawSetShadow(TelefonGiris[0], 0);
	TextDrawSetOutline(TelefonGiris[0], 0);
	TextDrawBackgroundColor(TelefonGiris[0], 255);
	TextDrawFont(TelefonGiris[0], 1);
	TextDrawSetProportional(TelefonGiris[0], 1);
	TextDrawSetShadow(TelefonGiris[0], 0);

	TelefonGiris[1] = TextDrawCreate(564.553527, 355.083343, "- - -~n~- - -~n~- - -");
	TextDrawLetterSize(TelefonGiris[1], 0.248667, 0.619999);
	TextDrawAlignment(TelefonGiris[1], 1);
	TextDrawColor(TelefonGiris[1], -1);
	TextDrawSetShadow(TelefonGiris[1], 1);
	TextDrawSetOutline(TelefonGiris[1], -1);
	TextDrawBackgroundColor(TelefonGiris[1], 255);
	TextDrawFont(TelefonGiris[1], 0);
	TextDrawSetProportional(TelefonGiris[1], 1);
	TextDrawSetShadow(TelefonGiris[1], 1);
    TextDrawSetSelectable(TelefonGiris[1], 1);


	TelefonCevirme[0] = TextDrawCreate(525.029418, 233.749938, "ld_beat:left");
	TextDrawLetterSize(TelefonCevirme[0], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[0], 13.000000, 14.000000);
	TextDrawAlignment(TelefonCevirme[0], 1);
	TextDrawColor(TelefonCevirme[0], -2147483393);
	TextDrawSetShadow(TelefonCevirme[0], 0);
	TextDrawSetOutline(TelefonCevirme[0], 0);
	TextDrawBackgroundColor(TelefonCevirme[0], 255);
	TextDrawFont(TelefonCevirme[0], 4);
	TextDrawSetProportional(TelefonCevirme[0], 0);
	TextDrawSetShadow(TelefonCevirme[0], 0);
	TextDrawSetSelectable(TelefonCevirme[0], true);

	TelefonCevirme[1] = TextDrawCreate(525.497924, 255.333267, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[1], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[1], 73.000000, 25.000000);
	TextDrawAlignment(TelefonCevirme[1], 1);
	TextDrawColor(TelefonCevirme[1], -1);
	TextDrawSetShadow(TelefonCevirme[1], 0);
	TextDrawSetOutline(TelefonCevirme[1], 0);
	TextDrawBackgroundColor(TelefonCevirme[1], 255);
	TextDrawFont(TelefonCevirme[1], 4);
	TextDrawSetProportional(TelefonCevirme[1], 0);
	TextDrawSetShadow(TelefonCevirme[1], 0);

	TelefonCevirme[2] = TextDrawCreate(525.497863, 278.666625, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[2], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[2], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[2], 1);
	TextDrawColor(TelefonCevirme[2], -1);
	TextDrawSetShadow(TelefonCevirme[2], 0);
	TextDrawSetOutline(TelefonCevirme[2], 0);
	TextDrawBackgroundColor(TelefonCevirme[2], 255);
	TextDrawFont(TelefonCevirme[2], 4);
	TextDrawSetProportional(TelefonCevirme[2], 0);
	TextDrawSetShadow(TelefonCevirme[2], 0);
	TextDrawSetSelectable(TelefonCevirme[2], true);

	TelefonCevirme[3] = TextDrawCreate(556.420410, 278.666656, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[3], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[3], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[3], 1);
	TextDrawColor(TelefonCevirme[3], -1);
	TextDrawSetShadow(TelefonCevirme[3], 0);
	TextDrawSetOutline(TelefonCevirme[3], 0);
	TextDrawBackgroundColor(TelefonCevirme[3], 255);
	TextDrawFont(TelefonCevirme[3], 4);
	TextDrawSetProportional(TelefonCevirme[3], 0);
	TextDrawSetShadow(TelefonCevirme[3], 0);
	TextDrawSetSelectable(TelefonCevirme[3], true);

	TelefonCevirme[4] = TextDrawCreate(587.342895, 278.666656, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[4], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[4], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[4], 1);
	TextDrawColor(TelefonCevirme[4], -1);
	TextDrawSetShadow(TelefonCevirme[4], 0);
	TextDrawSetOutline(TelefonCevirme[4], 0);
	TextDrawBackgroundColor(TelefonCevirme[4], 255);
	TextDrawFont(TelefonCevirme[4], 4);
	TextDrawSetProportional(TelefonCevirme[4], 0);
	TextDrawSetShadow(TelefonCevirme[4], 0);
	TextDrawSetSelectable(TelefonCevirme[4], true);

	TelefonCevirme[5] = TextDrawCreate(525.029357, 302.583374, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[5], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[5], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[5], 1);
	TextDrawColor(TelefonCevirme[5], -1);
	TextDrawSetShadow(TelefonCevirme[5], 0);
	TextDrawSetOutline(TelefonCevirme[5], 0);
	TextDrawBackgroundColor(TelefonCevirme[5], 255);
	TextDrawFont(TelefonCevirme[5], 4);
	TextDrawSetProportional(TelefonCevirme[5], 0);
	TextDrawSetShadow(TelefonCevirme[5], 0);
	TextDrawSetSelectable(TelefonCevirme[5], true);

	TelefonCevirme[6] = TextDrawCreate(556.888916, 303.166717, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[6], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[6], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[6], 1);
	TextDrawColor(TelefonCevirme[6], -1);
	TextDrawSetShadow(TelefonCevirme[6], 0);
	TextDrawSetOutline(TelefonCevirme[6], 0);
	TextDrawBackgroundColor(TelefonCevirme[6], 255);
	TextDrawFont(TelefonCevirme[6], 4);
	TextDrawSetProportional(TelefonCevirme[6], 0);
	TextDrawSetShadow(TelefonCevirme[6], 0);
	TextDrawSetSelectable(TelefonCevirme[6], true);

	TelefonCevirme[7] = TextDrawCreate(587.343200, 303.750091, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[7], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[7], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[7], 1);
	TextDrawColor(TelefonCevirme[7], -1);
	TextDrawSetShadow(TelefonCevirme[7], 0);
	TextDrawSetOutline(TelefonCevirme[7], 0);
	TextDrawBackgroundColor(TelefonCevirme[7], 255);
	TextDrawFont(TelefonCevirme[7], 4);
	TextDrawSetProportional(TelefonCevirme[7], 0);
	TextDrawSetShadow(TelefonCevirme[7], 0);
	TextDrawSetSelectable(TelefonCevirme[7], true);

	TelefonCevirme[8] = TextDrawCreate(525.029846, 325.916717, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[8], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[8], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[8], 1);
	TextDrawColor(TelefonCevirme[8], -1);
	TextDrawSetShadow(TelefonCevirme[8], 0);
	TextDrawSetOutline(TelefonCevirme[8], 0);
	TextDrawBackgroundColor(TelefonCevirme[8], 255);
	TextDrawFont(TelefonCevirme[8], 4);
	TextDrawSetProportional(TelefonCevirme[8], 0);
	TextDrawSetShadow(TelefonCevirme[8], 0);
	TextDrawSetSelectable(TelefonCevirme[8], true);

	TelefonCevirme[9] = TextDrawCreate(556.420959, 326.500122, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[9], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[9], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[9], 1);
	TextDrawColor(TelefonCevirme[9], -1);
	TextDrawSetShadow(TelefonCevirme[9], 0);
	TextDrawSetOutline(TelefonCevirme[9], 0);
	TextDrawBackgroundColor(TelefonCevirme[9], 255);
	TextDrawFont(TelefonCevirme[9], 4);
	TextDrawSetProportional(TelefonCevirme[9], 0);
	TextDrawSetShadow(TelefonCevirme[9], 0);
	TextDrawSetSelectable(TelefonCevirme[9], true);

	TelefonCevirme[10] = TextDrawCreate(587.343383, 326.500122, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[10], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[10], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[10], 1);
	TextDrawColor(TelefonCevirme[10], -1);
	TextDrawSetShadow(TelefonCevirme[10], 0);
	TextDrawSetOutline(TelefonCevirme[10], 0);
	TextDrawBackgroundColor(TelefonCevirme[10], 255);
	TextDrawFont(TelefonCevirme[10], 4);
	TextDrawSetProportional(TelefonCevirme[10], 0);
	TextDrawSetShadow(TelefonCevirme[10], 0);
	TextDrawSetSelectable(TelefonCevirme[10], true);

	TelefonCevirme[11] = TextDrawCreate(525.029724, 347.500152, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[11], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[11], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[11], 1);
	TextDrawColor(TelefonCevirme[11], 8388863);
	TextDrawSetShadow(TelefonCevirme[11], 0);
	TextDrawSetOutline(TelefonCevirme[11], 0);
	TextDrawBackgroundColor(TelefonCevirme[11], 255);
	TextDrawFont(TelefonCevirme[11], 4);
	TextDrawSetProportional(TelefonCevirme[11], 0);
	TextDrawSetShadow(TelefonCevirme[11], 0);
	TextDrawSetSelectable(TelefonCevirme[11], true);


	TelefonCevirme[13] = TextDrawCreate(556.889343, 346.916778, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[13], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[13], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[13], 1);
	TextDrawColor(TelefonCevirme[13], -1);
	TextDrawSetShadow(TelefonCevirme[13], 0);
	TextDrawSetOutline(TelefonCevirme[13], 0);
	TextDrawBackgroundColor(TelefonCevirme[13], 255);
	TextDrawFont(TelefonCevirme[13], 4);
	TextDrawSetProportional(TelefonCevirme[13], 0);
	TextDrawSetShadow(TelefonCevirme[13], 0);
	TextDrawSetSelectable(TelefonCevirme[13], true);

	TelefonCevirme[14] = TextDrawCreate(588.280273, 346.916717, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[14], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[14], 28.000000, 20.000000);
	TextDrawAlignment(TelefonCevirme[14], 1);
	TextDrawColor(TelefonCevirme[14], -5963521);
	TextDrawSetShadow(TelefonCevirme[14], 0);
	TextDrawSetOutline(TelefonCevirme[14], 0);
	TextDrawBackgroundColor(TelefonCevirme[14], 255);
	TextDrawFont(TelefonCevirme[14], 4);
	TextDrawSetProportional(TelefonCevirme[14], 0);
	TextDrawSetShadow(TelefonCevirme[14], 0);
	TextDrawSetSelectable(TelefonCevirme[14], true);

	TelefonCevirme[15] = TextDrawCreate(536.442199, 281.000030, "1     2     3");
	TextDrawLetterSize(TelefonCevirme[15], 0.377511, 1.150832);
	TextDrawAlignment(TelefonCevirme[15], 1);
	TextDrawColor(TelefonCevirme[15], 255);
	TextDrawSetShadow(TelefonCevirme[15], 0);
	TextDrawSetOutline(TelefonCevirme[15], 0);
	TextDrawBackgroundColor(TelefonCevirme[15], 255);
	TextDrawFont(TelefonCevirme[15], 0);
	TextDrawSetProportional(TelefonCevirme[15], 1);
	TextDrawSetShadow(TelefonCevirme[15], 0);

	TelefonCevirme[16] = TextDrawCreate(536.442138, 305.500061, "4    5     6");
	TextDrawLetterSize(TelefonCevirme[16], 0.377511, 1.150832);
	TextDrawAlignment(TelefonCevirme[16], 1);
	TextDrawColor(TelefonCevirme[16], 255);
	TextDrawSetShadow(TelefonCevirme[16], 0);
	TextDrawSetOutline(TelefonCevirme[16], 0);
	TextDrawBackgroundColor(TelefonCevirme[16], 255);
	TextDrawFont(TelefonCevirme[16], 0);
	TextDrawSetProportional(TelefonCevirme[16], 1);
	TextDrawSetShadow(TelefonCevirme[16], 0);

	TelefonCevirme[17] = TextDrawCreate(535.505126, 328.250122, "7    8     9");
	TextDrawLetterSize(TelefonCevirme[17], 0.377511, 1.150832);
	TextDrawAlignment(TelefonCevirme[17], 1);
	TextDrawColor(TelefonCevirme[17], 255);
	TextDrawSetShadow(TelefonCevirme[17], 0);
	TextDrawSetOutline(TelefonCevirme[17], 0);
	TextDrawBackgroundColor(TelefonCevirme[17], 255);
	TextDrawFont(TelefonCevirme[17], 0);
	TextDrawSetProportional(TelefonCevirme[17], 1);
	TextDrawSetShadow(TelefonCevirme[17], 0);

	TelefonCevirme[18] = TextDrawCreate(530.820007, 347.500152, "ara");
	TextDrawLetterSize(TelefonCevirme[18], 0.377511, 1.150832);
	TextDrawAlignment(TelefonCevirme[18], 1);
	TextDrawColor(TelefonCevirme[18], -1);
	TextDrawSetShadow(TelefonCevirme[18], 0);
	TextDrawSetOutline(TelefonCevirme[18], 0);
	TextDrawBackgroundColor(TelefonCevirme[18], 255);
	TextDrawFont(TelefonCevirme[18], 0);
	TextDrawSetProportional(TelefonCevirme[18], 1);
	TextDrawSetShadow(TelefonCevirme[18], 0);

	TelefonCevirme[19] = TextDrawCreate(565.490600, 348.666748, "0");
	TextDrawLetterSize(TelefonCevirme[19], 0.377511, 1.150832);
	TextDrawAlignment(TelefonCevirme[19], 1);
	TextDrawColor(TelefonCevirme[19], 255);
	TextDrawSetShadow(TelefonCevirme[19], 0);
	TextDrawSetOutline(TelefonCevirme[19], 0);
	TextDrawBackgroundColor(TelefonCevirme[19], 255);
	TextDrawFont(TelefonCevirme[19], 0);
	TextDrawSetProportional(TelefonCevirme[19], 1);
	TextDrawSetShadow(TelefonCevirme[19], 0);

	TelefonCevirme[20] = TextDrawCreate(593.133422, 348.083496, "sms");
	TextDrawLetterSize(TelefonCevirme[20], 0.377511, 1.150832);
	TextDrawAlignment(TelefonCevirme[20], 1);
	TextDrawColor(TelefonCevirme[20], 255);
	TextDrawSetShadow(TelefonCevirme[20], 0);
	TextDrawSetOutline(TelefonCevirme[20], 0);
	TextDrawBackgroundColor(TelefonCevirme[20], 255);
	TextDrawFont(TelefonCevirme[20], 0);
	TextDrawSetProportional(TelefonCevirme[20], 1);
	TextDrawSetShadow(TelefonCevirme[20], 0);

	TelefonCevirme[21] = TextDrawCreate(594.839599, 255.333282, "ld_otb2:butnao");
	TextDrawLetterSize(TelefonCevirme[21], 0.000000, 0.000000);
	TextDrawTextSize(TelefonCevirme[21], 21.000000, 24.000000);
	TextDrawAlignment(TelefonCevirme[21], 1);
	TextDrawColor(TelefonCevirme[21], -1);
	TextDrawSetShadow(TelefonCevirme[21], 0);
	TextDrawSetOutline(TelefonCevirme[21], 0);
	TextDrawBackgroundColor(TelefonCevirme[21], 255);
	TextDrawFont(TelefonCevirme[21], 4);
	TextDrawSetProportional(TelefonCevirme[21], 0);
	TextDrawSetShadow(TelefonCevirme[21], 0);
	TextDrawSetSelectable(TelefonCevirme[21], true);

	TelefonCevirme[22] = TextDrawCreate(599.692626, 258.833465, "X");
	TextDrawLetterSize(TelefonCevirme[22], 0.377511, 1.150832);
	TextDrawAlignment(TelefonCevirme[22], 1);
	TextDrawColor(TelefonCevirme[22], -1523963137);
	TextDrawSetShadow(TelefonCevirme[22], 0);
	TextDrawSetOutline(TelefonCevirme[22], 0);
	TextDrawBackgroundColor(TelefonCevirme[22], 255);
	TextDrawFont(TelefonCevirme[22], 0);
	TextDrawSetProportional(TelefonCevirme[22], 1);
	TextDrawSetShadow(TelefonCevirme[22], 0);

    TelefonArama[0] = TextDrawCreate(537.000000, 245.000000, "box");
	TextDrawLetterSize(TelefonArama[0], 0.000000, 7.001463);
	TextDrawTextSize(TelefonArama[0], 601.000000, 0.000000);
	TextDrawAlignment(TelefonArama[0], 1);
	TextDrawColor(TelefonArama[0], -1061109505);
	TextDrawUseBox(TelefonArama[0], 1);
	TextDrawBoxColor(TelefonArama[0], -2139062017);
	TextDrawSetShadow(TelefonArama[0], 0);
	TextDrawSetOutline(TelefonArama[0], 0);
	TextDrawBackgroundColor(TelefonArama[0], 255);
	TextDrawFont(TelefonArama[0], 1);
	TextDrawSetProportional(TelefonArama[0], 1);
	TextDrawSetShadow(TelefonArama[0], 0);

	TelefonArama[1] = TextDrawCreate(533.000000, 241.000000, "");
	TextDrawLetterSize(TelefonArama[1], 0.000000, 0.000000);
	TextDrawTextSize(TelefonArama[1], 74.000000, 64.000000);
	TextDrawAlignment(TelefonArama[1], 1);
	TextDrawColor(TelefonArama[1], 255);
	TextDrawSetShadow(TelefonArama[1], 0);
	TextDrawSetOutline(TelefonArama[1], 0);
	TextDrawBackgroundColor(TelefonArama[1], 0);
	TextDrawFont(TelefonArama[1], 5);
	TextDrawSetProportional(TelefonArama[1], 0);
	TextDrawSetShadow(TelefonArama[1], 0);
	TextDrawSetPreviewModel(TelefonArama[1], 99999);
	TextDrawSetPreviewRot(TelefonArama[1], 0.000000, 0.000000, 0.000000, 1.000000);

	TelefonArama[2] = TextDrawCreate(543.000000, 357.000000, "CEVAPLA");
	TextDrawLetterSize(TelefonArama[2], 0.186354, 1.115833);
	TextDrawAlignment(TelefonArama[2], 2);
	TextDrawColor(TelefonArama[2], 8388863);
	TextDrawSetShadow(TelefonArama[2], 0);
	TextDrawSetOutline(TelefonArama[2], 0);
	TextDrawBackgroundColor(TelefonArama[2], 255);
	TextDrawFont(TelefonArama[2], 1);
	TextDrawSetProportional(TelefonArama[2], 1);
	TextDrawSetShadow(TelefonArama[2], 0);
	TextDrawSetSelectable(TelefonArama[2], true);
    TextDrawTextSize(TelefonArama[2], 573, 30);

	TelefonArama[3] = TextDrawCreate(600.000000, 355.000000, "REDDET");
	TextDrawLetterSize(TelefonArama[3], 0.186354, 1.115833);
	TextDrawAlignment(TelefonArama[3], 2);
	TextDrawColor(TelefonArama[3], -2147483393);
	TextDrawSetShadow(TelefonArama[3], 0);
	TextDrawSetOutline(TelefonArama[3], 0);
	TextDrawBackgroundColor(TelefonArama[3], 255);
	TextDrawFont(TelefonArama[3], 1);
	TextDrawSetProportional(TelefonArama[3], 1);
	TextDrawSetShadow(TelefonArama[3], 0);
	TextDrawSetSelectable(TelefonArama[3], true);
    TextDrawTextSize(TelefonArama[3], 630, 30);

	TelefonArama[4] = TextDrawCreate(575.000000, 358.000000, "BITIR");
	TextDrawLetterSize(TelefonArama[4], 0.371888, 1.763334);
	TextDrawAlignment(TelefonArama[4], 2);
	TextDrawColor(TelefonArama[4], -2147483393);
	TextDrawSetShadow(TelefonArama[4], 0);
	TextDrawSetOutline(TelefonArama[4], 0);
	TextDrawBackgroundColor(TelefonArama[4], 255);
	TextDrawFont(TelefonArama[4], 1);
	TextDrawSetProportional(TelefonArama[4], 1);
	TextDrawSetShadow(TelefonArama[4], 0);
	TextDrawSetSelectable(TelefonArama[4], true);
    TextDrawTextSize(TelefonArama[4], 605, 30);

KarakterimEkrani[0] = TextDrawCreate(160.988296, 128.166641, "LD_SPAC:white");
TextDrawLetterSize(KarakterimEkrani[0], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[0], 320.000000, 225.000000);
TextDrawAlignment(KarakterimEkrani[0], 1);
TextDrawColor(KarakterimEkrani[0], 255);
TextDrawSetShadow(KarakterimEkrani[0], 0);
TextDrawSetOutline(KarakterimEkrani[0], 0);
TextDrawBackgroundColor(KarakterimEkrani[0], 255);
TextDrawFont(KarakterimEkrani[0], 4);
TextDrawSetProportional(KarakterimEkrani[0], 0);
TextDrawSetShadow(KarakterimEkrani[0], 0);

KarakterimEkrani[1] = TextDrawCreate(160.520095, 121.750061, "ld_pool:ball");
TextDrawLetterSize(KarakterimEkrani[1], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[1], 13.000000, 14.000000);
TextDrawAlignment(KarakterimEkrani[1], 1);
TextDrawColor(KarakterimEkrani[1], 255);
TextDrawSetShadow(KarakterimEkrani[1], 0);
TextDrawSetOutline(KarakterimEkrani[1], 0);
TextDrawBackgroundColor(KarakterimEkrani[1], 255);
TextDrawFont(KarakterimEkrani[1], 4);
TextDrawSetProportional(KarakterimEkrani[1], 0);
TextDrawSetShadow(KarakterimEkrani[1], 0);

KarakterimEkrani[2] = TextDrawCreate(165.205108, 131.666687, "");
TextDrawLetterSize(KarakterimEkrani[2], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[2], 310.000000, 222.000000);
TextDrawAlignment(KarakterimEkrani[2], 1);
TextDrawColor(KarakterimEkrani[2], -1);
TextDrawSetShadow(KarakterimEkrani[2], 0);
TextDrawSetOutline(KarakterimEkrani[2], 0);
TextDrawBackgroundColor(KarakterimEkrani[2], 255);
TextDrawFont(KarakterimEkrani[2], 5);
TextDrawSetProportional(KarakterimEkrani[2], 0);
TextDrawSetShadow(KarakterimEkrani[2], 0);
TextDrawSetPreviewModel(KarakterimEkrani[2], 19171);
TextDrawSetPreviewRot(KarakterimEkrani[2], 90.000000, 0.000000, 0.000000, 0.600000);

KarakterimEkrani[3] = TextDrawCreate(467.870330, 346.333251, "ld_pool:ball");
TextDrawLetterSize(KarakterimEkrani[3], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[3], 13.000000, 14.000000);
TextDrawAlignment(KarakterimEkrani[3], 1);
TextDrawColor(KarakterimEkrani[3], 255);
TextDrawSetShadow(KarakterimEkrani[3], 0);
TextDrawSetOutline(KarakterimEkrani[3], 0);
TextDrawBackgroundColor(KarakterimEkrani[3], 255);
TextDrawFont(KarakterimEkrani[3], 4);
TextDrawSetProportional(KarakterimEkrani[3], 0);
TextDrawSetShadow(KarakterimEkrani[3], 0);

KarakterimEkrani[4] = TextDrawCreate(160.988906, 346.333099, "ld_pool:ball");
TextDrawLetterSize(KarakterimEkrani[4], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[4], 13.000000, 14.000000);
TextDrawAlignment(KarakterimEkrani[4], 1);
TextDrawColor(KarakterimEkrani[4], 255);
TextDrawSetShadow(KarakterimEkrani[4], 0);
TextDrawSetOutline(KarakterimEkrani[4], 0);
TextDrawBackgroundColor(KarakterimEkrani[4], 255);
TextDrawFont(KarakterimEkrani[4], 4);
TextDrawSetProportional(KarakterimEkrani[4], 0);
TextDrawSetShadow(KarakterimEkrani[4], 0);

KarakterimEkrani[5] = TextDrawCreate(468.338836, 122.333404, "ld_pool:ball");
TextDrawLetterSize(KarakterimEkrani[5], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[5], 13.000000, 10.000000);
TextDrawAlignment(KarakterimEkrani[5], 1);
TextDrawColor(KarakterimEkrani[5], 255);
TextDrawSetShadow(KarakterimEkrani[5], 0);
TextDrawSetOutline(KarakterimEkrani[5], 0);
TextDrawBackgroundColor(KarakterimEkrani[5], 255);
TextDrawFont(KarakterimEkrani[5], 4);
TextDrawSetProportional(KarakterimEkrani[5], 0);
TextDrawSetShadow(KarakterimEkrani[5], 0);

KarakterimEkrani[6] = TextDrawCreate(166.142028, 121.750007, "LD_SPAC:white");
TextDrawLetterSize(KarakterimEkrani[6], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[6], 309.000000, 8.000000);
TextDrawAlignment(KarakterimEkrani[6], 1);
TextDrawColor(KarakterimEkrani[6], 255);
TextDrawSetShadow(KarakterimEkrani[6], 0);
TextDrawSetOutline(KarakterimEkrani[6], 0);
TextDrawBackgroundColor(KarakterimEkrani[6], 255);
TextDrawFont(KarakterimEkrani[6], 4);
TextDrawSetProportional(KarakterimEkrani[6], 0);
TextDrawSetShadow(KarakterimEkrani[6], 0);

KarakterimEkrani[7] = TextDrawCreate(166.610549, 352.166625, "LD_SPAC:white");
TextDrawLetterSize(KarakterimEkrani[7], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[7], 309.000000, 8.000000);
TextDrawAlignment(KarakterimEkrani[7], 1);
TextDrawColor(KarakterimEkrani[7], 255);
TextDrawSetShadow(KarakterimEkrani[7], 0);
TextDrawSetOutline(KarakterimEkrani[7], 0);
TextDrawBackgroundColor(KarakterimEkrani[7], 255);
TextDrawFont(KarakterimEkrani[7], 4);
TextDrawSetProportional(KarakterimEkrani[7], 0);
TextDrawSetShadow(KarakterimEkrani[7], 0);

KarakterimEkrani[8] = TextDrawCreate(165.204986, 306.083465, "LD_SPAC:white");
TextDrawLetterSize(KarakterimEkrani[8], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[8], 111.000000, 46.000000);
TextDrawAlignment(KarakterimEkrani[8], 1);
TextDrawColor(KarakterimEkrani[8], -1061109505);
TextDrawSetShadow(KarakterimEkrani[8], 0);
TextDrawSetOutline(KarakterimEkrani[8], 0);
TextDrawBackgroundColor(KarakterimEkrani[8], 255);
TextDrawFont(KarakterimEkrani[8], 4);
TextDrawSetProportional(KarakterimEkrani[8], 0);
TextDrawSetShadow(KarakterimEkrani[8], 0);

KarakterimEkrani[9] = TextDrawCreate(275.307495, 324.166870, "LD_SPAC:white");
TextDrawLetterSize(KarakterimEkrani[9], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[9], 200.000000, 28.000000);
TextDrawAlignment(KarakterimEkrani[9], 1);
TextDrawColor(KarakterimEkrani[9], -1061109505);
TextDrawSetShadow(KarakterimEkrani[9], 0);
TextDrawSetOutline(KarakterimEkrani[9], 0);
TextDrawBackgroundColor(KarakterimEkrani[9], 255);
TextDrawFont(KarakterimEkrani[9], 4);
TextDrawSetProportional(KarakterimEkrani[9], 0);
TextDrawSetShadow(KarakterimEkrani[9], 0);

KarakterimEkrani[10] = TextDrawCreate(282.972351, 300.833343, "/");
TextDrawLetterSize(KarakterimEkrani[10], -0.864067, 2.498332);
TextDrawAlignment(KarakterimEkrani[10], 1);
TextDrawColor(KarakterimEkrani[10], -5963521);
TextDrawSetShadow(KarakterimEkrani[10], 0);
TextDrawSetOutline(KarakterimEkrani[10], 1);
TextDrawBackgroundColor(KarakterimEkrani[10], 255);
TextDrawFont(KarakterimEkrani[10], 1);
TextDrawSetProportional(KarakterimEkrani[10], 1);
TextDrawSetShadow(KarakterimEkrani[10], 0);

KarakterimEkrani[11] = TextDrawCreate(276.713226, 323.583374, "LD_SPAC:white");
TextDrawLetterSize(KarakterimEkrani[11], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[11], 201.000000, 1.000000);
TextDrawAlignment(KarakterimEkrani[11], 1);
TextDrawColor(KarakterimEkrani[11], 255);
TextDrawSetShadow(KarakterimEkrani[11], 0);
TextDrawSetOutline(KarakterimEkrani[11], 0);
TextDrawBackgroundColor(KarakterimEkrani[11], 255);
TextDrawFont(KarakterimEkrani[11], 4);
TextDrawSetProportional(KarakterimEkrani[11], 0);
TextDrawSetShadow(KarakterimEkrani[11], 0);

KarakterimEkrani[12] = TextDrawCreate(163.799606, 305.499969, "LD_SPAC:white");
TextDrawLetterSize(KarakterimEkrani[12], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[12], 109.000000, 1.000000);
TextDrawAlignment(KarakterimEkrani[12], 1);
TextDrawColor(KarakterimEkrani[12], 255);
TextDrawSetShadow(KarakterimEkrani[12], 0);
TextDrawSetOutline(KarakterimEkrani[12], 0);
TextDrawBackgroundColor(KarakterimEkrani[12], 255);
TextDrawFont(KarakterimEkrani[12], 4);
TextDrawSetProportional(KarakterimEkrani[12], 0);
TextDrawSetShadow(KarakterimEkrani[12], 0);

KarakterimEkrani[13] = TextDrawCreate(180.000000, 148.000000, "box");
TextDrawLetterSize(KarakterimEkrani[13], 0.000000, 15.294288);
TextDrawTextSize(KarakterimEkrani[13], 271.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[13], 1);
TextDrawColor(KarakterimEkrani[13], -1);
TextDrawUseBox(KarakterimEkrani[13], 1);
TextDrawBoxColor(KarakterimEkrani[13], 136);
TextDrawSetShadow(KarakterimEkrani[13], 0);
TextDrawSetOutline(KarakterimEkrani[13], 0);
TextDrawBackgroundColor(KarakterimEkrani[13], 255);
TextDrawFont(KarakterimEkrani[13], 1);
TextDrawSetProportional(KarakterimEkrani[13], 1);
TextDrawSetShadow(KarakterimEkrani[13], 0);

KarakterimEkrani[14] = TextDrawCreate(282.000000, 148.000000, "box");
TextDrawLetterSize(KarakterimEkrani[14], 0.000000, 1.800879);
TextDrawTextSize(KarakterimEkrani[14], 366.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[14], 1);
TextDrawColor(KarakterimEkrani[14], -1);
TextDrawUseBox(KarakterimEkrani[14], 1);
TextDrawBoxColor(KarakterimEkrani[14], 136);
TextDrawSetShadow(KarakterimEkrani[14], 0);
TextDrawSetOutline(KarakterimEkrani[14], 0);
TextDrawBackgroundColor(KarakterimEkrani[14], 255);
TextDrawFont(KarakterimEkrani[14], 1);
TextDrawSetProportional(KarakterimEkrani[14], 1);
TextDrawSetShadow(KarakterimEkrani[14], 0);

KarakterimEkrani[15] = TextDrawCreate(376.000000, 148.000000, "box");
TextDrawLetterSize(KarakterimEkrani[15], 0.000000, 1.800879);
TextDrawTextSize(KarakterimEkrani[15], 460.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[15], 1);
TextDrawColor(KarakterimEkrani[15], -1);
TextDrawUseBox(KarakterimEkrani[15], 1);
TextDrawBoxColor(KarakterimEkrani[15], 136);
TextDrawSetShadow(KarakterimEkrani[15], 0);
TextDrawSetOutline(KarakterimEkrani[15], 0);
TextDrawBackgroundColor(KarakterimEkrani[15], 255);
TextDrawFont(KarakterimEkrani[15], 1);
TextDrawSetProportional(KarakterimEkrani[15], 1);
TextDrawSetShadow(KarakterimEkrani[15], 0);

KarakterimEkrani[16] = TextDrawCreate(282.000000, 178.000000, "box");
TextDrawLetterSize(KarakterimEkrani[16], 0.000000, 1.800879);
TextDrawTextSize(KarakterimEkrani[16], 366.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[16], 1);
TextDrawColor(KarakterimEkrani[16], -1);
TextDrawUseBox(KarakterimEkrani[16], 1);
TextDrawBoxColor(KarakterimEkrani[16], 136);
TextDrawSetShadow(KarakterimEkrani[16], 0);
TextDrawSetOutline(KarakterimEkrani[16], 0);
TextDrawBackgroundColor(KarakterimEkrani[16], 255);
TextDrawFont(KarakterimEkrani[16], 1);
TextDrawSetProportional(KarakterimEkrani[16], 1);
TextDrawSetShadow(KarakterimEkrani[16], 0);

KarakterimEkrani[17] = TextDrawCreate(376.000000, 178.000000, "box");
TextDrawLetterSize(KarakterimEkrani[17], 0.000000, 1.800879);
TextDrawTextSize(KarakterimEkrani[17], 460.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[17], 1);
TextDrawColor(KarakterimEkrani[17], -1);
TextDrawUseBox(KarakterimEkrani[17], 1);
TextDrawBoxColor(KarakterimEkrani[17], 136);
TextDrawSetShadow(KarakterimEkrani[17], 0);
TextDrawSetOutline(KarakterimEkrani[17], 0);
TextDrawBackgroundColor(KarakterimEkrani[17], 255);
TextDrawFont(KarakterimEkrani[17], 1);
TextDrawSetProportional(KarakterimEkrani[17], 1);
TextDrawSetShadow(KarakterimEkrani[17], 0);

KarakterimEkrani[18] = TextDrawCreate(282.000000, 209.000000, "box");
TextDrawLetterSize(KarakterimEkrani[18], 0.000000, 1.800879);
TextDrawTextSize(KarakterimEkrani[18], 366.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[18], 1);
TextDrawColor(KarakterimEkrani[18], -1);
TextDrawUseBox(KarakterimEkrani[18], 1);
TextDrawBoxColor(KarakterimEkrani[18], 136);
TextDrawSetShadow(KarakterimEkrani[18], 0);
TextDrawSetOutline(KarakterimEkrani[18], 0);
TextDrawBackgroundColor(KarakterimEkrani[18], 255);
TextDrawFont(KarakterimEkrani[18], 1);
TextDrawSetProportional(KarakterimEkrani[18], 1);
TextDrawSetShadow(KarakterimEkrani[18], 0);

KarakterimEkrani[19] = TextDrawCreate(376.000000, 209.000000, "box");
TextDrawLetterSize(KarakterimEkrani[19], 0.000000, 1.800879);
TextDrawTextSize(KarakterimEkrani[19], 460.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[19], 1);
TextDrawColor(KarakterimEkrani[19], -1);
TextDrawUseBox(KarakterimEkrani[19], 1);
TextDrawBoxColor(KarakterimEkrani[19], 136);
TextDrawSetShadow(KarakterimEkrani[19], 0);
TextDrawSetOutline(KarakterimEkrani[19], 0);
TextDrawBackgroundColor(KarakterimEkrani[19], 255);
TextDrawFont(KarakterimEkrani[19], 1);
TextDrawSetProportional(KarakterimEkrani[19], 1);
TextDrawSetShadow(KarakterimEkrani[19], 0);

KarakterimEkrani[20] = TextDrawCreate(282.000000, 241.000000, "box");
TextDrawLetterSize(KarakterimEkrani[20], 0.000000, 1.800879);
TextDrawTextSize(KarakterimEkrani[20], 366.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[20], 1);
TextDrawColor(KarakterimEkrani[20], -1);
TextDrawUseBox(KarakterimEkrani[20], 1);
TextDrawBoxColor(KarakterimEkrani[20], 136);
TextDrawSetShadow(KarakterimEkrani[20], 0);
TextDrawSetOutline(KarakterimEkrani[20], 0);
TextDrawBackgroundColor(KarakterimEkrani[20], 255);
TextDrawFont(KarakterimEkrani[20], 1);
TextDrawSetProportional(KarakterimEkrani[20], 1);
TextDrawSetShadow(KarakterimEkrani[20], 0);

KarakterimEkrani[21] = TextDrawCreate(376.000000, 241.000000, "box");
TextDrawLetterSize(KarakterimEkrani[21], 0.000000, 1.800879);
TextDrawTextSize(KarakterimEkrani[21], 460.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[21], 1);
TextDrawColor(KarakterimEkrani[21], -1);
TextDrawUseBox(KarakterimEkrani[21], 1);
TextDrawBoxColor(KarakterimEkrani[21], 136);
TextDrawSetShadow(KarakterimEkrani[21], 0);
TextDrawSetOutline(KarakterimEkrani[21], 0);
TextDrawBackgroundColor(KarakterimEkrani[21], 255);
TextDrawFont(KarakterimEkrani[21], 1);
TextDrawSetProportional(KarakterimEkrani[21], 1);
TextDrawSetShadow(KarakterimEkrani[21], 0);

KarakterimEkrani[22] = TextDrawCreate(282.000000, 270.000000, "box");
TextDrawLetterSize(KarakterimEkrani[22], 0.000000, 1.800879);
TextDrawTextSize(KarakterimEkrani[22], 366.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[22], 1);
TextDrawColor(KarakterimEkrani[22], -1);
TextDrawUseBox(KarakterimEkrani[22], 1);
TextDrawBoxColor(KarakterimEkrani[22], 136);
TextDrawSetShadow(KarakterimEkrani[22], 0);
TextDrawSetOutline(KarakterimEkrani[22], 0);
TextDrawBackgroundColor(KarakterimEkrani[22], 255);
TextDrawFont(KarakterimEkrani[22], 1);
TextDrawSetProportional(KarakterimEkrani[22], 1);
TextDrawSetShadow(KarakterimEkrani[22], 0);

KarakterimEkrani[23] = TextDrawCreate(376.000000, 270.000000, "box");
TextDrawLetterSize(KarakterimEkrani[23], 0.000000, 1.800879);
TextDrawTextSize(KarakterimEkrani[23], 460.000000, 0.000000);
TextDrawAlignment(KarakterimEkrani[23], 1);
TextDrawColor(KarakterimEkrani[23], -1);
TextDrawUseBox(KarakterimEkrani[23], 1);
TextDrawBoxColor(KarakterimEkrani[23], 136);
TextDrawSetShadow(KarakterimEkrani[23], 0);
TextDrawSetOutline(KarakterimEkrani[23], 0);
TextDrawBackgroundColor(KarakterimEkrani[23], 255);
TextDrawFont(KarakterimEkrani[23], 1);
TextDrawSetProportional(KarakterimEkrani[23], 1);
TextDrawSetShadow(KarakterimEkrani[23], 0);

KarakterimEkrani[24] = TextDrawCreate(455.688568, 327.666687, "LD_BEAT:cross");
TextDrawLetterSize(KarakterimEkrani[24], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[24], 14.000000, 17.000000);
TextDrawAlignment(KarakterimEkrani[24], 1);
TextDrawColor(KarakterimEkrani[24], -1);
TextDrawSetShadow(KarakterimEkrani[24], 0);
TextDrawSetOutline(KarakterimEkrani[24], 0);
TextDrawBackgroundColor(KarakterimEkrani[24], 255);
TextDrawFont(KarakterimEkrani[24], 4);
TextDrawSetProportional(KarakterimEkrani[24], 0);
TextDrawSetShadow(KarakterimEkrani[24], 0);
TextDrawSetSelectable(KarakterimEkrani[24], true);

KarakterimEkrani[25] = TextDrawCreate(176.917999, 314.833435, "hud:radar_flag");
TextDrawLetterSize(KarakterimEkrani[25], 0.000000, 0.000000);
TextDrawTextSize(KarakterimEkrani[25], 12.000000, 10.000000);
TextDrawAlignment(KarakterimEkrani[25], 1);
TextDrawColor(KarakterimEkrani[25], -1);
TextDrawSetShadow(KarakterimEkrani[25], 0);
TextDrawSetOutline(KarakterimEkrani[25], 0);
TextDrawBackgroundColor(KarakterimEkrani[25], 255);
TextDrawFont(KarakterimEkrani[25], 4);
TextDrawSetProportional(KarakterimEkrani[25], 0);
TextDrawSetShadow(KarakterimEkrani[25], 0);



    MaasEkrani[0] = TextDrawCreate(139.000000, 345.000000, ">");
	TextDrawLetterSize(MaasEkrani[0], 0.541493, 7.765831);
	TextDrawAlignment(MaasEkrani[0], 1);
	TextDrawColor(MaasEkrani[0], 128);
	TextDrawSetShadow(MaasEkrani[0], 0);
	TextDrawSetOutline(MaasEkrani[0], 0);
	TextDrawBackgroundColor(MaasEkrani[0], 255);
	TextDrawFont(MaasEkrani[0], 1);
	TextDrawSetProportional(MaasEkrani[0], 1);
	TextDrawSetShadow(MaasEkrani[0], 0);

	MaasEkrani[1] = TextDrawCreate(157.000000, 351.000000, "box");
	TextDrawLetterSize(MaasEkrani[1], 0.000000, 6.111274);
	TextDrawTextSize(MaasEkrani[1], 314.000000, 0.000000);
	TextDrawAlignment(MaasEkrani[1], 1);
	TextDrawColor(MaasEkrani[1], -1);
	TextDrawUseBox(MaasEkrani[1], 1);
	TextDrawBoxColor(MaasEkrani[1], 144);
	TextDrawSetShadow(MaasEkrani[1], 0);
	TextDrawSetOutline(MaasEkrani[1], 1);
	TextDrawBackgroundColor(MaasEkrani[1], 255);
	TextDrawFont(MaasEkrani[1], 1);
	TextDrawSetProportional(MaasEkrani[1], 1);
	TextDrawSetShadow(MaasEkrani[1], 0);

	MaasEkrani[2] = TextDrawCreate(160.000000, 341.000000, "PAYCHECK");
	TextDrawLetterSize(MaasEkrani[2], 0.400000, 1.600000);
	TextDrawAlignment(MaasEkrani[2], 1);
	TextDrawColor(MaasEkrani[2], -1);
	TextDrawSetShadow(MaasEkrani[2], 0);
	TextDrawSetOutline(MaasEkrani[2], 0);
	TextDrawBackgroundColor(MaasEkrani[2], 255);
	TextDrawFont(MaasEkrani[2], 3);
	TextDrawSetProportional(MaasEkrani[2], 1);
	TextDrawSetShadow(MaasEkrani[2], 0);

	MaasEkrani[3] = TextDrawCreate(218.000000, 329.000000, "!");
	TextDrawLetterSize(MaasEkrani[3], 1.132767, 3.775829);
	TextDrawAlignment(MaasEkrani[3], 1);
	TextDrawColor(MaasEkrani[3], -16776961);
	TextDrawSetShadow(MaasEkrani[3], 0);
	TextDrawSetOutline(MaasEkrani[3], 0);
	TextDrawBackgroundColor(MaasEkrani[3], 255);
	TextDrawFont(MaasEkrani[3], 2);
	TextDrawSetProportional(MaasEkrani[3], 1);
	TextDrawSetShadow(MaasEkrani[3], 0);


for(new i; i < MAX_VEHICLES; i++) if(CarData[i][carExists])
    {
	   CarData[i][carHasar] = 1000;
 }




    for(new i; i < MAX_VEHICLES; i++) if(!CarData[i][carMeslek])
    {
	   CoreVehicles[i][vehFuel] = 100;
	}
	blackmap = GangZoneCreate(-3000.0,-3000.0,3000.0,3000.0);

	k_basvuru = false; // aktif edilecek.
	k_time = true;
	GOV = false;
    for(new i; i < MAX_FIREWORK; i++) FireworkInfo[i][FW_Owner]=NON;
    lsbarbell = CreateObject(2913, 774.4290, 1.883098, 1000.4883, 0, 270.0, 88.000,150); // Los Santos Gym's BarBell
    sfbarbell = CreateObject(2913, 765.8552, -48.8685, 1000.6409, 0, 89.50, 0.0000,150); // San Fierro Gym's BarBell.
    lvbarbell = CreateObject(2913, 765.3403, -59.1827, 1000.6379, 0, 89.50, 181.25,150); // Las Venturas Gym's BarBell
    lvbarbell2 = CreateObject(2913, 768.080, -59.0295, 1000.6379, 0, 90.0, 0, 150); // Las Venturas Gym's BarBell 2

    g_StatusOOC = true;

	static arrVirtualWorlds[2000];


    SetTimer("AFKKicker", 30000, 1);
	WeatherRotator();
    aTolls[FlintToll][E_tLocked] = 0;
	aTolls[RichmanToll][E_tLocked] = 0;
	aTolls[LVToll][E_tLocked] = 0;
	aTolls[BlueberryTollR][E_tLocked] = 0;
	aTolls[BlueberryTollL][E_tLocked] = 0;

	ManualVehicleEngineAndLights();
	new rcon[80];
	format(rcon, sizeof(rcon), "weburl %s", SERVER_URL);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "map %s", SERVER_MAP);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "language %s", SERVER_DIL);
	SendRconCommand(rcon);
	SetGameModeText(SERVER_REVISION);

	 //-----------------[   AKTÖRLER   ]----------------//

	Server_Load();
	AddTolls();
    mysql_function_query(g_iHandle, "SELECT * FROM `billboards`", true, "Billboard_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `factions`", true, "Faction_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `maclar`", true, "Mac_Yukle", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `sandiklar`", true, "Sandik_Yukle", "");
	mysql_function_query(g_iHandle, "select houses.*, characters.Character as evsahibi from houses left join characters on houses.houseOwner = characters.ID", true, "House_Load", "");
	mysql_function_query(g_iHandle, "select businesses.*, characters.Character as isyerisahibi from businesses left join characters on businesses.bizOwner = characters.ID", true, "Business_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `dropped`", true, "Dropped_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `haberler`", true, "Haber_Yukle", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `entrances`", true, "Entrance_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `fabrikalar`", true, "Fabrika_Yukle", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `mezarlar`", true, "Mezar_Yukle", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `cars`", true, "Car_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `jobs`", true, "Job_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `crates`", true, "Crate_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `plants`", true, "Plant_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `atm`", true, "ATM_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `arrestpoints`", true, "Arrest_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `gates`", true, "Gate_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `objects`", true, "Object_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `backpacks`", true, "Backpack_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `impoundlots`", true, "Impound_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `garbage`", true, "Garbage_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `vendors`", true, "Vendor_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `gunracks`", true, "Rack_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `speedcameras`", true, "Speed_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `graffiti`", true, "Graffiti_Load", "");
    mysql_function_query(g_iHandle, "SELECT * FROM `detectors`", true, "Detector_Load", "");

	for (new i = 0; i < sizeof(arrVirtualWorlds); i ++) {
	    arrVirtualWorlds[i] = i + 7000;
	}



   // CreateDynamicPickup(1313, 23,  2011.3010, -1661.6586, 13.5549);
  //  CreateDynamic3DTextLabel("{0000FF}[Onaylý Hood]\n{FF0000}Aryan Kardeþliði", COLOR_RED, 2011.3010, -1661.6586, 13.5549, 10.0);

	CreateDynamicPickup(1314, 23,  PB_X, PB_Y, PB_Z);
	CreateDynamic3DTextLabel("{FFFFFF}[/paintball]", COLOR_DARKBLUE, PB_X,PB_Y,PB_Z, 10.0);

	CreateDynamicPickup(1239, 23, 2441.4204,-1973.6904,13.5539);
	CreateDynamic3DTextLabel("{FFFFFF}[/kelepcekir]", COLOR_DARKBLUE, 2441.4204,-1973.6904,13.5539, 10.0);
    // 2710 yüzük objesi
    CreateDynamicPickup(2710, 23, 1963.9792,-369.6778,1093.7289);
    CreateDynamic3DTextLabel("{FFFFFF}[/evlilik]", COLOR_DARKBLUE, 1963.9792,-369.6778,1093.7289, 10.0);
	CreateDynamicPickup(1239, 23, 681.5215,-459.2425,-25.6172);
	/*CreateDynamic3DTextLabel("{FFFFFF}{/vipdolap]", COLOR_DARKBLUE, 681.5215,-459.2425,-25.6172, 10.0);
	CreateDynamicPickup(1239, 23, 2072.3440, -1831.4056, 13.5545);*/
	CreateDynamic3DTextLabel("{FFFFFF}[/arac tamir - /pdtamir]", COLOR_DARKBLUE, 2072.3440, -1831.4056, 13.5545, 10.0); // idlewood
	CreateDynamicPickup(1247, 23, 1588.4293,-1633.6343,13.3828);
	CreateDynamic3DTextLabel("{FFFFFF}[/arac tamir - /pdtamir]", COLOR_DARKBLUE, 1025.2369,-1030.9207,32.0168, 10.0); //temple
	CreateDynamicPickup(1247, 23, 1025.2369,-1030.9207,32.0168);
	CreateDynamic3DTextLabel("{FFFFFF}[/arac tamir - /pdtamir]", COLOR_DARKBLUE, 488.3592,-1732.6564,11.1894, 10.0); //beach
	CreateDynamicPickup(1247, 23, 488.3592,-1732.6564,11.1894);
	CreateDynamic3DTextLabel("{FFFFFF}[LSPD Garajýna girmek için /pdgaraj yazýn.]", COLOR_DARKBLUE, 1588.4293,-1633.6343,13.3828, 10.0);
	CreateDynamicPickup(1247, 23, 2301.0156,2497.2593,3.2734);
	CreateDynamic3DTextLabel("{FFFFFF}[LSPD Garajýndan çýkmak için /pdgarajcik yazýn.]", COLOR_DARKBLUE, 2301.0156,2497.2593,3.2734, 10.0);

	CreateDynamicPickup(1581, 23, -2033.0439, -117.4885, 1035.1719);
	CreateDynamic3DTextLabel("[/ehliyetal]\n{FFFFFF}Ehliyeti bu ikonun üzerine gelerek alabilirsiniz.", COLOR_DARKBLUE, -2033.0439, -117.4885, 1035.1719, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

	CreateDynamicPickup(1239, 23, 1260.3976, -20.0215, 1001.0234);
	CreateDynamic3DTextLabel("[Kargo Boþaltma Noktasý]\n{FFFFFF}Type /loadcrate to begin loading cargo.", COLOR_YELLOW, 1260.3976, -20.0215, 1001.0234, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

	CreateDynamicPickup(1239, 23, 2218.6252,1592.4532,999.9790);
	CreateDynamic3DTextLabel("[Sandýk Parçalama]\n{FFFFFF}Sandýk açmak için /sandikac yazýn.", COLOR_DARKBLUE, 2218.6252,1592.4532,999.9790, 10.0);

    CreateDynamicPickup(1314, 23, -357.5095, 3415.0078, 1032.7606);
	CreateDynamic3DTextLabel("[Dýþarý]\n{FFFFFF}'F' ile çýkýþ.", COLOR_DARKBLUE,  -357.5095, 3415.0078, 1032.7606, 5.0);

	CreateDynamicPickup(1314, 23, 3.1347,23.0074,1199.5937);
	CreateDynamic3DTextLabel("[Dýþarý]\n{FFFFFF}'F' ile çýkýþ.", COLOR_DARKBLUE,  3.1347,23.0074,1199.5937, 5.0);

 	CreateDynamicPickup(1314, 23,  871.27, -1145.60, 1747.99);
	CreateDynamic3DTextLabel("[Evlilik]\n{FFFFFF}Evlenmek için /evlilik [id] yazýn.", COLOR_DARKBLUE,  871.27, -1145.60, 1747.99, 10.0);

	CreateDynamicPickup(1314, 23, MEMUR_X, MEMUR_Y, MEMUR_Z);
	CreateDynamic3DTextLabel("[Memur Çaðýrma]\n{FFFFFF}Memur çaðýrmak için /memurcagir yazýn.", COLOR_DARKBLUE, MEMUR_X, MEMUR_Y, MEMUR_Z, 10.0);

	CreateDynamicPickup(1239, 23, I_KACAKCILIK_YUKALMA_X, I_KACAKCILIK_YUKALMA_Y, I_KACAKCILIK_YUKALMA_Z);
	CreateDynamic3DTextLabel("[Ýçki Kaçakçýlýðý]\n{FFFFFF}Yük yüklemek için /iyukle yazýn.", COLOR_DARKBLUE, I_KACAKCILIK_YUKALMA_X, I_KACAKCILIK_YUKALMA_Y, I_KACAKCILIK_YUKALMA_Z, 10.0);

//	CreateDynamicPickup(1239, 23, E_KACAKCILIK_YUKALMA_X, E_KACAKCILIK_YUKALMA_Y, E_KACAKCILIK_YUKALMA_Z);
//	CreateDynamic3DTextLabel("[Elektronik Ürün Kaçakçýlýðý]\n{FFFFFF}Yük yüklemek için /eyukle yazýn.", COLOR_DARKBLUE, E_KACAKCILIK_YUKALMA_X, E_KACAKCILIK_YUKALMA_Y, E_KACAKCILIK_YUKALMA_Z, 10.0);

    CreateDynamicPickup(1239, 23, I_KACAKCILIK_YUKTESLIM_X, I_KACAKCILIK_YUKTESLIM_Y, I_KACAKCILIK_YUKTESLIM_Z);
	CreateDynamic3DTextLabel("[Ýçki Kaçakçýlýðý]\n{FFFFFF}Yük teslim için /iteslim yazýn.", COLOR_DARKBLUE, I_KACAKCILIK_YUKTESLIM_X, I_KACAKCILIK_YUKTESLIM_Y, I_KACAKCILIK_YUKTESLIM_Z, 10.0);

//    CreateDynamicPickup(1239, 23, E_KACAKCILIK_YUKTESLIM_X, E_KACAKCILIK_YUKTESLIM_Y, E_KACAKCILIK_YUKTESLIM_Z);
//	CreateDynamic3DTextLabel("[Elektronik Ürün Kaçakçýlýðý]\n{FFFFFF}Yük teslim için /eteslim yazýn.", COLOR_DARKBLUE, E_KACAKCILIK_YUKTESLIM_X, E_KACAKCILIK_YUKTESLIM_Y, E_KACAKCILIK_YUKTESLIM_Z, 10.0);

	CreateDynamicPickup(1559, 23, 272.2939, 1388.8876, 11.8342);
	CreateDynamic3DTextLabel("San Andreas Prison", COLOR_DARKBLUE, 272.2939, 1388.8876, 11.1342, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickup(1275, 23, 553.1263,-1875.2382,5.4192);
	CreateDynamic3DTextLabel("[Soyunma Kabini]\n{FFFFFF}Mayo giyinmek için '/mayo' yazýnýz.", COLOR_DARKBLUE, 553.1263,-1875.2382,5.4192, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickup(1559, 23, 1211.1923, -1354.3439, 797.4456);
	CreateDynamic3DTextLabel("Cezaevi", COLOR_DARKBLUE, 1211.1923, -1354.3439, 796.7456, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PRISON_WORLD, 5);


	for (new i = 0; i < sizeof(arrBoothPositions); i ++) {
	    CreateDynamic3DTextLabel("[Atýþ Poligonu]\n{FFFFFF}'F' ile girebilirsin.", COLOR_DARKBLUE, arrBoothPositions[i][0], arrBoothPositions[i][1], arrBoothPositions[i][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 7);
	}
	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) {
	 //   CreateDynamicMapIcon(arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 22, 0);

		//CreatePickup(1559, 23, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2] + 0.7);
		//Create3DTextLabel("General Hospital", COLOR_DARKBLUE, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 15.0, 0);
		
			// Insaat Meslek /kutu al ve /kutu býrak

Create3DTextLabel("{a64ca6}[Kutu Mesleði]\n{FFFFFF}[/kutu al]", -1, kutual, 30, 0, 0);
CreatePickup(1239, 1,kutual, -1);
Create3DTextLabel("{a64ca6}[Kutu Bölgesi 1]\n{FFFFFF}[/kutu birak]", -1, kutubirak, 30, 0, 0);
CreatePickup(1239, 1,kutubirak, -1);
Create3DTextLabel("{a64ca6}[Kutu Bölgesi 2]\n{FFFFFF}[/kutu birak]", -1, kutubirak2, 30, 0, 0);
CreatePickup(1239, 1,kutubirak2, -1);
Create3DTextLabel("{a64ca6}[Kutu Bölgesi 3]\n{FFFFFF}[/kutu birak]", -1, kutubirak3, 30, 0, 0);
CreatePickup(1239, 1,kutubirak3, -1);
Create3DTextLabel("{a64ca6}[Kutu Bölgesi 4]\n{FFFFFF}[/kutu birak]", -1, kutubirak4, 30, 0, 0);
CreatePickup(1239, 1,kutubirak4, -1);
Create3DTextLabel("{a64ca6}[Kutu Bölgesi 5]\n{FFFFFF}[/kutu birak]", -1, kutubirak5, 30, 0, 0);
CreatePickup(1239, 1,kutubirak5, -1);


		CreatePickup(1240, 23, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]);
		Create3DTextLabel("[Hasta Teslim]\n{FFFFFF}/hteslim ile edebilirsin.", COLOR_DARKBLUE, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2], 15.0, 0);
	}
  //Textdrawlar

/*
	gServerTextdraws[1] = TextDrawCreate(500.000000, 6.000000, "Devrim ~r~Roleplay");
	TextDrawBackgroundColor(gServerTextdraws[1], 255);
	TextDrawFont(gServerTextdraws[1], 1);
	TextDrawLetterSize(gServerTextdraws[1], 0.260000, 1.200000);
	TextDrawColor(gServerTextdraws[1], -1);
	TextDrawSetOutline(gServerTextdraws[1], 1);
	TextDrawSetProportional(gServerTextdraws[1], 1);
	TextDrawSetSelectable(gServerTextdraws[1], 0);
*/

    Altyazi1 = TextDrawCreate(156.000000, 387.519866, "[NEWS]:");
	TextDrawLetterSize(Altyazi1, 0.245999, 0.965333);
	TextDrawAlignment(Altyazi1, 1);
	TextDrawColor(Altyazi1, -65281);
	TextDrawSetShadow(Altyazi1, 0);
	TextDrawSetOutline(Altyazi1, 1);
	TextDrawBackgroundColor(Altyazi1, 51);
	TextDrawFont(Altyazi1, 1);
	TextDrawSetProportional(Altyazi1, 1);

	Altyazi2 = TextDrawCreate(483.600006, 385.286682, "usebox");
	TextDrawLetterSize(Altyazi2, 0.000000, 1.591478);
	TextDrawTextSize(Altyazi2, 146.000000, 0.000000);
	TextDrawAlignment(Altyazi2, 1);
	TextDrawColor(Altyazi2, 0);
	TextDrawUseBox(Altyazi2, true);
	TextDrawBoxColor(Altyazi2, 102);
	TextDrawSetShadow(Altyazi2, 0);
	TextDrawSetOutline(Altyazi2, 0);
	TextDrawFont(Altyazi2, 0);

	Altyazi3 = TextDrawCreate(207.999984, 387.519958, "Yazi buraya");
	TextDrawLetterSize(Altyazi3, 0.259599, 1.039999);
	TextDrawAlignment(Altyazi3, 1);
	TextDrawColor(Altyazi3, -1);
	TextDrawSetShadow(Altyazi3, 0);
	TextDrawSetOutline(Altyazi3, 1);
	TextDrawBackgroundColor(Altyazi3, 51);
	TextDrawFont(Altyazi3, 1);
	TextDrawSetProportional(Altyazi3, 1);


    gServerTextdraws[2] = TextDrawCreate(11.000000, 430.000000, "~r~Yaralisin!~w~ /doktorcagir.");
	TextDrawBackgroundColor(gServerTextdraws[2], 255);
	TextDrawFont(gServerTextdraws[2], 1);
	TextDrawLetterSize(gServerTextdraws[2], 0.300000, 1.100000);
	TextDrawColor(gServerTextdraws[2], -1);
	TextDrawSetOutline(gServerTextdraws[2], 1);
	TextDrawSetProportional(gServerTextdraws[2], 1);
	TextDrawSetSelectable(gServerTextdraws[2], 0);

    gServerTextdraws[3] = TextDrawCreate(237.000000, 409.000000, "~r~Sunucu Resetleniyor:~w~ 00:00");
	TextDrawBackgroundColor(gServerTextdraws[3], 255);
	TextDrawFont(gServerTextdraws[3], 1);
	TextDrawLetterSize(gServerTextdraws[3], 0.480000, 1.300000);
	TextDrawColor(gServerTextdraws[3], -1);
	TextDrawSetOutline(gServerTextdraws[3], 1);
	TextDrawSetProportional(gServerTextdraws[3], 1);
	TextDrawSetSelectable(gServerTextdraws[3], 0);


	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);

	SetNameTagDrawDistance(20.0);


	SetTimer("HudUpdate", 1000, true);
	SetTimer("PlayerCheck", 1000, true);
   // SetTimer("HudUpdate", 1000, true);
	SetTimer("FuelUpdate", 40000, true);
	SetTimer("RefuelCheck", 500, true);
	SetTimer("MinuteCheck", 60000, true);
	SetTimer("AgacReset", 600000, true);
	SetTimer("PaintballCheck", 1000, true);
//	SetTimer("MeslekAracSpawn", 120 * 1000, true);
	SetTimer("WeatherRotator", 3600000, true);

	SpecBG = TextDrawCreate(155.000000, 346.000000, "_");
	TextDrawBackgroundColor(SpecBG, 255);
	TextDrawFont(SpecBG, 1);
	TextDrawLetterSize(SpecBG, 0.500000, 6.099999);
	TextDrawColor(SpecBG, -1);
	TextDrawSetOutline(SpecBG, 0);
	TextDrawSetProportional(SpecBG, 1);
	TextDrawSetShadow(SpecBG, 1);
	TextDrawUseBox(SpecBG, 1);
	TextDrawBoxColor(SpecBG, 90);
	TextDrawTextSize(SpecBG, 410.000000, 0.000000);
	TextDrawSetSelectable(SpecBG, 0);

	SpecHPIcon = TextDrawCreate(156.000000, 360.000000, "hud:radar_hostpital");
	TextDrawBackgroundColor(SpecHPIcon, 255);
	TextDrawFont(SpecHPIcon, 4);
	TextDrawLetterSize(SpecHPIcon, 0.500000, 1.000000);
	TextDrawColor(SpecHPIcon, -1);
	TextDrawSetOutline(SpecHPIcon, 0);
	TextDrawSetProportional(SpecHPIcon, 1);
	TextDrawSetShadow(SpecHPIcon, 1);
	TextDrawUseBox(SpecHPIcon, 1);
	TextDrawBoxColor(SpecHPIcon, 255);
	TextDrawTextSize(SpecHPIcon, 10.000000, 10.000000);
	TextDrawSetSelectable(SpecHPIcon, 0);

	SpecGunIcon = TextDrawCreate(156.000000, 374.000000, "hud:radar_ammugun");
	TextDrawBackgroundColor(SpecGunIcon, 255);
	TextDrawFont(SpecGunIcon, 4);
	TextDrawLetterSize(SpecGunIcon, 0.500000, 1.000000);
	TextDrawColor(SpecGunIcon, -1);
	TextDrawSetOutline(SpecGunIcon, 0);
	TextDrawSetProportional(SpecGunIcon, 1);
	TextDrawSetShadow(SpecGunIcon, 1);
	TextDrawUseBox(SpecGunIcon, 1);
	TextDrawBoxColor(SpecGunIcon, 255);
	TextDrawTextSize(SpecGunIcon, 10.000000, 10.000000);
	TextDrawSetSelectable(SpecGunIcon, 0);

	SpecCarIcon = TextDrawCreate(156.000000, 388.000000, "hud:radar_impound");
	TextDrawBackgroundColor(SpecCarIcon, 255);
	TextDrawFont(SpecCarIcon, 4);
	TextDrawLetterSize(SpecCarIcon, 0.500000, 1.000000);
	TextDrawColor(SpecCarIcon, -1);
	TextDrawSetOutline(SpecCarIcon, 0);
	TextDrawSetProportional(SpecCarIcon, 1);
	TextDrawSetShadow(SpecCarIcon, 1);
	TextDrawUseBox(SpecCarIcon, 1);
	TextDrawBoxColor(SpecCarIcon, 255);
	TextDrawTextSize(SpecCarIcon, 10.000000, 10.000000);
	TextDrawSetSelectable(SpecCarIcon, 0);

	djson_GameModeInit();

//	SetTimer("RandomFire", 1800000, true);

	Yayin[0] = TextDrawCreate(-6.573894, 384.250915, "box");
	TextDrawLetterSize(Yayin[0], 0.000000, 6.860908);
	TextDrawTextSize(Yayin[0], 664.000000, 0.000000);
	TextDrawAlignment(Yayin[0], 1);
	TextDrawColor(Yayin[0], -1);
	TextDrawUseBox(Yayin[0], 1);
	TextDrawBoxColor(Yayin[0], 255);
	TextDrawSetShadow(Yayin[0], 0);
	TextDrawSetOutline(Yayin[0], 0);
	TextDrawBackgroundColor(Yayin[0], 255);
	TextDrawFont(Yayin[0], 1);
	TextDrawSetProportional(Yayin[0], 1);
	TextDrawSetShadow(Yayin[0], 0);

	Yayin[1] = TextDrawCreate(17.320671, 372.583129, "S");
	TextDrawLetterSize(Yayin[1], 0.905065, 4.061668);
	TextDrawAlignment(Yayin[1], 1);
	TextDrawColor(Yayin[1], -5963521);
	TextDrawSetShadow(Yayin[1], -159);
	TextDrawSetOutline(Yayin[1], -1);
	TextDrawBackgroundColor(Yayin[1], 255);
	TextDrawFont(Yayin[1], 3);
	TextDrawSetProportional(Yayin[1], 1);
	TextDrawSetShadow(Yayin[1], -159);

	Yayin[2] = TextDrawCreate(4.033734, 366.166473, "LD_POOL:ball");
	TextDrawLetterSize(Yayin[2], 0.000000, 0.000000);
	TextDrawTextSize(Yayin[2], 61.000000, 65.000000);
	TextDrawAlignment(Yayin[2], 1);
	TextDrawColor(Yayin[2], -1378294017);
	TextDrawSetShadow(Yayin[2], 0);
	TextDrawSetOutline(Yayin[2], 0);
	TextDrawBackgroundColor(Yayin[2], 255);
	TextDrawFont(Yayin[2], 4);
	TextDrawSetProportional(Yayin[2], 0);
	TextDrawSetShadow(Yayin[2], 0);

	Yayin[3] = TextDrawCreate(16.852153, 407.583251, "TELEVISION");
	TextDrawLetterSize(Yayin[3], 0.175578, 1.022500);
	TextDrawAlignment(Yayin[3], 1);
	TextDrawColor(Yayin[3], -5963521);
	TextDrawSetShadow(Yayin[3], 0);
	TextDrawSetOutline(Yayin[3], 1);
	TextDrawBackgroundColor(Yayin[3], 255);
	TextDrawFont(Yayin[3], 1);
	TextDrawSetProportional(Yayin[3], 1);
	TextDrawSetShadow(Yayin[3], 0);

	Yayin[4] = TextDrawCreate(61.361618, 383.083129, "box");
	TextDrawLetterSize(Yayin[4], 0.000000, -0.260613);
	TextDrawTextSize(Yayin[4], 638.000000, 0.000000);
	TextDrawAlignment(Yayin[4], 1);
	TextDrawColor(Yayin[4], -5963521);
	TextDrawUseBox(Yayin[4], 1);
	TextDrawBoxColor(Yayin[4], -5963521);
	TextDrawSetShadow(Yayin[4], 0);
	TextDrawSetOutline(Yayin[4], 0);
	TextDrawBackgroundColor(Yayin[4], -5963521);
	TextDrawFont(Yayin[4], 1);
	TextDrawSetProportional(Yayin[4], 1);
	TextDrawSetShadow(Yayin[4], 0);

	Yayin[5] = TextDrawCreate(-16.881372, 381.916717, "box");
	TextDrawLetterSize(Yayin[5], 0.000000, -0.213761);
	TextDrawTextSize(Yayin[5], 8.000000, 0.000000);
	TextDrawAlignment(Yayin[5], 1);
	TextDrawColor(Yayin[5], -1);
	TextDrawUseBox(Yayin[5], 1);
	TextDrawBoxColor(Yayin[5], -5963521);
	TextDrawSetShadow(Yayin[5], 0);
	TextDrawSetOutline(Yayin[5], 0);
	TextDrawBackgroundColor(Yayin[5], 255);
	TextDrawFont(Yayin[5], 1);
	TextDrawSetProportional(Yayin[5], 1);
	TextDrawSetShadow(Yayin[5], 0);

	Yayin[6] = TextDrawCreate(99.143737, 382.499725, "LD_SPAC:white");
	TextDrawLetterSize(Yayin[6], 0.000000, 0.000000);
	TextDrawTextSize(Yayin[6], 130.000000, 19.000000);
	TextDrawAlignment(Yayin[6], 1);
	TextDrawColor(Yayin[6], -5963521);
	TextDrawSetShadow(Yayin[6], 0);
	TextDrawSetOutline(Yayin[6], 0);
	TextDrawBackgroundColor(Yayin[6], 255);
	TextDrawFont(Yayin[6], 4);
	TextDrawSetProportional(Yayin[6], 0);
	TextDrawSetShadow(Yayin[6], 0);

	Yayin[7] = TextDrawCreate(103.060058, 382.499908, "~r~Yayin Adi: ~g~Film");
	TextDrawLetterSize(Yayin[7], 0.370483, 1.564999);
	TextDrawAlignment(Yayin[7], 1);
	TextDrawColor(Yayin[7], -1);
	TextDrawSetShadow(Yayin[7], 0);
	TextDrawSetOutline(Yayin[7], 0);
	TextDrawBackgroundColor(Yayin[7], 255);
	TextDrawFont(Yayin[7], 0);
	TextDrawSetProportional(Yayin[7], 1);
	TextDrawSetShadow(Yayin[7], 0);

	Yayin[8] = TextDrawCreate(84.787719, 412.249938, "Ekranlarda_da_gordugunuz_gibi_basbakann_su_an_bagiriyor;_vurur_yuze_ifadesi,_nasil_kazandik_bitanesi!");
	TextDrawLetterSize(Yayin[8], 0.306764, 1.331665);
	TextDrawAlignment(Yayin[8], 1);
	TextDrawColor(Yayin[8], -1);
	TextDrawSetShadow(Yayin[8], 0);
	TextDrawSetOutline(Yayin[8], 0);
	TextDrawBackgroundColor(Yayin[8], 255);
	TextDrawFont(Yayin[8], 1);
	TextDrawSetProportional(Yayin[8], 1);
	TextDrawSetShadow(Yayin[8], 0);

	Yayin[9] = TextDrawCreate(265.000061, 381.916564, "LD_SPAC:white");
	TextDrawLetterSize(Yayin[9], 0.000000, 0.000000);
	TextDrawTextSize(Yayin[9], 352.000000, 19.000000);
	TextDrawAlignment(Yayin[9], 1);
	TextDrawColor(Yayin[9], -5963521);
	TextDrawSetShadow(Yayin[9], 0);
	TextDrawSetOutline(Yayin[9], 0);
	TextDrawBackgroundColor(Yayin[9], 255);
	TextDrawFont(Yayin[9], 4);
	TextDrawSetProportional(Yayin[9], 0);
	TextDrawSetShadow(Yayin[9], 0);

	Yayin[10] = TextDrawCreate(269.853698, 383.666564, "~r~TELEFON: ~g~656566");
	TextDrawLetterSize(Yayin[10], 0.260380, 1.314165);
	TextDrawAlignment(Yayin[10], 1);
	TextDrawColor(Yayin[10], -1523963137);
	TextDrawSetShadow(Yayin[10], 0);
	TextDrawSetOutline(Yayin[10], 0);
	TextDrawBackgroundColor(Yayin[10], 255);
	TextDrawFont(Yayin[10], 1);
	TextDrawSetProportional(Yayin[10], 0);
	TextDrawSetShadow(Yayin[10], 0);


	for (new i = 1; i < MAX_VEHICLES; i++)
	{


		Flasher[i]=0;
		FlasherState[i]=0;

		carMDC[i][0] = TextDrawCreate(546.749938, 159.083328, "box");
		TextDrawLetterSize(carMDC[i][0], 0.000000, 5.830162);
		TextDrawTextSize(carMDC[i][0], 619.000000, 0.000000);
		TextDrawAlignment(carMDC[i][0], 1);
		TextDrawColor(carMDC[i][0], -1);
		TextDrawUseBox(carMDC[i][0], 1);
		TextDrawBoxColor(carMDC[i][0], 80);
		TextDrawSetShadow(carMDC[i][0], 0);
		TextDrawSetOutline(carMDC[i][0], 0);
		TextDrawBackgroundColor(carMDC[i][0], 255);
		TextDrawFont(carMDC[i][0], 1);
		TextDrawSetProportional(carMDC[i][0], 1);
		TextDrawSetShadow(carMDC[i][0], 0);

		carMDC[i][1] = TextDrawCreate(567.833374, 149.750045, "mdc");
		TextDrawLetterSize(carMDC[i][1], 0.400000, 1.600000);
		TextDrawAlignment(carMDC[i][1], 1);
		TextDrawColor(carMDC[i][1], -2147483393);
		TextDrawSetShadow(carMDC[i][1], 0);
		TextDrawSetOutline(carMDC[i][1], -2);
		TextDrawBackgroundColor(carMDC[i][1], 255);
		TextDrawFont(carMDC[i][1], 3);
		TextDrawSetProportional(carMDC[i][1], 1);
		TextDrawSetShadow(carMDC[i][1], 0);

		carMDC[i][2] = TextDrawCreate(550.497985, 168.416625, "~r~PLAKA: ~y~N/A");
		TextDrawLetterSize(carMDC[i][2], 0.276309, 1.179998);
		TextDrawAlignment(carMDC[i][2], 1);
		TextDrawColor(carMDC[i][2], -1);
		TextDrawSetShadow(carMDC[i][2], 0);
		TextDrawSetOutline(carMDC[i][2], -1);
		TextDrawBackgroundColor(carMDC[i][2], 255);
		TextDrawFont(carMDC[i][2], 1);
		TextDrawSetProportional(carMDC[i][2], 1);
		TextDrawSetShadow(carMDC[i][2], 0);

		carMDC[i][3] = TextDrawCreate(549.561096, 181.833236, "~r~MODEL: ~y~N/A");
		TextDrawLetterSize(carMDC[i][3], 0.276309, 1.179998);
		TextDrawAlignment(carMDC[i][3], 1);
		TextDrawColor(carMDC[i][3], -1);
		TextDrawSetShadow(carMDC[i][3], 0);
		TextDrawSetOutline(carMDC[i][3], -1);
		TextDrawBackgroundColor(carMDC[i][3], 255);
		TextDrawFont(carMDC[i][3], 1);
		TextDrawSetProportional(carMDC[i][3], 1);
		TextDrawSetShadow(carMDC[i][3], 0);

		carMDC[i][4] = TextDrawCreate(550.029541, 195.833236, "~r~HIZ: ~y~N/A");
		TextDrawLetterSize(carMDC[i][4], 0.276309, 1.179998);
		TextDrawAlignment(carMDC[i][4], 1);
		TextDrawColor(carMDC[i][4], -1);
		TextDrawSetShadow(carMDC[i][4], 0);
		TextDrawSetOutline(carMDC[i][4], -1);
		TextDrawBackgroundColor(carMDC[i][4], 255);
		TextDrawFont(carMDC[i][4], 1);
		TextDrawSetProportional(carMDC[i][4], 1);
		TextDrawSetShadow(carMDC[i][4], 0);
	}

	return 1;
}


forward MeslekAracSpawn();
public MeslekAracSpawn()
{
    foreach(new i : Player)
	{
 		SQL_SaveCharacter(i);
	}


	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    new modelid = GetVehicleModel(i);
	    new id = Car_GetID(i);
	    foreach (new oyuncu : Player) {
	    if (id != -1 && !IsPlayerInAnyVehicle(oyuncu) && IsValidVehicle(i) && GetVehicleDriver(i) != INVALID_PLAYER_ID && modelid != 435 && CarData[id][carMeslek] >= 1 && CarData[id][carMeslek] != 7)
	    {
	        RespawnVehicle(i);
		}
		}

	}
	new bool: res_VehUsed[MAX_VEHICLES], res_vehID, res_trailerID, res_vehMod;
	for(new tt, g = GetMaxPlayers(); tt < g; tt++)
	{
		if(!IsPlayerConnected(tt)) continue;
		if(GetPlayerVehicleID(tt) == 0) continue;
		res_vehID = GetPlayerVehicleID(tt);
		if(res_vehID == -1) return 0;
		res_VehUsed[res_vehID] = true;
		res_vehMod = GetVehicleModel(res_vehID);
		if(res_vehMod == 403 || res_vehMod == 514 || res_vehMod == 515 || res_vehMod == 525 || res_vehMod == 531 || res_vehMod == 572 || res_vehMod == 583)
		{
			// Linerunner,Tanker,Roadtrain,Towtruck,Tractor,Mower,Tug
			res_trailerID = GetVehicleTrailer(res_vehID);
			if(res_trailerID > 0) res_VehUsed[res_trailerID] = true;
		}
	}
	for(new vehicleid = 1; vehicleid < MAX_VEHICLES; vehicleid++)
	{

	    new id = Car_GetID(vehicleid);
		if(id != -1 && !res_VehUsed[vehicleid] && IsValidVehicle(vehicleid) && CarData[id][carMeslek] >= 2 && CarData[id][carMeslek] != 7) SetVehicleToRespawn(vehicleid);

	}
	return 1;
}

forward HudUpdate();
public HudUpdate()
{
	new yil,ay,gun,saat,dakika,saniye;
	getdate(yil, ay, gun), gettime(saat, dakika, saniye);
	if(k_time) {
		foreach (new i : Player) if (PlayerData[i][pDrugUsed] != 3) {
			SetPlayerTime(i, saat, dakika);
			    new drunknew;
    drunknew = GetPlayerDrunkLevel(i);

    if (drunknew < 100)
    {
    SetPlayerDrunkLevel(i, 2000);
    }
    else
    {
    if (pDrunkLevelLast[i] != drunknew)
    {
    new wfps = pDrunkLevelLast[i] - drunknew;
    if ((wfps > 0) && (wfps < 200))
    pFPS[i] = wfps;
    pDrunkLevelLast[i] = drunknew;
        }
    }
		}
	} else {
	    foreach (new i : Player) if (PlayerData[i][pDrugUsed] != 3) {
			SetPlayerTime(i, k_saat, k_dakika);
			    new drunknew;
    drunknew = GetPlayerDrunkLevel(i);

    if (drunknew < 100)
    {
    SetPlayerDrunkLevel(i, 2000);
    }
    else
    {
    if (pDrunkLevelLast[i] != drunknew)
    {
    new wfps = pDrunkLevelLast[i] - drunknew;
    if ((wfps > 0) && (wfps < 200))
    pFPS[i] = wfps;
    pDrunkLevelLast[i] = drunknew;
        }
    }
		}
	}
	/*
	format(string, sizeof string, "%d/%s%d/%s%d", gun, ((ay < 10) ? ("0") : ("")), ay, (yil < 10) ? ("0") : (""), yil);
	TextDrawSetString(Hud3, string);
	format(string, sizeof string, "%s%d:%s%d", (saat < 10) ? ("0") : (""), saat, (dakika < 10) ? ("0") : (""), dakika, (saniye < 10) ? ("0") : (""));
	TextDrawSetString(Hud2, string);*/
	return 1;
}

forward WeatherRotator();
public WeatherRotator()
{
    for (new fabrikaid = 0; fabrikaid != MAX_FABRIKA; fabrikaid ++) if(Fabrikalar[fabrikaid][fabrikaVarmi] && gettime() > Fabrikalar[fabrikaid][fabrikaTime])
   	{
  		Fabrikalar[fabrikaid][fabrikaBirlik] = -1;
    	SendClientMessageToAllEx(COLOR_RADIO, "FABRÝKA: {FFFFFF}%s adlý fabrika ele geçirmeye müsait.", Fabrikalar[fabrikaid][fabrikaAd]);
		for (new fabrikam = 0; fabrikam != 4; fabrikam ++)
		{
			Fabrikalar[fabrikaid][fabrikaDepo][fabrikam] = 0;
		}
		Fabrikalar[fabrikaid][fabrikaUretimHizi] = 1.5;
		Fabrika_Yenile(fabrikaid);
		Fabrika_Kaydet(fabrikaid);
	}
	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (!IsVehicleImpounded(Car_GetRealID(i)) && CarData[i][carOwner] != 0) {
        new Float:fPercentage = AracFiyati(CarData[i][carModel])*0.0023;
		fPercentage = fPercentage/6;
		new vergi = floatround(fPercentage, floatround_round);
		if (AracFiyati(CarData[i][carModel]) != -1)
		{
			CarData[i][carVergi] += vergi;
		} else if (IsABike(CarData[i][carVehicle])) CarData[i][carVergi] += 10;
		else CarData[i][carVergi] += 25;
		fPercentage = AracFiyati(CarData[i][carModel])* 0.09;
	/*	new vergi_hesap = floatround(fPercentage, floatround_round);
        if(CarData[i][carVergi] >= vergi_hesap && AracFiyati(CarData[i][carModel]) != -1) {
		    Log_Write("logs/vergi_log.txt", "[%s] %d SQL ID'li arac vergi odenmediginden dolayi silindi. (Sahip ID: %d / %s)", ReturnDate(), CarData[i][carID], CarData[i][carOwner], ReturnVehicleModelName(CarData[i][carModel]));
         	Car_Delete(i);*/
	}
//	havaid = random(sizeof(g_aWeatherRotations));
	//SetWeather(g_aWeatherRotations[havaid]);
}

forward LotteryUpdate();
public LotteryUpdate()
{
	new
		number = random(60) + 1,
		jackpot = random(2000) + 1000;

 foreach (new i : Player)
	{
	    if(PlayerData[i][pLotteryB] == 1)
	    {
			if (PlayerData[i][pLottery] == number)
			{
				GiveMoney(i, jackpot);
				SendServerMessage(i, "Loto sana tuttu ve %s kazandýn!", FormatNumber(jackpot));
			}
			else
			{
		    	SendClientMessage(i, COLOR_WHITE, "[LOTO]: Malesef loto sana tutmadý...");
			}
			PlayerData[i][pLottery] = 0;
			PlayerData[i][pLotteryB] = 0;
		}
	}
	return 1;
}

CMD:lotobaslat(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

    CallRemoteFunction("LotteryUpdate", "");
    SendServerMessage(playerid, "Loto baþlatýldý.");
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{


	if (!PlayerData[playerid][pAccount])
	{
	    new
	        time[3];

        gettime(time[0], time[1], time[2]);
		SetPlayerTime(playerid, time[0], time[1]);

	    PlayerData[playerid][pAccount] = 1;
	    TogglePlayerSpectating(playerid, 1);

		SetPlayerColor(playerid, DEFAULT_COLOR);
		SetTimerEx("AccountCheck", 400, false, "d", playerid); // 400 ms
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{

 foreach(new i : Player)
	{
	    if(IzlenenID[i] == playerid)
		{
  			SetPlayerInterior(i, GetPlayerInterior(playerid));
	    	SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			PlayerSpectatePlayer(i, playerid);
		}
	}

	if(newinteriorid == 0)
	{
	    SetPVarInt(playerid, "InsideBank", 0);
		SetPVarInt(playerid, "BankPickupCooldown", gettime() + PICKUP_COOLDOWN);
		if(GetPVarInt(playerid, "Alarm"))
		{
			SetPVarInt(playerid, "Alarm", 0);
		   	PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
		}
	    if(RobberyCash[playerid] > 0 && !IsValidDynamicCP(RobberyEscape[playerid]))
	    {
		    new ids = random(sizeof(GetawayLocations));
		    RobberyEscape[playerid] = CreateDynamicCP(GetawayLocations[ids][0], GetawayLocations[ids][1], GetawayLocations[ids][2], 3.0, .playerid = playerid, .streamdistance = 5000.0);
		    SendServerMessage(playerid, "Haritada iþaretli noktaya git. Gidemezsen/ölürsen soygun baþarýsýz olur.");
		}
	}
    if(PlayingPool[playerid])
    {
        PlayingPool[playerid] = 0;
        new
		    count = GetPoolPlayersCount();
        if(count <= 0)
        {
			PoolStarted = 0;
			RespawnPoolBalls();
        }
    }
    return 1;
}
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{

	return 1;
}
/*public OnPlayerRequestDownload(playerid, type, crc)
{
if(!IsPlayerConnected(playerid))
return 0;
new filename[64], filefound, url_final[256];
new SERVER_DOWNLOAD[] = "http://ni281917_1.fastdownload.nitrado.net/03dl/models";
if(type == DOWNLOAD_REQUEST_TEXTURE_FILE)
filefound = FindTextureFileNameFromCRC(crc, filename, sizeof(filename));
else if(type == DOWNLOAD_REQUEST_MODEL_FILE)
filefound = FindModelFileNameFromCRC(crc, filename, sizeof(filename));
if(filefound)
{
format(url_final, sizeof(url_final), "%s/%s", SERVER_DOWNLOAD, filename);
RedirectDownload(playerid, url_final);
}
return 1;
}*/
public OnPlayerSpawn(playerid, userid)
{
new npcname[MAX_PLAYER_NAME];
GetPlayerName(playerid, npcname, sizeof(npcname));
if(!strcmp(npcname, "Kacakci", true))
        {
            SetPlayerPos(playerid, 1424.5400,-1357.1127,13.5733);
            SetPlayerSkin(playerid,149);
        }
PMSpec[playerid] = 0;
//SetTimerEx("HackCheck", FREEZE_SECONDS * 1000, 0, "i", playerid);
TogglePlayerControllable(playerid, 0);
//SendClientMessage(playerid, -1, "El server esta cargando los mapeos, espera por favor!");
//==============[EV SÝSTEMÝ]============================
InEV[playerid] = INVALID_EV_ID;
new query[128];
mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM EVsales WHERE OldOwner='%e'", Player_GetName(playerid));
mysql_tquery(g_iHandle, query, "EVSaleMoney", "i", playerid);
//BÝTÝÞ
Spawned[playerid] = 1;
	StopAudioStreamForPlayer(playerid);
// CreateSnow(playerid);
	for (new i = 0; i < 7; i ++)
			{
			PlayerTextDrawShow(playerid, TDEditor_Hud[playerid][i]);
			}


//	LoadPapagan(playerid);

    for (new i = 0; i < 2; i ++) {
		TextDrawHideForPlayer(playerid, NewLoginTD[i]);
	}
    Telefon_Kapat(playerid);
    Streamer_Update(playerid);
    //ShowHungerTextdraw(playerid, 1);
   // Susuzluk[playerid] =  CreatePlayerProgressBar(playerid, 605.00, 25.00, 30.50, 4.19, 0x007FFFFF, 100.0);
    //Aclik[playerid] = CreatePlayerProgressBar(playerid, 605.00, 15.00, 30.50, 4.19, 0xD0AEEBFF, 100.0);


    foreach(new i : Player)
	{
		if(IzlenenID[i] == playerid)
		{
		    SetPlayerInterior(i, GetPlayerInterior(playerid));
	    	SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			PlayerSpectatePlayer(i, playerid);
		}
	}

    PreloadAnimLib(playerid, "POOL");


    if(BallHolder == playerid)
	    RecreateBall();

	ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0); // Preloads anim lib
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0); // Preloads anim lib
    if(PoolAimer == playerid)
	{
        PoolAimer = -1;
        TextDrawHideForPlayer(playerid, PoolTD[0]);
        TextDrawHideForPlayer(playerid, PoolTD[1]);
        TextDrawHideForPlayer(playerid, PoolTD[2]);
        TextDrawHideForPlayer(playerid, PoolTD[3]);
        DestroyObject(AimObject);
	}
    if(PlayingPool[playerid])
    {
        PlayingPool[playerid] = 0;
        new
		    count = GetPoolPlayersCount();
        if(count <= 0)
        {
			PoolStarted = 0;
			RespawnPoolBalls();
        }
    }

    new pbid = PlayerData[playerid][pPaintball];
    if(pbid != -1 && Paintball[pbid][odaDurum] == 2)
    {
        if(Paintball[pbid][odaTur] == 1) {
            Paintball_DMSpawn(playerid);
        } else Paintball_TDMSpawn(playerid);
        return 1;
    }

    	if(!gPlayerAnimLibsPreloaded[playerid])
		{
	    PreloadAnimLib(playerid,"AIRPORT");
		PreloadAnimLib(playerid,"Attractors");
		PreloadAnimLib(playerid,"BAR");
		PreloadAnimLib(playerid,"BASEBALL");
		PreloadAnimLib(playerid,"BD_FIRE");
		PreloadAnimLib(playerid,"benchpress");
        PreloadAnimLib(playerid,"BF_injection");
        PreloadAnimLib(playerid,"BIKED");
        PreloadAnimLib(playerid,"BIKEH");
        PreloadAnimLib(playerid,"BIKELEAP");
        PreloadAnimLib(playerid,"BIKES");
        PreloadAnimLib(playerid,"BIKEV");
        PreloadAnimLib(playerid,"BIKE_DBZ");
        PreloadAnimLib(playerid,"BMX");
        PreloadAnimLib(playerid,"BOX");
        PreloadAnimLib(playerid,"BSKTBALL");
        PreloadAnimLib(playerid,"BUDDY");
        PreloadAnimLib(playerid,"BUS");
        PreloadAnimLib(playerid,"CAMERA");
        PreloadAnimLib(playerid,"CAR");
        PreloadAnimLib(playerid,"CAR_CHAT");
        PreloadAnimLib(playerid,"CASINO");
        PreloadAnimLib(playerid,"CHAINSAW");
        PreloadAnimLib(playerid,"CHOPPA");
        PreloadAnimLib(playerid,"CLOTHES");
        PreloadAnimLib(playerid,"COACH");
        PreloadAnimLib(playerid,"COLT45");
        PreloadAnimLib(playerid,"COP_DVBYZ");
        PreloadAnimLib(playerid,"CRIB");
        PreloadAnimLib(playerid,"DAM_JUMP");
        PreloadAnimLib(playerid,"DANCING");
        PreloadAnimLib(playerid,"DILDO");
        PreloadAnimLib(playerid,"DODGE");
        PreloadAnimLib(playerid,"DOZER");
        PreloadAnimLib(playerid,"DRIVEBYS");
        PreloadAnimLib(playerid,"FAT");
        PreloadAnimLib(playerid,"FIGHT_B");
        PreloadAnimLib(playerid,"FIGHT_C");
        PreloadAnimLib(playerid,"FIGHT_D");
        PreloadAnimLib(playerid,"FIGHT_E");
        PreloadAnimLib(playerid,"FINALE");
        PreloadAnimLib(playerid,"FINALE2");
        PreloadAnimLib(playerid,"Flowers");
        PreloadAnimLib(playerid,"FOOD");
        PreloadAnimLib(playerid,"Freeweights");
        PreloadAnimLib(playerid,"GANGS");
        PreloadAnimLib(playerid,"GHANDS");
        PreloadAnimLib(playerid,"GHETTO_DB");
        PreloadAnimLib(playerid,"goggles");
        PreloadAnimLib(playerid,"GRAFFITI");
        PreloadAnimLib(playerid,"GRAVEYARD");
        PreloadAnimLib(playerid,"GRENADE");
        PreloadAnimLib(playerid,"GYMNASIUM");
        PreloadAnimLib(playerid,"HAIRCUTS");
        PreloadAnimLib(playerid,"HEIST9");
        PreloadAnimLib(playerid,"INT_HOUSE");
        PreloadAnimLib(playerid,"INT_OFFICE");
        PreloadAnimLib(playerid,"INT_SHOP");
        PreloadAnimLib(playerid,"JST_BUISNESS");
        PreloadAnimLib(playerid,"KART");
        PreloadAnimLib(playerid,"KISSING");
        PreloadAnimLib(playerid,"KNIFE");
        PreloadAnimLib(playerid,"LAPDAN1");
        PreloadAnimLib(playerid,"LAPDAN2");
        PreloadAnimLib(playerid,"LAPDAN3");
        PreloadAnimLib(playerid,"LOWRIDER");
        PreloadAnimLib(playerid,"MD_CHASE");
        PreloadAnimLib(playerid,"MEDIC");
        PreloadAnimLib(playerid,"MD_END");
        PreloadAnimLib(playerid,"MISC");
        PreloadAnimLib(playerid,"MTB");
        PreloadAnimLib(playerid,"MUSCULAR");
        PreloadAnimLib(playerid,"NEVADA");
        PreloadAnimLib(playerid,"ON_LOOKERS");
        PreloadAnimLib(playerid,"OTB");
        PreloadAnimLib(playerid,"PARACHUTE");
        PreloadAnimLib(playerid,"PARK");
        PreloadAnimLib(playerid,"PAULNMAC");
        PreloadAnimLib(playerid,"PED");
        PreloadAnimLib(playerid,"PLAYER_DVBYS");
        PreloadAnimLib(playerid,"PLAYIDLES");
        PreloadAnimLib(playerid,"POLICE");
        PreloadAnimLib(playerid,"POOL");
        PreloadAnimLib(playerid,"POOR");
        PreloadAnimLib(playerid,"PYTHON");
        PreloadAnimLib(playerid,"QUAD");
        PreloadAnimLib(playerid,"QUAD_DBZ");
        PreloadAnimLib(playerid,"RIFLE");
        PreloadAnimLib(playerid,"RIOT");
        PreloadAnimLib(playerid,"ROB_BANK");
        PreloadAnimLib(playerid,"ROCKET");
        PreloadAnimLib(playerid,"RUSTLER");
        PreloadAnimLib(playerid,"RYDER");
        PreloadAnimLib(playerid,"SCRATCHING");
        PreloadAnimLib(playerid,"SHAMAL");
        PreloadAnimLib(playerid,"SHOTGUN");
        PreloadAnimLib(playerid,"SILENCED");
        PreloadAnimLib(playerid,"SKATE");
        PreloadAnimLib(playerid,"SPRAYCAN");
        PreloadAnimLib(playerid,"STRIP");
        PreloadAnimLib(playerid,"SUNBATHE");
        PreloadAnimLib(playerid,"SWAT");
        PreloadAnimLib(playerid,"SWEET");
        PreloadAnimLib(playerid,"SWIM");
        PreloadAnimLib(playerid,"SWORD");
        PreloadAnimLib(playerid,"TANK");
        PreloadAnimLib(playerid,"TATTOOS");
        PreloadAnimLib(playerid,"TEC");
        PreloadAnimLib(playerid,"TRAIN");
        PreloadAnimLib(playerid,"TRUCK");
        PreloadAnimLib(playerid,"UZI");
        PreloadAnimLib(playerid,"VAN");
        PreloadAnimLib(playerid,"VENDING");
        PreloadAnimLib(playerid,"VORTEX");
        PreloadAnimLib(playerid,"WAYFARER");
        PreloadAnimLib(playerid,"WEAPONS");
        PreloadAnimLib(playerid,"WUZI");
        PreloadAnimLib(playerid,"SNM");
        PreloadAnimLib(playerid,"BLOWJOBZ");
        PreloadAnimLib(playerid,"SEX");
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
    	PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
    	PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS");
    	PreloadAnimLib(playerid,"DEALER");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}


//	if(GirisTimer[playerid] == 1 && !IsPlayerNPC(playerid))
//	    return _Kick(playerid);



    // Skill levels
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);

	if (PlayerData[playerid][pHUD])
	{
        TextDrawShowForPlayer(playerid, gServerTextdraws[0]);

	}
	TextDrawHideForPlayer(playerid, Altyazi3),TextDrawHideForPlayer(playerid, Altyazi2),TextDrawHideForPlayer(playerid, Altyazi1);
    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
    Streamer_ToggleIdleUpdate(playerid, true);


    if (PlayerData[playerid][pBleeding])
	{
 		PlayerData[playerid][pBleedTime] = 1;
   	}
	if (PlayerData[playerid][pJailTime] > 0)
	{
	    if (PlayerData[playerid][pPrisoned])
	    {
	        SetPlayerInPrison(playerid);
	    }
	    else
	    {
		    JBC_SetPlayerPos(playerid, 223.5853, 110.7882, 999.0156);
		    SetPlayerInterior(playerid, 10);

		    SetPlayerVirtualWorld(playerid, (playerid + 100));
		    SetPlayerFacingAngle(playerid, 0.0);

		    SetCameraBehindPlayer(playerid);
		}

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][70]);
	    SendServerMessage(playerid, "Kalan %d saniye hapis süreniz var. (Sebep: %s)", PlayerData[playerid][pJailTime],  PlayerData[playerid][pJailReason]);
	}
	else if (PlayerData[playerid][pHospital] != -1)
	{
	    PlayerData[playerid][pHospitalTime] = 0;
	    PlayerData[playerid][pHunger] = 50;
	    PlayerData[playerid][pThirst] = 50;
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, playerid + 100);
        Yarali[playerid] = false;
		JBC_SetPlayerPos(playerid, -211.0370, -1738.6848, 676.7153);
		SetPlayerFacingAngle(playerid, 82.0000);

		SetPlayerCameraPos(playerid, -214.236602, -1738.812133, 676.648132);
		SetPlayerCameraLookAt(playerid, -203.072738, -1738.656127, 675.768737);

        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

        foreach(new i : Player)
	    {
			if(TakiptekiYarali[i] == playerid)
			{
			    SendServerMessage(i, "Doktor çaðýran kiþi hayatýný kaybettiði için otomatik olarak iptal edildi.");
			    DisablePlayerCheckpoint(i);
			    PlayerData[i][pCP] = 0;
			}
		}

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Kurtariliyor... 15", 1000, 3);
		TogglePlayerControllable(playerid, 0);
	}
	else if (!PlayerData[playerid][pCreated])
	{
 		for (new i = 23; i < 34; i ++) {
		    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
	    SetDefaultSpawn(playerid);
	   	//Dialog_Show(playerid, TutorialConfirm, DIALOG_STYLE_MSGBOX, "Tanýtým", "Sunucuyu tanýmak için kýsa bir tanýtým izlemek ister misin?", "Evet", "Hayir");
         for (new j = 58; j < 62; j ++) {
		 PlayerTextDrawHide(playerid,  PlayerData[playerid][pTextdraws][j]);
	}

	PlayerData[playerid][pCreated] = 1;
	PlayerData[playerid][pTask] = 1;

	PlayerData[playerid][pTutorial] = 0;
	PlayerData[playerid][pTutorialTime] = 0;
	new sqlid = RandomEx(1000, 5000);
    PlayerData[playerid][pSQLID] = sqlid;
    SetPlayerPos(playerid, 1544.4180,-1353.3374,393.2130);
    SetPlayerCameraPos(playerid, 1011.3353,-1373.7657,254.0211);
    SetPlayerCameraLookAt(playerid, 1011.3353,-1373.7657,254.0211);
    TogglePlayerControllable(playerid,0);
    tanitim[playerid] = SetTimerEx("Tanitim",0001,0,"d",playerid);
    //SendClientMessage(playerid, 0x804040FF, "Karakter Oluþturma: {FFFFFF}Karakteriniz oluþturuluyor, 6 saniye bekleyin..");
    //PlayAudioStreamForPlayer(playerid, "http://k003.kiwi6.com/hotlink/sz1e7xbqdz/kayittamamlandi.mp3");
    GiveMoney(playerid, 1000);
    PlayerData[playerid][pHizliMotor] = 0;
    PlayerData[playerid][pBirlikKurmaIzni] = 0;
    PlayerData[playerid][pUyusturucuAldi] = 0;
    PlayerData[playerid][pCK] = 0;
    PlayerData[playerid][pAccent] = 0;
    PlayerData[playerid][pMask] = 0;
    PlayerData[playerid][pBagisci] = 0;
    PlayerData[playerid][pTotalUsed] = 0;
    PlayerData[playerid][pCimentoSkill] = 0;
    PlayerData[playerid][pSilverVip] = 0;
    PlayerData[playerid][pGoldVip] = 0;
    PlayerData[playerid][pQuantumVip] = 0;
    PlayerData[playerid][pTasimaciSkill] = 0;
    PlayerData[playerid][pPet] = 0;
    PlayerData[playerid][pTester] = 0;
    PlayerData[playerid][pAdmin] = 0;
    PlayerData[playerid][pAracParcalatTime] = 0;
    PlayerData[playerid][pPasaport] = 0;
	Inventory_Add(playerid, "GPS Cihazi", 18875);
	Inventory_Add(playerid, "Ehliyet", 1581);
	Inventory_Add(playerid, "Zar", 1851);
	
 //Ýlk kayýt alaný
	}
	else
	{
	    SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

	    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		SetCameraBehindPlayer(playerid);
		SetAccessories(playerid);

        if (PlayerData[playerid][pWorld] == PRISON_WORLD)
		{
		    JBC_SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		}
		else
		{
		    if(!PlayerData[playerid][pBaygin] && !PlayerData[playerid][pKilled])
			{
				JBC_SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			}
		}
		if (PlayerData[playerid][pKilled] && PlayerData[playerid][pJailTime] <= 0 && !PlayerData[playerid][pPrisoned])
		{

		    PlayerData[playerid][pKilled] = false;
			SetWeapons(playerid);
		    PlayerData[playerid][pBaygin] = 1;
		    PlayerData[playerid][pBayginSure] = 0;
			JBC_SetPlayerPos(playerid,DeathPosX[playerid],DeathPosY[playerid],DeathPosZ[playerid]);
		 	SetPlayerCameraPos(playerid,DeathPosX[playerid],DeathPosY[playerid],DeathPosZ[playerid]+5);
		    SetPlayerCameraLookAt(playerid,DeathPosX[playerid],DeathPosY[playerid],DeathPosZ[playerid]);
	     	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pVW"));
		   	SetPlayerInterior(playerid, GetPVarInt(playerid, "pInt"));
	   		for (new i = 0; i < 40; i ++) {
				SendClientMessage(playerid, -1, "");
			}
			Telefon_Kapat(playerid);
      		ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 1, 1, 1, 0, 1);
		    SetPlayerHealth(playerid, 100);
		    TogglePlayerControllable(playerid, 0);
		    ResetWeapons(playerid);
		    SendServerMessage(playerid, "120 saniye boyunca yaralý þekilde yerde kalacaksýn.");
		    static yarali[128];
			format(yarali, sizeof(yarali), "{FA8072}(( Bu oyuncu þu anda yaralý.))", playerid);
			PlayerData[playerid][oYarali] = CreateDynamic3DTextLabel(yarali, COLOR_RED, 0.0, 0.0, 0.3, 10.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1);
		    PlayerData[playerid][pGodMode] = 1;
		    return 1;
	    }
	    else
	    {
	        SetWeapons(playerid);
			//ShowHungerTextdraw(playerid, 1);

			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);

			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
			BlueEclipseCheck(playerid);
	    }
	}
    PlayerData[playerid][pKilled] = 0;
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
   if(!success) SendClientMessageEx(playerid, 0xE74C3CFF, "Server: {FFFFFF}Üzgünüm, bu komut geçerli deðil. Bilgi için /yardim yazin.");
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
if( sonkomut[playerid]!=0 && gettime()-sonkomut[playerid]<2 )
{
SendErrorMessage(playerid, "Server: Komutlarý arka arkaya bu kadar sýk kullanmayýn.");
return 0;
}

	if (!SQL_IsLogged(playerid) || (PlayerData[playerid][pTutorial] > 0 || PlayerData[playerid][pTutorialStage] > 0 || PlayerData[playerid][pHospital] != -1))
 		return 0;

	if (PlayerData[playerid][pMuted] && strfind(cmdtext, "/unmute", true) != 0)
 	{
	    SendErrorMessage(playerid, "Sistem tarafýndan susturulmuþsun.");
	    return 0;
	}

	if (PlayerData[playerid][pCommandCount] < 6)
	{
	    PlayerData[playerid][pCommandCount]++;
        SetTimerEx("MuteSifirla", 2000, false, "d", playerid);
	    if (PlayerData[playerid][pCommandCount] == 6) {
	        PlayerData[playerid][pCommandCount] = 0;

	        PlayerData[playerid][pMuted] = 1;
	        PlayerData[playerid][pMuteTime] = 5;
	        SetTimerEx("MuteAc", 4000, false, "d", playerid);
	        SendServerMessage(playerid, "Ard arda yazý yazdýðýn için 4 saniye boyunca susturuldun!");
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s spam yaptýðý için 4 saniye susturuldu.", ReturnName(playerid, 0));
	        return 0;
		}
	}
	return 1;
}

forward MuteSifirla(playerid);
public MuteSifirla(playerid)
{
    PlayerData[playerid][pCommandCount] = 0;
	return 1;
}

forward tMuteSifirla(playerid);
public tMuteSifirla(playerid)
{
    PlayerData[playerid][pSpamCount] = 0;
	return 1;
}

forward MuteAc(playerid);
public MuteAc(playerid)
{
    PlayerData[playerid][pMuted] = 0;
	return 1;
}
public OnPlayerText(playerid, text[])
{
text[0] = Wtoupper(text[0]);
Log_Write("logs/chatlog.txt", "[%s] %s adli oyuncu sunu yazdi: %s", ReturnDate(), ReturnName(playerid, 0), text);
	if ((!PlayerData[playerid][pLogged] && !PlayerData[playerid][pCharacter]) || PlayerData[playerid][pTutorial] > 0 || PlayerData[playerid][pTutorialStage] > 0 || PlayerData[playerid][pHospital] != -1 || GetPVarInt(playerid, "TV") == 1)
	    return 0;

	if(!strcmp(text, ":D", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s kahkaha atar.", ReturnName(playerid, 0));
		return 0;
	}
	if(!strcmp(text, ":P", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s dil çýkarýr.", ReturnName(playerid, 0));
		return 0;
	}
	if(!strcmp(text, ":)", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s gülümser.", ReturnName(playerid, 0));
		return 0;
	}
	if(!strcmp(text, ";)", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s göz kýrpar.", ReturnName(playerid, 0));
		return 0;
	}
	if(!strcmp(text, ":@", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s öfkelenir.", ReturnName(playerid, 0));
		return 0;
	}
	if(!strcmp(text, ":S", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s yüzünü buruþturur.", ReturnName(playerid, 0));
		return 0;
	}
	if(!strcmp(text, ":(", true))
	{
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s yüzünü üzgün bir ifade yapar.", ReturnName(playerid, 0));
		return 0;
	}
    if(GetPVarInt(playerid, "TV") == 1 && !strcmp("/tv",text) && strlen("/tv")!=0) return SendErrorMessage(playerid, "TV izlerken bu iþlemi yapamazsýnýz.");
	if (PlayerData[playerid][pMuted])
	{
	    SendErrorMessage(playerid, "Sistem tarafýndan susturulmuþsun.");
	    return 0;
	}
	if (PlayerData[playerid][pSpamCount] < 5)
	{
	    PlayerData[playerid][pSpamCount]++;
        SetTimerEx("tMuteSifirla", 2000, false, "d", playerid);
	    if (PlayerData[playerid][pSpamCount] == 5) {
	        PlayerData[playerid][pSpamCount] = 0;

	        PlayerData[playerid][pMuted] = 1;
	        PlayerData[playerid][pMuteTime] = 5;
	        SetTimerEx("MuteAc", 5000, false, "d", playerid);
            SendServerMessage(playerid, "Ard arda yazdýðýn için susturuldun.  (5 saniye).");
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ard arda yazdýðý için otomatik olarak susturuldu..", ReturnName(playerid, 0));
	        return 0;
		}
	}
	if (PlayerData[playerid][pNewsGuest] != INVALID_PLAYER_ID && GetFactionType(PlayerData[playerid][pNewsGuest]) == FACTION_NEWS && IsPlayerInAnyVehicle(playerid) && IsNewsVehicle(GetPlayerVehicleID(playerid)))
	{
	    foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	  		SendClientMessageEx(i, COLOR_ORANGE, "[News Konuðu] Misafir %s: %s", ReturnName(playerid, 0), text);
		}
	   	return 0;
   	}
	else
	{
		new
			targetid = PlayerData[playerid][pCallLine];

		SetPlayerChatBubble(playerid, text, COLOR_WHITE, 11.0, 6000);
		{

			if (IsPlayerOnPhone(playerid))
				SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "%s(cep telefonu): %s", ReturnName(playerid, 0), text);


			if (!IsPlayerInAnyVehicle(playerid) && !PlayerData[playerid][pBaygin] && !PlayerData[playerid][pLoopAnim] && !PlayerData[playerid][pChatAnimation]) {
				ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 0, 1, 1, 1, strlen(text) * 100, 1);

				SetTimerEx("StopChatting", strlen(text) * 100, false, "d", playerid);
			}
		}
		switch (PlayerData[playerid][pEmergency])
		{
			case 1:
			{
				if (!strcmp(text, "polis", true))
				{
				    PlayerData[playerid][pEmergency] = 2;
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[OPERATOR]:{FFFFFF} 911 hattýndasýnýz. Sorununuzu ve konumunuzu iletiniz.");
				}
				else if (!strcmp(text, "hastane", true))
				{
				    PlayerData[playerid][pEmergency] = 3;
				    SendClientMessage(playerid, COLOR_HOSPITAL, "[OPERATOR]:{FFFFFF} Hastane'ye baðlandýn, sorununu bölgenle beraber ilet.");
				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "[OPERATOR]:{FFFFFF} Eksik veya hatalý tuþlama yaptýnýz.");
			}
			case 2:
			{   SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "|__________911 Acil Çaðrýsý__________|");
   				SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "Arayan: %s, Konum: (%s), Telefon: %d", ReturnName(playerid, 0), GetPlayerLocation(playerid), PlayerData[playerid][pPhone]);
   				SendFactionMessage(FACTION_POLICE, COLOR_RADIO, "Kullanýlan Servis: Polis");
        		SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "Açýklama: %s", text);
          //      SendFactionMessageEx(FACTION_INTEL, COLOR_RADIO, "911 ÇAÐRISI: %s (%s)", ReturnName(playerid, 0), GetPlayerLocation(playerid));
        	//	SendFactionMessageEx(FACTION_INTEL, COLOR_RADIO, "AÇIKLAMA: %s", text);

                SetTimerEx("IhbarSifirla", 300000, false, "d", playerid);
				strpack(PlayerData[playerid][pIhbar], text, 128 char);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[OPERATOR]:{FFFFFF} Tüm birimler bilgilendirildi, teþekkürler.");
			    cmd_tkapat(playerid, "\1");

			    SetFactionMarker(playerid, FACTION_POLICE, 0x00D700FF);
			    SetFactionMarker(playerid, FACTION_INTEL, 0x00D700FF);
			}
			case 3:
			{
			    SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "911 ÇAÐRISI: %s (%s)", ReturnName(playerid, 0), GetPlayerLocation(playerid));
       			SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "AÇIKLAMA: %s", text);

			    SendClientMessage(playerid, COLOR_HOSPITAL, "[OPERATOR]:{FFFFFF} Tüm saðlýk birimleri bilgilendirildi, teþekkürler.");
			    cmd_tkapat(playerid, "\1");

			    SetFactionMarker(playerid, FACTION_MEDIC, 0x00D700FF);
			}
		}
		text[0] = Wtoupper(text[0]);
if (!IsPlayerOnPhone(playerid))
{
switch(PlayerData[playerid][pAccent])
{
case 0, 1: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "%s: %s", ReturnName(playerid, 0), text);
case 2: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Ýngiliz Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 3: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Asyalý Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 4: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Ýskoç Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 5: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Ýrlandalý Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 6: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Rus Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 7: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Amerikan Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 8: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Ýspanyol Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 9: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Güney Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 10: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Kübalý Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 11: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Ýtalyan Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 12: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Avustrulyalý Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 13: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Balkan Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 14: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Kanadalý Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 15: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Jamaikalý Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 16: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Fransýz Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 17: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "[Alman Aksaný] %s: %s", ReturnName(playerid, 0), text);
case 18: SendNearbyMessage(playerid, 11.0, COLOR_WHITE, "%s: %s", ReturnName(playerid, 0), text);
}
}
		switch (PlayerData[playerid][pPlaceAd])
		{
		    case 1:
		    {
			    if (!strcmp(text, "evet", true))
		        {
		            if (GetMoney(playerid) < 100)
				    {
    	                SendClientMessage(playerid, COLOR_CYAN, "[OPERATOR]:{FFFFFF} Üzgünüm, þu anda reklam verebilmek için yeterli paranýz yok.");
					    cmd_tkapat(playerid, "\1");
					}
					else
					{
						PlayerData[playerid][pPlaceAd] = 2;
						SendClientMessage(playerid, COLOR_CYAN, "[OPERATOR]:{FFFFFF} Lütfen vermek istediðiniz reklam metnini girin.");
					}
				}
			}
			case 2:
			{
			    if (GetMoney(playerid) < 100)
			    {
                    SendClientMessage(playerid, COLOR_CYAN, "[OPERATOR]:{FFFFFF} Üzgünüm, þu anda reklam verebilmek için yeterli paranýz yok.");
				    cmd_tkapat(playerid, "\1");
				}
				else
				{
  			//	    PlayerData[playerid][pReklamTimer] = SetTimerEx("Advertise", 300000, false, "d", playerid);

                    PlayerData[playerid][pAdTime] = 120;
				    strpack(PlayerData[playerid][pAdvertise], text, 128 char);

                    foreach (new i : Player)
					{
						if (PlayerData[i][pAdmin] > 0) {
							SendClientMessageEx(i, COLOR_CLIENT, "[REKLAM ONAYI]: %s (ID: %d) REKLAM: %s (/ro & /rr)", ReturnName(playerid, 0), playerid, text);
						}
					}
        	        SendClientMessage(playerid, COLOR_CYAN, "[OPERATOR]:{FFFFFF} Reklamýnýz 5 dakika içinde onaydan geçtikten sonra yanýnlanacak, eðer bakýlmazsa 5 dakika sonrasýnda otomatik yayýnlanacaktýr.");
        	        SendClientMessage(playerid, COLOR_CYAN, "[OPERATOR]:{FFFFFF} Oyundan çýkarsanýz reklamýnýz iptal edilir.");
				    cmd_tkapat(playerid, "\1");
				}
			}
		}
		if (targetid != INVALID_PLAYER_ID && !PlayerData[playerid][pIncomingCall])
		{
			if(GetPVarInt(playerid, "AnkesorludenmiAriyor") == 1) SendClientMessageEx(targetid, COLOR_YELLOW, "(Telefon) Bilinmeyen Numara: %s", text);
			else {
				if(PlayerData[playerid][pGender] > 1) {
			    SendClientMessageEx(targetid, COLOR_WHITE, "%s(cep telefonu): %s", TelNo(playerid, targetid), text); // kýz ankesörlü tel
				}
				else {
				SendClientMessageEx(targetid, COLOR_WHITE, "%s(cep telefonu): %s", TelNo(playerid, targetid), text); // erkek ankesörlü tel
				}
			}
		}
	}
	return 0;
}

TelNo(playerid, targetid)
{
    new numara = PlayerData[playerid][pPhone], ad[24], num[24], noslot[128];

	for (new i = 0; i != MAX_CONTACTS; i ++) if( ContactData[targetid][i][contactNumber] == numara && ContactData[targetid][i][contactExists]) {
	format(ad, sizeof(ad), ContactData[targetid][i][contactName]);
		break;
	}
	format(num, sizeof(num), "%d", numara);
	if(strlen(ad) > 0) format(noslot, sizeof(noslot), ad);
	else format(noslot, sizeof(noslot), num);
	return noslot;
}
public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float: x, Float: y, Float: z)
{
	switch(SelectMode[playerid])
	{
	    case SELECT_MODE_EDIT:
		{
			EditingFurniture[playerid] = true;
			EditDynamicObject(playerid, objectid);
		}

	    case SELECT_MODE_SELL:
	    {
	        CancelEdit(playerid);

			new data[e_furniture], string[128];
			SetPVarInt(playerid, "SelectedFurniture", objectid);
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			format(string, sizeof(string), "Do you want to sell your %s?\nYou'll get {2ECC71}TL%s.", EVFurnitures[ data[ArrayID] ][Name], convertNumber(EVFurnitures[ data[ArrayID] ][Price]));
			ShowPlayerDialog(playerid, DIALOG_FURNITURE_SELL, DIALOG_STYLE_MSGBOX, "Confirm Sale", string, "Sell", "Close");
		}
	}

    SelectMode[playerid] = SELECT_MODE_NONE;
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
if(EditingCopObjectID[playerid] != -1)
	{
	    new id = EditingCopObjectID[playerid];

	    switch(response)
	    {
			case EDIT_RESPONSE_FINAL:
			{
			    CopObjectData[id][ObjX] = x;
				CopObjectData[id][ObjY] = y;
				CopObjectData[id][ObjZ] = z;
				CopObjectData[id][ObjRX] = rx;
				CopObjectData[id][ObjRY] = ry;
				CopObjectData[id][ObjRZ] = rz;
			    SetDynamicObjectPos(objectid, x, y, z);
	            SetDynamicObjectRot(objectid, rx, ry, rz);

	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_X, x);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_Y, y);
	            Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, CopObjectData[id][ObjLabel], E_STREAMER_Z, z + zOffsets[ CopObjectData[id][Type] ]);

	            if(IsValidDynamicArea(CopObjectData[id][ObjArea]))
	            {
	                Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_X, x);
		            Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_Y, y);
		            Streamer_SetFloatData(STREAMER_TYPE_AREA, CopObjectData[id][ObjArea], E_STREAMER_Z, z + zOffsets[ CopObjectData[id][Type] ]);
	            }

				SaveObjectToDB(id);
			    EditingCopObjectID[playerid] = -1;
			}

	        case EDIT_RESPONSE_CANCEL:
	        {
	            SetDynamicObjectPos(objectid, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ]);
	            SetDynamicObjectRot(objectid, CopObjectData[id][ObjRX], CopObjectData[id][ObjRY], CopObjectData[id][ObjRZ]);
	            EditingCopObjectID[playerid] = -1;
	        }
	    }
	}

if(response == EDIT_RESPONSE_CANCEL)
	{
		if(CCTV_inEditing[playerid]) CancelEditCCTV(playerid, CCTV_ID[playerid]);
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		if(CCTV_inEditing[playerid])
		{
			new id = CCTV_ID[playerid];

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			CCTVInfo[id][cctv_X] = x;
			CCTVInfo[id][cctv_Y] = y;
			CCTVInfo[id][cctv_Z] = z;

			CCTVInfo[id][cctv_rotX] = rx;
			CCTVInfo[id][cctv_rotY] = ry;
			CCTVInfo[id][cctv_rotZ] = rz;

			SaveCCTV(id);
			CCTV_inEditing[playerid] = 0;
			CCTV_ID[playerid] = -1;
		}
	}

    #if defined cctv_OnPlayerEditDynamicObject
        cctv_OnPlayerEditDynamicObject(playerid, objectid, response, Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz)
    #endif
    if(response == EDIT_RESPONSE_FINAL)
    {
    if (GetPVarInt(playerid, "EMO") == 1)
    {
    new carid = -1;
	if((carid = Car_NearestEx(playerid)) != -1)
	{
    new vehicleid = Car_GetRealID(carid);
    new Float:ofx, Float:ofy,
    Float:ofz, Float:ofaz,
    Float:finalx, Float:finaly,
   	Float:px, Float:py, Float:pz, Float:roz;
    GetVehiclePos(vehicleid, px, py, pz);
    GetVehicleZAngle(vehicleid, roz);
    ofx = x-px;
    ofy = y-py;
    ofz = z-pz;
    ofaz = rz-roz;
    finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
    finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);



    ofx = x-px,
    ofy = y-py,
    ofz = z-pz,
    ofaz = rz-roz,
    finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
    finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

    new tempobjid = UsedPlayerAttach[playerid];
    VehicleData[carid][TempExists][tempobjid] = 1;
    AttachDynamicObjectToVehicle(VehicleData[carid][TempObject][tempobjid], vehicleid, finalx, finaly, ofz, rx, ry, ofaz);
    UsedPlayerAttach[playerid] = -1;
    UpdateWeapons(playerid);
    SendServerMessage(playerid, "Silah araca yerleþtirildi.");
    }
    }
    }
    if(response == EDIT_RESPONSE_CANCEL)
    {
    if (GetPVarInt(playerid, "EMO") == 1)
    {
    new carid = Car_NearestEx(playerid);

    new tempobjid = UsedPlayerAttach[playerid];
    if(IsValidDynamicObject(VehicleData[carid][TempObject][tempobjid])) DestroyDynamicObject(VehicleData[carid][TempObject][tempobjid]);
    GiveWeaponToPlayer(playerid, CarData[carid][carWeapons][tempobjid], CarData[carid][carAmmo][tempobjid]);
    CarData[carid][carWeapons][tempobjid] = 0;
    DeletePVar(playerid, "EMO");
    CarData[carid][carAmmo][tempobjid] = 0;
    UsedPlayerAttach[playerid] = -1;
    SendServerMessage(playerid, "Silah objesini yerleþtirirken ESC bastýðýnýz için obje yerleþtirilmedi!");
    }
    }
    if(response == EDIT_RESPONSE_CANCEL)
    {
    if (GetPVarInt(playerid, "SIREN") == 1)
    {
    new vehicleid = GetPlayerVehicleID(playerid);
    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehSirenObject])) DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
    DeletePVar(playerid, "EMO");
    SendServerMessage(playerid, "Siren objesini yerleþtirirken ESC bastýðýnýz için obje yerleþtirilmedi!");
    }
    }
    if(response == EDIT_RESPONSE_FINAL)
    {
    if (GetPVarInt(playerid, "SIREN") == 1)
    {
    new vehicleid = GetPlayerVehicleID(playerid);
    new Float:ofx, Float:ofy,
    Float:ofz, Float:ofaz,
    Float:finalx, Float:finaly,
   	Float:px, Float:py, Float:pz, Float:roz;
    GetVehiclePos(vehicleid, px, py, pz);
    GetVehicleZAngle(vehicleid, roz);
    ofx = x-px;
    ofy = y-py;
    ofz = z-pz;
    ofaz = rz-roz;
    finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
    finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);
    ofx = x-px,
    ofy = y-py,
    ofz = z-pz,
    ofaz = rz-roz,
    finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
    finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);
    AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, finalx, finaly, ofz, rx, ry, ofaz);
    SendServerMessage(playerid, "Siren objesi yerleþtirildi.");
    DeletePVar(playerid, "SIREN");
	}
	}
    
	if (response == EDIT_RESPONSE_FINAL)
	{
	    if (GetPVarInt(playerid, "DBD") == 1)
	    {
			if(response)
			{
				new id = GetPVarInt(playerid, "DBI");
				DestroyDynamicObject(BarricadeData[id][cadeObject]);
			    BarricadeData[id][cadeExists] = true;
	            BarricadeData[id][cadeType] = 2;

	            BarricadeData[id][cadePos][0] = x;
	            BarricadeData[id][cadePos][1] = y;
	            BarricadeData[id][cadePos][2] = z;

	            BarricadeData[id][cadeObject] = CreateDynamicObject(GetPVarInt(playerid, "DBM"), x,y,z, rx, ry, rz);

	            SendServerMessage(playerid, "Barikat düzenlendi.");
			}
	    }
	    if (PlayerData[playerid][pEditGraffiti] != -1 && GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);
			Graffiti_Save(PlayerData[playerid][pEditGraffiti]);
		}
	    else if (PlayerData[playerid][pEditRack] != -1 && RackData[PlayerData[playerid][pEditRack]][rackExists])
	    {
			RackData[PlayerData[playerid][pEditRack]][rackPos][0] = x;
			RackData[PlayerData[playerid][pEditRack]][rackPos][1] = y;
			RackData[PlayerData[playerid][pEditRack]][rackPos][2] = z;
			RackData[PlayerData[playerid][pEditRack]][rackPos][3] = rz;

			Rack_Refresh(PlayerData[playerid][pEditRack]);
			Rack_Save(PlayerData[playerid][pEditRack]);
		}
	    else if (PlayerData[playerid][pEditPump] != -1 && PumpData[PlayerData[playerid][pEditPump]][pumpExists])
	    {
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][0] = x;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][1] = y;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][2] = z;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][3] = rz;

			Pump_Refresh(PlayerData[playerid][pEditPump]);
			Pump_Save(PlayerData[playerid][pEditPump]);

			SendServerMessage(playerid, "You have edited the position of pump ID: %d.", PlayerData[playerid][pEditPump]);
	    }
	    else if (PlayerData[playerid][pEditObject] != -1 && ObjectData[PlayerData[playerid][pEditObject]][objectVarmi])
	    {
	        //if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendErrorMessage(playerid, "Obje paketini sadece dýþarýda düzenleyebilirsin.");
	        new objeid = PlayerData[playerid][pEditObject];
			ObjectData[objeid][objectPos][0] = x;
			ObjectData[objeid][objectPos][1] = y;
			ObjectData[objeid][objectPos][2] = z;
			ObjectData[objeid][objectPos][3] = rx;
			ObjectData[objeid][objectPos][4] = ry;
			ObjectData[objeid][objectPos][5] = rz;

			SetDynamicObjectPos(ObjectData[objeid][objectObject], x, y, z);
			SetDynamicObjectRot(ObjectData[objeid][objectObject], rx, ry, rz);

			Object_Save(objeid);

			SendServerMessage(playerid, "Obje düzenlendi, ID: %d.", objeid);
	    }
	    else if (PlayerData[playerid][pEditFurniture] != -1 && FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureExists])
	    {
	        new id = House_Inside(playerid);

	        if (id != -1 && House_IsOwner(playerid, id))
			{
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][0] = x;
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][1] = y;
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][2] = z;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][0] = rx;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][1] = ry;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][2] = rz;

				Furniture_Refresh(PlayerData[playerid][pEditFurniture]);
				Furniture_Save(PlayerData[playerid][pEditFurniture]);

				SendServerMessage(playerid, "Duzenlendin: \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
			}
	    }
	    else if (PlayerData[playerid][pEditGate] != -1 && GateData[PlayerData[playerid][pEditGate]][gateExists])
	    {
	        switch (PlayerData[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gatePos][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SendServerMessage(playerid, "Gate ID %d pozisyonu düzenlendi.", id);
				}
				case 2:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gateMove][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SendServerMessage(playerid, "Gate ID %d açýlýþ noktasý düzenlendi.", id);
				}
			}
		}
	}
		if(EditingFurniture[playerid])
	{
		switch(response)
		{
		    case EDIT_RESPONSE_CANCEL:
		    {
		        new data[e_furniture];
		        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
		        SetDynamicObjectPos(objectid, data[furnitureX], data[furnitureY], data[furnitureZ]);
		        SetDynamicObjectRot(objectid, data[furnitureRX], data[furnitureRY], data[furnitureRZ]);

		        EditingFurniture[playerid] = false;
		    }

			case EDIT_RESPONSE_FINAL:
			{
			    new data[e_furniture], query[256];
			    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			    data[furnitureX] = x;
			    data[furnitureY] = y;
			    data[furnitureZ] = z;
	            data[furnitureRX] = rx;
	            data[furnitureRY] = ry;
	            data[furnitureRZ] = rz;
	            SetDynamicObjectPos(objectid, data[furnitureX], data[furnitureY], data[furnitureZ]);
		        SetDynamicObjectRot(objectid, data[furnitureRX], data[furnitureRY], data[furnitureRZ]);
		        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

		        mysql_format(g_iHandle, query, sizeof(query), "UPDATE EVfurnitures SET FurnitureX=%f, FurnitureY=%f, FurnitureZ=%f, FurnitureRX=%f, FurnitureRY=%f, FurnitureRZ=%f WHERE ID=%d", data[furnitureX], data[furnitureY], data[furnitureZ], data[furnitureRX], data[furnitureRY], data[furnitureRZ], data[SQLID]);
		        mysql_tquery(g_iHandle, query, "", "");

		        EditingFurniture[playerid] = false;
			}
		}
	}
	if (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
	{
	    if (PlayerData[playerid][pEditFurniture] != -1)
			Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	    if (PlayerData[playerid][pEditPump] != -1)
			Pump_Refresh(PlayerData[playerid][pEditPump]);

        if (PlayerData[playerid][pEditRack] != -1)
			Rack_Refresh(PlayerData[playerid][pEditRack]);

        if (PlayerData[playerid][pEditGraffiti] != -1)
			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);

	    PlayerData[playerid][pEditType] = 0;
	    PlayerData[playerid][pEditGate] = -1;
		PlayerData[playerid][pEditPump] = -1;
		PlayerData[playerid][pGasStation] = -1;
		PlayerData[playerid][pEditFurniture] = -1;
		PlayerData[playerid][pEditGraffiti] = -1;
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(response)
	{
		if(fScaleX < 0.1) fScaleX = 0.1;
		if(fScaleX > 1.5) fScaleX = 1.5;
		if(fScaleY < 0.1) fScaleY = 0.1;
		if(fScaleY > 1.5) fScaleY = 1.5;
		if(fScaleZ < 0.1) fScaleZ = 0.1;
		if(fScaleZ > 1.5) fScaleZ = 1.5;
		if(fOffsetX < -100) fOffsetX = 0;
		if(fOffsetX > 100) fOffsetX = 100;
		if(fOffsetY < -100) fOffsetY = 0;
		if(fOffsetY > 100) fOffsetY = 100;
		if(fOffsetZ < -100) fOffsetZ = 0;
		if(fOffsetZ > 100) fOffsetZ = 100;
	    AccessoryData[playerid][index][0] = fOffsetX;
	    AccessoryData[playerid][index][1] = fOffsetY;
	    AccessoryData[playerid][index][2] = fOffsetZ;
	   	AccessoryData[playerid][index][3] = fRotX;
	   	AccessoryData[playerid][index][4] = fRotY;
	    AccessoryData[playerid][index][5] = fRotZ;
	    AccessoryData[playerid][index][6] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
	    AccessoryData[playerid][index][7] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
		AccessoryData[playerid][index][8] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);
		AccessoryData[playerid][index][9] = boneid;
		PlayerData[playerid][pTSlot][index] = true;
		PlayerData[playerid][pASlot][index] = modelid;
        PlayerData[playerid][pABone][index] = boneid;

		SetPlayerAttachedObject(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
	    SendServerMessage(playerid, "Obje düzenlendi.");
	    SQL_SaveAccessories(playerid);
	}
	else SendServerMessage(playerid, "Obje düzenlenemedi.");
	return 1;
}

forward ResprayCar(playerid, vehicleid, color);
public ResprayCar(playerid, vehicleid, color)
{
	if (!PlayerData[playerid][pLogged] || GetNearestVehicle(playerid) != vehicleid)
	    return 0;

	Inventory_Remove(playerid, "Sprey Kutusu");
	ClearAnimations(playerid);

	SetVehicleColor(vehicleid, color, color);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s sprey kutusu ile '%s' model aracý boyar.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (clickedid == Text:INVALID_TEXT_DRAW || clickedid == KarakterimEkrani[24])
	{
		if (!Dialog_Opened(playerid) && PlayerData[playerid][pDisplayStats] > 0)
	    {
	          for (new i = 0; i < 26; i ++) {
				TextDrawHideForPlayer(playerid, KarakterimEkrani[i]);
			}
			for (new i = 0; i < 13; i ++) {
				PlayerTextDrawHide(playerid, KarakterimEkrani_P[playerid][i]);
			}
			CancelSelectTextDraw(playerid);
			PlayerData[playerid][pDisplayStats] = false;
		}
		if (!Dialog_Opened(playerid) && GetPVarInt(playerid, "MDC") == 1)
	    {
	        MenuMDC_Kapat(playerid);
		}
		if (!Dialog_Opened(playerid) && GetPVarInt(playerid, "Telefon") == 1)
	    {
	        Telefon_Kapat(playerid);
		}
	}
 	if (clickedid == TelefonGiris[1]) Telefon_Menu(playerid);
    if (clickedid == TelefonTD[8]) Telefon_Menu(playerid, 0);
    if (clickedid == TelefonArama[3] || clickedid == TelefonArama[4]) {
        new time = tickcount() - 2000;
    	if(time < Timer[playerid][telefonKapat]) return 1;
        Timer[playerid][telefonKapat] = tickcount();
        cmd_tkapat(playerid, "\1");
    }
    if (clickedid == TelefonArama[2]) {
        new time = tickcount() - 2000;
    	if(time < Timer[playerid][telefonAc]) return 1;
        Timer[playerid][telefonAc] = tickcount();
    	cmd_cevapla(playerid, "\1");
		Telefon_Arama(playerid); Telefon_Arama(PlayerData[playerid][pCallLine]);
    }
	if (clickedid == TelefonMenu[0])
    {
        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Telefonunuz açýk olmalýdýr.");

		Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Kýsa Mesaj Yolla", "Metin mesajý göndermek istediðiniz numarayý girin:", "Gönder", "{FF6347}Iptal");
    }
    if (clickedid == TelefonMenu[1])
    {
        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Telefonunuz açýk olmalýdýr.");

		Telefon_Cevirme(playerid);
    }
    if (clickedid == TelefonMenu[2])
    {
        if (PlayerData[playerid][pFreeze]) return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýn.");
        if(takingselfie[playerid] == 0)
		{
		    GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			static Float: n1X, Float: n1Y;
			if(Degree[playerid] >= 360) Degree[playerid] = 0;
			Degree[playerid] += Speed;
			n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
			n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
			SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
			SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
			SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
			takingselfie[playerid] = 1;
			TogglePlayerControllable(playerid, 0);
			ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
			return 1;
		}
	    if(takingselfie[playerid] == 1)
		{
		    TogglePlayerControllable(playerid,1);
			SetCameraBehindPlayer(playerid);
		    takingselfie[playerid] = 0;
		    TogglePlayerControllable(playerid, 1);
		    ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
		    return 1;
		}
    }
    if (clickedid == TelefonMenu[3]) Telefon_Rehber(playerid);
    if (clickedid == TelefonMenu[4]) Telefon_Harita(playerid);
    if (clickedid == TelefonMenu[5]) AramaKayitlari(playerid);
    if (clickedid == TelefonMenu[6]) SendServerMessage(playerid, "Sistem pasif.");
    if (clickedid == TelefonMenu[7]) SendServerMessage(playerid, "Sistem pasif.");
    if (clickedid == TelefonMenu[8])
	{
	    	if (!PlayerData[playerid][pPhoneOff])
			{
           		if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) {
			  	CancelCall(playerid);
					}
					PlayerData[playerid][pPhoneOff] = 1;
			        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s sað elinin iþaret parmaðý ile telefon kapatma butonuna basýlý tutar ve telefonu kapatýr.", ReturnName(playerid, 0));
				}
				else
				{
				    PlayerData[playerid][pPhoneOff] = 0;
			        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s sað elinin iþaret parmaðý ile telefon açma butonuna basýlý tutar ve telefonu açar.", ReturnName(playerid, 0));
				}
	}
    if(clickedid == TelefonCevirme[21])
    {
            if(strlen(CallNo[playerid]) <= 0) return 1;
            new strleng = strlen(CallNo[playerid]);
            strdel(CallNo[playerid], strleng-1, strleng);
            PlayerTextDrawSetString(playerid, TelefonPlayer[playerid][1], CallNo[playerid]);
    }
    if(clickedid == TelefonCevirme[14])
	{
	    PlayerData[playerid][pContact] = strval(CallNo[playerid]);
		Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Mesaj Ýçeriði", "%d numarasýna gönderilecek mesajý yazýn:", "Gönder", "<< Geri", PlayerData[playerid][pContact]);
	}
	if (clickedid == TelefonCevirme[2] || clickedid == TelefonCevirme[3] || clickedid == TelefonCevirme[4] || clickedid == TelefonCevirme[5] || clickedid == TelefonCevirme[6] || clickedid == TelefonCevirme[7] || clickedid == TelefonCevirme[8] || clickedid == TelefonCevirme[9] || clickedid == TelefonCevirme[10] || clickedid == TelefonCevirme[13])
	{
     	if(strlen(CallNo[playerid]) >= 6) return 1;
     	if(clickedid == TelefonCevirme[13]) strcat(CallNo[playerid], "0");
		if(clickedid == TelefonCevirme[2]) strcat(CallNo[playerid], "1");
        if(clickedid == TelefonCevirme[3]) strcat(CallNo[playerid], "2");
        if(clickedid == TelefonCevirme[4]) strcat(CallNo[playerid], "3");
        if(clickedid == TelefonCevirme[5]) strcat(CallNo[playerid], "4");
        if(clickedid == TelefonCevirme[6]) strcat(CallNo[playerid], "5");
        if(clickedid == TelefonCevirme[7]) strcat(CallNo[playerid], "6");
        if(clickedid == TelefonCevirme[8]) strcat(CallNo[playerid], "7");
        if(clickedid == TelefonCevirme[9]) strcat(CallNo[playerid], "8");
        if(clickedid == TelefonCevirme[10]) strcat(CallNo[playerid], "9");

        PlayerTextDrawSetString(playerid, TelefonPlayer[playerid][1], CallNo[playerid]);
	}
	if(clickedid == TelefonCevirme[0])
	{
	    Telefon_Menu(playerid);
	}
	if(clickedid == TelefonCevirme[11])
	{
	    if(strlen(CallNo[playerid]) <= 0) return 1;
	    new strings[24];
	    format(strings, 16, "%d", strval(CallNo[playerid]));
		cmd_ara(playerid, strings);
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if (playertextid == AracKumanda[playerid][6])
	{
	    new vehid = GetPVarInt(playerid, "KumandaID");
	    if (!GetHoodStatus(vehid))
		{
	        SetHoodStatus(vehid, true);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kumandanýn tuþuna basar ve kaputu açar.", ReturnName(playerid, 0));
	        ShowPlayerFooter(playerid, "Kaput ~g~acildi!");
		}
		else
		{

			SetHoodStatus(vehid, false);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kumandanýn tuþuna basar ve kaputu kapatýr.", ReturnName(playerid, 0));
	        ShowPlayerFooter(playerid, "Kaput ~r~kapandi");
		}
	}
	if (playertextid == AracKumanda[playerid][7])
	{
	    new vehid = GetPVarInt(playerid, "KumandaID"), ids = Car_GetID(vehid);

        static
	        engine,
	        lights,
	        alarm,
	        bonnet,
	        boot,
	        objective;

		if (!CarData[ids][carLocked])
		{
			CarData[ids][carLocked] = true;
			Car_Save(ids);
			ShowPlayerFooter(playerid, "Arac kilitlendi!");
			PlayerTextDrawColor(playerid, AracKumanda[playerid][9], COLOR_RED);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			SetVehicleParamsEx(CarData[ids][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kumandaya basar ve aracý kilitler.", ReturnName(playerid, 0));
		}
		else
		{
			CarData[ids][carLocked] = false;
			Car_Save(ids);
			ShowPlayerFooter(playerid, "Aracin kilidi acildi!");
			PlayerTextDrawColor(playerid, AracKumanda[playerid][9], COLOR_GREEN);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kumandaya basar ve aracýn kilidini açar.", ReturnName(playerid, 0));
			SetVehicleParamsEx(CarData[ids][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
		}
	}
	if (playertextid == MainMDC[playerid][8])
    {
        new vehicleid = GetPlayerVehicleID(playerid);
	    if(CoreVehicles[vehicleid][vehRadar])
	    {
      		CoreVehicles[vehicleid][vehRadar] = false;
      		CoreVehicles[vehicleid][vehRadarLimit] = 100;
	        KillTimer(timerMDC[vehicleid]);
	        SendServerMessage(playerid, "Dashcam kapandý.");
			for(new i; i < 5; i++) TextDrawHideForPlayer(playerid, carMDC[GetPlayerVehicleID(playerid)][i]);
	    }
	    else
	    {
	        CoreVehicles[vehicleid][vehRadar] = true;
            timerMDC[vehicleid] = SetTimerEx ("RadarGuncelle", 100, 1, "d", vehicleid);
            CoreVehicles[vehicleid][vehRadarLimit] = 90;
            SendServerMessage(playerid, "Dashcam açýldý.");
		}
		MenuMDC(playerid);
    }

    if (playertextid == MainMDC[playerid][9])
    {
	    static
	        string[512];

		string[0] = 0;

		foreach (new i : Player) if (PlayerData[i][pWarrants] > 0) {
			format(string, sizeof(string), "%s%s (%d aranma)\n", string, ReturnName(i, 0), PlayerData[i][pWarrants]);
		}

		if (!strlen(string))
			return SendErrorMessage(playerid, "Aktif aranma yok.");

		Dialog_Show(playerid, Warrants, DIALOG_STYLE_LIST, "Aktif Aranmalar", string, "Seç", "<< Geri");
    }
    if (playertextid == MainMDC[playerid][12])
    {
        Dialog_Show(playerid, TelefonSorgulama, DIALOG_STYLE_INPUT, "Telefon Sorgulama", "Lütfen telefon numarasý giriniz:", "Ýncele", "<< Geri");
	}
	if (playertextid == MainMDC[playerid][11])
    {
        Dialog_Show(playerid, AracSorgulama, DIALOG_STYLE_INPUT, "Araç Sorgulama", "Lütfen plaka giriniz:", "Ýncele", "<< Geri");
	}
	if (playertextid == MainMDC[playerid][10])
    {
        Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Sicil Sorgulama", "Lütfen ID giriniz:", "Devam", "<< Geri");
	}
	if (playertextid == MainMDC[playerid][27])
    {
        Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Suç Ekle", "Lütfen ID giriniz:", "Ýncele", "<< Geri");
	}
	if (playertextid == MainMDC[playerid][5])
    {
        MenuMDC_Kapat(playerid);
    }
    if( _:playertextid != INVALID_TEXT_DRAW ) {
        if( playertextid == TuningBuy[ playerid ][ 7 ] ) { // desno
            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Araçta deðilsin." );
                if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Aracýn sürücü koltuðunda olman gereklidir." );

            if( TPInfo[ playerid ][ tPaintjob ] == false ) {

                                new compid = -1, vehicleid = GetPlayerVehicleID( playerid );

                    for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < MAX_COMPONENTS; i++ ) {
                                        if( cInfo[ i ][ cType ] == TPInfo[ playerid ][ tType ] ) {
                                                if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                        compid = i;
                                                        break;
                                                }
                                        }
                                }
                                if( compid == -1 ) return SendErrorMessage( playerid, "Bu araç ile uyumlu baþka bir eklenti yok." );

                    RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

                    TPInfo[ playerid ][ tID ] = compid;

                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ compid ][ cName ] );
                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ TPInfo[ playerid ][ tID ]  ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ TPInfo[ playerid ][ tID ]  ][ cPriceEx ] );
												}
                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                                AddVehicleComponent( vehicleid, cInfo[ compid ][ cID ] );

                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        else if( TPInfo[ playerid ][ tPaintjob ] == true ) {

                            new paintid = -1, vehicleid = GetPlayerVehicleID( playerid );

                            for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < NUMBER_TYPE_PAINTJOB; i++ ) {
                                if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
                                                paintid = i;
                                                break;
                                        }
                                }
                                if( paintid == -1 ) return SendErrorMessage( playerid, "Bu araç ile uyumlu baþka bir paintjob yok." );

                TPInfo[ playerid ][ tID ] = paintid;

                format( globalstring, sizeof( globalstring ), "%s", pjInfo[ paintid ][ pName ] );
                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                if(!GetPVarInt(playerid, "Garajdami"))
								{
									format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", pjInfo[ paintid ][ pPrice ] );
								}
								else
								{
									format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", pjInfo[ paintid ][ pPriceEx ] );
								}
                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );

                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
        }
        if( playertextid == TuningBuy[ playerid ][ 8 ] ) { // levo
            if( TPInfo[ playerid ][ tPaintjob ] == false ) {

                    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Araçta deðilsin." );
                        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Þöför koltuðunda olmalýsýn." );

                    new compid = -1, vehicleid = GetPlayerVehicleID( playerid );

                    for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- ) {
                                        if( cInfo[ i ][ cType ] == TPInfo[ playerid ][ tType ] ) {
                                                if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                                                        compid = i;
                                                        break;
                                                }
                                        }
                                }
                                if( compid == -1 ) return SendErrorMessage( playerid, "Bu araç ile uyumlu baþka bir eklenti yok." );

                                RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

                    TPInfo[ playerid ][ tID ] = compid;

                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ compid ][ cName ] );
                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                if(!GetPVarInt(playerid, "Garajdami"))
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ] );
												}
												else
												{
													format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", cInfo[ TPInfo[ playerid ][ tID ]  ][ cPriceEx ] );
												}
                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                                AddVehicleComponent( vehicleid, cInfo[ compid ][ cID ] );

                                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
                        else if( TPInfo[ playerid ][ tPaintjob ] == true ) {

                            new paintid = -1, vehicleid = GetPlayerVehicleID( playerid );

                            for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- ) {
                                if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
                                                paintid = i;
                                                break;
                                        }
                                }
                                if( paintid == -1 ) return SendErrorMessage( playerid, "Bu araç ile uyumlu baþka bir paintjob yok." );

                TPInfo[ playerid ][ tID ] = paintid;

                format( globalstring, sizeof( globalstring ), "%s", pjInfo[ paintid ][ pName ] );
                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                                if(!GetPVarInt(playerid, "Garajdami"))
								{
									format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", pjInfo[ paintid ][ pPrice ] );
								}
								else
								{
									format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", pjInfo[ paintid ][ pPriceEx ] );
								}
                                format( globalstring, sizeof( globalstring ), "fiyat: ~w~$%d", pjInfo[ paintid ][ pPrice ] );
                                PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );

                SelectTextDraw( playerid, COLOR_ORANGE );
                        }
        }
        if( playertextid == TuningBuy[ playerid ][ 9 ] ) { // buy
            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Araçta deðilsin." );
                if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Þöför koltuðunda olmalýsýn." );

            new Float:Pos[ 6 ], vehicleid = GetPlayerVehicleID( playerid );

            if( TPInfo[ playerid ][ tPaintjob ] == false ) {
      					if(!GetPVarInt(playerid, "Garajdami"))
						{
							if( GetMoney( playerid ) < cInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ] ) return SendErrorMessage( playerid, "Yeterli paran yok!" );
						}
						else
						{
							if( GetMoney( playerid ) < cInfo[ TPInfo[ playerid ][ tID ] ][ cPriceEx ] ) return SendErrorMessage( playerid, "Yeterli paran yok!" );
						}
						new cid = TPInfo[ playerid ][ tID ];

                        RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

                        VehicleInfo[ vehicleid ][ vTuned ] = true;

                        AddComponentToVehicle( vehicleid, cInfo[ cid ][ cID ] );

                        if(!GetPVarInt(playerid, "Garajdami"))
	                        GiveMoney( playerid, -cInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ] );
						else
							GiveMoney( playerid, -cInfo[ TPInfo[ playerid ][ tID ] ][ cPriceEx ] );


                        }
                        else if( TPInfo[ playerid ][ tPaintjob ] == true ) {
                            if(!GetPVarInt(playerid, "Garajdami"))
							{
								if( GetMoney( playerid ) < pjInfo[ TPInfo[ playerid ][ tID ] ][ pPrice ] ) return SendErrorMessage( playerid, "Yeterli paran yok!" );
							}
							else
							{
								if( GetMoney( playerid ) < pjInfo[ TPInfo[ playerid ][ tID ] ][ pPriceEx ] ) return SendErrorMessage( playerid, "Yeterli paran yok!" );
							}

                            new paintid = TPInfo[ playerid ][ tID ];

                            VehicleInfo[ vehicleid ][ vTuned ] = true;

                            VehicleInfo[ vehicleid ][ vPaintJob ] = pjInfo[ paintid ][ pNumber ];

                            if(!GetPVarInt(playerid, "Garajdami"))
	                        	GiveMoney( playerid, -pjInfo[ TPInfo[ playerid ][ tID ] ][ pPrice ] );
							else
								GiveMoney( playerid, -pjInfo[ TPInfo[ playerid ][ tID ] ][ pPriceEx ] );

                           	SetVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );

                            SetVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );

                        }
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                        CancelSelectTextDraw( playerid );

                    TuningTDControl( playerid, false );


                        ShowPlayerDialog( playerid, dialog_TUNING, DIALOG_STYLE_LIST, "Modifiye Menüsü", D_TEXT, "Tamam", "{FF6347}Iptal" );
        }
        if( playertextid == TuningBuy[ playerid ][ 13 ] ) { // close

            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Araçta deðilsin." );
                if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Þöför koltuðunda olmalýsýn." );

            new Float:Pos[ 6 ], vehicleid = GetPlayerVehicleID( playerid );

                        if( TPInfo[ playerid ][ tPaintjob ] == false ) {

                        RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

                                SetTune( vehicleid );
                        }
                        else if( TPInfo[ playerid ][ tPaintjob ] == true ) {
                           ChangeVehiclePaintjob( vehicleid, 3 );
                                SetVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );
                        }
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                CancelSelectTextDraw( playerid );

                        TuningTDControl( playerid, false );


                        ShowPlayerDialog( playerid, dialog_TUNING, DIALOG_STYLE_LIST, "Modifiye Menüsü", D_TEXT, "Tamam", "{FF6347}Iptal" );
        }}

		if (!Dialog_Opened(playerid))
	{
		if (!PlayerData[playerid][pCharacter])
		{
			if (playertextid == LoginTD[playerid][13])
			{
			SelectCharacter(playerid, 1);
	  		}

			else if (playertextid == LoginTD[playerid][14])
			{
			if(PlayerData[playerid][pExtraSlot] < 1) return SendErrorMessage(playerid, "Bu slot için marketten premium slot almanýz gerekmektedir.");
			else SelectCharacter(playerid, 3);
			}
			else if (playertextid == LoginTD[playerid][15])
			{
			    if(PlayerData[playerid][pExtraSlot] < 1) return SendErrorMessage(playerid, "Bu slot için marketten premium slot almanýz gerekmektedir.");
				else SelectCharacter(playerid, 3);
			}
		}
		else
		{
		    if (playertextid == CharacterView[playerid][5])
				SQL_LoadCharacter(playerid, PlayerData[playerid][pCharacter]);

			else if (playertextid == CharacterView[playerid][6]) {
			    //Dialog_Show(playerid, DeleteChar, DIALOG_STYLE_MSGBOX, "Delete Character", "Warning: Are you sure you wish to delete character \"%s\"?\n\nYou will not be issued a refund for any lost property.", "Confirm", "Cancel", PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
			}
			else if (playertextid == CharacterView[playerid][11]) {
			    ShowCharacterMenu(playerid);
			}
			else if (playertextid == CharacterView[playerid][15]) {
			    CancelSelectTextDraw(playerid);
			    Dialog_Show(playerid, Gender, DIALOG_STYLE_LIST, "Cinsiyet", "Erkek\nKadýn", "Seç", "{FF6347}Iptal");
			}
			else if (playertextid == CharacterView[playerid][13]) {
			    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Doðum Tarihi", "Lütfen karakterinizin doðum tarihini giriniz. (GG.AA.YYYY):", "Tamam", "{FF6347}Iptal");
			}
            else if (playertextid == CharacterView[playerid][14]) {
                new string[1024];
                for(new x;x<sizeof(Kokenler);x++)
	       		{
		        	format(string, sizeof(string), "%s%s\n", string, Kokenler[x]);
		        }
			    Dialog_Show(playerid, Origin, DIALOG_STYLE_LIST, "Köken", string, "Tamam", "{FF6347}Iptal");
			}
		 	else if (playertextid == CharacterView[playerid][17]) {
                new string[1024];
                strcat(string, "Beyaz\n");
                strcat(string, "Siyah");
			    Dialog_Show(playerid, TenRengi, DIALOG_STYLE_LIST, "Ten Rengi", string, "Tamam", "{FF6347}Iptal");
			}
			else if (playertextid == CharacterView[playerid][12])
			{
			    if (!strlen(PlayerData[playerid][pBirthdate]))
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Sunucu: Doðum tarihi boþ kalamaz.");

				else if (!strlen(PlayerData[playerid][pOrigin]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Sunucu: Karakterin kökeni boþ kalamaz.");

                else if (!strlen(PlayerData[playerid][pTenRengi]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Sunucu: Ten rengi boþ kalamaz.");

				else
				{
				    for (new i = 0; i < 16; i ++) {
						PlayerTextDrawHide(playerid, CharacterView[playerid][i]);
					}
					new
					    dialogstr_m[2056],
					    dialogstr_f[2056]
					;
					for (new i = 0, j = sizeof(g_aMaleSkins); i < j; i++) {
						format(dialogstr_m, sizeof(dialogstr_m), "%s%d\n\n", dialogstr_m, g_aMaleSkins[i]);
					}
     				for (new i = 0, j = sizeof(g_aFemaleSkins); i < j; i++) {
						format(dialogstr_f, sizeof(dialogstr_f), "%s%d\n\n", dialogstr_f, g_aFemaleSkins[i]);
					}
        switch (PlayerData[playerid][pGender])
                    {
                        case 1:
						{
                            PlayerData[playerid][pSkin] = 186;
							SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], 1684.4392, 1771.6658, 10.8203, 270.0000, 0, 0, 0, 0, 0, 0);
							TogglePlayerSpectating(playerid, 0);
						}

						case 2:
	  {
                       		PlayerData[playerid][pSkin] = 191;
							SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], 1684.4392, 1771.6658, 10.8203, 270.0000, 0, 0, 0, 0, 0, 0);
							TogglePlayerSpectating(playerid, 0);
							}
                    }
				}
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][33])
			{
			    for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
			    for (new i = 0; i < 100; i ++) {
			        SendClientMessage(playerid, -1, "");
			    }
			    CancelSelectTextDraw(playerid);
			    TogglePlayerControllable(playerid, 1);

			    for (new i = 0; i < 40; i ++) {
			        SendClientMessage(playerid, -1, "");
				}
		 	    SetDefaultSpawn(playerid);
		    	//Dialog_Show(playerid, TutorialConfirm, DIALOG_STYLE_MSGBOX, "Tanýtým", "Sunucuyu tanýmak için kýsa bir tanýtým izlemek ister misin?", "Evet", "Hayir");
                StartTutorial(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);

				SetCameraBehindPlayer(playerid);
				//ShowHungerTextdraw(playerid, 1);

			}
			else if (playertextid == PlayerData[playerid][pTextdraws][47])
			{
				new
					string[128];

				CancelSelectTextDraw(playerid);

				format(string, sizeof(string), "%s\n%s\n%s", (!PlayerCharacters[playerid][0][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][0]), (!PlayerCharacters[playerid][1][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][1]), (!PlayerCharacters[playerid][2][0]) ? ("Bos Slot") : (PlayerCharacters[playerid][2]));
				Dialog_Show(playerid, CharList, DIALOG_STYLE_LIST, "Karakterlerim", string, "Seç", "{FF6347}Iptal");
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][48])
			{
				for (new i = 40; i < 50; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;

                if(PlayerData[playerid][pJailTime] > 0) return SendErrorMessage(playerid, "Hapiste olduðunuz için bu iþlemi kullanamazsýnýz. (Eðer hatalý ise forumdan destek bildirimi açýn)");

				SetTimerEx("OpenInventory", 100, false, "d", playerid);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][49])
			{
				for (new i = 40; i < 50; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][55])
			{
			    for (new i = 50; i < 58; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][56])
			{
			    for (new i = 40; i < 58; i ++)
			    {
			        if (i >= 50)
				        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

					else if (i < 50)
					    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			    }
			    PlayerData[playerid][pDisplayStats] = true;
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][57])
			{
			    if (PlayerData[playerid][pCharacterMenu] == PlayerData[playerid][pCharacter])
			        return SendErrorMessage(playerid, "Þu anda bu karakterde oynuyorsun, silemezsin..");

                //Dialog_Show(playerid, DeleteCharacter, DIALOG_STYLE_MSGBOX, "Karakteri Sil", "Uyarý: Þu anda bulunduðunuz \"%s\" karakterini geri gelmeyecek bir þekilde silmek istiyor musunuz?\n\nDaha sonra hiçbir geri ödeme yapýlamaz.", "Kabul", "{FF6347}Iptal", PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
			}
		}
	}
	return 1;
}

forward ForkliftUpdate(playerid, vehid);
public ForkliftUpdate(playerid, vehid)
{
	if (PlayerData[playerid][pJob] != JOB_UNLOADER || GetVehicleModel(vehid) != 530 || !IsPlayerInWarehouse(playerid) || !PlayerData[playerid][pLoading]) {
	    return 0;
	}
	GetVehicleHealth(vehid, CoreVehicles[vehid][vehLoadHealth]);
    PlayerData[playerid][pLoading] = 0;

	CoreVehicles[vehid][vehLoadType] = 7;
	CoreVehicles[vehid][vehCrate] = CreateObject(3798, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

	AttachObjectToVehicle(CoreVehicles[vehid][vehCrate], vehid, 0.0, 1.2, -0.05, 0.0, 0.0, 0.0);
	SetPlayerCheckpoint(playerid, 1306.3438, -45.3100, 1001.0313, 1.5);

	TogglePlayerControllable(playerid, 1);
	SendServerMessage(playerid, "Deliver the crate to the marker.");
	return 1;
}



Dialog:AracYukselt(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new id = Car_GetID(vehicleid);
		switch(listitem)
		{
		    case 0 :
			{
			    if(CarData[id][carKilitSeviye] >= 5) return SendErrorMessage(playerid, "Bu aracýn kilit seviyesi maksimum seviyeye ulaþmýþ.");
			    PlayerData[playerid][pYukseltilenArac] = vehicleid;
			    KilitYukselt(playerid, vehicleid);
			}
			case 1 :
			{
				if(CarData[id][carImmobiliser] >= 5) return SendErrorMessage(playerid, "Bu aracýn immobiliser seviyesi maksimum seviyeye ulaþmýþ.");
			    PlayerData[playerid][pYukseltilenArac] = vehicleid;
			    ImmobiliserYukselt(playerid, vehicleid);
			}
			case 2 :
			{
				if(CarData[id][carAlarm]) return SendErrorMessage(playerid, "Bu araçta alarm bulunmaktadýr.");
                if(GetMoney(playerid) < ALARM_UCRET) return SendErrorMessage(playerid, "Yeterli paranýz yok.");
				SendServerMessage(playerid, "Araca %s ödeyerek alarm taktýrýldý, aracýnýzda tehlikeli bir durum görüldüðünde polislere sinyal gidecek.", FormatNumber(ALARM_UCRET));
				GiveMoney(playerid, -ALARM_UCRET);
				CarData[id][carAlarm] = true;
			}
			case 3 :
			{
				if(!CarData[id][carHurda]) return SendErrorMessage(playerid, "Bu araç hurdada deðil.");
                if(GetMoney(playerid) < HURDA_UCRET) return SendErrorMessage(playerid, "Yeterli paranýz yok.");
				SendServerMessage(playerid, "Araç %s ödeyerek hurdadan çýkartýldý.", FormatNumber(HURDA_UCRET));
				GiveMoney(playerid, -HURDA_UCRET);
				CarData[id][carHurda] = false;
				RepairVehicle(GetPlayerVehicleID(playerid));
			}
		}
	}
	return 1;
}


Dialog:ImmoOnay(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new vehicleid = PlayerData[playerid][pYukseltilenArac];
		new id = Car_GetID(vehicleid);
		if ( id == -1 ) return 1;
		if(!IsPlayerInVehicle(playerid, PlayerData[playerid][pYukseltilenArac])) return SendErrorMessage(playerid, "Yükseltme yapacaðýnýz araçta deðilsiniz.");
		if(GetMoney(playerid) < PlayerData[playerid][pYukseltmeUcret]) return SendErrorMessage(playerid, "Yeterli paranýz yok.");
		GiveMoney(playerid, -PlayerData[playerid][pYukseltmeUcret]);
		CarData[id][carImmobiliser] += 1;
		SendServerMessage(playerid, "%s ödendi ve aracýn Immobiliser seviyesi %d'e yükseltildi.", FormatNumber(PlayerData[playerid][pYukseltmeUcret]), CarData[id][carImmobiliser]);
	} else PlayerData[playerid][pYukseltmeUcret] = 0;
	return 1;
}

Dialog:KilitOnay(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new vehicleid = PlayerData[playerid][pYukseltilenArac];
		new id = Car_GetID(vehicleid);
		if ( id == -1 ) return 1;
		if(!IsPlayerInVehicle(playerid, PlayerData[playerid][pYukseltilenArac])) return SendErrorMessage(playerid, "Yükseltme yapacaðýnýz araçta deðilsiniz.");
		if(GetMoney(playerid) < PlayerData[playerid][pYukseltmeUcret]) return SendErrorMessage(playerid, "Yeterli paranýz yok.");
		GiveMoney(playerid, -PlayerData[playerid][pYukseltmeUcret]);
		CarData[id][carKilitSeviye] += 1;
		SendServerMessage(playerid, "%s ödendi ve aracýn Kilit seviyesi %d'e yükseltildi.", FormatNumber(PlayerData[playerid][pYukseltmeUcret]), CarData[id][carKilitSeviye]);
	} else PlayerData[playerid][pYukseltmeUcret] = 0;
	return 1;
}

Dialog:dovusstil(playerid, response, listitem, inputtext[]) {
	if(response)
    {
    	if(listitem == 0)
        {
            if(GetMoney(playerid) < 12000) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Dövüþ Eðitmeni] »:{FFFFFF} Eðitim için paran yoksa sana hiçbirþey öðretemem, defol.");
			GiveMoney(playerid, -12000);
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
			PlayerData[playerid][pDovus] = 16;
			SendServerMessage(playerid, "Dövüþ stiliniz 'Elbow' olarak ayarlandý.");
        }
        if(listitem == 1)
        {
            if(GetMoney(playerid) < 12000) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Dövüþ Eðitmeni] »:{FFFFFF} Eðitim için paran yoksa sana hiçbirþey öðretemem, defol.");
			GiveMoney(playerid, -12000);
            SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
            PlayerData[playerid][pDovus] = 5;
            SendServerMessage(playerid, "Dövüþ stiliniz 'Boxing' olarak ayarlandý.");
        }
        if(listitem == 2)
        {
            if(GetMoney(playerid) < 12000) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Dövüþ Eðitmeni] »:{FFFFFF} Eðitim için paran yoksa sana hiçbirþey öðretemem, defol.");
			GiveMoney(playerid, -12000);
        	SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
        	PlayerData[playerid][pDovus] = 15;
        	SendServerMessage(playerid, "Dövüþ stiliniz 'Grabkick' olarak ayarlandý.");
        }
        if(listitem == 3)
        {
            if(GetMoney(playerid) < 12000) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Dövüþ Eðitmeni] »:{FFFFFF} Eðitim için paran yoksa sana hiçbirþey öðretemem, defol.");
			GiveMoney(playerid, -12000);
            SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
            PlayerData[playerid][pDovus] = 7;
            SendServerMessage(playerid, "Dövüþ stiliniz 'Kneehead' olarak ayarlandý.");
        }
        if(listitem == 4)
        {
            if(GetMoney(playerid) < 12000) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Dövüþ Eðitmeni] »:{FFFFFF} Eðitim için paran yoksa sana hiçbirþey öðretemem, defol.");
			GiveMoney(playerid, -12000);
        	SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
        	SendServerMessage(playerid, "Dövüþ stiliniz 'Kung-fuu' olarak ayarlandý.");
        	PlayerData[playerid][pDovus] = 6;
        }
        if(listitem == 5)
        {
            SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
            SendServerMessage(playerid, "Dövüþ stiliniz 'Normal' olarak ayarlandý.");
            PlayerData[playerid][pDovus] = 4;
        }
    }
	return 1;
}

stock ShowContacts(playerid)
{
	new
	    string[32 * MAX_CONTACTS],
		count = 0;

	string = "Kiþi Ekle\n";

	for (new i = 0; i != MAX_CONTACTS; i ++) if (ContactData[playerid][i][contactExists]) {
	    format(string, sizeof(string), "%s%s - #%d\n", string, ContactData[playerid][i][contactName], ContactData[playerid][i][contactNumber]);

		ListedContacts[playerid][count++] = i;
	}
	Dialog_Show(playerid, Contacts, DIALOG_STYLE_LIST, "Kiþilerim", string, "Seç", "<< Geri");
	return 1;
}


stock GetPlayerID(name[], underscore = 1)
{
	foreach (new i : Player) if (!strcmp(ReturnName(i, underscore), name, true)) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

Dialog:ShowOnly(playerid, response, listitem, inputtext[]) {
	playerid = INVALID_PLAYER_ID;
	response = 0;
	listitem = 0;
	inputtext[0] = '\0';
}

Dialog:SoruCevapla(playerid, response, listitem, inputtext[]) {

	if(!response) return _Kick(playerid);

	if(listitem != Cevaplar[SoruID[playerid]])
	{
		YanlisCevap[playerid]++;
	}
	CevaplananSoru[playerid]++;
	if(CevaplananSoru[playerid] < 5) SoruSor(playerid);
	else {
	    if(YanlisCevap[playerid] >= 1) _Kick(playerid);
	    SendServerMessage(playerid, "Quiz'i tamamladýn ve sunucuda yer almaya hak kazandýn, tebrikler!");
	    Dialog_Show(playerid, RegisterScreen, DIALOG_STYLE_PASSWORD, "{FFFFFF}> {006699}Kayýt Ol", "{006699}Varna Roleplay{FFFFFF}'a tekrardan hoþgeldin!, {CC9966}%s.\n\n{FFFFFF} {FF0033}[V:RP] {FFFFFF}Not: Bu hesap veritabanýnda kayýtlý deðil yeni bir hesap oluþturmak için\n lütfen kullanmak istediðiniz þifreyi giriniz.", "Kayýt Ol", "{FF6347}Iptal", ReturnName(playerid));
	}

	return 1;
}

Dialog:BirlikKur(playerid, response, listitem, inputtext[]) {

	if(response)
	{
	    if(PlayerData[playerid][pLevel] < BIRLIK_KURMA_SEVIYESI || GetMoney(playerid) < BIRLIK_KURMA_PARASI) return SendErrorMessage(playerid, "Birlik kurma gereksinimlerine uymuyorsunuz.");
        if(isnull(inputtext)) return SendErrorMessage(playerid, "Geçersiz birlik adý girdiniz.");
		if(strlen(inputtext) < 4) return SendErrorMessage(playerid, "Birlik adý 4 karakterden kýsa olamaz.");
		if(strlen(inputtext) > 32) return SendErrorMessage(playerid, "Birlik adý 32 karakterden uzun olamaz.");
		format(BirlikAdi[playerid], 32, inputtext);
		Dialog_Show(playerid, BirlikTipiSec, DIALOG_STYLE_LIST, "Birlik tipi seçiniz:", "Çete\nMafya\nYarýþ\nLegal/Þirket", "Seç", "{FF6347}Iptal");
	}
	return 1;
}

Dialog:BirlikTipiSec(playerid, response, listitem, inputtext[]) {

	if(response)
	{
	    SendServerMessage(playerid, "'%s' adlý birlik baþarýyla kuruldu, /birlik komutuyla birlik menüsünü açabilirsiniz.", BirlikAdi[playerid]);
	    GiveMoney(playerid, -BIRLIK_KURMA_PARASI);
		new id = Faction_OnaysizBirlikOlustur(BirlikAdi[playerid], listitem+1);
		SetPVarInt(playerid, "KurulanBirlikID", id);
        SetTimerEx("BirlikYetkiVer", 2000, false, "d", playerid);
        PlayerData[playerid][pBirlikKurmaIzni] = 0;
	}
	return 1;
}

forward BirlikYetkiVer(playerid); public BirlikYetkiVer(playerid)
{
	new id = GetPVarInt(playerid, "KurulanBirlikID");
	SetFaction(playerid, id);
	PlayerData[playerid][pFactionRank] = FactionData[id][factionRanks];
}

Dialog:Billboards(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new string[500], szString[100];
	    if(BillBoardData[listitem][bbExists] >= 1)
		{
		    if(!BillBoardData[listitem][bbOwner])
		    {
				BillboardCheckout[playerid] = listitem;
		        format(szString, sizeof(szString), "{FFFFFF}Kiralýk Ýlan Panosu - {FF8000}%i{FFFFFF} - {FF8000}$%d", listitem, BillBoardData[listitem][bbPrice]);
		        format(string, sizeof(string), "{FFFFFF}Ýlan Panosu Adý: {FF8000}%s{FFFFFF} ({FF8000}%i{FFFFFF})\nFiyat: {FF8000}$%d{FFFFFF}\n\n\n((Kira Ücretleri banka hesabýnýzdan her maaþ günü toplanýr!))", BillBoardData[listitem][bbName], listitem, BillBoardData[listitem][bbPrice]);
		    	Dialog_Show(playerid, BillboardRent, DIALOG_STYLE_MSGBOX, szString, string, "Rent", "Cancel");
		    	return 1;
		    }
		    if(BillBoardData[listitem][bbOwner] == GetPlayerSQLID(playerid))
		    {
		    	Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Ýlan Panosu Yönetim", "Ýlan Mesaj Düzenleme\nKiralamaktan Vazgeç", "Devam", "Kapat");
		    	return 1;
		    }
		    else
		    {
		        SendErrorMessage(playerid, "Maalesef, bu pano zaten kiralanmýþ!");
			}
		}
	}
	return 1;
}



Dialog:dilsec(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if(listitem == 0)	{ PlayerData[playerid][pEkstraDil] = 1; }
	    if(listitem == 1)	{ PlayerData[playerid][pEkstraDil] = 2; }
	    if(listitem == 2)   { PlayerData[playerid][pEkstraDil] = 3; }
	    if(listitem == 3)   { PlayerData[playerid][pEkstraDil] = 4; }
	    if(listitem == 4)   { PlayerData[playerid][pEkstraDil] = 5; }
	    if(listitem == 5)   { PlayerData[playerid][pEkstraDil] = 6; }
	    if(listitem == 6)   { PlayerData[playerid][pEkstraDil] = 7; }
	    if(listitem == 7)   { PlayerData[playerid][pEkstraDil] = 8; }
	    if(listitem == 8)   { PlayerData[playerid][pEkstraDil] = 9; }
	    if(listitem == 9)   { PlayerData[playerid][pEkstraDil] = 10; }
	    if(listitem == 10)   { PlayerData[playerid][pEkstraDil] = 11; }
	    if(listitem == 11)   { PlayerData[playerid][pEkstraDil] = 12; }
	    if(listitem == 12)   { PlayerData[playerid][pEkstraDil] = 13; }
	    SendServerMessage(playerid, "2. dilin '%s' olarak deðiþtirildi.", EkstraDilCek(playerid));
	}
	return 1;
}


Dialog:MyBillboardMenu(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if(listitem == 0)
	    {
	        Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Ýlan Panosu Mesajý", "Enter in a new billboard message!\n\n(Max Chars: 230)", "Proceed", "Cancel");
	    }
	    if(listitem == 1)
	    {
	        Dialog_Show(playerid, MyBillboardUnrent, DIALOG_STYLE_MSGBOX, "Kira Iptal", "Kirayý iptal etmek istediðine emin misin?\n\nKira ücretinin yarýsýný geri alacaksýnýz.", "Kabul", "{FF6347}Iptal");
	    }
	}
	return 1;
}


Dialog:yaralilar(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new id = ReturnUser(inputtext);
		SendServerMessage(playerid, "%s - %d", inputtext, id);
		new Float:yaralipos[3];
		GetPlayerPos(id, yaralipos[0], yaralipos[1], yaralipos[2]);
		SetPlayerCheckpoint(playerid, yaralipos[0], yaralipos[1], yaralipos[2], 5.0);
        PlayerData[playerid][pCP] = 1;
        TakiptekiYarali[playerid] = id;
   		SendServerMessage(playerid, "Yaralý haritada iþaretlendi.");
	}
	return 1;
}

Dialog:MyBillboardMessage(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Ýlan Panosu Mesajý", "Yeni bir ilan panosu mesajý girin!\n\n(Maks. Karakter: 230)", "Onayla", "{FF6347}Iptal");

		if (strlen(inputtext) > 230)
	        return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Ýlan Panosu Mesajý", "Çok fazla karakter girdiniz. (Max. 230)\n\nYeni bir ilan panosu mesajý girin.\n\n(Maks. Karakter: 230)", "Onayla", "{FF6347}Iptal");

		format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, inputtext);

		Billboard_Save(PlayerData[playerid][pOwnsBillboard]);
		Billboard_Refresh(PlayerData[playerid][pOwnsBillboard]);
	}
	return 1;
}

Dialog:MyBillboardUnrent(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new bbid = PlayerData[playerid][pOwnsBillboard];

		GiveMoney(playerid, BillBoardData[bbid][bbPrice]/2);
		BillBoardData[bbid][bbOwner] = 0;
		format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, "Sahip Yok");
		Billboard_Save(bbid);
		Billboard_Refresh(bbid);
		PlayerData[playerid][pOwnsBillboard] = -1;
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Kiralanmýþ ilan panosu bulunmamaktadýr.");
	}
	return 1;
}


Dialog:BillboardRent(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new bbid = BillboardCheckout[playerid];
	    if(PlayerData[playerid][pBankMoney] < BillBoardData[bbid][bbPrice])
	    {
	        SendErrorMessage(playerid, "Ýlan panosu kiralama ücreti için banka hesabýnýzda yeterli para yok.");
	        return 1;
	    }
	    else
	    {
			GiveMoney(playerid, -BillBoardData[playerid][bbPrice]);
			PlayerData[playerid][pOwnsBillboard] = bbid;
			BillBoardData[bbid][bbOwner] = GetPlayerSQLID(playerid);
			BillBoardData[bbid][bbTime] = gettime() + 86400;
			Tax_AddMoney(BillBoardData[bbid][bbPrice]);
			Billboard_Save(bbid);
			Billboard_Refresh(bbid);
			SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Ýlan panosu kiraladýn, /ilanpanom komutu ile ilan panonu düzenleyebilirsin.");
		}
	}
	return 1;
}
Dialog:SilverVip(playerid, response, listitem, inputtext[])
{
if (response)
{
switch (listitem)
{
case 0:
{
if(PlayerData[playerid][pMoney] < 950) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
CanDegistir(playerid, 100.0);
ZirhDegistir(playerid, 100.0);
SendServerMessage(playerid, "Canýn ve zýrhýn 950$ karþýlýðýnda fullendi!");
GiveMoney(playerid, -950);
}
case 1:
{
if(PlayerData[playerid][pMoney] < 12000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
if (PlayerData[playerid][pSilahHakki] == 1)
{
PlayerData[playerid][pSilahZaman] = 10;
PlayerData[playerid][pSilahHakki] = 0;
}
GiveWeaponToPlayer(playerid, 22, 90);
SendServerMessage(playerid, "Silver VIP olduðun için 9mm'i 12000$ karþýlýðýnda 90 mermili olarak satýn aldýn!");
GiveMoney(playerid, -12000);
}
case 2:
{
if(PlayerData[playerid][pMoney] < 17500) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
if (PlayerData[playerid][pSilahHakki] == 1)
{
PlayerData[playerid][pSilahZaman] = 10;
PlayerData[playerid][pSilahHakki] = 0;
}
GiveWeaponToPlayer(playerid, 32, 155);
SendServerMessage(playerid, "Silver VIP olduðun için Tec-9'u 7500$ karþýlýðýnda 155 mermili olarak satýn aldýn!");
GiveMoney(playerid, -17500);
}
}
}
return 1;
}
Dialog:GoldVip(playerid, response, listitem, inputtext[])
{
if (response)
{
switch (listitem)
{
case 0:
{
CanDegistir(playerid, 100.0);
ZirhDegistir(playerid, 100.0);
SendServerMessage(playerid, "Canýn ve zýrhýn fullendi!");
}
case 1:
{
if(PlayerData[playerid][pMoney] < 10000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
if (PlayerData[playerid][pSilahHakki] == 2)
{
PlayerData[playerid][pSilahZaman] = 8;
PlayerData[playerid][pSilahHakki] = 0;
}
GiveWeaponToPlayer(playerid, 24, 48);
SendServerMessage(playerid, "Gold VIP olduðun için Deagle'ý 10000$ karþýlýðýnda 48 mermili olarak satýn aldýn!");
PlayerData[playerid][pSilahHakki]++;
GiveMoney(playerid, -10000);
}
case 2:
{
if(PlayerData[playerid][pMoney] < 6500) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
if (PlayerData[playerid][pSilahHakki] == 2)
{
PlayerData[playerid][pSilahZaman] = 8;
PlayerData[playerid][pSilahHakki] = 0;
}
GiveWeaponToPlayer(playerid, 29, 155);
SendServerMessage(playerid, "Gold VIP olduðun için MP5'i 6500$ karþýlýðýnda 155 mermili olarak satýn aldýn!");
PlayerData[playerid][pSilahHakki]++;
GiveMoney(playerid, -6500);
}
}
}
return 1;
}
Dialog:QuantumVip(playerid, response, listitem, inputtext[])
{
if (response)
{
switch (listitem)
{
case 0:
{
CanDegistir(playerid, 100.0);
ZirhDegistir(playerid, 100.0);
SendServerMessage(playerid, "Canýn ve zýrhýn fullendi!");
}
case 1:
{
if(PlayerData[playerid][pMoney] < 30000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
if (PlayerData[playerid][pSilahHakki] == 3)
{
PlayerData[playerid][pSilahZaman] = 6;
PlayerData[playerid][pSilahHakki] = 0;
}
GiveWeaponToPlayer(playerid, 30, 190);
SendServerMessage(playerid, "Quantum VIP olduðun için AK-47'i 30.000$ karþýlýðýnda 190 mermili olarak satýn aldýn!");
PlayerData[playerid][pSilahHakki]++;
GiveMoney(playerid, -30000);
}
case 2:
{
if(PlayerData[playerid][pMoney] < 30000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
if (PlayerData[playerid][pSilahHakki] == 3) //
{
PlayerData[playerid][pSilahZaman] = 6;
PlayerData[playerid][pSilahHakki] = 0;
}
GiveWeaponToPlayer(playerid, 25, 75);
SendServerMessage(playerid, "Quantum VIP olduðun için Shotgun'u 30.000$ karþýlýðýnda 75 mermili olarak satýn aldýn!");
PlayerData[playerid][pSilahHakki]++;
GiveMoney(playerid, -30000);
}
case 3:
{
if(PlayerData[playerid][pMoney] < 10000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
if (PlayerData[playerid][pSilahHakki] == 3)
{
PlayerData[playerid][pSilahZaman] = 6;
PlayerData[playerid][pSilahHakki] = 0;
}
GiveWeaponToPlayer(playerid, 24, 75);
SendServerMessage(playerid, "Quantum VIP olduðun için Deagle'ý 10.000$ karþýlýðýnda 75 mermili olarak satýn aldýn!");
PlayerData[playerid][pSilahHakki]++;
GiveMoney(playerid, -10000);
}
case 4:
{
if(PlayerData[playerid][pMoney] < 70000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
if (PlayerData[playerid][pSilahHakki] == 3)
{
PlayerData[playerid][pSilahZaman] = 6;
PlayerData[playerid][pSilahHakki] = 0;
}
GiveWeaponToPlayer(playerid, 33, 100);
SendServerMessage(playerid, "Quantum VIP olduðun için Country Rifle'i 70.000$ karþýlýðýnda 100 mermili olarak satýn aldýn!");
PlayerData[playerid][pSilahHakki]++;
GiveMoney(playerid, -70000);
}
}
}
return 1;
}
Dialog:Vip(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	        if (!PlayerData[playerid][pSilverVip]) return SendErrorMessage(playerid, "Silver VIP deðilsin!");
            Dialog_Show(playerid, SilverVip, DIALOG_STYLE_LIST, "Silver VIP", "Can/Zýrh Fulle\t950$\n9mm\t12.000$\nTec-9\t17.500$", "Satýn Al", "{FF6347}Iptal");
			}

	        case 1:
	        {
	        if (!PlayerData[playerid][pGoldVip]) return SendErrorMessage(playerid, "Gold VIP deðilsin!");
            Dialog_Show(playerid, GoldVip, DIALOG_STYLE_LIST, "Gold VIP", "Can/Zýrh Fulle\tÜcretsiz\nDesert Eagle\t10.000$\nMP5\t6.500$", "Satýn Al", "Iptal");
            }

	        case 2:
			{
			if (!PlayerData[playerid][pQuantumVip]) return SendErrorMessage(playerid, "Quantum VIP deðilsin!");
			Dialog_Show(playerid, QuantumVip, DIALOG_STYLE_LIST, "Quantum VIP", "Can/Zýrh Fulle\tÜcretsiz\nAK-47\t30.000$\nShotgun\t30.000$\nDeagle\t10.000$\nCountry Rifle\t70.000$", "Satýn Al", "Iptal");
	        }
	        case 3:
	        {
	        new skinad[20900][24];
                    for (new i = 0; i < 20900; i ++)
							format(skinad[i], 24, "");
	        ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_VIP, DIALOG_STYLE_PREVMODEL, "Ozel Kiyafetler", g_vipskins, skinad, "Sec", "Iptal", sizeof(g_vipskins));
	        }
         }
	}
	return 1;
}
Dialog:GlobalLokasyonlar(playerid, response, listitem, inputtext[])
{
if (response)
{
switch (listitem)
{
case 0:
{
Waypoint_Set(playerid, "Idlewood", 2092.3604,-1752.9208,13.4049);
SendServerMessage(playerid, "Haritanda Idlewood konumu iþaretlendi!");
}
case 1:
{
Waypoint_Set(playerid, "Ikinci El Arac Satisi", 1638.6392,-1144.1121,23.9063);
SendServerMessage(playerid, "Haritanda ikinci el araç satýþý konumu iþaretlendi!");
}
}
}
return 1;
}
Dialog:LSPDDolap(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	        if (PlayerData[playerid][pLSPD])
	        {
            SetPlayerColor(playerid, DEFAULT_COLOR);
            PlayerData[playerid][pLSPD] = 0;
            SendServerMessage(playerid, "Ýþbaþýndan çýktýn!");
            }
            else
            {
             SetPlayerColor(playerid, COLOR_RADIO);
            PlayerData[playerid][pLSPD] = 1;
            SendServerMessage(playerid, "Ýþbaþýna geçtin!");
            ZirhDegistir(playerid, 100.0);
            }
			}

	        case 1:
	        {
            CanDegistir(playerid, 100.0);
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aðrý kesiciyi kavrayýp aðzýna doðru götürür ve yutar.", ReturnName(playerid, 0));
            }

	        case 2:
			{
            ZirhDegistir(playerid, 100.0);
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s çelik yeleði üstüne geçirir.", ReturnName(playerid, 0));
	        }
	        case 3:
	        {
            Dialog_Show(playerid, Uniforma, DIALOG_STYLE_LIST, "Uniformalar", "Resmi Üniformalar\nSivil Üniformalar", "Seç", "Iptal");
		    }
	        case 4:
	        {
			Dialog_Show(playerid, Ekipman, DIALOG_STYLE_LIST, "Ekipmanlar", "Devriye Ekipmanlarý\nTekli Devriye Ekipmanlarý\nÖzel Ekipman\nMesai Dýþý Ekipman", "Seç", "Iptal");
            }

	        case 5:
	        {
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabý açarak ekipmanlarý yerine yerleþtirir.", ReturnName(playerid, 0));
            ResetWeapons(playerid);
            }
         }
	}
	return 1;
}
Dialog:Tarife(playerid, response, listitem, inputtext[])
{
if (response)
{
switch (listitem)
{
case 0:
{
if (GetMoney(playerid) < 125) return SendErrorMessage(playerid, "125 dolarýn yok.");
GiveMoney(playerid, -125);
PlayerData[playerid][pSmsHakki] = 25;
SendServerMessage(playerid, "25 adet sms hakký telefonuna eklendi!");
}
}
}
return 1;
}
Dialog:Uyusturucu(playerid, response, listitem, inputtext[])
{
if (response)
{
switch (listitem)
{
case 0:
{
if (PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Bu sistemden yararlanmak için 5 level olmalýsýn!");
if(PlayerData[playerid][pMoney] < 15000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
GiveMoney(playerid, -15000);
Inventory_Add(playerid, "Skunk Tohumu", 1577, 1);
SendServerMessage(playerid, "1 adet Skunk Tohumu aldýn, '/envanter', '/tohumek'");
}
case 1:
{
if (PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Bu sistemden yararlanmak için 5 level olmalýsýn!");
if(PlayerData[playerid][pMoney] < 20000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
GiveMoney(playerid, -20000);
Inventory_Add(playerid, "Marijuana Tohumu", 1578, 1);
SendServerMessage(playerid, "1 adet Marijuana Tohumu aldýn, '/envanter', '/tohumek'");
}
case 2:
{
if(PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Bu sistemden yararlanmak için 5 level olmalýsýn!");
if(PlayerData[playerid][pMoney] < 2500) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
GiveMoney(playerid, -2500);
Inventory_Add(playerid, "LSD", 1577, 10);
SendServerMessage(playerid, "10 adet LSD aldýn, '/envanter'");
}
case 3:
{
if(PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Bu sistemden yararlanmak için 5 level olmalýsýn!");
if(PlayerData[playerid][pMoney] < 3000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
GiveMoney(playerid, -3000);
Inventory_Add(playerid, "Ekstazi", 2253, 10);
SendServerMessage(playerid, "10 adet Ekstazi aldýn, '/envanter'");
}
}
}
return 1;
}

Dialog:Kacakci(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
          	{
	        if(PlayerData[playerid][pMoney] < 9000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
            if(PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Silah satýn almak için 5 seviye ve üzeri olmanýz gerekmekte.");
           	if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
	        GiveWeaponToPlayer(playerid, 22, 130);
	        GiveMoney(playerid, -9000);
	        SendServerMessage(playerid, "Colt-45 model silah satýn aldýn.");
			PlayerData[playerid][pSilahZaman] = 24;
			}
	        case 1:
	        {
	        if(PlayerData[playerid][pMoney] < 25000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
         	if(PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Silah satýn almak için 5 seviye ve üzeri olmanýz gerekmekte.");
         	if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
            GiveWeaponToPlayer(playerid, 24, 48);
            GiveMoney(playerid, -25000);
            SendServerMessage(playerid, "Deagle model silah satýn aldýn.");
            PlayerData[playerid][pSilahZaman] = 24;
            }
	        case 2:
			{
			if(PlayerData[playerid][pMoney] < 15000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
			if(PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Silah satýn almak için 5 seviye ve üzeri olmanýz gerekmekte.");
			if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
            GiveWeaponToPlayer(playerid, 25, 25);
            GiveMoney(playerid, -15000);
            SendServerMessage(playerid, "Shotgun model silah satýn aldýn.");
            PlayerData[playerid][pSilahZaman] = 24;
	        }
	        case 3:
	        {
	        if(PlayerData[playerid][pMoney] < 20000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
	        if(PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Silah satýn almak için 5 seviye ve üzeri olmanýz gerekmekte.");
	        if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
            GiveWeaponToPlayer(playerid, 28, 180);
            GiveMoney(playerid, -20000);
            SendServerMessage(playerid, "Uzi model silah satýn aldýn.");
            PlayerData[playerid][pSilahZaman] = 24;
            }
            case 4:
            {
            if(PlayerData[playerid][pMoney] < 25000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
            if(PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Silah satýn almak için 5 seviye ve üzeri olmanýz gerekmekte.");
            if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
            GiveWeaponToPlayer(playerid, 28, 180);
            GiveMoney(playerid, -25000);
            GiveWeaponToPlayer(playerid, 29, 220);
            SendServerMessage(playerid, "MP5 model silah satýn aldýn.");
            PlayerData[playerid][pSilahZaman] = 24;
            }
            case 5:
            {
            if(PlayerData[playerid][pMoney] < 20000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
            if(PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Silah satýn almak için 5 seviye ve üzeri olmanýz gerekmekte.");
            if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
            GiveWeaponToPlayer(playerid, 32, 275);
            GiveMoney(playerid, -20000);
            SendServerMessage(playerid, "TEC-9 model silah satýn aldýn.");
            PlayerData[playerid][pSilahZaman] = 24;
            }
            case 6:
            {
            if(PlayerData[playerid][pMoney] < 60000) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");
            if(PlayerData[playerid][pLevel] < 7) return SendErrorMessage(playerid, "Silah satýn almak için 7 seviye ve üzeri olmanýz gerekmekte.");
            if (PlayerData[playerid][pSilahZaman] > 0) return SendErrorMessage(playerid, "Silah satýn almadan önce %d saat beklemen gerekir.", PlayerData[playerid][pSilahZaman]);
            GiveWeaponToPlayer(playerid, 30, 160);
            GiveMoney(playerid, -60000);
            SendServerMessage(playerid, "AK-47 model silah satýn aldýn.");
            PlayerData[playerid][pSilahZaman] = 48;
			}
         }
	}
	return 1;
}

Dialog:Uniforma(playerid, response, listitem, inputtext[])
{
if (response)
{
switch (listitem)
{
case 0:
{
new stringex[2056];
stringex[0] = 0;
for (new i = 0; i < 24; i ++)
{
new factionid = PlayerData[playerid][pFaction];
if (FactionData[factionid][factionSkins][i]) {
format(stringex, sizeof(stringex), "%s%d\n\n", stringex, FactionData[factionid][factionSkins][i]);
} else format(stringex, sizeof(stringex), "%s19300\n\n", stringex);
}
ShowPlayerDialog(playerid, MODEL_SELECTION_LSPD, DIALOG_STYLE_PREVMODEL, "Uniformalar", stringex, "Sec", "Iptal");
}
case 1:
Dialog_Show(playerid, SivilSkin, DIALOG_STYLE_INPUT, "Sivil Uniforma", "1 ile 20248 arasýnda bir rakam belirtiniz!", "Sec", "Ýptal");
}
}
return 1;
}
Dialog:PMGonder(playerid, response, listitem, inputtext[])
{
if (response)
{
new userid;
if(!IsPlayerNPC(playerid)) {
	if (PlayerData[playerid][pDisablePM])
		return SendErrorMessage(playerid, "Önce özel mesajlaþma etkinleþtirmeniz gerekmektedir.");

	if (PlayerData[userid][pDisablePM])
	    return SendErrorMessage(playerid, "Bu oyuncu özel mesaj gönderme iznini iptal etmiþtir.");

    //if (sscanf(inputtext, "u", userid)) return SendSyntaxMessage(playerid, "Geçersiz ID!");
	PlayerData[playerid][pLastPM] = 1;
	GameTextForPlayer(userid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Yeni mesaj!", 3000, 3);
	PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);
 	foreach(new i : Player)
	{
	    if(PMSpec[i] && PlayerData[i][pAdmin] >= 1)
	    {
	        SendClientMessageEx(i, COLOR_DEPARTMENT, "((  %s (%d) > %s (%d) : %s ))", ReturnName(playerid, 0), playerid, ReturnName(userid), userid, inputtext);
		}
	}
	if(PlayerData[playerid][pLastPM]) {
	SendClientMessageEx(userid, 0xFFFF22FF, "(( PM alýndý %s(%d): %s ))", ReturnName(playerid, 0), playerid, inputtext);
	SendClientMessageEx(playerid, 0xFFEA22FF, "(( PM gönderildi %s(%d): %s ))", ReturnName(userid, 0), userid, inputtext);
	PlayerData[playerid][pLastPM] = 0;
	}
	}
 }
	return 1;
}
Dialog:Ekipman(playerid, response, listitem, inputtext[])
{
if (response)
{
switch (listitem)
{
case 0:
{
SendServerMessage(playerid, "Devriye ekipmanlarýný kuþandýn ve hazýrlandýn!");
GiveWeaponToPlayer(playerid, 24, 48);
GiveWeaponToPlayer(playerid, 3, 9999);
GiveWeaponToPlayer(playerid, 41, 9999);
}
case 1:
{
SendServerMessage(playerid, "Tekli devriye ekipmanlarýný kuþandýn ve hazýrlandýn!");
GiveWeaponToPlayer(playerid, 29, 200);
GiveWeaponToPlayer(playerid, 24, 48);
GiveWeaponToPlayer(playerid, 3, 9999);
GiveWeaponToPlayer(playerid, 41, 9999);
}
case 2:
{
SendServerMessage(playerid, "Özel devriye ekipmanlarýný kuþandýn ve hazýrlandýn!");
GiveWeaponToPlayer(playerid, 31, 200);
GiveWeaponToPlayer(playerid, 24, 48);
GiveWeaponToPlayer(playerid, 17, 10);
}
case 3:
{
GiveWeaponToPlayer(playerid, 24, 48);
SendServerMessage(playerid, "Mesai dýþý ekipmanlarýný kuþandýn ve hazýrlandýn!");
}
}
}
return 1;
}
Dialog:GraffitiColor(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "Yakýnlarda zaten bir baþka biri sprey kullanýyor.");

	    switch (listitem)
	    {
	        case 0:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFFFFF;

	        case 1:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFF0000;

	        case 2:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFFF00;

	        case 3:
	            PlayerData[playerid][pGraffitiColor] = 0xFF33CC33;

	        case 4:
	            PlayerData[playerid][pGraffitiColor] = 0xFF33CCFF;

	        case 5:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFA500;

	        case 6:
	            PlayerData[playerid][pGraffitiColor] = 0xFF1394BF;
	    }
	   	Dialog_Show(playerid, GraffitiFont, DIALOG_STYLE_LIST, "Graffiti Fontu", "Arial\nCourier\nImpact\nPricedown\nDaredevil\nBombing\naaaiight! fat\nFrom Street Art\nGhang\nGraffogie\nGraphers Blog\nNosegrind Demo", "Tamam", "{FF6347}Iptal");
	}
	return 1;
}

Dialog:GraffitiFont(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "Yakýnlarda zaten bir baþka biri sprey kullanýyor.");

		format(PlayerData[playerid][pGraffitiFont], 64, inputtext);
		Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Graffiti Yazýsý", "Ýstediðiniz metni girin.\n\nNot:Metin 64 karakteri geçemez.", "Tamam", "{FF6347}Iptal");
	}
	return 1;
}

Dialog:GraffitiText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Graffiti Yazýsý", "Ýstediðiniz metni girin.\n\nNot: Metin 64 karakteri geçemez.", "Tamam", "{FF6347}Iptal");

		if (strlen(inputtext) > 64)
		    return Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Graffiti Yazýsý", "Hata: Metin 64 karakteri geçemez.\n\nÝstediðiniz metni tekrar girin.\n\nNot: Metin 64 karakteri geçemez.", "Tamam", "{FF6347}Iptal");

        if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "Graffiti noktasýnda olmadýðýn için graffiti iptal oldu.");

        PlayerData[playerid][pGraffiti] = id;
        PlayerData[playerid][pGraffitiTime] = 15;

		strpack(PlayerData[playerid][pGraffitiText], inputtext, 64 char);
		ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);

		ShowPlayerFooter(playerid, "~g~Graffiti boyaniyor...");
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Boyaniyor...~w~ lutfen bekleyin.", 15000, 3);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir kutu sprey boya çýkarýr ve duvara püskürtür.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:Radio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, CulturalRadio, DIALOG_STYLE_LIST, "Kültürel", "Classical\nInstruments", "Seç", "{FF6347}Iptal");

			case 1:
			    Dialog_Show(playerid, OldiesRadio, DIALOG_STYLE_LIST, "Eskiler", "70's\n80's\n90's", "Seç", "{FF6347}Iptal");

			case 2:
			    Dialog_Show(playerid, OtherRadio, DIALOG_STYLE_LIST, "Diðer", "Dance\nGlee\nMash Ups", "Seç", "{FF6347}Iptal");

			case 3:
			    Dialog_Show(playerid, PopRadio, DIALOG_STYLE_LIST, "Pop", "Korean\nPop\nTop Hits", "Seç", "{FF6347}Iptal");

			case 4:
			    Dialog_Show(playerid, RNBRadio, DIALOG_STYLE_LIST, "Rhythm & Blues", "R&B\nSoul", "Seç", "{FF6347}Iptal");

			case 5:
				Dialog_Show(playerid, RockRadio, DIALOG_STYLE_LIST, "Rock", "Alternative\nClassic\nIndie Rock\nMetal\nPunk\nRock & Roll", "Seç", "{FF6347}Iptal");

	        case 6:
	            Dialog_Show(playerid, TalkRadio, DIALOG_STYLE_LIST, "Talk", "Comedy\nScanners", "Seç", "{FF6347}Iptal");

	 		case 7:
				Dialog_Show(playerid, UrbanRadio, DIALOG_STYLE_LIST, "Urban", "Country\nHip-Hop", "Seç", "{FF6347}Iptal");

			case 8:
			    Dialog_Show(playerid, ElectricRadio, DIALOG_STYLE_LIST, "Electric", "ElectricFM.com\n1Dance.fm\nDanceTime.fm", "Seç", "{FF6347}Iptal");

    		case 9:
			    Dialog_Show(playerid, RadioURL, DIALOG_STYLE_INPUT, "Radyo URL", "Lütfen MP3 linkini giriniz.", "Baþlat", "{FF6347}Iptal");

			case 10:
			{
			    new vehicleid = GetPlayerVehicleID(playerid);

			    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
			        return 0;

				StopVehicleRadio(vehicleid);
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s araç radyosunu kapatýr.", ReturnName(playerid, 0));
			}
	    }
	}
	return 1;
}

Dialog:UrbanRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
			    Dialog_Show(playerid, Country, DIALOG_STYLE_LIST, "Country", "GotRadio - Today's Country\n181.fm - Highway 181\nHPR1: Traditional Classic Country\nCountry - Sky.fm", "Oynat", "{FF6347}Iptal");

            case 1:
			    Dialog_Show(playerid, HipHop, DIALOG_STYLE_LIST, "Hip-Hop", "100Hits - HipHop\nHot 108 Jamz\n181.fm - The Box\nGotRadio - Urban Jams", "Oynat", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:Country(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8100/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8018/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.119:8024/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://scfire-ntc-aa01.stream-aol.com/stream/1019");
		}
	}
	return 1;
}

Dialog:HipHop(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://64.56.64.67:10354/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://stream-95.shoutcast.com/hot108_mp3_128kbps");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.119:8024/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8068/");
		}
	}
	return 1;
}

Dialog:RadioURL(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		if(isnull(inputtext)) return SendErrorMessage(playerid, "URL kýsmýný boþ býrakamazsýnýz.");
	    SetVehicleRadio(vehicleid, inputtext);
	}
	return 1;
}


Dialog:ElectricRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://72.13.83.151/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://173.192.207.51:8062/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://212.83.60.202:8000/");
		}
	}
	return 1;
}

Dialog:TalkRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
			    Dialog_Show(playerid, Comedy, DIALOG_STYLE_LIST, "Comedy", "Comedy104\nAddictedToRadio.com - Comedy\n181.fm - Comedy Club", "Oynat", "{FF6347}Iptal");

            case 1:
			    Dialog_Show(playerid, Scanners, DIALOG_STYLE_LIST, "Scanners", "New Orleans Police Department\nSan Diego Police Dispatch\nLong Beach Police Dispatch\nCalifornia Highway Patrol - Los Angeles & Orange County\nLAPD - Citywide Dispatch and Hot Shots/Code 3", "Oynat", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:Comedy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://69.195.140.50:8060/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.77.21.13:17910/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8026/");
		}
	}
	return 1;
}

Dialog:Scanners(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/3877/0-5443008964.m3u");

			case 1:
			    SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/6740/0-5443008116.m3u");

            case 2:
			    SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/6740/0-5443008116.m3u");

            case 3:
			    SetVehicleRadio(vehicleid, "http://radioreference.com/scripts/playlists/1/10239/0-5443007068.m3u");

            case 4:
			    SetVehicleRadio(vehicleid, "http://radioreference.com/scripts/playlists/1/10239/0-5443007068.m3u");
		}
	}
	return 1;
}

Dialog:RockRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
			case 0:
			    Dialog_Show(playerid, Alternative, DIALOG_STYLE_LIST, "Alternative", "GotRadio - Alternative", "Oynat", "{FF6347}Iptal");

            case 1:
			    Dialog_Show(playerid, Classic, DIALOG_STYLE_LIST, "Classic", "181.FM - Rock 181 #1\n.977 The Classic Rock\n181.fm - The Eagle\n181.fm Rock 40\n181.fm Rock 181 #2", "Oynat", "{FF6347}Iptal");

            case 2:
			    Dialog_Show(playerid, IndieRock, DIALOG_STYLE_LIST, "Indie Rock", "GotRadio - Indie Underground\nIndie Rock - LifeJive.com", "Oynat", "{FF6347}Iptal");

            case 3:
			    Dialog_Show(playerid, Metal, DIALOG_STYLE_LIST, "Metal", "GotRadio - Metal Madness\nDepressive Metal Rock radio\nDeath.F(ucking)M(etal)\nDepressive metal rock (Death)\nRepressive metal rock radio (Black)","Oynat", "{FF6347}Iptal");

            case 4:
			    Dialog_Show(playerid, Punk, DIALOG_STYLE_LIST, "Punk", "Pop Punk - Sky.fm", "Oynat", "{FF6347}Iptal");

            case 5:
			    Dialog_Show(playerid, RockRoll, DIALOG_STYLE_LIST, "Rock & Roll", "Absolute Radio", "Oynat", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:Alternative(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8200/");
		}
	}
	return 1;
}

Dialog:Classic(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8008/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://7649.live.streamtheworld.com/977_CLASSROCK_SC");

            case 2:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8030/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://uplink.181.fm:8028/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8064/");
		}
	}
	return 1;
}

Dialog:IndieRock(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.163:8330/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.53.138.125:8136/");
		}
	}
	return 1;
}

Dialog:Metal(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.163:8340/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://184.154.10.83:8390/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://209.9.229.211/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://184.154.185.170:8080/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://65.60.19.43:8270/");
		}
	}
	return 1;
}

Dialog:Punk(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://80.94.69.106:6884/");
		}
	}
	return 1;
}

Dialog:RockRoll(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://mp3-ar-192.as34763.net/");
		}
	}
	return 1;
}

Dialog:RNBRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
			case 0:
			    Dialog_Show(playerid, RNB, DIALOG_STYLE_LIST, "R&B", "181.fm - True R&B\nDEFJay.de - 100% R&B\nGotRadio - R&B Classics\nSlow Jamz\nAddictedToRadio.com - V101 RnB AAC", "Oynat", "{FF6347}Iptal");

            case 1:
			    Dialog_Show(playerid, SoulRadio, DIALOG_STYLE_LIST, "Soul", "181.fm - Soul\nSoulful Bits", "Oynat", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:RNB(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://108.61.73.119:8022/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://87.230.56.38/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://206.217.213.236:8390/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://173.193.32.153:8020/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://208.77.21.15:10730/");
		}
	}
	return 1;
}

Dialog:SoulRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8058/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://88.191.137.70/");
		}
	}
	return 1;
}

Dialog:PopRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, KoreanRadio, DIALOG_STYLE_LIST, "Korean", "KPOP TOP 100\nGeneraction\nBig B Radio", "Oynat", "{FF6347}Iptal");

			case 1:
			    Dialog_Show(playerid, Pop, DIALOG_STYLE_LIST, "Pop", "My Tunes FM\nHot Hits IR\nGay FM", "Play", "Cancel");

            case 2:
			    Dialog_Show(playerid, TopHits, DIALOG_STYLE_LIST, "Top Hits", "ChartHits.fm - Your Hitz More Music\n181.fm The Office\n100Hitz - Top 40\n1.fm Absolute Top 40\nTop Hits Music - Sky.fm", "Oynat", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:KoreanRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://39.119.181.57:8000/128");

			case 1:
			    SetVehicleRadio(vehicleid, "http://176.31.241.195:8700/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://199.241.187.194:8060/");
		}
	}
	return 1;
}

Dialog:Pop(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://77.102.253.75:8000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://50.117.26.26:1265/moon.wavestreamer.com:1265/live");

            case 2:
			    SetVehicleRadio(vehicleid, "http://80.237.211.85/");
		}
	}
	return 1;
}

Dialog:TopHits(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://79.141.174.206:22000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://108.61.73.117:8002/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://206.217.213.235:8300/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://205.164.62.15:7016/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://stream-67.shoutcast.com/tophits_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:OtherRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, DanceRadio, DIALOG_STYLE_LIST, "Dance", "Dancetime.fm\nPlus Fm - Pure Dance Radio", "Oynat", "{FF6347}Iptal");

			case 1:
			    Dialog_Show(playerid, Glee, DIALOG_STYLE_LIST, "Glee", "AceRadio.net - Glee Radio", "Oynat", "{FF6347}Iptal");

            case 2:
			    Dialog_Show(playerid, MashUps, DIALOG_STYLE_LIST, "Mash Ups", "Mastermix - Base Manic Radio\nMashups\nGotRadio - Mashups\nMashup-Radio24.de\nI love mashup radio", "Oynat", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:DanceRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://87.230.53.17:8000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://87.230.82.41/");
		}
	}
	return 1;
}

Dialog:Glee(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://174.36.42.110:8360/");
		}
	}
	return 1;
}

Dialog:MashUps(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://184.107.17.34:8046/");

            case 1:
				SetVehicleRadio(vehicleid, "http://67.212.166.210:8413/");

            case 2:
				SetVehicleRadio(vehicleid, "http://206.217.213.236:8530/");

            case 3:
				SetVehicleRadio(vehicleid, "http://188.138.124.98:39710/");

            case 4:
				SetVehicleRadio(vehicleid, "http://87.118.64.205:8040/");
		}
	}
	return 1;
}

Dialog:OldiesRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, 70sRadio, DIALOG_STYLE_LIST, "70's", "181.fm - 70's\nAll Hit 70's\nSky.fm", "Oynat", "{FF6347}Iptal");

			case 1:
			    Dialog_Show(playerid, 80sRadio, DIALOG_STYLE_LIST, "80's", "Golden Radio Italia 80's\n181.fm - Lite 80's\n181.fm - Awesome 80's\n80's, 80's, 80's! - Sky.fm", "Oynat", "{FF6347}Iptal");

            case 2:
			    Dialog_Show(playerid, 90sRadio, DIALOG_STYLE_LIST, "90's", "GotRadio - 90's Alternative\nAddictedToRadio.com\n181.fm - Lite 90's\n181.fm - 90's Alternative\n181.fm - Star 90's", "Oynat", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:70sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8066/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://stream-45.shoutcast.com/all_hit_70s_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:80sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://109.123.116.202:8040/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://74.86.186.4:12114/");

			case 2:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8000/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://stream-54.shoutcast.com/the80s_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:90sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.162:8190/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.77.21.13:14330/");

			case 2:
				SetVehicleRadio(vehicleid, "http://74.86.186.4:12118/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8052/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8012/");
		}
	}
	return 1;
}

Dialog:CulturalRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, Classical, DIALOG_STYLE_LIST, "Classical", "Mostly Classical - Sky.fm\nCalmradio.com - Mozart\n1.fm - Otto's classical\nClassical Piano - Sky.fm", "Oynat", "{FF6347}Iptal");

			case 1:
			    Dialog_Show(playerid, Instruments, DIALOG_STYLE_LIST, "Instruments", "Calmradio.com - Solo Piano & Guitar\nGotRadio - Guitar Genius\nGotRadio - Piano Perfect\nPianorama", "Oynat", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:Classical(playerid, response, listitem, inputtext[])
{
    if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://stream-135.shoutcast.com/classical_skyfm_mp3_96kbps");

			case 1:
			    SetVehicleRadio(vehicleid, "http://159.253.143.15:12128/");

			case 2:
			    SetVehicleRadio(vehicleid, "http://205.164.41.18:7070/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://72.26.204.28:6874/");
		}
	}
	return 1;
}

Dialog:Instruments(playerid, response, listitem, inputtext[])
{
    if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.192.225.172:8200/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://173.244.215.162:8020/");

			case 2:
			    SetVehicleRadio(vehicleid, "http://173.244.215.162:8050/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://188.127.226.185/");
		}
	}
	return 1;
}

Dialog:NewTasks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!strcmp(inputtext, "Visit Bank (pending)"))
	    {
	        new id = GetClosestEntrance(playerid, 2);

	        if (id == -1)
	            return SendErrorMessage(playerid, "There are no banks spawned in the server.");

			SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 1.0);
			SendServerMessage(playerid, "Checkpoint set to the closest bank (marked on radar).");
		}
		else if (!strcmp(inputtext, "Visit Store (pending)"))
	    {
	        new id = GetClosestBusiness(playerid, 1);

	        if (id == -1)
	            return SendErrorMessage(playerid, "There are no retail stores spawned in the server.");

			SetPlayerCheckpoint(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 1.0);
			SendServerMessage(playerid, "Checkpoint set to the closest retail store (marked on radar).");
		}
		else if (!strcmp(inputtext, "Visit DMV (pending)"))
	    {
	        new id = GetClosestEntrance(playerid, 1);

	        if (id == -1)
	            return SendErrorMessage(playerid, "There are no DMV's spawned in the server.");

			SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 1.0);
			SendServerMessage(playerid, "Checkpoint set to the closest DMV (marked on radar).");
		}
	}
	return 1;
}

Dialog:PickupItems(playerid, response, listitem, inputtext[])
{
	static
	    string[64];

	if (response)
	{
	    new id = NearestItems[playerid][listitem];

		if (id != -1 && DroppedItems[id][droppedModel])
		{
		    if (DroppedItems[id][droppedWeapon] != 0)
			{
  				if (PlayerData[playerid][pLevel] < 2)
					return SendErrorMessage(playerid, "En az 2 level olman gerekmektedir.");

				if(PlayerHasWeaponSlot(playerid, g_aWeaponSlots[DroppedItems[id][droppedWeapon]]) && g_aWeaponSlots[DroppedItems[id][droppedWeapon]] != 0 )
					return SendErrorMessage(playerid, "Bu silah türü sizde var.");

				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

				Item_Delete(id);
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir %s. alýr.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
			}
			else if (PickupItem(playerid, id))
			{
				format(string, sizeof(string), "~g~%s~w~ envantere eklendi!", DroppedItems[id][droppedItem]);
 				ShowPlayerFooter(playerid, string);
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s yerden \"%s\" alýr.", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
			}
			else
				SendErrorMessage(playerid, "Envanterinizde boþ yer yok.");
		}
		else SendErrorMessage(playerid, "Bu öðe zaten var.");
	}
	return 1;
}

Dialog:StartDelivery(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Job_NearestPoint(playerid);

	    if (id == -1)
	        return 0;

		PlayerData[playerid][pLoadType] = listitem + 1;
		PlayerData[playerid][pLoadCrate] = 1;
		PlayerData[playerid][pLoading] = 1;

		SendServerMessage(playerid, "Sen \"%s\" seçtin. Sandýklarý kamyonun arkasýna yükle.", inputtext);
		SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 1.0);

        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		ShowPlayerFooter(playerid, "Sandýklarý kaldirmak icin ~y~'N'~w~ tusuna bas.");
	}
	return 1;
}

Dialog:GatePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Gate_Nearest(playerid);

	    if (id == -1)
	        return 0;

        if (isnull(inputtext))
        	return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Þifre", "Bu kapýyý açmak için doðru þifre gerekli:", "Tamam", "{FF6347}Iptal");

		if (strcmp(inputtext, GateData[id][gatePass]) != 0)
  			return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Þifre", "Hata: Yanlýþ þifre belirtilmiþ.\n\nBu kapýyý açmak için doðru þifre gerekli:", "Tamam", "{FF6347}Iptal");

		Gate_Operate(id);
	}
	return 1;
}
Dialog:EntrancePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
new id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid));
        if (isnull(inputtext))
        	return Dialog_Show(playerid, EntrancePass, DIALOG_STYLE_INPUT, "Þifre", "Bu kapýyý açmak için doðru þifre gerekli:", "Tamam", "{FF6347}Iptal");

		if (strcmp(inputtext, EntranceData[id][entrancePass]) != 0)
  			return Dialog_Show(playerid, EntrancePass, DIALOG_STYLE_INPUT, "Þifre", "Hata: Yanlýþ þifre belirtilmiþ.\n\nBu kapýyý açmak için doðru þifre gerekli:", "Tamam", "{FF6347}Iptal");

JBC_SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);
SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);
SetCameraBehindPlayer(playerid);
ObjeleriYukle(playerid);
}
return 1;
}

Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Rütbe Düzenle", "Rütbe: %s (%d)\n\nBu rütbe için yeni bir ad girin:", "Tamam", "{FF6347}Iptal", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	return 1;
}


Dialog:DivizyonDuzenle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, DivizyonAdiDuzenle, DIALOG_STYLE_INPUT, "Divizyon Düzenle", "Divizyon: %s (%d)\n\nBu divizyon için yeni bir ad girin:", "Tamam", "{FF6347}Iptal", FactionDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	return 1;
}


Dialog:DivizyonAdiDuzenle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, DivizyonAdiDuzenle, DIALOG_STYLE_INPUT, "Divizyon Adý Düzenle", "Divizyon Adý: %s (%d)\n\nLütfen yeni divizyon adýný gir:", "Tamam", "<< Geri", FactionDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, DivizyonAdiDuzenle, DIALOG_STYLE_INPUT, "Divizyon Adý Düzenle", "HATA: Divizyon adý en fazla 32 karakter olmalý.\n\nRütbe: %s (%d)\n\nLütfen yeni divizyon adýný gir:", "Tamam", "<< Geri", FactionDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionDivizyon[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Faction_SaveDivizyon(PlayerData[playerid][pFactionEdit]);

		Faction_Divizyon(playerid, PlayerData[playerid][pFactionEdit]);
		SendServerMessage(playerid, "%d. divizyon adý \"%s\" olarak deðiþtirildi.", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_Divizyon(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nPlease enter a new name for this rank below:", "Tamam", "<< Geri", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Error: The rank can't exceed 32 characters.\n\nRank: %s (%d)\n\nPlease enter a new name for this rank below:", "Tamam", "<< Geri", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Faction_SaveRanks(PlayerData[playerid][pFactionEdit]);

		Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
		SendServerMessage(playerid, "%d. rütbenin adý \"%s\" olarak deðiþtirildi.", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:AcceptTaxi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new targetid = strval(inputtext);

	    if (!IsPlayerConnected(targetid))
	        return SendErrorMessage(playerid, "Oyuncu oyundan çýkmýþ.");

		if (!PlayerData[targetid][pTaxiCalled])
		    return SendErrorMessage(playerid, "Bu oyuncunun çaðrýsý baþka bir taksi þoförü tarafýndan kabul edildi.");

		static
			Float:x,
			Float:y,
			Float:z;

		GetPlayerLocationEx(targetid, x, y, z);

		PlayerData[targetid][pTaxiCalled] = 0;
		Waypoint_Set(playerid, GetPlayerLocation(targetid), x, y, z);
		PlayerData[playerid][pTaksiKabul] = targetid;
        SendServerMessage(playerid, "%s adlý yolcunun taksi çaðrýsýný kabul ettin..", ReturnName(targetid, 0));
        SendServerMessage(targetid, "%s taksi çaðrýný kabul etti birazdan burada olur.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:AcceptShipment(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = strval(inputtext);

		if (!BusinessData[bizid][bizExists])
		    return 0;

	    if (!BusinessData[bizid][bizShipment])
	        return SendErrorMessage(playerid, "Bu iþyerinin teslimata ihtiyacý var.");

		if (IsShipmentAccepted(bizid))
		    return SendErrorMessage(playerid, "Bu teslimat zaten kabul edildi.");

		foreach (new i : Player) if (Business_IsOwner(i, bizid)) {
		    SendServerMessage(i, "%s senin gönderi isteðini kabul etti.", ReturnName(playerid, 0));
		}
		PlayerData[playerid][pShipment] = bizid;
		SendServerMessage(playerid, "Gönderiyi kabul ettin. /teslimatbasla komutu ile teslimata baþlayabilirsin.");
	}
	return 1;
}

Dialog:RackWeapons(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Rack_Nearest(playerid);

	    if (id == -1)
	        return 0;

	    if (!RackData[id][rackWeapons][listitem])
	    {
			if (!GetWeapon(playerid))
			    return SendErrorMessage(playerid, "Silah saklamak için silahýnýz olmasý gerekmektedir.");

            if (GetFactionType(playerid) == FACTION_GOV || GetFactionType(playerid) == FACTION_INTEL || GetFactionType(playerid) == FACTION_POLICE)
				return SendErrorMessage(playerid, "Bu oluþum türü silahý yere atamaz.");

			RackData[id][rackWeapons][listitem] = GetWeapon(playerid);
			RackData[id][rackAmmo][listitem] = GetPlayerAmmo(playerid);

			ResetWeapon(playerid, GetWeapon(playerid));

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Ar_Lift", 4.1, 0, 0, 0, 0, 0, 1);
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s %s adlý silahý rafa yerleþtirir.", ReturnName(playerid, 0), ReturnWeaponName(RackData[id][rackWeapons][listitem]));
	    }
	    else
	    {
	        if(PlayerHasWeaponSlot(playerid, g_aWeaponSlots[RackData[id][rackWeapons][listitem]]) && g_aWeaponSlots[RackData[id][rackWeapons][listitem]] != 0)
					return SendErrorMessage(playerid, "Bu silah türü sizde var.");

	        GiveWeaponToPlayer(playerid, RackData[id][rackWeapons][listitem], RackData[id][rackAmmo][listitem]);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s %s adlý silahý raftan alýr.", ReturnName(playerid, 0), ReturnWeaponName(RackData[id][rackWeapons][listitem]));

            RackData[id][rackWeapons][listitem] = 0;
			RackData[id][rackAmmo][listitem] = 0;

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Tray_Out", 4.1, 0, 0, 0, 0, 0, 1);
	    }
	}
	return 1;
}

Dialog:TakeItems(playerid, response, listitem, inputtext[])
{
	if ( ( GetFactionType(playerid) != FACTION_INTEL && GetFactionType(playerid) != FACTION_POLICE) || PlayerData[playerid][pTakeItems] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    if (!strcmp(inputtext, "Silah Al")) {
	        ResetWeapons(PlayerData[playerid][pTakeItems]);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s'ýn silahlarýna el koyar.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Tohum Al")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Marijuana Tohumu", -1);
		    //Inventory_Remove(PlayerData[playerid][pTakeItems], "Kokain Tohumu", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Skunk Tohumu", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s'ýn uyuþturucu tohumlarýna el koyar.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Uyusturucu Al")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Marijuana", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Ekstazi", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Kokain", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Skunk", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Eroin", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "LSD", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s'ýn uyuþturucularýna el koyar.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Telsiz Al")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Telsiz", -1);

		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s'ýn telsizine el koyar.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ruhsat Al")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Ruhsat", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s'ýn ruhsatýna el koyar.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ehliyet Al")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Ehliyet", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s'ýn ehliyetine el koyar.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Canta Al")) {
		    Backpack_Delete(GetPlayerBackpack(PlayerData[playerid][pTakeItems]));
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Sirtcantasi", -1);

			SetAccessories(PlayerData[playerid][pTakeItems]);
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s has confiscated %s's backpack.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
	}
	return 1;
}

Dialog:ServerPanel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 4)
		return 0;

	if (response)
	{
	    switch (listitem)
	    {
			case 0:
			{
				if (g_ServerLocked)
				{
				    g_ServerLocked = false;

				    SendRconCommand("password 0");
				    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has unlocked the server.", ReturnName(playerid, 0));
				}
				else Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Lock Server", "Please enter the specified password below to lock the server with:", "Lock", "Back");
			}
			case 1:
			    Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Set Hostname", "Please enter the new server hostname below:", "Tamam", "<< Geri");

			case 2:
			    Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Please specify the MySQL query to execute below:", "Execute", "Back");
	    }
	}
	return 1;
}

Dialog:LockServer(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 4)
		return 0;

	if (response)
	{
	    if (isnull(inputtext) || !strcmp(inputtext, "0"))
	        return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Lock Server", "Please enter the specified password below to lock the server with:", "Lock", "Back");

		if (strlen(inputtext) > 32)
		    return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Lock Server", "Error: Please type a password shorter than 32 characters.\n\nPlease enter the specified password below to lock the server with:", "Lock", "Back");

		static
		    str[48];

	    format(str, sizeof(str), "password %s", inputtext);
		g_ServerLocked = true;

		SendRconCommand(str);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has locked the server (password: %s).", ReturnName(playerid, 0), inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

Dialog:SetHostname(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 4)
		return 0;

	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Set Hostname", "Please enter the new server hostname below:", "Tamam", "<< Geri");

		static
		    str[128];

	    format(str, sizeof(str), "hostname %s", inputtext);

		SendRconCommand(str);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has set the hostname to \"%s\".", ReturnName(playerid, 0), inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

Dialog:ExecuteQuery(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 4)
		return 0;

	if (response)
	{
        if (isnull(inputtext))
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Please specify the MySQL query to execute below:", "Execute", "Back");

        if (strfind(inputtext, "DELETE", true) != -1 || strfind(inputtext, "DROP", true) != -1)
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Error: You can't execute \"DROP\" or \"DELETE\" queries.\n\nPlease specify the MySQL query to execute below:", "Execute", "Back");

		PlayerData[playerid][pExecute] = 1;
		mysql_function_query(g_iHandle, inputtext, (strfind(inputtext, "SELECT", true) != -1), "OnQueryExecute", "ds", playerid, inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

Dialog:TuneVehicle(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            	RepairVehicle(vehicleid);
					SendServerMessage(playerid, "Araç tamir edildi.");
					GiveMoney(playerid, -100);
	        }
	 //       case 1:
                //ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_WHEELS, DIALOG_STYLE_PREVMODEL, "Tekerlek Ekle", {1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098}, , "Ekle", "Iptal");

			case 2:
			    Dialog_Show(playerid, AddNOS, DIALOG_STYLE_LIST, "Nitro Ekle", "2x NOS\n5x NOS\n10x NOS", "Seç", "{FF6347}Iptal");

			case 3:
			{
			    GiveMoney(playerid, -800);
			    AddComponent(vehicleid, 1087);
			    SendServerMessage(playerid, "Hidrolik ekledi.");
			}
			case 4:
			{
      			ShowPlayerDialog(playerid,1223,DIALOG_STYLE_LIST,"-Araç Modifiye","Bazý Araçlar\nLowrider Araçlarý\nDiðerleri\nPaintjob","Ok", "Cancel");
			}
	    }
	}
	return 1;
}

Dialog:AddNOS(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
			{
			    GiveMoney(playerid, -300);
			    AddComponent(vehicleid, 1009);
			    SendServerMessage(playerid, "2x NOS araca monte edildi.");
			}
			case 1:
			{
			    GiveMoney(playerid, -400);
			    AddComponent(vehicleid, 1008);
			    SendServerMessage(playerid, "5x NOS araca monte edildi");
			}
            case 2:
			{
			    GiveMoney(playerid, -800);
			    AddComponent(vehicleid, 1010);
			    SendServerMessage(playerid, "10x NOS araca monte edildi");
			}
		}
	}
	return 1;
}

/*Dialog:EntrancePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid));

		if (id == -1)
		    return SendErrorMessage(playerid, "Geçersiz aralýk girdiniz.");

		if (strcmp(EntranceData[id][entrancePass], inputtext) != 0)
            return SendErrorMessage(playerid, "Geçersiz þifre belirttiniz.");

	    if (!EntranceData[id][entranceLocked])
		{
			EntranceData[id][entranceLocked] = true;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "Isyeri ~r~kilitlendi!~w~");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			EntranceData[id][entranceLocked] = false;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "Isyerinin kilidi ~g~acildi!~w~");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}*/

Dialog:ReleaseCar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			carid = ListedVehicles[playerid][listitem],
			id = GetImpoundByID(CarData[carid][carImpounded]);

	    if (carid != -1 && id != -1 && CarData[carid][carExists] && CarData[carid][carImpounded] != -1)
	    {
	        if (GetMoney(playerid) < CarData[carid][carImpoundPrice])
	            return SendErrorMessage(playerid, "Bu aracý serbest býrakacak miktara sahip deðilsin.");

            GiveMoney(playerid, -CarData[carid][carImpoundPrice]);
            CarData[carid][carPos][0] = ImpoundData[id][impoundRelease][0];
            CarData[carid][carPos][1] = ImpoundData[id][impoundRelease][1];
            CarData[carid][carPos][2] = ImpoundData[id][impoundRelease][2];
            CarData[carid][carPos][3] = ImpoundData[id][impoundRelease][3];
			RespawnVehicle(carid);
			SendServerMessage(playerid, "%s model aracý serbest býrakmak %s'e mal oldu, son parklandýðý yerde aracýný bulabilirsin.", ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(CarData[carid][carImpoundPrice]));
            CarData[carid][carImpounded] = -1;
            CarData[carid][carImpoundPrice] = 0;
            Car_Save(carid);
	    }
	}
	return 1;
}

Dialog:GiveItem(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        userid = -1,
			itemid = -1,
			string[32];

		if (sscanf(inputtext, "u", userid))
		    return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Eþya Ver", "Vereceðiniz oyuncunun ID'ný giriniz:", "Ver", "{FF6347}Iptal");

		if (!IsPlayerConnected(userid))
		    return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Eþya Ver", "Hata: Geçersiz oyuncu.\n\nVereceðiniz oyuncunun ID'ný giriniz:", "Ver", "{FF6347}Iptal");

    	if(GetPlayerState(userid) == PLAYER_STATE_SPECTATING)
	   		return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Eþya Ver", "Hata: Belirttiðiniz oyuncu yakýnda deðildir.\n\nVereceðiniz oyuncunun ID'ný giriniz:", "Ver", "{FF6347}Iptal");

	    if (!IsPlayerNearPlayer(playerid, userid, 6.0))
			return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Eþya Ver", "Hata: Belirttiðiniz oyuncu yakýnda deðildir.\n\nVereceðiniz oyuncunun ID'ný giriniz:", "Ver", "{FF6347}Iptal");

	    if (userid == playerid)
			return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Eþya Ver", "Hata: Kendinize eþya veremezsiniz.\n\nVereceðiniz oyuncunun ID'ný giriniz:", "Ver", "{FF6347}Iptal");

		itemid = PlayerData[playerid][pInventoryItem];

		if (itemid == -1)
		    return 0;

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (InventoryData[playerid][itemid][invQuantity] == 1)
		{
		    if (!strcmp(string, "Yem") || !strcmp(string, "Ruhsat") || !strcmp(string, "Maymuncuk") || !strcmp(string, "Ehliyet") || !strcmp(string, "Telefon")) return SendErrorMessage(playerid, "Bu eþya türü baþkasýna verilemez.");

			if (!strcmp(string, "Sirtcantasi") && Inventory_HasItem(userid, "Sirtcantasi"))
			    return SendErrorMessage(playerid, "Bu oyuncu zaten bir sýrt çantasý taþýyor.");

		    new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel]);

		    if (id == -1)
				return SendErrorMessage(playerid, "Bu oyuncunun boþ envanter yuvasý yok.");

			if (!strcmp(string, "Sirtcantasi") && (id = GetPlayerBackpack(playerid)) != -1)
			{
			    BackpackData[id][backpackPlayer] = PlayerData[userid][pID];
				Backpack_Save(id);
                SetAccessories(playerid);
				SetAccessories(userid);
			    Inventory_Remove(playerid, "Sirtcantasi");
			}
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir \"%s\" çýkarýr ve %s'e verir.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
		    SendServerMessage(userid, "%s adlý oyuncu size \"%s\" verdi (Envanter'e eklendi).", ReturnName(playerid, 0), string);

			Inventory_Remove(playerid, string);
		    Log_Write("logs/give_log.txt", "[%s] %s (%s) has given a %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], string, ReturnName(userid, 0), PlayerData[userid][pIP]);
  		}
		else
		{
		    Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Eþya Ver", "Item: %s (Miktar: %d)\n\n%s adlý oyuncuya vermek istediðiniz miktarý girin:", "Ver", "{FF6347}Iptal", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));
		    PlayerData[playerid][pGiveItem] = userid;
		}
	}
	return 1;
}

Dialog:GiveQuantity(playerid, response, listitem, inputtext[])
{
	if (response && PlayerData[playerid][pGiveItem] != INVALID_PLAYER_ID)
	{
	    new
	        userid = PlayerData[playerid][pGiveItem],
	        itemid = PlayerData[playerid][pInventoryItem],
			string[32];

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (isnull(inputtext))
			return Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Eþya Ver", "Item: %s (Miktar: %d)\n\n%s adlý oyuncuya vermek istediðiniz miktarý girin:", "Ver", "{FF6347}Iptal", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return  Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Eþya Ver", "Hata: Sizde o kadar yok.\n\nItem: %s (Miktar: %d)\n\n%s adlý oyuncuya vermek istediðiniz miktarý girin:", "Ver", "{FF6347}Iptal", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

        new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel], strval(inputtext));

	    if (id == -1)
			return SendErrorMessage(playerid, "Bu oyuncunun boþ envanter yuvasý yok.");

	 	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir \"%s\" çýkarýr ve %s'e verir.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
		SendServerMessage(userid, "%s adlý oyuncu size \"%s\" verdi (Envanter'e eklendi).", ReturnName(playerid, 0), string);

		Inventory_Remove(playerid, string, strval(inputtext));
	    Log_Write("logs/give_log.txt", "[%s] %s (%s) has given %d %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], strval(inputtext), string, ReturnName(userid, 0), PlayerData[userid][pIP]);
	}
	return 1;
}

Dialog:BackpackLoot(playerid, response, listitem, inputtext[])
{
	static id = -1;

	if (response)
	{
	    if (!strcmp(inputtext, "Canta Al"))
	    {
	        if (Inventory_HasItem(playerid, "Sirtcantasi"))
	            return SendErrorMessage(playerid, "Yalnýzca bir sýrt çantasý olabilir.");

	        id = PlayerData[playerid][pBackpackLoot];

	        BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
	        BackpackData[id][backpackPos][0] = 0.0;
	        BackpackData[id][backpackPos][1] = 0.0;
	        BackpackData[id][backpackPos][2] = 0.0;

	        if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
	        DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);
	        DestroyDynamicObject(BackpackData[id][backpackObject]);

			Backpack_Save(id);
			Inventory_Add(playerid, "Sirtcantasi", 3026);

			SetAccessories(playerid);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir sýrt çantasý alýr.", ReturnName(playerid, 0));
		}
		else if ((id = BackpackListed[playerid][listitem]) != -1)
		{
			new
			    string[32];

			strcat(string, BackpackItems[id][bItemName]);

			Inventory_Add(playerid, string, BackpackItems[id][bItemModel], BackpackItems[id][bItemQuantity]);
			Backpack_Remove(BackpackItems[id][bItemBackpack], string, BackpackItems[id][bItemQuantity]);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s sýrt çantasýna ulaþýr ve içinden bir \"%s\"alýr.", ReturnName(playerid, 0), string);
		}
	}
	return 1;
}

Dialog:BackpackDeposit(playerid, response, listitem, inputtext[])
{
	static
	    string[32];

	strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

	if (response)
	{
		new amount = strval(inputtext);
        if (!strcmp(string, "Yem") || !strcmp(string, "Ruhsat") || !strcmp(string, "Maymuncuk") || !strcmp(string, "Ehliyet") || !strcmp(string, "Telefon")) return SendErrorMessage(playerid, "Bu eþya türü yere atýlamaz.");

        if (Backpack_GetItems(GetPlayerBackpack(playerid)) >= MAX_BACKPACK_CAPACITY)
	            return SendErrorMessage(playerid, "Sýrtçantasý maksimum kapasiteye(%d) ulaþmýþtýr.", MAX_BACKPACK_CAPACITY);

		if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
		    return Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Sýrt Çantasý", "Item: %s (Miktar: %d)\n\nBu öðe için saklamak istediðiniz miktarý girin:", "Sakla", "{FF6347}Iptal", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

		Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
		Inventory_Remove(playerid, string, amount);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s sýrt çantasýna ulaþýr ve çantasýna \"%s\" yerleþtirir.", ReturnName(playerid, 0), string);
		Backpack_Open(playerid);
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:BackpackTake(playerid, response, listitem, inputtext[])
{
	static
	    string[32],
		id = -1;

	if (response)
	{
		new amount = strval(inputtext);

		id = PlayerData[playerid][pStorageItem];

		strunpack(string, BackpackItems[id][bItemName]);

		if (amount < 1 || amount > BackpackItems[id][bItemQuantity])
		    return Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Sýrt Çantasý", "Item: %s (Miktar: %d)\n\nBu öðe için almak istediðiniz miktarý girin:", "Al", "{FF6347}Iptal", string, BackpackItems[id][bItemQuantity]);

		Inventory_Add(playerid, string, BackpackItems[id][bItemModel], amount);
        Backpack_Remove(GetPlayerBackpack(playerid), string, amount);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s çantasýndan bir \"%s\" alýr.", ReturnName(playerid, 0), string);
		Backpack_Open(playerid);
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:BackpackOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pStorageItem], string[32];

	    switch (listitem)
	    {
	        case 0:
	        {
	            strcat(string, BackpackItems[id][bItemName]);

	            if (BackpackItems[id][bItemQuantity] == 1)
	            {
	                Inventory_Add(playerid, string, BackpackItems[id][bItemModel]);
					Backpack_Remove(GetPlayerBackpack(playerid), string);

					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s çantasýndan \"%s\" alýr.", ReturnName(playerid, 0), string);
					Backpack_Open(playerid);
	            }
	            else
	            {
	                Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Sýrt Çantasý", "Item: %s (Miktar: %d)\n\nBu öðe için almak istediðiniz miktarý giriniz:", "Al", "{FF6347}Iptal", string, BackpackItems[id][bItemQuantity]);
	            }
			}
	        case 1:
	        {
	            new itemid = Inventory_GetItemID(playerid, BackpackItems[id][bItemName]);

	            if (itemid == -1)
					return SendErrorMessage(playerid, "Saklamak için bu madde sende yok!");

                strunpack(string, InventoryData[playerid][itemid][invItem]);

				if (IsFurnitureItem(string))
				    return SendErrorMessage(playerid, "Sýrtçantasýna mobilya saklayamazsýn.");

				if (InventoryData[playerid][itemid][invQuantity] == 1)
	            {
	                Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][itemid][invModel]);
					Inventory_Remove(playerid, string);

					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s çantasýna \"%s\" koyar.", ReturnName(playerid, 0), string);
					Backpack_Open(playerid);
	            }
	            else
	            {
	                PlayerData[playerid][pInventoryItem] = itemid;
	                Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Sýrtçantasý", "Item: %s (Miktar: %d)\n\nBu öðe için koyar istediðiniz miktarý girin:", "Koy", "Al", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
	            }
			}
   		}
	}
	else Backpack_Open(playerid);
	return 1;
}


Dialog:Backpack(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = -1, string[48];

	    if (!listitem)
		{
	        if (Backpack_GetItems(GetPlayerBackpack(playerid)) >= MAX_BACKPACK_CAPACITY)
	            return SendErrorMessage(playerid, "Sýrtçantasý maksimum kapasiteye(%d) ulaþmýþtýr.", MAX_BACKPACK_CAPACITY);

	        OpenInventory(playerid);

	        PlayerData[playerid][pStorageSelect] = 3;
	    }
	    else if ((id = BackpackListed[playerid][listitem-1]) != -1) {
	        PlayerData[playerid][pStorageItem] = id;

			format(string, sizeof(string), "%s (Quantity: %d)", BackpackItems[id][bItemName], BackpackItems[id][bItemQuantity]);
	        Dialog_Show(playerid, BackpackOptions, DIALOG_STYLE_LIST, string, "Öðeyi Al\nÖðeyi Sakla\nÖðeyi Yere Býrak", "Seç", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:Tutorial(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pTutorialStage] == 3)
	{
		PlayerData[playerid][pTutorialStage] = 4;
		SendClientMessage(playerid, COLOR_SERVER, "'{696969}(( {FFA07A}{EÐÝTÝM} {696969})){FFFFFF}: Y' basýn, soda þiþesini seçin ve býrakýn.");
	}
	else if (PlayerData[playerid][pTutorialStage] == 4)
	{
		PlayerData[playerid][pTutorialStage] = 5;

		SendClientMessage(playerid, COLOR_SERVER, "{696969}(( {FFA07A}{EÐÝTÝM} {696969})){FFFFFF}: Binadan çýkmak için 'F' tuþunu kullanýn.");
		SetPlayerCheckpoint(playerid, -228.8403, 1401.1831, 27.7656, 1.0);
	}
	return 1;
}

Dialog:TutorialConfirm(playerid, response, listitem, inputtext[])
{
    PlayerData[playerid][pTutorialStage] = 0;

	if (!response)
	{
	    PlayerData[playerid][pCreated] = 1;
	    PlayerData[playerid][pTask] = 1;

  		PlayerData[playerid][pTutorial] = 0;
		PlayerData[playerid][pTutorialTime] = 0;

	//	SendServerMessage(playerid, "Type /tasks to view your current tasks to complete.");
	}
	else
	{
	    StartTutorial(playerid);
	}
	return 1;
}


Dialog:MyTickets(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!TicketData[playerid][listitem][ticketExists])
	        return SendErrorMessage(playerid, "Seçilen yuvada hiç bilet yok.");

		if (GetMoney(playerid) < TicketData[playerid][listitem][ticketFee])
		    return SendErrorMessage(playerid, "Bilet almak için yeterli para yok.");

		GiveMoney(playerid, -TicketData[playerid][listitem][ticketFee]);
        Tax_AddMoney(TicketData[playerid][listitem][ticketFee]);

		SendServerMessage(playerid, "\"%s\" ceza için %s ödedin.", TicketData[playerid][listitem][ticketReason],FormatNumber(TicketData[playerid][listitem][ticketFee]));
		Ticket_Remove(playerid, listitem);
	}
	return 1;
}

Dialog:MainGPS(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "Aþaðýya evin adresini girin:", "Tamam", "{FF6347}Iptal");

			case 1:
			    Dialog_Show(playerid, FindBusiness, DIALOG_STYLE_LIST, "Ýþyeri Bul", "Market\nSilahçý\nKýyafetçi\nFast Food\nAraç Bayisi\nGaz Ýstasyonu\nMobilya Dükkaný\nElektronik Market", "Tamam", "{FF6347}Iptal");

			case 2:
			    Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_LIST, "Bina Bul", "En yakýn DMV\nEn yakýn Banka\nEn yakýn Depo\nEn yakýn Belediye Binasý\nEn Yakýn Ýddaa Bâyi", "Tamam", "{FF6347}Iptal");



            case 3:
			{

		Dialog_Show(playerid, GlobalLokasyonlar, DIALOG_STYLE_LIST, "Global Lokasyonlar", "Idlewood\nÝkinci El Araç Pazarý", "Seç", "{FF6347}Iptal");

			}
			case 4:
			{
				static
				    string[MAX_GPS_LOCATIONS * 32];

				string = "Lokasyon Ekle\n";

				for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists]) {
				    format(string, sizeof(string), "%s%s\n", string, LocationData[playerid][i][locationName]);
				}
				Dialog_Show(playerid, CustomLocations, DIALOG_STYLE_LIST, "Lokasyonlarým", string, "Seç", "<< Geri");
			}
		}
	}
	return 1;
}

Dialog:FindHouse(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 32)
		    return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "Aþaðýya evin adresini girin:", "Tamam", "{FF6347}Iptal");

		for (new i = 0; i != MAX_HOUSES; i ++)
		{
			if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], inputtext, true))
	    	{
         		Waypoint_Set(playerid, HouseData[i][houseAddress], HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]);
	        	return SendServerMessage(playerid, "Yol noktasý: \"%s\" (Haritada iþaretli) Kapatmak için:/gpskapat.", HouseData[i][houseAddress]);
			}
		}
        Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Ev Bul", "Hata: Aradýðýnýz adres bulunamadý (\"%s\").\n\nAþaðýya evin adresini girin:", "Tamam", "{FF6347}Iptal", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindBusiness(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new bizid = GetClosestBusiness(playerid, listitem + 1);

		if (bizid != -1)
		{
		    Waypoint_Set(playerid, BusinessData[bizid][bizName], BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
	        SendServerMessage(playerid, "Yol noktasý: \"%s\" (Haritada iþaretli) Kapatmak için:/gpskapat.", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "GPS herhangi bir iþyeri bulamadý.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindEntrance(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = GetClosestEntrance(playerid, listitem + 1);
		if(listitem == 4) id = GetClosestEntrance(playerid, 6);
		if (id != -1)
		{
		    Waypoint_Set(playerid, EntranceData[id][entranceName], EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
	        SendServerMessage(playerid, "Yol noktasý: \"%s\" (Haritada iþaretli) Kapatmak için:/gpskapat.", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "GPS herhangi bir bina bulamadý.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}
Dialog:CustomLocations(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!listitem) {
			Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Lokasyon Ekle", "Bulunduðunuz yerin istediðiniz ismini yazýnýz:", "Tamam", "{FF6347}Iptal");
	    }
	    else
		{
		    new id = Location_GetID(playerid, inputtext);

		    if (id != -1) {
		        PlayerData[playerid][pSelectedSlot] = id;

		        Dialog_Show(playerid, LocationInfo, DIALOG_STYLE_LIST, inputtext, "Ýþaretle\nLokasyonu Sil", "Seç", "<< Geri");
			}
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:AddLocation(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Lokasyon Ekle", "Bulunduðunuz yerin istediðiniz ismini yazýnýz:", "Tamam", "{FF6347}Iptal");

		if (strlen(inputtext) > 32)
		    return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Lokasyon Ekle", "Hata: Lokasyon adý 32 karakterden uzun olamaz.\n\nAþaðýya bulunduðunuz yerin istediðiniz ismi yazýnýz:", "Tamam", "{FF6347}Iptal");

		static
		    Float:fX,
		    Float:fY,
		    Float:fZ,
			id = -1;

		if ((id = House_Inside(playerid)) != -1) {
		    fX = HouseData[id][housePos][0];
		    fY = HouseData[id][housePos][1];
		    fZ = HouseData[id][housePos][2];
		}
		else if ((id = Business_Inside(playerid)) != -1) {
		    fX = BusinessData[id][bizPos][0];
		    fY = BusinessData[id][bizPos][1];
		    fZ = BusinessData[id][bizPos][2];
		}
        else if ((id = Entrance_Inside(playerid)) != -1) {
		    fX = EntranceData[id][entrancePos][0];
		    fY = EntranceData[id][entrancePos][1];
		    fZ = EntranceData[id][entrancePos][2];
		}
		else GetPlayerPos(playerid, fX, fY, fZ);

		Location_Add(playerid, inputtext, fX, fY, fZ);
		SendServerMessage(playerid, "GPS cihazýna \"%s\" adlý lokasyon eklendi.", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:LocationInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pSelectedSlot];

	    switch (listitem)
	    {
	        case 0:
	        {
	            Waypoint_Set(playerid, LocationData[playerid][id][locationName], LocationData[playerid][id][locationPos][0], LocationData[playerid][id][locationPos][1], LocationData[playerid][id][locationPos][2]);
				SendServerMessage(playerid, "Yol noktasý: \"%s\" (Haritada iþaretli) Kapatmak için:/gpskapat.", LocationData[playerid][id][locationName]);
			}
			case 1:
			{
			    SendServerMessage(playerid, "GPS cihazýndan \"%s\" adlý lokasyon kaldýrýldý.", LocationData[playerid][id][locationName]);

				Location_Delete(playerid, LocationData[playerid][id][locationName]);
				dialog_MainGPS(playerid, 1, 4, "\1");
			}
	    }
	}
	else dialog_MainGPS(playerid, 1, 4, "\1");
	return 1;
}

Dialog:Warrants(playerid, response, listitem, inputtext[])
{
	if ((GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL))
	    return 0;

	if (response)
	{
	    static
	        name[64],
			targetid = INVALID_PLAYER_ID;

		strmid(name, inputtext, 0, strfind(inputtext, "(") - 1);

		if ((targetid = GetPlayerID(name, 0)) == INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "Oyuncu baðlý deðil.");

		if (PlayerData[targetid][pWarrants] < 1)
		    return SendErrorMessage(playerid, "Oyuncunun cezasý bulunmamaktadýr.");

		PlayerData[playerid][pMDCPlayer] = targetid;

		format(name, sizeof(name), "MDC: %s", name);
		Dialog_Show(playerid, WarrantList, DIALOG_STYLE_LIST, name, "Aranmalarýný Sil", "Seç", "{FF6347}Iptal");
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:WarrantList(playerid, response, listitem, inputtext[])
{
	if ((GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL ) || (CarData[Car_GetID(GetPlayerVehicleID(playerid))][carFaction] != FACTION_POLICE && CarData[Car_GetID(GetPlayerVehicleID(playerid))][carFaction] != FACTION_INTEL) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
			case 0:
			{
			    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants] = 0;
                PlayerData[PlayerData[playerid][pMDCPlayer]][pWantedLevel] = 0;
			    SendServerMessage(playerid, "%s adlý oyuncunun aranmalarýný sildiniz.", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
			    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s, %s adlý oyuncunun aranmalarýný temizledi.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0));

			    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
			}
	    }
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    dialog_MainMDC(playerid, 1, 0, "\1");
	}
	return 1;
}

Dialog:ChargeName(playerid, response, listitem, inputtext[])
{
	if ((GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL ))
	    return 0;

	if (response)
	{
	    new targetid;

	    if (sscanf(inputtext, "u", targetid))
	        return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Arama Ekle", "Hata: Geçersiz oyuncu.\n\nGeçerli ID girin:", "Tamam", "<< Geri");

		if (targetid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Arama Ekle", "Hata: Geçersiz oyuncu.\n\nGeçerli ID girin:", "Tamam", "<< Geri");

        if (PlayerData[targetid][pWarrants] > 14)
		    return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Arama Ekle", "Hata: En fazla 15 suç ekleyebilirsin.\n\nID girin:", "Tamam", "<< Geri");

		PlayerData[playerid][pMDCPlayer] = targetid;
		Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Arama Ekle", "Lütfen %s adlý vatandaþa eklemek istediðiniz suçu girin:", "Tamam", "<< Geri", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:PlaceCharge(playerid, response, listitem, inputtext[])
{
	if ((GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL ) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Aranma Ekle", "%s adlý oyuncuya ekleyeceðiniz aranma sebebi:", "Ekle", "<< Geri", ReturnName(PlayerData[playerid][pMDCPlayer], 0));

	    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants]++;
        PlayerData[PlayerData[playerid][pMDCPlayer]][pWantedLevel]++;
	    AddWarrant(PlayerData[playerid][pMDCPlayer], playerid, inputtext);
	    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s adlý memur %s adlý vatandaþa aranma ekledi. Sebep: \"%s\" .", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);

	    cmd_mdc(playerid, "\1");
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    cmd_mdc(playerid, "\1");
	}
	return 1;
}

Dialog:MainMDC(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            new vehicleid = GetPlayerVehicleID(playerid);

	            if(CoreVehicles[vehicleid][vehRadar])
	            {
	                CoreVehicles[vehicleid][vehRadar] = false;
	               	CoreVehicles[vehicleid][vehRadarLimit] = 100;
	                SendServerMessage(playerid, "Dashcam kapandý.");
                    for(new i; i < 5; i++) TextDrawHideForPlayer(playerid, carMDC[GetPlayerVehicleID(playerid)][i]);
	                KillTimer(timerMDC[vehicleid]);
	            }
	            else
	            {
	                CoreVehicles[vehicleid][vehRadar] = true;
	                SendServerMessage(playerid, "Dashcam açýldý.");
                    timerMDC[vehicleid] = SetTimerEx ("RadarGuncelle", 100, 1, "d", vehicleid);
				}
    		}
	        case 1:
	        {
	            static
	                string[512];

				string[0] = 0;

				foreach (new i : Player) if (PlayerData[i][pWarrants] > 0) {
				    format(string, sizeof(string), "%s%s (%d aranma)\n", string, ReturnName(i, 0), PlayerData[i][pWarrants]);
				}
				if (!strlen(string))
				    return SendErrorMessage(playerid, "Aktif aranma yok.");

				Dialog_Show(playerid, Warrants, DIALOG_STYLE_LIST, "Aktif Aranmalar", string, "Seç", "<< Geri");
    		}
    		case 2:
    		{
    		    Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Arama Ekle", "Lütfen ID girin:", "Tamam", "<< Geri");
			}
			case 3:
    		{
          		Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Aramalara Bak", "ID girin:", "Ýncele", "Kapat");
			}
			case 4:
    		{
    		    Dialog_Show(playerid, AracSorgulama, DIALOG_STYLE_INPUT, "Kriminal Veritabaný", "Lütfen araç plakasý giriniz:", "Ýncele", "<< Geri");
			}
			case 5:
			{
			Dialog_Show(playerid, LokasyonBul, DIALOG_STYLE_INPUT, "Lokasyon Bulma", "Lütfen telefon girin:", "Bul", "<< Geri");
			}
	    }
	}
	return 1;
}


Dialog:LokasyonBul(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new number = strval(inputtext);
	    new targetid = PlayerData[playerid][pContact];
	    PlayerData[playerid][pContact] = GetNumberOwner(number);
	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, LokasyonBul, DIALOG_STYLE_INPUT, "Lokasyon Bul", "Lokasyon bulmak istediðiniz telefon numarasýný girin", "Tamam", "Geri");

        if (GetNumberOwner(number) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, LokasyonBul, DIALOG_STYLE_INPUT, "Lokasyon Bul", "{B70000}[HATALI NUMARA]\n{FFFFFF}Lokasyon bulmak istediðiniz telefon numarasýný girin", "Tamam", "Geri");

        if (PlayerData[targetid][pPhoneOff]) return SendErrorMessage(playerid, "Lokasyon bulunamadý. Gerekçe: Kiþinin telefonu kapalý!");

		    PlayerData[playerid][pContact] = GetNumberOwner(number);
	        new Float:vpos[3];
	        GetPlayerPos(targetid, vpos[0], vpos[1], vpos[2]);
			SendServerMessage(playerid, "%s adlý kiþinin telefonundan gelen son sinyal: %s", ReturnName(targetid, 0), GetLocation(vpos[0], vpos[1], vpos[2]));
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:AracSorgulama(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext)) return SendErrorMessage(playerid, "Geçerli plaka giriniz.");
        new veri;
	    for(new x = 0; x < MAX_VEHICLES; x++)
	 	{
		    new aid = Car_GetID(x);
		    new userid;
		    if(aid == -1) continue;
		    if(!strcmp(inputtext, CarData[aid][carPlaka], true))
		    {
		  		SetPVarInt(playerid, "BGAI", x);
		    	MenuMDC_AracSorgulama(playerid, x, userid);
				veri++;
			}
		}
		if(veri == 0) return SendErrorMessage(playerid, "Hiç veri bulunamadý.");
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}
/*
Dialog:AracBilgisiniGoster(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new vehicleid = GetPVarInt(playerid, "BGAI");
	    if(IsValidVehicle(vehicleid))
	    {
	        new Float:vpos[3];
	        GetVehiclePos(vehicleid, vpos[0], vpos[1], vpos[2]);
        	TakipCP[playerid] = CreateDynamicCP(vpos[0], vpos[1], vpos[2], 3.0, .playerid = playerid, .streamdistance = 5000.0);
			SendServerMessage(playerid, "Araç uydudan bulundu.");
		}
		else SendErrorMessage(playerid, "Araç bilgisine ulaþýlamadý.");
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}*/

Dialog:ViewCharges(playerid, response, listitem, inputtext[])
{
	if ((GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL ) )
	    return 0;

	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 24)
		    return Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Aramalara Bak", "Please enter the name or ID of the player:", "Tamam", "<< Geri");

		if (IsNumeric(inputtext) && IsPlayerConnected(strval(inputtext))) {
	        ViewCharges(playerid, ReturnName(strval(inputtext)));
		}
	    else if (!IsNumeric(inputtext)) {
	        ViewCharges(playerid, inputtext);
		}
		else {
		    Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Aramalara Bak", "Error: Invalid user specified.\n\nPlease enter the name or ID of the player:", "Tamam", "<< Geri");
		}
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:VergiOde(playerid, response, listitem, inputtext[])
{

	if (response)
	{
		new odenecekvergi;
		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
			odenecekvergi += CarData[i][carVergi];
		}
		if(GetMoney(playerid) < odenecekvergi) return SendErrorMessage(playerid, "%s üzerinizde yok.", FormatNumber(odenecekvergi));
		GiveMoney(playerid, -odenecekvergi);
		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
			CarData[i][carVergi] = 0;
		}
		SendServerMessage(playerid, "Toplam %s mülk vergisi ödediniz.", FormatNumber(odenecekvergi));
	}
	return 1;
}
Dialog:Locker(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if (response)
	{
	    static
	        string[512];

		string[0] = 0;

	    if (FactionData[factionid][factionType] != FACTION_GANG)
	    {
	        switch (listitem)
	        {
	            case 0:
	            {
	                if (!PlayerData[playerid][pOnDuty])
	                {
	                    PlayerData[playerid][pOnDuty] = true;
	                    if(GetFactionType(playerid) != FACTION_NEWS) ZirhDegistir(playerid, 100.0);

	                    SetFactionColor(playerid);
	                    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabý açar ve ekipmanlarýný alýr.", ReturnName(playerid, 0));
	                }
	                else
	                {
	                    PlayerData[playerid][pOnDuty] = false;
	                    ZirhDegistir(playerid, 0.0);

	                    SetPlayerColor(playerid, DEFAULT_COLOR);
	                    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);

	                    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabý açar ve ekipmanlarýný dolaba býrakýr.", ReturnName(playerid, 0));
	                }
				}
				case 1:
				{
				    CanDegistir(playerid, 100.0);
				    //ayarlaAttachedObject(playerid,1,19142,1,0.1,0.05,0.0,0.0,0.0,0.0);
				    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabtan aðrý kesici alýr ve içer.", ReturnName(playerid, 0));
				}
				case 2:
				{
					if(GetFactionType(playerid) == FACTION_GANG || GetFactionType(playerid) == FACTION_NEWS || GetFactionType(playerid) == FACTION_MEDIC) return SendErrorMessage(playerid, "Bu oluþum türü zýrh alamaz.");
				    ZirhDegistir(playerid, 100.0);
				    //ayarlaAttachedObject(playerid,1,19142,1,0.1,0.05,0.0,0.0,0.0,0.0);
				    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabtan çelik yelek alýr ve üzerine giyer.", ReturnName(playerid, 0));
				}
				case 3:
				{
					new stringex[2056];
					stringex[0] = 0;
				    for (new i = 0; i < 24; i ++)
					{
					    if (FactionData[factionid][factionSkins][i]) {
							format(stringex, sizeof(stringex), "%s%d\n\n", stringex, FactionData[factionid][factionSkins][i]);
						} else format(stringex, sizeof(stringex), "%s19300\n\n", stringex);
					}
				    ShowPlayerDialog(playerid, MODEL_SELECTION_FACTION_SKIN, DIALOG_STYLE_PREVMODEL, "Uniformalar", stringex, "Sec", "Iptal");
				}
				case 4:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i])
							format(string, sizeof(string), "%sSilah %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else format(string, sizeof(string), "%sBoþ Slot\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Silahlar", string, "Seç", "{FF6347}Iptal");
				}
				case 5:
				{
				    if(GetFactionType(playerid) == FACTION_GANG || GetFactionType(playerid) == FACTION_NEWS) return SendErrorMessage(playerid, "Bu oluþum türü silah sýfýrlayamaz.");
				    ResetWeapons(playerid);
				}
			}
	    }
	    else
	    {
	        switch (listitem)
	        {
				case 0:
				{
					new stringex[2056];
					stringex[0] = 0;
				    for (new i = 0; i < 24; i ++)
					{
					    if (FactionData[factionid][factionSkins][i]) {
							format(stringex, sizeof(stringex), "%s%d\n\n", stringex, FactionData[factionid][factionSkins][i]);
						} else format(stringex, sizeof(stringex), "%s19300\n\n", stringex);
					}
				    ShowPlayerDialog(playerid, MODEL_SELECTION_FACTION_SKIN, DIALOG_STYLE_PREVMODEL, "Uniformalar", stringex, "Sec", "Iptal");
				}
				case 1:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) != FACTION_GANG)
							format(string, sizeof(string), "%sSilah %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) == FACTION_GANG)
							format(string, sizeof(string), "%sSilah %d: %s (%d mermi)\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]), FactionData[factionid][factionAmmo][i]);

						else format(string, sizeof(string), "%sBoþ Slot\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Silahlar", string, "Seç", "{FF6347}Iptal");
				}
			}
	    }
	}
	return 1;
}

Dialog:LockerWeapons(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if (response)
	{
	    new
	        weaponid = FactionData[factionid][factionWeapons][listitem],
	        ammo = FactionData[factionid][factionAmmo][listitem];

	    if (weaponid)
		{
		     	if (PlayerData[playerid][pLevel] < 2)
				     return SendErrorMessage(playerid, "En az 2 level olmanýz gerekmektedir.");

		        if (PlayerHasWeapon(playerid, weaponid))
		            return SendErrorMessage(playerid, "Bu silah zaten var.");

		        GiveWeaponToPlayer(playerid, weaponid, ammo);
		        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolabý açar ve dolaptan %s model silahý alýr.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

				if (GetFactionType(playerid) == FACTION_GANG)
			    {
			        FactionData[factionid][factionWeapons][listitem] = 0;
			        FactionData[factionid][factionAmmo][listitem] = 0;

			        Faction_Save(factionid);

		   }
		}
		else
		{
		    if (GetFactionType(playerid) == FACTION_GANG)
		    {
		        if ((weaponid = GetWeapon(playerid)) == 0)
		            return SendErrorMessage(playerid, "Herhangi bir silah tutmuyorsun.");

		        FactionData[factionid][factionWeapons][listitem] = weaponid;
		        FactionData[factionid][factionAmmo][listitem] = GetPlayerAmmo(playerid);

		        Faction_Save(factionid);

                ResetWeapon(playerid, weaponid);
		        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dolaptan %s model silahý alýr.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
			}
			else
			{
			    SendErrorMessage(playerid, "Seçilen silah yuvasý boþ.");
			}
	    }
	}
	else {
	    cmd_dolap(playerid, "\1");
	}
	return 1;
}

Dialog:FactionLocker(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
			    static
			        Float:x,
			        Float:y,
			        Float:z;

				GetPlayerPos(playerid, x, y, z);

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][0] = x;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][1] = y;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][2] = z;

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerInt] = GetPlayerInterior(playerid);
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerWorld] = GetPlayerVirtualWorld(playerid);

				Faction_Refresh(PlayerData[playerid][pFactionEdit]);
				Faction_Save(PlayerData[playerid][pFactionEdit]);
				SendServerMessage(playerid, "Dolabýn yerini deðiþtirdin. [ Oluþum ID: %d ]", PlayerData[playerid][pFactionEdit]);
			}
			case 1:
			{
				static
				    string[512];

				string[0] = 0;

			    for (new i = 0; i < 10; i ++)
				{
			        if (FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i])
						format(string, sizeof(string), "%sSilah %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]));

					else format(string, sizeof(string), "%sBoþ Slot\n", string);
			    }
			    Dialog_Show(playerid, FactionWeapons, DIALOG_STYLE_LIST, "Silahlar", string, "Seç", "{FF6347}Iptal");
			}
		}
	}
	return 1;
}

Dialog:FactionWeapons(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    PlayerData[playerid][pSelectedSlot] = listitem;
	    Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Silah Düzenle", "Silahý Düzenle (%d)\nMermiyi Düzenle (%d)\nYuvayý Sil", "Seç", "{FF6347}Iptal", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
	}
	return 1;
}

Dialog:FactionWeapon(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        	Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Silah Düzenle", "Mevcut Silah: %s (%d)\n\n%d numaralý yuvaya yeni silah ID'sý girin:", "Tamam", "{FF6347}Iptal", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

			case 1:
	            Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Mermi Düzenle", "Mevcut Mermi: %d\n\n%d numaralý yuvadaki silaha yeni mermi sayýsý girin:", "Tamam", "{FF6347}Iptal", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

			case 2:
			{
			    FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = 0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = 0;

				Faction_Save(PlayerData[playerid][pFactionEdit]);

				dialog_FactionLocker(playerid, 1, 1, "\1");
				SendServerMessage(playerid, "%d numaralý yuvadaki silahý sildin.", PlayerData[playerid][pSelectedSlot] + 1);
			}
	    }
	}
	else {
	    dialog_FactionLocker(playerid, 1, 1, "\1");
	}
	return 1;
}

Dialog:FactionWeaponID(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new weaponid = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Silah Düzenle", "Mevcut Silah: %s (%d)\n\n%d numaralý yuvaya yeni silah ID'sý girin.:", "Tamam", "{FF6347}Iptal", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (weaponid < 0 || weaponid > 46)
		    return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Silah Düzenle", "Hata: Silah ID'sý 0 altýnda veya 46 üzerinde olamaz.\n\nMevcut Silah: %s (%d)\n\n%d numaralý yuva için yeni silah ID'sý girin:", "Tamam", "{FF6347}Iptal", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = weaponid;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Silah Düzenle", "Silah Düzenle (%d)\nMermi Düzenle (%d)\nYuvayý Sil", "Seç", "{FF6347}Iptal", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);

	    if (weaponid) {
		    SendServerMessage(playerid, "%d numaralý yuvadaki silahý %s olarak deðiþtirdin.", PlayerData[playerid][pSelectedSlot] + 1, ReturnWeaponName(weaponid));
		}
		else {
		    SendServerMessage(playerid, "%d numaralý yuvadaki silahý sildin.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:FactionWeaponAmmo(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new ammo = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Mermi Düzenle", "Mevcut Mermi: %d\n\n%d numaralý yuvadaki silaha yeni mermi sayýsý girin:", "Tamam", "{FF6347}Iptal", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (ammo < 1 || ammo > 15000)
		    return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Mermi Düzenle", "Hata: cephane 1 altýnda ya da 15,000 üstünde olamaz.\n\nMevcut Mermi: %d\n\n%d numaralý yuvadaki silaha yeni mermi sayýsý girin:", "Tamam", "{FF6347}Iptal", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = ammo;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Silah Düzenle", "Silahý Düzenle (%d)\nMermiyi Düzenle (%d)\nYuvayý Sil", "Seç", "{FF6347}Iptal", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
		SendServerMessage(playerid, "%d numaralý slottaki mermi sayýsýný %d olarak deðiþtirdin.", PlayerData[playerid][pSelectedSlot] + 1, ammo);
	}
	return 1;
}

Dialog:FactionSkin(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Please enter the model ID of the skin below (0-311):", "Add", "Cancel");

			case 1:
			{

				Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Please enter the model ID of the skin below (0-311):", "Add", "Cancel");
			}
			case 2:
			{
			    FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = 0;

			    Faction_Save(PlayerData[playerid][pFactionEdit]);
			    SendServerMessage(playerid, "%d numaralý yuvadaki üniformayý sildin.", PlayerData[playerid][pSelectedSlot] + 1);
			}
		}
	}
	return 1;
}

Dialog:FactionModel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new skin = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Yeni Model ID Ekle", "Aþaðýya model numarasý girin (0-311):", "Ekle", "{FF6347}Iptal");

		//if (skin < 0 || skin > 311)
		  //  return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Yeni Model ID Ekle", "Hata: Model ID'sý sýfýrýn altýnda veya 299 üzerinde olamaz.\n\nAþaðýya model numarasý girin (0-311):", "Ekle", "{FF6347}Iptal");

        FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = skin;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		if (skin) {
		    SendServerMessage(playerid, "%d numaralý yuvadaki modeli ID %d olarak deðiþtirdin.", PlayerData[playerid][pSelectedSlot] + 1, skin);
		}
		else {
		    SendServerMessage(playerid, "%d numaralý yuvadaki modeli sildin.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:Crates(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pCarryCrate] != -1)
	        return SendErrorMessage(playerid, "Zaten bir sandýk taþýyorsun.");

	    new id = strfind(inputtext, "#");

	    if (id != -1) {
	        id = strval(inputtext[id + 1]);

	        CrateData[id][crateVehicle] = INVALID_VEHICLE_ID;
	        PlayerData[playerid][pCarryCrate] = id;

            SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracýn dýþýndan bir sandýk alýr", ReturnName(playerid, 0));
		 //	SendServerMessage(playerid, "You have taken a %s crate out of the vehicle.", Crate_GetType(CrateData[id][crateType]));
		}
	}
	return 1;
}

Dialog:AddVehicleModel(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
	        if (isnull(inputtext))
	            return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Araç Ekle", "Adýný veya araç model ID'sýný girin:", "Ekle", "{FF6347}Iptal");

			new model = GetVehicleModelByName(inputtext);

			if (!model)
			    return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Araç Ekle", "Hata: Geçersiz model ID'sý.\n\nAdýný veya araç model ID'sýný girin:", "Ekle", "{FF6347}Iptal");

        	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == model)
	            	return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Araç Ekle", "Hata: Bu model zaten bu bayide satýlýyor.\n\nAdýný veya araç model ID'sýný girin:", "Ekle", "{FF6347}Iptal");
			}
			PlayerData[playerid][pDealerCar] = model;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Fiyat Gir", "Bu model için bir fiyat girin: '%s':", "Tamam", "{FF6347}Iptal", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
	    }
	}
	return 1;
}

Dialog:AddVehicle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
			if (!listitem)
			{
				Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Araç Ekle", "Adýný veya araç model ID'sýný girin:", "Ekle", "{FF6347}Iptal");
			}
		    else
			{
				static
					cars[212],
					models[212][24];

				for (new i = 0; i < sizeof(cars); i ++)
				{
  					cars[i] = i + 400;
					format(models[i], 24, "%s", ReturnVehicleModelName(cars[i]));
				}
				ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_DEALER_ADD, DIALOG_STYLE_PREVMODEL, "Arac Ekle", cars, models, "Sec", "Iptal");
			}
		}
	}
	return 1;
}

Dialog:EnterNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        name[32],
			string[128];

		strunpack(name, PlayerData[playerid][pEditingItem]);

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Kiþi Oluþtur", "Kiþi ismi: %s\n\nLütfen eklemek istediðiniz kiþinin ismini girin", "Tamam", "Vazgeç", name);

		for (new i = 0; i != MAX_CONTACTS; i ++)
		{
			if (!ContactData[playerid][i][contactExists])
			{
            	ContactData[playerid][i][contactExists] = true;
            	ContactData[playerid][i][contactNumber] = strval(inputtext);

				format(ContactData[playerid][i][contactName], 32, name);

				format(string, sizeof(string), "INSERT INTO `contacts` (`ID`, `contactName`, `contactNumber`) VALUES('%d', '%s', '%d')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), ContactData[playerid][i][contactNumber]);
				mysql_tquery(g_iHandle, string, "OnContactAdd", "dd", playerid, i);

				SendServerMessage(playerid, "Kiþi listenizie baþarýyla eklendi \"%s\"", name);
                return 1;
			}
	    }
	    SendErrorMessage(playerid, "There is no room left for anymore contacts.");
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:NewContact(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Kiþi Oluþtur", "HATA: Lütfen eklemek istediðiniz kiþinin ismini girin.\n\nOluþturmak istediðiniz ismi girin:", "Tamam", "Vazgeç");

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Kiþi Oluþtur", "HATA: Kiþi ismi en fazla 32 karakterden oluþmalýdýr.\n\nOluþturmak istediðiniz ismi girin:", "Tamam", "Vazgeç");

		strpack(PlayerData[playerid][pEditingItem], inputtext, 32);

	    Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Telefon Numarasý", "Kiþi adý: %s\n\nEklemek istediðiniz kiþinin telefon numarasýný girin", "Tamam", "Vazgeç", inputtext);
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:ContactInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			id = PlayerData[playerid][pContact],
			string[72];

		switch (listitem)
		{
		    case 0:
		    {
		        format(string, 16, "%d", ContactData[playerid][id][contactNumber]);
				cmd_ara(playerid, string);
		    }
		    case 1:
		    {
		        format(string, sizeof(string), "DELETE FROM `contacts` WHERE `ID` = '%d' AND `contactID` = '%d'", PlayerData[playerid][pID], ContactData[playerid][id][contactID]);
		        mysql_tquery(g_iHandle, string);

		        SendServerMessage(playerid, "\"%s\" adlý kiþiyi rehberden sildiniz.", ContactData[playerid][id][contactName]);

		        ContactData[playerid][id][contactExists] = false;
		        ContactData[playerid][id][contactNumber] = 0;
		        ContactData[playerid][id][contactID] = 0;

		        ShowContacts(playerid);
		    }
		}
	}
	else {
	    ShowContacts(playerid);
	}
	return 1;
}

Dialog:Contacts(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!listitem) {
	        Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Kiþi Oluþtur", "Lütfen rehbere eklemek istediðiniz kiþinin ismini girin", "Tamam", "Vazgeç");
	    }
	    else {
		    PlayerData[playerid][pContact] = ListedContacts[playerid][listitem - 1];

	        Dialog_Show(playerid, ContactInfo, DIALOG_STYLE_LIST, ContactData[playerid][PlayerData[playerid][pContact]][contactName], "Arama\nSil", "Seç", "Geri");
	    }
	}
	else {
		cmd_telefon(playerid, "\1");
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
	    ListedContacts[playerid][i] = -1;
	}
	return 1;
}

Dialog:DialNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
	        string[16];

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Arama iþlemi", "Lütfen aramak istediðiniz numarayý girin", "Ara", "Geri");

        format(string, 16, "%d", strval(inputtext));
		cmd_ara(playerid, string);
	}
	else {
		cmd_telefon(playerid, "\1");
	}
	return 1;
}

Dialog:SendText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new number = strval(inputtext);

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Kýsa Mesaj", "Kýsa mesaj atmak istediðiniz telefon numarasýný girin", "Tamam", "Geri");

        if (GetNumberOwner(number) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Kýsa Mesaj", "{B70000}[HATALI NUMARA]\n{FFFFFF}Kýsa mesaj atmak istediðiniz telefon numarasýný girin", "Tamam", "Geri");

		PlayerData[playerid][pContact] = GetNumberOwner(number);
		Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Kýsa Mesaj", "%s kiþisine iletilecek mesajý girin:", "Ýlet", "Geri", ReturnName(PlayerData[playerid][pContact], 0));
	}
	else {
		cmd_telefon(playerid, "\1");
	}
	return 1;
}
Dialog:KonumGonder(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new number = strval(inputtext);
	    new Float:fX, Float:fY, Float:fZ;
	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Konum Gönder", "Konum göndermek istediðiniz telefon numarasýný girin", "Tamam", "Geri");

        if (GetNumberOwner(number) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Konum Gönder", "{B70000}[HATALI NUMARA]\n{FFFFFF}Konum göndermek istediðiniz telefon numarasýný girin", "Tamam", "Geri");
		PlayerData[playerid][pContact] = GetNumberOwner(number);
		new targetid = PlayerData[playerid][pContact];
		GetPlayerPos(playerid, fX, fY, fZ);
        Waypoint_Set(targetid, GetPlayerLocation(playerid), fX, fY, fZ);
        SendServerMessage(playerid, "%s adlý kiþiye konumunu baþarýyla gönderdin.", ReturnName(targetid, 0));
        SendServerMessage(playerid, "Konumun güncellenmediði için, sabit kalmaya çalýþ.");
        SendServerMessage(targetid, "%s adlý kiþi sana konumunu gönderdi.", ReturnName(playerid, 0));

	}
	else {
		cmd_telefon(playerid, "\1");
	}
	return 1;
}

Dialog:TextMessage(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext))
			return Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Kýsa Mesaj", "%s kiþisine iletilecek mesajý girin:", "Ýlet", "Geri", ReturnName(PlayerData[playerid][pContact], 0));

		new targetid = PlayerData[playerid][pContact];

		if (!IsPlayerConnected(targetid) || !PlayerData[targetid][pPhone])
		    return SendErrorMessage(playerid, "Numara geçersiz.");

        GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "Kisa mesaj ucreti -$1 kesildi");
		PlayerData[playerid][pSmsHakki]--;

		SendClientMessageEx(targetid, COLOR_YELLOW, "SMS: %s - (%d)", inputtext, PlayerData[playerid][pPhone]);
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "SMS", "{33AA33}SMS Ýletildi.\n\n{33AA33}Mesaj: {FFFFFF}%s\n{33AA33}Ýletilen Numara: {FFFFFF}%d", "Tamam", "", inputtext, PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: %s - (%d)", inputtext, PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telefonunu çýkarýr ve bir kýsa mesaj gönderir.", ReturnName(playerid, 0));
	}
	else {
        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Kýsa Mesaj", "Kýsa mesaj atmak istediðiniz telefon numarasýný girin", "Tamam", "Geri");
	}
	return 1;
}

Dialog:MyPhone(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0:
		    {
		        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Önce telefonunuzu açmalýsýnýz!");

				Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Arama iþlemi", "Lütfen aramak istediðiniz numarayý girin", "Ara", "Geri");
			}
			case 1:
			{
			    if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Önce telefonunuzu açmalýsýnýz!");
        Dialog_Show(playerid, KonumGonder, DIALOG_STYLE_INPUT, "Konum Gönder", "Konum göndermek istediðiniz telefon numarasýný yazýn.", "Tamam", "Geri");

			}
			case 2:
			{
			    if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Önce telefonunuzu açmalýsýnýz!");

			    ShowContacts(playerid);
			}
		    case 3:
		    {
		        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Önce telefonunuzu açmalýsýnýz!");
		            
                if (!PlayerData[playerid][pSmsHakki]) return SendErrorMessage(playerid, "SMS hakkýn telefonunda bulunmuyor!");

		        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Kýsa Mesaj", "Kýsa mesaj atmak istediðiniz telefon numarasýný girin", "Tamam", "Geri");
			}
			case 4:
			{
			    if (!PlayerData[playerid][pPhoneOff])
			    {
           			if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) {
			        	CancelCall(playerid);
					}
					PlayerData[playerid][pPhoneOff] = 1;
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telefonunu kapatýr ve cebine sýkýþtýrýr.", ReturnName(playerid, 0));
				}
				else
				{
				    PlayerData[playerid][pPhoneOff] = 0;
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telefonunu açar.", ReturnName(playerid, 0));
				}
			}
		}
	}
	return 1;
}

Dialog:ListedFurniture(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = House_Inside(playerid);

	    if (id != -1 && House_IsOwner(playerid, id))
	    {
	        PlayerData[playerid][pEditFurniture] = ListedFurniture[playerid][listitem];

			Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], "Düzenle\nEnvantere Al\nEþyayý Yoket", "Seç", "{FF6347}Iptal");
	    }
	}
	for (new i = 0; i != MAX_FURNITURE; i ++) {
	    ListedFurniture[playerid][i] = -1;
	}
	return 1;
}

Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
	if (response)
	{
        new id = House_Inside(playerid);

	    if (id != -1 && House_IsOwner(playerid, id))
	    {
	   		switch (listitem)
		    {
		        case 0:
				{
					EditDynamicObject(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureObject]);
					SendServerMessage(playerid, "\"%s\" adlý mobilyanýn yerini deðiþtirdiniz.", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				}
				case 1:
				{
				    new item = Inventory_Add(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureModel]);

				    if (item == -1)
        				return SendErrorMessage(playerid, "Boþ herhangi bir envanter yuvasý yok.");

				    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s \"%s\" adlý mobilyayý alýr.", ReturnName(playerid, 0), FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				    SendServerMessage(playerid, "\"%s\" adlý mobilyayý aldýn. (Envanter'e eklendi)", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

				    Furniture_Delete(PlayerData[playerid][pEditFurniture]);
					CancelEdit(playerid);

				    PlayerData[playerid][pEditFurniture] = -1;
				}
				case 2:
				{
				    Furniture_Delete(PlayerData[playerid][pEditFurniture]);
				    SendServerMessage(playerid, "Mobilyayý sildin. \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

				    CancelEdit(playerid);
				    PlayerData[playerid][pEditFurniture] = -1;
				}
			}
		}
		else {
			PlayerData[playerid][pEditFurniture] = -1;
		}
	}
	else {
	    PlayerData[playerid][pEditFurniture] = -1;
	}
	return 1;
}


Dialog:Trunk(playerid, response, listitem, inputtext[])
{
    new carid = Car_Nearest(playerid);

	if (CarData[carid][carImpounded] != -1)
    	return SendErrorMessage(playerid, "Bu araç baðlanmýþ, baðlanmýþ araçlarda bu iþlemi kullanamazsýnýz.");

	if (carid != -1 && !CarData[carid][carLocked])
 	{
		if (response)
		{
			if (!CarData[carid][carWeapons][listitem])
			{
			    if (!GetWeapon(playerid))
			        return SendErrorMessage(playerid, "Araçta böyle bir silah bulunmamakta !");

       			if (GetWeapon(playerid) == 23 && PlayerData[playerid][pTazer])
	    			return SendErrorMessage(playerid, "Araca Tazer markalý silahý koyamazsýnýz !");

                if (GetWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag])
	    			return SendErrorMessage(playerid, "Araca Shotgun markalý silahý koyamazsýnýz !");

				if (GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL)
        			return SendErrorMessage(playerid, "Bir Olusumda bulunduðunuz için araca silah koyamazsýnýz !");

	   			CarData[carid][carWeapons][listitem] = GetWeapon(playerid);
	            CarData[carid][carAmmo][listitem] = GetPlayerAmmo(playerid);

	            ResetWeapon(playerid, CarData[carid][carWeapons][listitem]);
	            new weaponid = GetPlayerWeapon(playerid);
	           // CarData[vehicleid][TempObject] = CreateDynamicObject(ReturnWeaponsModel(weapon), player_pos[0], player_pos[1], player_pos[2], 0, 0, 0);
	            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s '%s' markalý silahý aracýn bagajýna koyar.", ReturnName(playerid, 0), ReturnWeaponName(CarData[carid][carWeapons][listitem]));
	            Car_Save(carid);
	            Log_Write("logs/bagajlog.txt", "[%s] %s (%s) kendi aracýnýn bagajýna: %s markalý silahý koydu.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnWeaponName(weaponid));
               //  new Float: player_pos[3];
	          //   GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);
				UpdateWeapons(playerid);
	          //   new tempobjid = listitem;
          	  //   UsedPlayerAttach[playerid] = listitem;
	         //    VehicleData[carid][TempObject][tempobjid] = CreateDynamicObject(GetWeaponModel(weaponid), player_pos[0], player_pos[1], player_pos[2], 0, 0, 0);
	         //    EditDynamicObject(playerid, VehicleData[carid][TempObject][tempobjid]);
	           //  SetPVarInt(playerid, "EMO", 1);
			}
			else
			{

                if(PlayerHasWeaponSlot(playerid, g_aWeaponSlots[CarData[carid][carWeapons][listitem]]) && g_aWeaponSlots[CarData[carid][carWeapons][listitem]] != 0 )
					return SendErrorMessage(playerid, "Bu silah türü sizde var.");

			    GiveWeaponToPlayer(playerid, CarData[carid][carWeapons][listitem], CarData[carid][carAmmo][listitem]);
	            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s '%s' markalý silahý aracýn bagajýndan alýr.", ReturnName(playerid, 0), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

                // new tempobjid = listitem;
				 //if((tempobjid =  Search_TempWeapon(carid, CarData[carid][carWeapons][listitem], listitem)) != -1
			 //	&& IsValidDynamicObject(VehicleData[carid][TempObject][tempobjid])) {
			 //	DestroyDynamicObject(VehicleData[carid][TempObject][tempobjid]);
               //  VehicleData[carid][TempExists][tempobjid] = 0;
	           //  UsedPlayerAttach[playerid] = -1;


				CarData[carid][carWeapons][listitem] = 0;
	            // DeletePVar(playerid, "EMO");
	            CarData[carid][carAmmo][listitem] = 0;
	            Car_Save(carid);
	            Car_WeaponStorage(playerid, carid);
			}
	    }
		else {
		    Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:Renk1(playerid, response, listitem, inputtext[])
{
	if(!response) { }
		    if(response)
		    {
			Dialog_Show(playerid, Renk2, DIALOG_STYLE_INPUT,"Araç Satýþ ~ Renk","Satýn alacaðýnýz aracýn ilk rengini giriniz. (0-255 arasý sayýlar geçerlidir)","Ýleri","Kapat");
			}
	return 1;
}
Dialog:Renk2(playerid, response, listitem, inputtext[])
{
		    if(!response) { }
		    if(response)
		    {
		        if(!strlen(inputtext))
		        {
		        SendErrorMessage(playerid,"Bir sayý girmelisiniz.");
				Dialog_Show(playerid,Renk2,DIALOG_STYLE_INPUT,"Araç Satýþ ~ Renk","Satýn alacaðýnýz aracýn ilk rengini giriniz. (0-255 arasý sayýlar geçerlidir)","Ýleri","Kapat");
		        }
		        else
		        {
		            if(strval(inputtext) < 0 || strval(inputtext) > 255)
		            {
		            SendErrorMessage(playerid,"0-255 arasýndaki sayýlar geçerlidir.");
					Dialog_Show(playerid,Renk2,DIALOG_STYLE_INPUT,"Araç Satýþ ~ Renk","Satýn alacaðýnýz aracýn ilk rengini giriniz. (0-255 arasý sayýlar geçerlidir)","Ýleri","Kapat");
		            }
		        SectigiAracRenk1[playerid] = strval(inputtext);
		        format(MesajString,sizeof(MesajString),"Ýlk rengi baþarýyla ayarladýnýz. Seçilen renk: %d",SectigiAracRenk1[playerid]);
		        SendClientMessageEx(playerid, COLOR_LIGHTRED,MesajString);
   				Dialog_Show(playerid, Renk3,DIALOG_STYLE_INPUT,"Araç Satýþ ~ Renk","Satýn alacaðýnýz aracýn ikinci rengini giriniz. (0-255 arasý sayýlar geçerlidir)","Ýleri","Kapat");
				}
			}
	return 1;
}
Dialog:Renk3(playerid, response, listitem, inputtext[])
{
if(!response) { }
		    if(response)
		    {
		        if(!strlen(inputtext))
		        {
		        SendErrorMessage(playerid,"Bir sayý girmelisiniz.");
				ShowPlayerDialog(playerid,102,DIALOG_STYLE_INPUT,"Araç Satýþ ~ Renk","Satýn alacaðýnýz aracýn ikinci rengini giriniz. (0-255 arasý sayýlar geçerlidir)","Ýleri","Kapat");
		        }
		        else
		        {
		            if(strval(inputtext) < 0 || strval(inputtext) > 255)
		            {
		            SendErrorMessage(playerid,"0-255 arasýndaki sayýlar geçerlidir.");
					ShowPlayerDialog(playerid,102,DIALOG_STYLE_INPUT,"Araç Satýþ ~ Renk","Satýn alacaðýnýz aracýn ikinci rengini giriniz. (0-255 arasý sayýlar geçerlidir)","Ýleri","Kapat");
		            }
		        SectigiAracRenk2[playerid] = strval(inputtext);
		        format(MesajString,sizeof(MesajString),"Ýkinci rengi baþarýyla ayarladýnýz. Seçilen renk: %d",SectigiAracRenk2[playerid]);
//		        SendErrorMessage(playerid,MesajString);
		        //Dialog_Show(playerid,ConfirmCarBuy,DIALOG_STYLE_MSGBOX,"Araç ~ Satýþ","Aracýnýzýn plakasý olsun istiyorsanýz fazladan 300$ plaka için masraf gerekmektedir, eðer bu masraflarý ödemek istemiyorsanýz\naracý plakasýz þekilde satýn alabilirsiniz daha sonra plaka iþlemleri yaptýrabilirsiniz.\n(( Sonraki zamanlar [400$] ))","Olsun","Olmasýn");
                Dialog_Show(playerid, ConfirmCarBuy, DIALOG_STYLE_MSGBOX, "Onay", "Renk yapýlandýrmasý tamamlandý.", "Olustur", "Iptal");
				}
			}
				return 1;
}




Dialog:ConfirmCarBuy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			bizid = Business_Inside(playerid),
			carid = PlayerData[playerid][pDealerCar],
			price = DealershipCars[bizid][carid][vehPrice];

		if (bizid != -1 && BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
		{
		    if (BusinessData[bizid][bizProducts] < 1)
		   		return SendErrorMessage(playerid, "Galeride araç stoðu kalmamýþ.");

			if (GetMoney(playerid) < price)
			    return SendErrorMessage(playerid, "Malesef, satýn almak için yeterli paran yok.");

			if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS)
			    return SendErrorMessage(playerid, "Zaten %d araca sahipsin. (Sunucu Araç Limiti)", MAX_OWNABLE_CARS);
            new idx = random(sizeof(g_aracSpawns));
			new id = Car_Create(PlayerData[playerid][pID], DealershipCars[bizid][carid][vehModel], g_aracSpawns[idx][0], g_aracSpawns[idx][1], g_aracSpawns[idx][2], g_aracSpawns[idx][3], 1, 1);

			if (id != -1)
			{
			    Tax_AddPercent(price);

			    BusinessData[bizid][bizVault] += Tax_Percent(price);
			    Business_Save(bizid);
                BusinessData[bizid][bizProducts]--;

				SendClientMessageEx(playerid, 0x804040FF, "Araç Satýn Alýmý: {FFFFFF}%s model aracý %s'a baþarýyla satýn aldýn!", ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
				SendServerMessage(playerid, "/araclarim komutunu kullandýktan sonra /agps komutunu kullanarak aracýný bulabilirsin.");
				GiveMoney(playerid, -price);
				CarData[id][carColor1] = SectigiAracRenk1[playerid];

				CarData[id][carColor2] = SectigiAracRenk2[playerid];
				ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

				ShowPlayerFooter(playerid, "~w~Arac satin ~p~alindi!");
				Log_Write("logs/car_log.txt", "[%s] %s has purchased a %s for %s.", ReturnDate(), ReturnName(playerid, 0), ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
			}
		}
	}
	return 1;
}

Dialog:DealerCarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (isnull(inputtext) || strval(inputtext) < 1)
		        return Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Fiyat Girme Platformu", " '%s' aracý bir fiyat girin :", "Tamam", "Kapat", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));

		    Business_AddVehicle(id, PlayerData[playerid][pDealerCar], strval(inputtext));
	        Business_EditCars(playerid, id);

		    SendServerMessage(playerid, "Galerin için içeri '%s' ekledik.", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		    return 1;
		}
	}
	return 1;
}

Dialog:CarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (isnull(inputtext) || strval(inputtext) < 1)
		        return Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Fiyat", "The current price for '%s' is %s.\n\nBu araç modeli için yeni bir fiyat giriniz :", "Tamam", "Kapat", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));

			new
			    string[128];

			DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice] = strval(inputtext);

			format(string, sizeof(string), "UPDATE `dealervehicles` SET `vehPrice` = '%d' WHERE `ID` = '%d' AND `vehID` = '%d'", strval(inputtext), BusinessData[id][bizID], DealershipCars[id][PlayerData[playerid][pDealerCar]][vehID]);
			mysql_function_query(g_iHandle, string, false, "", "");

			SendServerMessage(playerid, "You have set the price of '%s' to %s.", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
			Business_EditCars(playerid, id);
		}
		return 1;
	}
	return 1;
}

Dialog:CarOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (listitem == 0)
		    {
		        Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Fiyat", "The current price for '%s' is %s.\n\nBu araç modeli için yeni bir fiyat giriniz :", "Tamam", "Kapat", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
		    }
		    else if (listitem == 1)
		    {
			    new model = DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel];
			    Business_RemoveVehicle(id, model);

				SendServerMessage(playerid, "Galerinden '%s' markalý aracý kaldýrdýk.", ReturnVehicleModelName(model));
				Business_EditCars(playerid, id);
			}
		}
	}
	return 1;
}

Dialog:BankAccount(playerid, response, listitem, inputtext[])
{


	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Para Çekme", "Banka Hesabýnýzýn Bakiyesi : %s\n\nÇekmek istediðiniz miktarý giriniz :", "Çek", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
	        case 1:
	        {
				Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Para Yatýrma", "Banka Hesabýnýzýn Bakiyesi : %s\n\nYatýrmak istediðiniz miktarý giriniz :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
			case 2:
			{
			    Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Para Havale", "Banka Hesabýnýzýn Bakiyesi : %s\n\nPara yatýrmak istediðiniz kiþinin ismini(ID) girin :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
	    }
	}
	else
	{
	    Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Banka Hesabý", "Banka Hesabý: %s\nFaiz Hesabý: %s", "Tamam", "Kapat", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Transfer(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        userid;

		if (sscanf(inputtext, "u", userid))
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Para Transfer Platformu", "Banka Hesabýnýzýn Bakiyesi : %s\n\nPara yatýrmak istediðiniz kiþinin ismini(ID) girin :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (!IsPlayerConnected(userid))
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Para Transfer Platformu", "HATA: Geçersiz oyuncu !\n\nBanka Hesabýnýzýn Bakiyesi : %s\n\nPara yatýrmak istediðiniz kiþinin ismini(ID) girin :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == playerid)
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Para Transfer Platformu", "HATA: Kendinize Para Transferi yapamazsýnýz !\n\nBanka Hesabýnýzýn Bakiyesi : %s\n\nPara yatýrmak istediðiniz kiþinin ismini(ID) girin :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pTransfer] = userid;
		Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Para Transfer Platformu", "Banka Hesabýnýzýn Bakiyesi : %s\n\nAktarmak istediðiniz para miktarýný giriniz %s :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));
	}
    else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Banka Hesabý", "Para Çekme\nPara Yatýrma\nPara Havale", "Seç", "<< Geri");
	}
	return 1;
}

Dialog:TransferCash(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Para Transfer Platformu", "Banka Hesabýnýzýn Bakiyesi : %s\n\nAktarmak istediðiniz para miktarýný giriniz %s :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
			return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Para Transfer Platformu", "Error: Insufficient funds!\n\nBanka Hesabýnýzýn Bakiyesi :\n\nAktarmak istediðiniz para miktarýný giriniz %s :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (!strcmp(PlayerData[playerid][pIP], PlayerData[PlayerData[playerid][pTransfer]][pIP])) {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s (%s) has transferred %s to %s (%s).", ReturnName(playerid, 0), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0), PlayerData[playerid][pIP]);
		}
		PlayerData[playerid][pBankMoney] -= amount;
		PlayerData[PlayerData[playerid][pTransfer]][pBankMoney] += amount;

	    SendServerMessage(playerid, "%s adlý kiþinin banka hesabýna baþarýyla %s$ para transfer ettiniz.", ReturnName(PlayerData[playerid][pTransfer], 0), FormatNumber(amount));
	    SendServerMessage(PlayerData[playerid][pTransfer], "%s adlý kiþi banka hesabýnýza %s$ para transfer etti.", ReturnName(playerid, 0), FormatNumber(amount));

        Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Banka Hesabý", "Para Çekme\nPara Yatýrma\nPara Havale", "Seç", "<< Geri");
        Log_Write("logs/transfer_log.txt", "[%s] %s (%s) has transferred %s to %s (%s).", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer]), PlayerData[PlayerData[playerid][pTransfer]][pIP]);
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Banka Hesabý", "Para Çekme\nPara Yatýrma\nPara Havale", "Seç", "<< Geri");
	}
	return 1;
}

Dialog:Savings(playerid, response, listitem, inputtext[])
{

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Para Çek", "Banka Hesabýnýzýn Bakiyesi : %s\n\nÇekmek istediðiniz para miktarýný giriniz :", "Çek", "<< Geri", FormatNumber(PlayerData[playerid][pSavings]));
			}
	        case 1:
	        {
				Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Para Yatýr", "Banka Hesabýnýzýn Bakiyesi : %s\n\nYatýrmak istediðiniz para miktarýný giriniz :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pSavings]));
			}
	    }
	}
	else
	{
	    Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Banka Hesabý", "Banka Hesabý : %s\nFaiz Hesabý : %s", "Seç", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Withdraw(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Para Çekme", "Banka Hesabýnýzýn Bakiyesi :\n\nÇekmek istediðiniz para miktarýný giriniz :", "Çek", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
			return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Para Çekme", "HATA: Yetersiz Bakiye !\n\nBanka Hesabýnýzýn Bakiyesi :\n\nÇekmek istediðiniz para miktarýný giriniz :", "Çek", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] -= amount;
	    GiveMoney(playerid, amount);

	    SendServerMessage(playerid, "Banka hesabýnýzdan baþarýyla %s$ çektiniz.", FormatNumber(amount));
        Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Para Çekme", "Banka Hesabýnýzýn Bakiyesi :\n\nÇekmek istediðiniz para miktarýný giriniz :", "Çek", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Banka Hesabý", "Para Çekme\nPara Yatýrma\nPara Havale", "Seç", "<< Geri");
	}
	return 1;
}

Dialog:Deposit(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Para Yatýrma", "Banka Hesabýnýzýn Bakiyesi :\n\nYatýrmak istediðiniz para miktarýný giriniz :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Para Yatýrma", "HATA: Malesef belirttiðiniz kadar paranýz yok !\n\nBanka Hesabýnýzýn Bakiyesi :\n\nYatýrmak istediðiniz para miktarýný giriniz :", "Yatýr", "<< Geri", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] += amount;
	    GiveMoney(playerid, -amount);

	    SendServerMessage(playerid, "Banka hesabýnýza baþarýyla %s$ yatýrdýnýz.", FormatNumber(amount));
        Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Banka Hesabý", "Para Çekme\nPara Yatýrma\nPara Havale", "Seç", "<< Geri");
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Banka Hesabý", "Para Çekme\nPara Yatýrma\nPara Havale", "Seç", "<< Geri");
	}
	return 1;
}

Dialog:SavingsWithdraw(playerid, response, listitem, inputtext[])
{

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Para Çek", "Banka Hesabýnýzýn Bakiyesi : %s\n\nÇekmek istediðiniz para miktarýný giriniz :", "Çek", "<< Geri", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > PlayerData[playerid][pSavings])
			return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Para Çek", "HATA: Malesef belirttiðiniz kadar paranýz yok !\n\nYour savings account's balance: %s\n\nÇekmek istediðiniz para miktarýný giriniz :", "Çek", "<< Geri", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] -= amount;
	    GiveMoney(playerid, amount);

	    SendServerMessage(playerid, "Banka hesabýnýzdan baþarýyla %s$ çektiniz.", FormatNumber(amount));
        Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Para Çek", "Banka Hesabýnýzýn Bakiyesi : %s\n\nÇekmek istediðiniz para miktarýný giriniz :", "Çek", "<< Geri", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
	    Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Banka Hesabý", "Para Çekme\nPara Yatýrma\nPara Havale", "Seç", "<< Geri");
	}
	return 1;
}

Dialog:SavingsDeposit(playerid, response, listitem, inputtext[])
{

	if (response)
	{
	    new amount = strval(inputtext);

		if (amount < 50000) return SendErrorMessage(playerid, "Faiz hesabýna minimum $50,000 ekleyebilirsiniz.");

		new olusacakpara = PlayerData[playerid][pSavings] + amount;
		if (olusacakpara > 100000) return SendErrorMessage(playerid, "Faiz hesabýnda maksimum $100,000 olabilir.");

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Para Yatýrma", "Banka Hesabýnýzýn Bakiyesi : %s\n\nYatýrmak istediðiniz para miktarýný giriniz :", "Deposit", "Back", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Para Yatýrma", "HATA: Malesef belirttiðiniz kadar paranýz yok !\n\nYour savings account's balance: %s\n\nYatýrmak istediðiniz para miktarýný giriniz :", "Deposit", "Back", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] += amount;
	    GiveMoney(playerid, -amount);

	    SendServerMessage(playerid, "Banka hesabýnýza baþarýyla %s$ yatýrdýnýz.", FormatNumber(amount));
        Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Para Yatýrma", "Banka Hesabýnýzýn Bakiyesi : %s\n\nYatýrmak istediðiniz para miktarýný giriniz :", "Deposit", "Back", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
	    Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Banka Hesabý", "Para Çek\nPara Yatýr", "Seç", "<< Geri");
	}
	return 1;
}

Dialog:Bank(playerid, response, listitem, inputtext[])
{

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Banka Hesabý", "Para Çekme\nPara Yatýrma\nPara Havale", "Seç", "<< Geri");
			}
			case 1:
			{
				Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Banka Hesabý", "Para Çek\nPara Yatýr", "Seç", "<< Geri");
			}
		}
	}
	return 1;
}

Dialog:FAQ1(playerid, response, listitem, inputtext[])
{
	if (!response)
		Dialog_Show(playerid, FAQ, DIALOG_STYLE_LIST, "{FF6347}{ Fred:{FFFFFF} Ne öðrenmek istiyorsun? }", "Herhangi bir binaya nasýl girebilirim?\nEnvanterime nasýl eriþebilirim?\nYerdeki eþyalarý nasýl alabilirim?\nEkranýmdaki ikonlar nedir?\nAçlýðýmý ve susuzluðumu nasýl giderebilirim?\nHaritadaki semboller ne anlama geliyor?\nMeslekten nasýl çýkabilirim?\nSilah nasýl alýrým ve silahýmý nasýl doldurabilirim?\nEvimdeki mobilyalarý nasýl düzenlerim?\nBinalara nasýl girebilirim?", "Seç", "{FF6347}Iptal");

	return 1;
}
// SONRA
Dialog:FAQ(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Binalarýn içine {FFFF00}'F'{FFFFFF} tuþuna basarak girebilirsiniz.", "Tamam", "<< Geri");
			}
            case 1:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Envanteri açmak için klavyenizden {FFFF00}'Y'{FFFFFF} tuþuna basabilirsiniz.\nAyrýca {FFFF00}'/Envanter'{FFFFFF} yazarakta envanteri açabilirsiniz.", "Tamam", "<< Geri");
			}
			case 2:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Yerdeki itemi almak için klavyenizden {FFFF00}'C' {FFFFFF}tuþuyla çömelerek.\n{FFFF00}'N'{FFFFFF} tuþuyla yerdeki eþyayý alabilirsiniz.", "Tamam", "<< Geri");
			}
			case 3:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Ekranýnýzýn sað üst paranýn altýndaki kýsýmda {FFFF00}Pizza {FFFFFF}sembolu\ngözükmektedir. Bu açlýk semboludur yüzde azaldýkça karakter acýkýr.\nEkranýnýzýn sað üst tarafýnda paranýn altýndaki kýsýmda {FFFF00}Þiþe {FFFFFF}sembolu\ngözükmektedir. Bu susuzluk semboludur yüzde azaldýkca karakter susar.", "Tamam", "<< Geri");
			}
			case 4:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Açlýðýnýzý veya Susuzluðunuzu bir hamburgercide giderebilirsiniz.\nveya Marketten dondurulmuþ Pizza,Hamburger alabilirsiniz.", "Tamam", "<< Geri");
			}
			case 5:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Maðaza , Hamburgerci veya Silah Maðazalarýný sol alt taraftaki haritada sembollerle görebilirsiniz.", "Tamam", "<< Geri");
			}
			case 6:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Mevcut iþini iptal etmek için {FFFF00}/disablecp {FFFFFF}komutunu kullanabilirsiniz.\nKamyonete kasa yüklüyorsanýz durdurmak için {FFFF00}/stoploading {FFFFFF}komutunu kullanabilirsiniz.", "Tamam", "<< Geri");
			}
			case 7:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Herhangi bir silahý kullanmak için þarjör gereklidir.\nÞarjörünüz yoksa silah satýcýlarýndan mermi alabilirsiniz.\n{FFFF00}'N' {FFFFFF}tuþunu kullanarak elinizdeki silahý envantere koyabilirsiniz.", "Tamam", "<< Geri");
			}
			case 8:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Satýn aldýðýnýz herhangi bir mobilya sizin envanterinizin içinde görünecektir.\nMobilyayý seçmek için{FFFF00}'Y'{FFFFFF}, tuþuna basýp mobilyanýn üzerine týklayýn. Mobilyayý kullanmak için {FFFF00}'Kullan'{FFFFFF} seçeneceðini seçin.\n\nEðer evinizin içinde yerleþtirilmiþ bir mobilya varsa {FFFF00}/mobilya{FFFFFF} komutu ile düzenleyebilirsin.\nPozisyon düzenlemek veya öðeyi yok etmek için öðeyi seçin.", "Tamam", "<< Geri");
			}
			case 9:
			{
			    Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Interiorlara girmek için {FFFF00}'F' {FFFFFF}tusunu kullanýn.\nYere {FFFF00}'C' {FFFFFF}tuþuyla çömelip {FFFF00}'N' {FFFFFF}tuþu ile eþyayý yerden alabilirsiniz.", "Tamam", "<< Geri");
			}
		}
	}
	return 1;
}

Dialog:Balikci(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0:
		    {
		        BaliklariListele(playerid, 1);
			}
            case 1:
		    {
		        new string[1024];
				format(string, sizeof(string), "Balýk\tAðýrlýk\tGram Fiyatý\n");

				for(new i; i < sizeof(BalikTurleri); ++i)
				{
			        format(string, sizeof(string), "%s%s\t%d - %d gr.\t{2ECC71}%.2f$\n",
						string,
						BalikTurleri[i][TurAdi],
						BalikTurleri[i][MinAgirlik], BalikTurleri[i][MaxAgirlik],
						BalikTurleri[i][GramFiyat]
					);
				}

				ShowPlayerDialog(playerid, DIALOG_BALIK+4, DIALOG_STYLE_TABLIST_HEADERS, "Balýk Listesi", string, "Kapat", "");
			}
			 case 2:
		    {
		    if (Inventory_HasItem(playerid, "Yem"))
        return SendErrorMessage(playerid, "Envanterinde zaten yem bulunuyor!");
		if(GetMoney(playerid) < 1) return SendServerMessage(playerid, "10 adet yem almak için 1 dolarýn bulunmuyor.");
		Inventory_Add(playerid, "Yem", 1930, 10);
		GiveMoney(playerid, -1);
		SendServerMessage(playerid, "Baþarýyla 1 dolara 10 adet yem aldýn!");
			}
		}
	}
	return 1;
}



Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
	    JBC_SetPlayerPos(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
	}
	return 1;
}

Dialog:LeaveTest(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    CancelDrivingTest(playerid);
        SendErrorMessage(playerid, "Sürüþ testinden ayrýldýðýnýz için test iptal oldu.");
	}
	else
	{
	    //CancelDrivingTest(playerid);
	    PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);
	}
	return 1;
}

Dialog:TirAyril(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		tiryapiyor[playerid] = 0;
		RespawnVehicle(GetPVarInt(playerid, "AracID"));
		RespawnVehicle(GetPVarInt(playerid, "TrailerID"));
 		DisablePlayerCheckpoint(playerid);
  		JBC_SetPlayerPos(playerid, 2416.0771,-2084.5427,13.4233);
		SendServerMessage(playerid, "Týr seferi iptal edildi.");
	}
	else
	{
	    PutPlayerInVehicle(playerid, GetPVarInt(playerid, "AracID"), 0);
	}
	return 1;
}

Dialog:PizzaAyril(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new trailerid = GetVehicleTrailer(GetPVarInt(playerid, "TirID"));
		RespawnVehicle(GetPVarInt(playerid, "TirID"));
		RespawnVehicle(trailerid);
 		DisablePlayerCheckpoint(playerid);
  		JBC_SetPlayerPos(playerid, 2107.4409,-1788.2010,13.5608);
		tiryapiyor[playerid] = false;
	}
	else
	{
	    PutPlayerInVehicle(playerid, GetPVarInt(playerid, "TirID"), 0);
	}
	return 1;
}


Dialog:Inventory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			itemid = PlayerData[playerid][pInventoryItem],
			string[64];

	    strunpack(string, InventoryData[playerid][itemid][invItem]);

	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!strcmp(string, "Demo Soda") && PlayerData[playerid][pTutorialStage] == 3)
			    {
        			PlayerData[playerid][pThirst] = 100;
        			Dialog_Show(playerid, Tutorial, DIALOG_STYLE_MSGBOX, "{FFFFFF}> {FFA07A}Eðitim Mesajý", "{FFFFFF}Bir soda þiþesini aldýnýz ve kullanmayý öðrendiniz\nAçlýk ve susuzluk iþaretli ekranýn sað tarafýnda görüntülenir.\nKarakteriniz her saniye susayacak, acýkacak ve enerji kaybedecek. Sakýn aç ve susuz kalmayýn!", "Devam", "");
			    }
			    else
			    {
		            CallLocalFunction("OnPlayerUseItem", "dds", playerid, itemid, string);
				}
	        }
	        case 1:
	        {
	            if (!strcmp(string, "Demo Soda"))
	                return 0;

                if ( PlayerData[playerid][pHoldWeapon] > 0 ) return SendErrorMessage(playerid, "Silah tutarken bu iþlemi yapamazsýnýz.");
				PlayerData[playerid][pInventoryItem] = itemid;
				Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Öðe Ver", "Eþyayý vereceðiniz oyuncunun ID'sýný giriniz:", "Ver", "{FF6347}Iptal");
	        }
	        case 2:
	        {
	            new id = -1;

	            if (!strcmp(string, "Demo Soda") && PlayerData[playerid][pTutorialStage] != 4)
	                return 0;

				if (PlayerData[playerid][pTutorialStage] == 4)
				{
					Inventory_Remove(playerid, "Demo Soda");
					Dialog_Show(playerid, Tutorial, DIALOG_STYLE_MSGBOX, "{FFFFFF}> {FFA07A}Eðitim Mesajý", "{FFFFFF}Soda þiþesini yere attýn. Yere attýðýn soda þiþesini yerden almak için önce eðilip sonra 'N' tuþuna bas.\nAyrýca envanterindeki eþyalarý baþkalarýna verebilirsin.\n\nAyrýca evinizin deposuna veya bir aracýn bagajýna öðeleri saklayabilirsiniz.\nKarakterinizin envanteri en fazla %d benzersiz öðeleri içerebilir.", "Ileri", "", MAX_INVENTORY);
					return 1;
				}
	            if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawnedEx(playerid))
	                return SendErrorMessage(playerid, "Þu anda öðeleri býrakamazsýnýz:");

				else if (!strcmp(string, "Sirtcantasi"))
					return cmd_cantaat(playerid, "\1");

				else if ((id = Garbage_Nearest(playerid)) != -1)
				{
				    if (GarbageData[id][garbageCapacity] >= 100)
				        return SendErrorMessage(playerid, "Bu çöp kutusu dolu.");

                    if (InventoryData[playerid][itemid][invQuantity] == 1)
                    {
						GarbageData[id][garbageCapacity]++;
	                    Garbage_Save(id);

						Inventory_Remove(playerid, string);
	                    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s çöp kutusu içine bir \"%s\" atar.", ReturnName(playerid, 0), string);

	                    format(string, sizeof(string), "[Çöp Kutusu %d]\n{FFFFFF}Çöp Kapasitesi: %d/100", id, GarbageData[id][garbageCapacity]);
						UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DARKBLUE, string);
					}
					else
					{
	                    Dialog_Show(playerid, CopeAt, DIALOG_STYLE_INPUT, "Çöpe At", "Eþya: %s - Miktar: %d\n\nÇöpe atacaðýnýz maddenin miktarýný belirtiniz:", "At", "{FF6347}Iptal", string, InventoryData[playerid][itemid][invQuantity]);
					}
				}
				else if (InventoryData[playerid][itemid][invQuantity] == 1)
					DropPlayerItem(playerid, itemid);

				else
					Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Eþyayý At", "Item: %s - Miktar: %d\n\nAtacaðýnýz maddenin miktarýný belirtiniz:", "At", "{FF6347}Iptal", string, InventoryData[playerid][itemid][invQuantity]);
	        }
	    }
	}
	return 1;
}


Dialog:CopeAt(playerid, response, listitem, inputtext[])
{
	new
	    itemid = PlayerData[playerid][pInventoryItem],
	    string[32];

	static st[256];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	new id = Garbage_Nearest(playerid);

	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, CopeAt, DIALOG_STYLE_INPUT, "Esya Býrak", "Esya : %s - Miktar: %d\n\nBu esyadan kaç adet býrakmak istediðinizi belirtmelisiniz :", "Býrak", "Kapat", string, InventoryData[playerid][itemid][invQuantity]);

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return Dialog_Show(playerid, CopeAt, DIALOG_STYLE_INPUT, "Esya Býrak", "HATA: Belirttiðiniz miktar kadar esya bulunmamakta.\n\nEsya : %s - Miktar: %d\n\nBu esyadan kaç adet býrakmak istediðinizi belirtmelisiniz :", "Býrak", "Kapat", string, InventoryData[playerid][itemid][invQuantity]);

		if(!strcmp(string, "Metal"))
		{
		    GarbageData[id][garbageCapacity] += 1;
		}
		else GarbageData[id][garbageCapacity] += 1;
	    Garbage_Save(id);

        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s çöp kutusu içine %d adet \"%s\" atar.", ReturnName(playerid, 0), InventoryData[playerid][itemid][invQuantity], string);
        Inventory_Remove(playerid, string, strval(inputtext));
        format(st, sizeof(st), "[Çöp Kutusu %d]\n{FFFFFF}Çöp Kapasitesi: %d/100", id, GarbageData[id][garbageCapacity]);
		UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DARKBLUE, st);
	}
	return 1;
}

Dialog:DropItem(playerid, response, listitem, inputtext[])
{
	new
	    itemid = PlayerData[playerid][pInventoryItem],
	    string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (response)
	{
	    if (!strcmp(string, "Yem") || !strcmp(string, "Ruhsat") || !strcmp(string, "Maymuncuk") || !strcmp(string, "Ehliyet") || !strcmp(string, "Bugday") || !strcmp(string, "Telefon")) return SendErrorMessage(playerid, "Bu eþya türü baþkasýna verilemez.");

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Esya Býrak", "Esya : %s - Miktar: %d\n\nBu esyadan kaç adet býrakmak istediðinizi belirtmelisiniz :", "Býrak", "Kapat", string, InventoryData[playerid][itemid][invQuantity]);

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Esya Býrak", "HATA: Belirttiðiniz miktar kadar esya bulunmamakta.\n\nEsya : %s - Miktar: %d\n\nBu esyadan kaç adet býrakmak istediðinizi belirtmelisiniz :", "Býrak", "Kapat", string, InventoryData[playerid][itemid][invQuantity]);

		DropPlayerItem(playerid, itemid, strval(inputtext));
	}
	return 1;
}

Dialog:BusinessBuy(playerid, response, listitem, inputtext[])
{
	static
	    bizid = -1,
		price,
		string[64];

    if ((bizid = Business_Inside(playerid)) != -1 && response)
    {
        price = BusinessData[bizid][bizPrices][listitem];

        if (GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "Satýn almak için malesef yeterli paran bulunmamakta !");

		if(BusinessData[bizid][bizProducts] <= 0) return SendErrorMessage(playerid, "Stokta bu ürün kalmamýþ.");

		if (BusinessData[bizid][bizType] == 1 || BusinessData[bizid][bizType] == 6)
		{
		    switch (listitem)
		    {
			    case 0:
			    {
			        if (Inventory_HasItem(playerid, "Sirtcantasi"))
		                return SendErrorMessage(playerid, "Zaten bir sýrt çantasý almýþsýnýz!");

					new id = Inventory_Add(playerid, "Sirtcantasi", 3026);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					if (Backpack_Create(playerid) == -1)
					    return SendErrorMessage(playerid, "Sadece 1 sýrt çantasý alabilirsiniz...");

					SetAccessories(playerid);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir sýrt çantasý aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 1:
		        {
		            if (Inventory_Count(playerid, "Su Þisesi") >= 10)
		                return SendErrorMessage(playerid, "You have 10 bottles of water, you can't buy anymore.");

					new id = Inventory_Add(playerid, "Su", 2958);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir su þiþesi aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {
              		if (Inventory_Count(playerid, "Soda") >= 5)
		                return SendErrorMessage(playerid, "Maksimum 5 tane soda alabilirsiniz.");

					new id = Inventory_Add(playerid, "Soda", 1543);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir Soda aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 3:
		        {
		            if (Inventory_Count(playerid, "Benzin Kutusu") >= 3)
		                return SendErrorMessage(playerid, "Maksimum 3 tane benzin bidonu alabilirsiniz.");

					new id = Inventory_Add(playerid, "Benzin Kutusu", 1650);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve benzin bidonu aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 4:
		        {
		            if (Inventory_HasItem(playerid, "Levye"))
		                return SendErrorMessage(playerid, "Zaten bir levyen var.");

					new id = Inventory_Add(playerid, "Levye", 18634);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir levye aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 5:
		        {
		            if (Inventory_HasItem(playerid, "Maske"))
		                return SendErrorMessage(playerid, "Zaten bir masken var.");

					if (PlayerData[playerid][pLevel] < 3)
					    return SendErrorMessage(playerid, "Maske satýn alabilmek için 3 level olman gereklidir.");

					new id = Inventory_Add(playerid, "Maske", 19036);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir maske aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 6:
		        {
		            if (PlayerHasWeapon(playerid, 5))
		                return SendErrorMessage(playerid, "Zaten bir beyzbol sopan var.");

					GiveWeaponToPlayer(playerid, 5, 1);

					GiveMoney(playerid, -15);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "%s kasiyere 15$ ödedi ve bir beyzbol sopasý aldý.", ReturnName(playerid, 0));

					BusinessData[bizid][bizProducts]--;
			//		BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					//Tax_AddPercent(price);
			    }
				case 7:
		  {
		            if (Inventory_Count(playerid, "Dondurulmus Pizza") >= 3)
		                return SendErrorMessage(playerid, "En fazla 3 tane dondurulmuþ pizza satýn alabilirsiniz.");

					new id = Inventory_Add(playerid, "Dondurulmus Pizza", 2814);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "%s kasiyere %s ödedi ve bir dondurulmuþ pizza aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 8:
		        {
		            if (Inventory_Count(playerid, "Dondurulmus Hamburger") >= 5)
		                return SendErrorMessage(playerid, "En fazla 5 tane dondurulmuþ burger satýn alabilirsiniz.");

					new id = Inventory_Add(playerid, "Dondurulmus Hamburger", 2768);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir dondurulmuþ burger aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
			    case 9:
		        {
		            if (Inventory_Count(playerid, "Zar") >= 1)
		                return SendErrorMessage(playerid, "En fazla 1 tane zar alabilirsin.");

					new id = Inventory_Add(playerid, "Zar", 1851);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir zar aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

			    }
			    case 10:
		        {
		            if (Inventory_Count(playerid, "Sigara") >= 5)
		                return SendErrorMessage(playerid, "En fazla 5 tane sigara alabilirsin.");

					new id = Inventory_Add(playerid, "Sigara", 1019);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir sigara aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 11:
		        {
		            if (Inventory_Count(playerid, "Ip") >= 1)
		                return SendErrorMessage(playerid, "En fazla 1 tane ip alabilirsin.");

					new id = Inventory_Add(playerid, "Ip", 1019);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir ip aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 12:
		        {
		            if (Inventory_Count(playerid, "Goz Bagi") >= 2)
		                return SendErrorMessage(playerid, "En fazla 2 tane göz baðý alabilirsin.");

					new id = Inventory_Add(playerid, "Goz Bagi", 1019);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir göz baðý aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 13:
		        {
		            if (Inventory_Count(playerid, "Kalas") >= 3)
		                return SendErrorMessage(playerid, "En fazla 3 tane kalas alabilirsin.");

					new id = Inventory_Add(playerid, "Kalas", 1463);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir kalas aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 14:
		        {
		            if (PlayerHasWeapon(playerid, 7))
		                return SendErrorMessage(playerid, "Zaten bir ýstaka var.");

					GiveWeaponToPlayer(playerid, 7, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "%s kasiyere %s ödedi ve bir ýstaka aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 15:
		        {
		            if (Inventory_Count(playerid, "Nargile") >= 1)
		                return SendErrorMessage(playerid, "En fazla 1 tane nargile alabilirsin.");

					new id = Inventory_Add(playerid, "Nargile", 1453);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir nargile aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
		else if (BusinessData[bizid][bizType] == 2)
		{
		    switch (listitem)
	    	{
		        case 0:
		        {
		            if (!Inventory_HasItem(playerid, "Ruhsat"))
		                return SendErrorMessage(playerid, "Lisansýnýz olmadan buradan alýþveriþ yapamazsýnýz !");

                    if (PlayerData[playerid][pLevel] < 5)
		                return SendErrorMessage(playerid, "Silah dükkanlarýndan alýþveriþ yapabilmek için en az 5 seviye olmanýz gerekmektedir!");

		            if (Inventory_Count(playerid, "Sarjor") >= 10)
		                return SendErrorMessage(playerid, "Maksimum 10 adet þarjör alabilirsiniz.");

					new id = Inventory_Add(playerid, "Sarjor", 2039);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir adet þarjör aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
                case 1:
		        {
		            if (!Inventory_HasItem(playerid, "Ruhsat"))
		                return SendErrorMessage(playerid, "Lisansýnýz olmadan buradan alýþveriþ yapamazsýnýz !");

                    if (PlayerData[playerid][pLevel] < 5)
		                return SendErrorMessage(playerid, "Silah dükkanlarýndan alýþveriþ yapabilmek için en az 5 seviye olmanýz gerekmektedir!");

		            if (Inventory_Count(playerid, "Cephane Kartusu") >= 10)
		                return SendErrorMessage(playerid, "Maksimum 10 adet cephane kartuþu alabilirsiniz.");

					new id = Inventory_Add(playerid, "Cephane Kartusu", 2358);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir adet cephane kartuþu aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
				{
				    if (!Inventory_HasItem(playerid, "Ruhsat"))
				        return SendErrorMessage(playerid, "Lisansýnýz olmadan buradan alýþveriþ yapamazsýnýz !");

                    if (PlayerData[playerid][pLevel] < 5)
		                return SendErrorMessage(playerid, "Silah dükkanlarýndan alýþveriþ yapabilmek için en az 5 seviye olmanýz gerekmektedir!");

                    if (Inventory_Count(playerid, "Colt 45") > 5)
					    return SendErrorMessage(playerid, "Daha fazla Colt 45 taþýyamazsýn !");

					Inventory_Add(playerid, "Colt 45", 346);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir adet Colt 45 aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 3:
				{
				    if (!Inventory_HasItem(playerid, "Ruhsat"))
				        return SendErrorMessage(playerid, "Lisansýnýz Olmadan buradan alýþveriþ yapamazsýnýz !");

                    if (PlayerData[playerid][pLevel] < 5)
		                return SendErrorMessage(playerid, "Silah dükkanlarýndan alýþveriþ yapabilmek için en az 5 seviye olmanýz gerekmektedir!");

                    if (Inventory_Count(playerid, "Shotgun") > 5)
					    return SendErrorMessage(playerid, "Daha fazla Shotgun taþýyamazsýn !");

					Inventory_Add(playerid, "Shotgun", 349);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir adet Shotgun aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 4:
				{
	                    if (PlayerData[playerid][pLevel] < 5)
			                return SendErrorMessage(playerid, "Silah dükkanlarýndan alýþveriþ yapabilmek için en az 5 seviye olmanýz gerekmektedir!");

	                    if (PlayerHasWeapon(playerid, 1))
						    return SendErrorMessage(playerid, "Zaten muþta taþýyorsun!");

						GiveWeaponToPlayer(playerid, 1, 1);

						GiveMoney(playerid, -price);
						SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir adet Muþta aldý.", ReturnName(playerid, 0), FormatNumber(price));

						BusinessData[bizid][bizProducts]--;
						BusinessData[bizid][bizVault] += Tax_Percent(price);

						Business_Save(bizid);
						Tax_AddPercent(price);

			    }
		    }
		}
		else if (BusinessData[bizid][bizType] == 3)
		{
		    switch (listitem)
		    {
		        case 0:
				{
				    PlayerData[playerid][pClothesType] = 1;
                    new skinad[311][24];
                    for (new i = 0; i < 311; i ++)
							format(skinad[i], 24, "");

					switch (PlayerData[playerid][pGender])
					{

                        case 1:
                        	ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_CLOTHES, DIALOG_STYLE_PREVMODEL, "Kiyafetler", g_aMaleSkins, skinad, "Sec", "Iptal", sizeof(g_aMaleSkins));

						case 2:
							ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_CLOTHES, DIALOG_STYLE_PREVMODEL, "Kiyafetler", g_aFemaleSkins, skinad, "Sec", "Iptal", sizeof(g_aFemaleSkins));
                    }
				}
				case 1:
				{
				PlayerData[playerid][pClothesType] = 1;
                    new skinad2[20900][24];
                    for (new i = 0; i < 20900; i ++)
							format(skinad2[i], 24, "");

					switch (PlayerData[playerid][pGender])
					{

                        case 1:
                        	ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_CLOTHES, DIALOG_STYLE_PREVMODEL, "Özel Kiyafetler", g_aMaleSkins2, skinad2, "Sec", "Iptal", sizeof(g_aMaleSkins2));

						case 2:
							ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_CLOTHES, DIALOG_STYLE_PREVMODEL, "Özel Kiyafetler", g_aFemaleSkins2, skinad2, "Sec", "Iptal", sizeof(g_aFemaleSkins2));
                    }
				}
		        case 2: cmd_aksesuar(playerid, "\1");
		    }
		}
		else if (BusinessData[bizid][bizType] == 4)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (PlayerData[playerid][pThirst] > 90)
			            return SendErrorMessage(playerid, "Karakter susamamýþ !");

					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 > 100) ? (100) : (PlayerData[playerid][pThirst] + 10);
                    if(ReturnHealth(playerid) < 100) { CanDegistir(playerid, ReturnHealth(playerid)+20); }

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir adet su aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 1:
			    {
			        if (PlayerData[playerid][pThirst] > 90)
			            return SendErrorMessage(playerid, "Karakter susamamýþ !");

					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 20 > 100) ? (100) : (PlayerData[playerid][pThirst] + 20);
                    if(ReturnHealth(playerid) < 100) { CanDegistir(playerid, ReturnHealth(playerid)+20); }
					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir adet Soda aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 2:
			    {

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);
                    if(ReturnHealth(playerid) < 100) { CanDegistir(playerid, ReturnHealth(playerid)+20); }

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir kutu patates kýzartmasý aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 3:
			    {

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);
                    if(ReturnHealth(playerid) < 100) { CanDegistir(playerid, ReturnHealth(playerid)+20); }

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve küçük boy menü aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 4:
			    {

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 30 > 100) ? (100) : (PlayerData[playerid][pHunger] + 30);
                    if(ReturnHealth(playerid) < 100) { CanDegistir(playerid, ReturnHealth(playerid)+20); }

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve orta boy menü aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 5:
			    {

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);
                    if(ReturnHealth(playerid) < 100) { CanDegistir(playerid, ReturnHealth(playerid)+20); }

					GiveMoney(playerid, -price);
     				//new buyukboymenu;
			        //ayarlaAttachedObject(playerid, 0, 2221, 6, 0.000000, 0.105999, -0.159000, -110.199996, 0.000000, 0.000000, 1.000000, 0.857999, 1.000000);
					//ayarlaSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					//EditDynamicObject(playerid, 0);
					//SendServerMessage(playerid, "Elindeki tepsiyi istediðin bir masaya býrak.");
				//    buyukboymenu = CreateDynamicObject(2221, 0.105999, -0.159000, -110.199996, 0.0, 0.0, 0.0);
				  //  EditDynamicObject(playerid, buyukboymenu);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve büyük boy menü aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 6:
			    {


					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);
                    if(ReturnHealth(playerid) < 100) { CanDegistir(playerid, ReturnHealth(playerid)+20); }
					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s ödedi ve bir adet salata aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
		else if (BusinessData[bizid][bizType] == 7)
		{
		    new
				items[50] = {-1, ...},
				count;

		    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureType] == listitem + 1) {
				items[count++] = g_aFurnitureData[i][e_FurnitureModel];

		    }

	     	new mad[50][5];
       		for (new i = 0; i < sizeof(mad); i ++)
				format(mad[i], 5, "");

		    PlayerData[playerid][pFurnitureType] = listitem;

            ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_FURNITURE, DIALOG_STYLE_PREVMODEL, "Mobilyalar", items, mad, "Sec", "Iptal", sizeof(items));
		}
		else if (BusinessData[bizid][bizType] == 8)
		{
			switch (listitem)
			{
			    case 0:
		        {
		            if (Inventory_HasItem(playerid, "Telefon"))
		                return SendErrorMessage(playerid, "Zaten bir telefonu almýþsýnýz !");

					new id = Inventory_Add(playerid, "Telefon", 330);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					PlayerData[playerid][pPhone] = random(90000) + 10000;

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s kasiyere %s ödedi ve bir cep telefonu aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Yeni telefon numaran: ~p~%d", PlayerData[playerid][pPhone]);
					ShowPlayerFooter(playerid, string);

					SendServerMessage(playerid, "Yeni telefon numaran: %d", PlayerData[playerid][pPhone]);
				}
				case 1:
		        {
		            if (Inventory_HasItem(playerid, "GPS Cihazi"))
		                return SendErrorMessage(playerid, "Zaten bir GPS cihazý almýþsýnýz!");

					new id = Inventory_Add(playerid, "GPS Cihazi", 18875);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s kasiyere %s ödedi ve bir GPS cihazý aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {
		            if (Inventory_HasItem(playerid, "Telsiz"))
		                return SendErrorMessage(playerid, "Zaten bir telsiz almýþsýnýz !");

					new id = Inventory_Add(playerid, "Telsiz", 18868);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s kasiyere %s ödedi ve bir telsiz aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 3:
		        {
		            if (Inventory_HasItem(playerid, "Boombox"))
		                return SendErrorMessage(playerid, "Zaten bir müzik kutun var.");

					new id = Inventory_Add(playerid, "Boombox", 2226);

					if (id == -1)
        				return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s kasiyere %s ödedi ve bir müzik kutusu aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 4:
			    {
			    SendErrorMessage(playerid, "/kamerasatinal ile satýn alabilirsiniz.");
			    }
			    case 5:
			    {
			    if (Inventory_HasItem(playerid, "Maymuncuk"))
		                return SendErrorMessage(playerid, "Zaten bir maymuncuðun var.");
        				
 				    if (GetMoney(playerid) < 25000) return SendErrorMessage(playerid, "25 bin dolara sahip deðilsin!");

					GiveMoney(playerid, -25000);
					Inventory_Add(playerid, "Maymuncuk", 2680);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s kasiyere 25.000$ ödedi ve bir maymuncuk aldý.", ReturnName(playerid, 0));
                }
			}
		}
		else if (BusinessData[bizid][bizType] == 9)
		{
		    switch (listitem)
			{
			    case 0:
		        {
		            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s barmene %s ödedi ve bir bardak Bira aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 1:
		        {
		            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

		            GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s barmene %s ödedi ve bir bardak Viski aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {
		            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

		            GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s barmene %s ödedi ve bir bardak Tekila aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 3:
		        {
		            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

		            GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s barmene %s ödedi ve bir bardak Þarap aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			   	case 4:
		        {
		            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

		            GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s barmene %s ödedi ve bir bardak Votka aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			   	case 5:
		        {
		            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);

		            GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s barmene %s ödedi ve bir bardak Þampanya aldý.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
	}
    return 1;
}

Dialog:LotteryNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = Business_Inside(playerid);

	    if (bizid != -1)
	    {
	        if (isnull(inputtext) || (strval(inputtext) < 1 || strval(inputtext) > 60)) {
	            return Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Please enter your desired lottery number below (from 1-60):", "Submit", "Cancel");
			}
	        PlayerData[playerid][pLottery] = strval(inputtext);
	        PlayerData[playerid][pLotteryB] = 1;

		    GiveMoney(playerid, -BusinessData[bizid][bizPrices][6]);
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasiyere %s öder ve loto bileti alýr.", ReturnName(playerid, 0), FormatNumber(BusinessData[bizid][bizPrices][6]));

			BusinessData[bizid][bizProducts]--;
			BusinessData[bizid][bizVault] += Tax_Percent(BusinessData[bizid][bizPrices][6]);

			Business_Save(bizid);
			Tax_AddPercent(BusinessData[bizid][bizPrices][6]);
		}
	}
	return 1;
}

Dialog:EditProduct(playerid, response, listitem, inputtext[])
{
	static
	    bizid = -1;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
		if (response)
		{
      		static
		        item[24];

		    strmid(item, inputtext, 0, strfind(inputtext, "-") - 1);
		    strpack(PlayerData[playerid][pEditingItem], item, 32 char);

            PlayerData[playerid][pProductModify] = listitem;
      		Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Ýþyeri: Fiyat deðiþtir", "\"%s\" adlý ürün içi yeni fiyat girin:", "Deðiþtir", "{FF6347}Iptal", item);
		}
		else cmd_isyeri(playerid, "\1");
	}
	return 1;
}


Dialog:StokAl(playerid, response, listitem, inputtext[])
{
	static
	    bizid = -1;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
		if (response)
		{
      		static
		        item[24];

		    strmid(item, inputtext, 0, strfind(inputtext, "-") - 1);
		    strpack(PlayerData[playerid][pEditingItem], item, 32 char);

            PlayerData[playerid][pProductModify] = listitem;
      		Dialog_Show(playerid, StokAl2, DIALOG_STYLE_INPUT, "Ýþyeri: Stok Al", "\"%s\" adlý ürün için kaç stok alacaðýnýzý girin:", "Deðiþtir", "{FF6347}Iptal", item);
		}
		else cmd_isyeri(playerid, "\1");
	}
	return 1;
}

Dialog:PriceSet(playerid, response, listitem, inputtext[])
{
    static
	    bizid = -1,
		item[32];

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
		if (response)
		{
		    strunpack(item, PlayerData[playerid][pEditingItem]);

			if (isnull(inputtext))
			    return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Ýþyeri: Fiyat deðiþtir", "\"%s\" adlý ürün içi yeni fiyat girin:", "Deðiþtir", "{FF6347}Iptal", item);

			if (strval(inputtext) < 1 || strval(inputtext) > 999999)
			    return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Ýþyeri: Fiyat deðiþtir", "\"%s\" adlý ürün içi yeni fiyat girin: ($1 ve $2000) ", "Deðiþtir", "{FF6347}Iptal", item);

			BusinessData[bizid][bizPrices][PlayerData[playerid][pProductModify]] = strval(inputtext);
			Business_Save(bizid);

			SendServerMessage(playerid, "\"%s\" adlý ürünün fiyatý %s olarak deðiþtirildi.", item, FormatNumber(strval(inputtext)));
			Business_ProductMenu(playerid, bizid);
		}
		else
		{
		    Business_ProductMenu(playerid, bizid);
		}
	}
	return 1;
}

Dialog:CarDeposit(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
	    string[32];

    if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

            if (!strcmp(string, "Yem") || !strcmp(string, "Ruhsat") || !strcmp(string, "Maymuncuk") || !strcmp(string, "Ehliyet")) return SendErrorMessage(playerid, "Bu eþya türü baþkasýna verilemez.");

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			    return Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Bagaj", "Item: %s (Miktar: %d)\n\nBu öðe için saklamak istediðiniz miktarý girin:", "Koy", "<< Geri", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			Car_AddItem(carid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bagajý açar ve içine \"%s\" koyar.", ReturnName(playerid, 0), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarTake(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
	    string[32];

    if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    strunpack(string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemQuantity])
			    return Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Araçtan Al", "Item: %s (Miktar: %d)\n\nBu öðe için almak istediðiniz miktarý girin:", "Al", "<< Geri", string, CarStorage[carid][PlayerData[playerid][pInventoryItem]][cItemQuantity]);

			new id = Inventory_Add(playerid, string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemModel], amount);

			if (id == -1)
				return SendErrorMessage(playerid, "Envanterinizde boþ yer yok.");

			Car_RemoveItem(carid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bagajý açar ve içinden \"%s\" alýr.", ReturnName(playerid, 0), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarStorage(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
		string[64];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
		if (response)
		{
		    if (IsABike(CarData[carid][carModel]) && listitem == MAX_BIKE_STORAGE) {
    			Car_WeaponStorage(playerid, carid);
		    }
		    else if (listitem == MAX_CAR_STORAGE) {
    			Car_WeaponStorage(playerid, carid);
		    }
		    else if (CarStorage[carid][listitem][cItemExists])
			{
   				PlayerData[playerid][pStorageItem] = listitem;
   				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, CarStorage[carid][listitem][cItemName]);

				format(string, sizeof(string), "%s (Miktar: %d)", string, CarStorage[carid][listitem][cItemQuantity]);
				Dialog_Show(playerid, TrunkOptions, DIALOG_STYLE_LIST, string, "Öðe Al\nÖðe Koy", "Seç", "<< Geri");
			}
			else {
   				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 2;
			}
		}
	}
	return 1;
}

Dialog:TrunkOptions(playerid, response, listitem, inputtext[])
{
    static
	    carid = -1,
		itemid = -1,
		backpack = -1,
		string[32];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    itemid = PlayerData[playerid][pStorageItem];

	    strunpack(string, CarStorage[carid][itemid][cItemName]);

		if (response)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (CarStorage[carid][itemid][cItemQuantity] == 1)
			        {

			            if (!strcmp(string, "Sirtcantasi") && Inventory_HasItem(playerid, "Sirtcantasi"))
			                return SendErrorMessage(playerid, "Zaten bir sýrt çantan var.");

			            new id = Inventory_Add(playerid, string, CarStorage[carid][itemid][cItemModel], 1);

						if (id == -1)
        					return SendErrorMessage(playerid, "Envanterinizde boþ yer yok.");

                        if (!strcmp(string, "Sirtcantasi") && (backpack = GetVehicleBackpack(carid)) != -1)
						{
						    BackpackData[backpack][backpackVehicle] = 0;
						    BackpackData[backpack][backpackPlayer] = PlayerData[playerid][pID];

						    Backpack_Save(backpack);
						    SetAccessories(playerid);
						}
			            Car_RemoveItem(carid, string);

			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bagajý açar ve içinden \"%s\" alýr.", ReturnName(playerid, 0), string);
						Car_ShowTrunk(playerid, carid);
			        }
			        else
			        {
			            Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Araçtan Al", "Item: %s (Miktar: %d)\n\nBu öðe için almak istediðiniz miktarý girin:", "Al", "<< Geri", string, CarStorage[carid][itemid][cItemQuantity]);
			        }
			    }
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Sirtcantasi")) {
					    Car_ShowTrunk(playerid, carid);

						return SendErrorMessage(playerid, "Sadece bagajda bir sýrt çantasý saklayabilirsiniz.");
					}
					else if (id == -1) {
						Car_ShowTrunk(playerid, carid);

						return SendErrorMessage(playerid, "Bagaj boþ!");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
					    Car_AddItem(carid, string, InventoryData[playerid][id][invModel], 1);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bagajý açar ve içine \"%s\" koyar.", ReturnName(playerid, 0), string);
						Car_ShowTrunk(playerid, carid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
					    PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Araca Koy", "Item: %s (Miktar: %d)\n\nBu öðe için saklamak istediðiniz miktarý girin:", "Sakla", "{FF6347}Iptal", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
		{
		    Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:HouseWeapons(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1;

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL))
	{
		if (response)
		{
		    if (HouseData[houseid][houseWeapons][listitem] != 0)
		    {
				if(PlayerHasWeaponSlot(playerid, g_aWeaponSlots[HouseData[houseid][houseWeapons][listitem]]) && g_aWeaponSlots[HouseData[houseid][houseWeapons][listitem]] != 0)
					return SendErrorMessage(playerid, "Bu silah türü sizde var.");

				GiveWeaponToPlayer(playerid, HouseData[houseid][houseWeapons][listitem], HouseData[houseid][houseAmmo][listitem]);
				PlayerData[playerid][pEvSilah] = 1;
                SetTimerEx("EvSilah", 30000, false, "d", playerid);
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s silah deposundan \"%s\" model silahý alýr.", ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]));
				SendServerMessage(playerid, "Silahýn veritabanýna kaydedilmesi için 1 el ateþ et!");
                Log_Write("logs/storage_log.txt", "[%s] %s has taken a \"%s\" from house ID: %d (owner: %s).", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]), HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Evet") : ("Hayir"));

				HouseData[houseid][houseWeapons][listitem] = 0;
				HouseData[houseid][houseAmmo][listitem] = 0;
               // UpdateWeapons(playerid);
				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
			else
			{
			    new
					weaponid = GetWeapon(playerid),
					ammo = GetPlayerAmmo(playerid);

			    if (!weaponid)
			        return SendErrorMessage(playerid, "Elinde silah yok!");

       			if (weaponid == 23 && PlayerData[playerid][pTazer])
	    			return SendErrorMessage(playerid, "Tazer'i evinizde saklayamazsýnýz.");

                if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	    			return SendErrorMessage(playerid, "Evinizde Beanbag saklayamazsýnýz.");

            	if (GetFactionType(playerid) == FACTION_GOV || GetFactionType(playerid) == FACTION_POLICE ||GetFactionType(playerid) == FACTION_INTEL) return SendErrorMessage(playerid, "Bu oluþum türü bu iþlemi yapamaz.");

                if ( PlayerData[playerid][pHoldWeapon] > 0 ) return SendErrorMessage(playerid, "Silah tutarken eve birþey koyamazsýn.");

				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s silah deposuna \"%s\" model silahý koyar.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
                Log_Write("logs/storage_log.txt", "[%s] %s has stored a \"%s\" from house ID: %d (owner: %s).", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(weaponid), HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Evet") : ("Hayir"));


				HouseData[houseid][houseWeapons][listitem] = weaponid;
				HouseData[houseid][houseAmmo][listitem] = ammo;
                ResetWeapon(playerid, weaponid);
                //UpdateWeapons(playerid);
				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
		}
		else
		{
		    House_OpenStorage(playerid, houseid);
		}
	}
	return 1;
}

Dialog:HouseDeposit(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1,
	    string[32];

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL))
	{
	    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			    return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Eve Koy", "Item: %s (Miktar: %d)\n\nBu öðe için saklamak istediðiniz miktarý girin:", "Koy", "<< Geri", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			House_AddItem(houseid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s eve \"%s\" adlý öðeyi koyar.", ReturnName(playerid, 0), string);
			House_ShowItems(playerid, houseid);
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseTake(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1,
	    string[32];

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL))
	{
	    strunpack(string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemQuantity])
			    return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Evden Al", "Item: %s (Miktar: %d)\n\nBu öðe için almak istediðiniz miktarý girin:", "Al", "<< Geri", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity]);

			new id = Inventory_Add(playerid, string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemModel], amount);

			if (id == -1)
				return SendErrorMessage(playerid, "Envanterinizde boþ yer yok.");

			House_RemoveItem(houseid, string, amount);
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s evden \"%s\" adlý öðeyi alýr.", ReturnName(playerid, 0), string);

			House_ShowItems(playerid, houseid);
			Log_Write("logs/storage_log.txt", "[%s] %s has taken %d \"%s\" from house ID: %d (owner: %s).", ReturnDate(), ReturnName(playerid, 0), amount, string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Evet") : ("Hayir"));
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseWithdrawCash(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
		    new amount = strval(inputtext);

		    if (isnull(inputtext))
		        return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Kasa", "Korunan Para: %s\n\nÇekmek istediðiniz para miktarýný giriniz:", "Çek", "<< Geri", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > HouseData[houseid][houseMoney])
			    return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Kasa", "Hata: Yetersiz bakiye.\n\nKorunan Para: %s\n\nÇekmek istediðiniz para miktarýný giriniz:", "Çek", "<< Geri", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] -= amount;
			GiveMoney(playerid, amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

Log_Write("logs/evkasacekme.txt", "[%s] %s %s:", ReturnDate(), ReturnName(playerid), FormatNumber(amount));
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasadan %s çeker.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Kasa", "Para Çek\nPara Koy", "Seç", "<< Geri");
	}
	return 1;
}

Dialog:HouseDepositCash(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
		    new amount = strval(inputtext);

		    if (isnull(inputtext))
		        return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Kasa", "Korunan Para: %s\n\nKoymak istediðiniz para miktarýný giriniz:", "Koy", "<< Geri", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > GetMoney(playerid))
			    return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Kasa", "Hata: Geçersiz bakiye.\n\nKorunan Para: %s\n\nKoymak istediðiniz para miktarýný giriniz:", "Koy", "<< Geri", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] += amount;
			GiveMoney(playerid, -amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);
Log_Write("logs/evkasakoyma.txt", "[%s] %s %s:", ReturnDate(), ReturnName(playerid), FormatNumber(amount));
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasaya %s koyar.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Kasa", "Para Çek\nPara Koy", "Seç", "<< Geri");
	}
	return 1;
}

Dialog:HouseMoney(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
			switch (listitem)
			{
			    case 0: {
					Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Kasa", "Korunan Para: %s\n\nÇekmek istediðiniz para miktarýný giriniz:", "Çek", "<< Geri", FormatNumber(HouseData[houseid][houseMoney]));
				}
				case 1: {
				    Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Kasa", "Korunan Para: %s\n\nKoymak istediðiniz para miktarýný giriniz:", "Koy", "<< Geri", FormatNumber(HouseData[houseid][houseMoney]));
				}
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseItems(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1,
		string[64];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL))
	{
		if (response)
		{
    		if (HouseStorage[houseid][listitem][hItemExists])
			{
			    if ( PlayerData[playerid][pHoldWeapon] > 0 ) return SendErrorMessage(playerid, "Silah tutarken bu iþlemi yapamazsýnýz.");
   				PlayerData[playerid][pStorageItem] = listitem;
   				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, HouseStorage[houseid][listitem][hItemName]);


				format(string, sizeof(string), "%s (Quantity: %d)", string, HouseStorage[houseid][listitem][hItemQuantity]);
				Dialog_Show(playerid, StorageOptions, DIALOG_STYLE_LIST, string, "Take Item\nStore Item", "Seç", "<< Geri");
			}
			else {
			    if ( PlayerData[playerid][pHoldWeapon] > 0 ) return SendErrorMessage(playerid, "Silah tutarken bu iþlemi yapamazsýnýz.");
   				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 1;
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseStorage(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL))
	{
		if (response)
		{
		    if (listitem == 0) {
		        House_ShowItems(playerid, houseid);
		    }
      		else if (listitem == 1) {
				House_WeaponStorage(playerid, houseid);
		    }
		    else if (listitem == 2) {
		        Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Para Kasasý", "Kasadan Çek\nKasaya Koy", "Seç", "<< Geri");
			}
		}
		else cmd_ev(playerid, "\1");
	}
	return 1;
}

Dialog:StorageOptions(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1,
		itemid = -1,
		backpack = -1,
		string[32];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL))
	{
	    itemid = PlayerData[playerid][pStorageItem];

	    strunpack(string, HouseStorage[houseid][itemid][hItemName]);

		if (response)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (HouseStorage[houseid][itemid][hItemQuantity] == 1)
			        {
			            if (!strcmp(string, "Sirtancasi") && Inventory_HasItem(playerid, "Sirtcantasi"))
           					return SendErrorMessage(playerid, "You already have a backpack in your inventory.");

			            new id = Inventory_Add(playerid, string, HouseStorage[houseid][itemid][hItemModel], 1);

						if (id == -1)
        					return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                        if (!strcmp(string, "Sirtcantasi") && (backpack = GetHouseBackpack(houseid)) != -1)
						{
						    BackpackData[backpack][backpackHouse] = 0;
						    BackpackData[backpack][backpackPlayer] = PlayerData[playerid][pID];

						    Backpack_Save(backpack);
						    SetAccessories(playerid);
						}
			            House_RemoveItem(houseid, string);
			            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s has taken a \"%s\" from their house storage.", ReturnName(playerid, 0), string);

						House_ShowItems(playerid, houseid);
						Log_Write("logs/storage_log.txt", "[%s] %s has taken \"%s\" from house ID: %d (owner: %s).", ReturnDate(), ReturnName(playerid, 0), string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Evet") : ("Hayir"));
			        }
			        else
			        {
			            Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "House Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, HouseStorage[houseid][itemid][hItemQuantity]);
			        }
			    }
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Sirtcantasi")) {
					    House_ShowItems(playerid, houseid);

						return SendErrorMessage(playerid, "You can only store one backpack in your house.");
					}
					else if (id == -1) {
						House_ShowItems(playerid, houseid);

						return SendErrorMessage(playerid, "You don't have anymore of this item to store!");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
					    House_AddItem(houseid, string, InventoryData[playerid][id][invModel]);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s has stored a \"%s\" into their house storage.", ReturnName(playerid, 0), string);
						House_ShowItems(playerid, houseid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
					    PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
		{
		    House_ShowItems(playerid, houseid);
		}
	}
	return 1;
}

Dialog:EditGlasses(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 0))
	            {
	                PlayerData[playerid][pToggleGlasses] = 0;
	                SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);
					ShowPlayerFooter(playerid, "Gozlugu ~g~takildi.~w~");
				}
				else
				{
				    PlayerData[playerid][pToggleGlasses] = 1;
	                RemovePlayerAttachedObject(playerid, 0);
					ShowPlayerFooter(playerid, "Gozlugu ~g~cikartildi.~w~");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleGlasses] = 0;
       			SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

			    EditAttachedObject(playerid, 0);
			    PlayerData[playerid][pEditType] = 1;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 0);
			    PlayerData[playerid][pGlasses] = 0;
			    SendServerMessage(playerid, "Gözlüðü sildiniz.");
			}
		}
	}
	return 1;
}

Dialog:EditHat(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 1))
            	{
	                PlayerData[playerid][pToggleHat] = 0;
	                SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);
					ShowPlayerFooter(playerid, "Sapka ~g~takildi.~w~");
				}
				else
				{
				    PlayerData[playerid][pToggleHat] = 1;
	                RemovePlayerAttachedObject(playerid, 1);
					ShowPlayerFooter(playerid, "Sapka ~g~cikartildi.~w~");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleHat] = 0;
	            SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

			    EditAttachedObject(playerid, 1);
			    PlayerData[playerid][pEditType] = 2;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 1);
			    PlayerData[playerid][pHat] = 0;
			    SendServerMessage(playerid, "Þapkayý sildiniz.");
			}
		}
	}
	return 1;
}

Dialog:EditBandana(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 2))
	            {
	                PlayerData[playerid][pToggleBandana] = 0;
	                SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);
					ShowPlayerFooter(playerid, "Bandana ~g~takildi.~w~");
				}
				else
				{
				    PlayerData[playerid][pToggleBandana] = 1;
	                RemovePlayerAttachedObject(playerid, 2);
					ShowPlayerFooter(playerid, "Bandana ~g~cikartildi.~w~");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleBandana] = 0;
       			SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

			    EditAttachedObject(playerid, 2);
			    PlayerData[playerid][pEditType] = 3;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerData[playerid][pBandana] = 0;
			    SendServerMessage(playerid, "Bandanayý sildiniz.");
			}
		}
	}
	return 1;
}

Dialog:Accessory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!PlayerData[playerid][pGlasses])
	                return SendErrorMessage(playerid, "Bir gözlük sahibi deðilsiniz.");

	            Dialog_Show(playerid, EditGlasses, DIALOG_STYLE_LIST, "Gözlük", "Gözlüðü Tak\nGözlüðü Düzenle\nGözlüðü Sil", "Seç", "{FF6347}Iptal");
			}
			case 1:
			{
			    if (!PlayerData[playerid][pHat])
	                return SendErrorMessage(playerid, "Bir þapka sahibi deðilsiniz.");

			    Dialog_Show(playerid, EditHat, DIALOG_STYLE_LIST, "Þapka", "Þapkayý Kullan\nÞapkayý Düzenle\nÞapkayý Sil", "Seç", "{FF6347}Iptal");
			}
			case 2:
			{
			    if (!PlayerData[playerid][pBandana])
	                return SendErrorMessage(playerid, "Bir bandana sahibi deðilsiniz.");

			    Dialog_Show(playerid, EditBandana, DIALOG_STYLE_LIST, "Bandana", "Bandana Kullan\nBandana Düzenle\nBandana Sil", "Seç", "{FF6347}Iptal");
			}
		}
	}
	return 1;
}

Dialog:CharList(playerid, response, listitem, inputtext[])
{
    SetTimerEx("SelectTD", 200, false, "d", playerid);

	if (response)
	{
		if (!PlayerCharacters[playerid][listitem][0])
		    return SendErrorMessage(playerid, "Seçilen karakter yuvasý boþ.");

		new
		    string[160];

		format(string, sizeof(string), "SELECT `Admin`, `Skin`, `CreateDate`, `LastLogin` FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][listitem]);
		mysql_function_query(g_iHandle, string, true, "OnCharacterLookup", "dds", playerid, listitem + 1, PlayerCharacters[playerid][listitem]);
	}
	return 1;
}


Dialog:RegisterScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
		return _Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Kayýt", "Varna Roleplay'e hoþgeldin, Sayýn %s.\n\nUyarý: Hesabýnýz veritabanýnda henüz kayýtlý deðil. Kayýt olmak için istediðiniz þifrenizi giriniz:", "Kayýt Ol", "Çýkýþ", ReturnName(playerid));

	else
	{
		SQL_CreateAccount(PlayerData[playerid][pUsername], inputtext);

		ShowCharacterMenu(playerid);
		GirisTimer[playerid] = 0;
		SendClientMessage(playerid, 0xE74C3CFF, "Server: {FFFFFF}Hesabýnýz oluþturuldu, iyi eðlenceler.");
	}
	return 1;
}

Dialog:LoginScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return _Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "Giriþ", "Varna Roleplay'a hoþgeldin!\n\nHesabýnýz son giriþi: %s.\n\nHesabýnýza girmek için aþaðýya þifrenizi giriniz:", "Gir", "{FF6347}Iptal", PlayerData[playerid][pLoginDate]);

	else
	{
        KillTimer(PlayerData[playerid][pGirisTimerr]);
	    SQL_AttemptLogin(playerid, inputtext);
	}
	return 1;
}

Dialog:DeleteChar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new query[128];

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
		mysql_function_query(g_iHandle, query, false, "", "");

		SendServerMessage(playerid, "Hesabýnýzdan \"%s\" adlý karakter silindi.", PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
        PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1][0] = 0;

        ShowCharacterMenu(playerid);
	}
	return 1;
}

Dialog:DeleteCharacter(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new query[128];

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
		mysql_function_query(g_iHandle, query, false, "", "");

		SendServerMessage(playerid, "Hesabýnýzdan \"%s\" adlý karakter silindi.", PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
        PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1][0] = 0;

        for (new i = 50; i < 58; i ++) {
        	PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		PlayerData[playerid][pDisplayStats] = false;
		CancelSelectTextDraw(playerid);
	}
	return 1;
}

Dialog:CreateChar(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return PlayerData[playerid][pCharacter] = 0;

	else if (isnull(inputtext) || strlen(inputtext) > 30)
        return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Karakter Oluþtur", "Aþaðýya yeni karakterin adýný girin:\n\nUyarý: Adýnýz Edward_Brown biçiminde olmalýdýr ve 30 karakteri geçmemelidir.", "Oluþtur", "{FF6347}Iptal");

	else if (!IsValidRoleplayName(inputtext))
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Karakter Oluþtur", "Hata: Geçersiz roleplay adý girdiniz.\n\nAþaðýya yeni karakterin adýný girin:\n\nUyarý: Adýnýz Edward_Brown biçiminde olmalýdýr ve 30 karakteri geçmemelidir.", "Oluþtur", "{FF6347}Iptal");

    else if (SoyadKilitlimi(GetPlayerLastName(playerid, inputtext, 1)))
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Karakter Oluþtur", "Hata: Girdiðiniz soyad kullanýlamaz.\n\nAþaðýya yeni karakterin adýný girin:\n\nUyarý: Adýnýz Edward_Brown biçiminde olmalýdýr ve 20 karakteri geçmemelidir.", "Oluþtur", "{FF6347}Iptal");

	else
	{
	    static
	        query[128];

		format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", inputtext);
		mysql_function_query(g_iHandle, query, true, "OnCharacterCheck", "ds", playerid, inputtext);
	}
	return 1;
}

Dialog:Gender(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    PlayerData[playerid][pGender] = listitem + 1;

	    switch (listitem) {
	        case 0: {
	        Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Doðum Tarihi", "Lütfen karakterinizin doðum tarihini giriniz. (GG.AA.YYYY):", "Tamam", "{FF6347}Iptal");

			}
	        case 1:
			{
	        Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Doðum Tarihi", "Lütfen karakterinizin doðum tarihini giriniz. (GG.AA.YYYY):", "Tamam", "{FF6347}Iptal");

			}
		}
		PlayerData[playerid][pSkin] = (listitem) ? (233) : (98);
		SetTimerEx("SelectTD", 200, false, "d", playerid);
	}
	else SetTimerEx("SelectTD", 200, false, "d", playerid);
	return 1;
}

Dialog:DateBirth(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			iDay,
			iMonth,
			iYear;

	    static const
	        arrMonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

	    if (sscanf(inputtext, "p<.>ddd", iDay, iMonth, iYear)) {
	        Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Doðum Tarihi", "Hata: Geçersiz format!\n\nAþaðýya doðum tarihinizi girin (Gun.Ay.Yýl):", "Tamam", "{FF6347}Iptal");
		}
		else if (iYear < 1900 || iYear > 2014) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Doðum Tarihi", "Hata: Geçersiz format!\n\nAþaðýya doðum tarihinizi girin (Gun.Ay.Yýl):", "Tamam", "{FF6347}Iptal");
		}
		else if (iMonth < 1 || iMonth > 12) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Doðum Tarihi", "Hata: Geçersiz format!\n\nAþaðýya doðum tarihinizi girin (Gun.Ay.Yýl):", "Tamam", "{FF6347}Iptal");
		}
		else if (iDay < 1 || iDay > arrMonthDays[iMonth - 1]) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Doðum Tarihi", "Hata: Geçersiz format!\n\nBir polis memuru olmanýz gerekmekte !", "Tamam", "{FF6347}Iptal");
		}
		else {
		    format(PlayerData[playerid][pBirthdate], 24, inputtext);
				new string[1024];
                for(new x;x<sizeof(Kokenler);x++)
	       		{
		        	format(string, sizeof(string), "%s%s\n", string, Kokenler[x]);
		        }
			    Dialog_Show(playerid, Origin, DIALOG_STYLE_LIST, "Köken", string, "Tamam", "{FF6347}Iptal");
		}
	}
	return 1;
}

Dialog:Origin(playerid, response, listitem, inputtext[])
{
	if (response)
	{
/*
	    if (isnull(inputtext) || strlen(inputtext) > 32) {
	        Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Köken", "Karakterinizin coðrafi kökenini giriniz:", "Tamam", "{FF6347}Iptal");
		}
		else for (new i = 0, len = strlen(inputtext); i != len; i ++) {
		    if ((inputtext[i] >= 'A' && inputtext[i] <= 'Z') || (inputtext[i] >= 'a' && inputtext[i] <= 'z') || (inputtext[i] >= '0' && inputtext[i] <= '9') || (inputtext[i] == ' ') || (inputtext[i] == ',') || (inputtext[i] == '.'))
				continue;

			else return Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Köken", "Hata: Sadece harfler ve sayýlar köken kabul edilmektedir.\n\nKarakterinizin coðrafi kökenini giriniz:", "Tamam", "{FF6347}Iptal");
		}*/
		format(PlayerData[playerid][pOrigin], 32, inputtext);

  		new string[1024];
    	strcat(string, "Beyaz\n");
     	strcat(string, "Siyah");
	    Dialog_Show(playerid, TenRengi, DIALOG_STYLE_LIST, "Ten Rengi", string, "Tamam", "{FF6347}Iptal");
	}
	return 1;
}

Dialog:TenRengi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		format(PlayerData[playerid][pTenRengi], 32, inputtext);
     	if (!strlen(PlayerData[playerid][pBirthdate]))
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Sunucu: Doðum tarihi boþ kalamaz.");

				else if (!strlen(PlayerData[playerid][pOrigin]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Sunucu: Karakterin kökeni boþ kalamaz.");

                else if (!strlen(PlayerData[playerid][pTenRengi]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Sunucu: Ten rengi boþ kalamaz.");

				else
				{
				    for (new i = 0; i < 16; i ++) {
						PlayerTextDrawHide(playerid, CharacterView[playerid][i]);
					}
					new
					    dialogstr_m[2056],
					    dialogstr_f[2056]
					;
					for (new i = 0, j = sizeof(g_aMaleSkins); i < j; i++) {
						format(dialogstr_m, sizeof(dialogstr_m), "%s%d\n\n", dialogstr_m, g_aMaleSkins[i]);
					}
     				for (new i = 0, j = sizeof(g_aFemaleSkins); i < j; i++) {
						format(dialogstr_f, sizeof(dialogstr_f), "%s%d\n\n", dialogstr_f, g_aFemaleSkins[i]);
					}
				    switch (PlayerData[playerid][pGender])
                    {
                        case 1:
						{
                            PlayerData[playerid][pSkin] = 250;
							SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], 1684.4392, 1771.6658, 10.8203, 270.0000, 0, 0, 0, 0, 0, 0);
							TogglePlayerSpectating(playerid, 0);
							SQL_SaveCharacter(playerid);
						}

						case 2:
	  {
                       		PlayerData[playerid][pSkin] = 191;
							SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], 1684.4392, 1771.6658, 10.8203, 270.0000, 0, 0, 0, 0, 0, 0);
							TogglePlayerSpectating(playerid, 0);
							SQL_SaveCharacter(playerid);
							}
                    }
				}
	}
	return 1;
}


Dialog:NewPass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Yeni Þifre Gir", "Aþaðýya yeni þifrenizi giriniz.\n\nNot: Güvenlik için güçlü ve güvenli bir þifre kullanýn.", "Deðiþtir", "{FF6347}Iptal");

		static
		    buffer[129],
		    query[256];

		WP_Hash(buffer, sizeof(buffer), inputtext);
		inputtext[0] = '\0';

		format(query, sizeof(query), "UPDATE `accounts` SET `Password` = '%s' WHERE `Username` = '%s'", buffer, PlayerData[playerid][pUsername]);
		mysql_function_query(g_iHandle, query, false, "", "");

		SendServerMessage(playerid, "Þifreniz deðiþtirildi.");
	}
	return 1;
}

Dialog:ChangePassword(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return cmd_birlik(playerid, "\1");

		static
		    buffer[129],
			query[256];

		WP_Hash(buffer, sizeof(buffer), inputtext);
		inputtext[0] = '\0';

		format(query, sizeof(query), "SELECT `Password` FROM `accounts` WHERE `Username` = '%s' AND `Password` = '%s'", PlayerData[playerid][pUsername], buffer);
		mysql_function_query(g_iHandle, query, true, "OnQueryFinished", "dd", playerid, THREAD_VERIFY_PASS);
	} else cmd_ayarlar(playerid, "\1");
	return 1;
}



CMD:giseac(playerid, params[])
{

	if (PlayerData[playerid][pPasaport] == 0)
	    return SendErrorMessage(playerid, "Bir pasaporta sahip deðilsiniz.");
	    
 	new L_i_TollID;
	if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 623.9500, -1183.9774, 19.2260) || IsPlayerInRangeOfPoint(playerid, 10.0, 607.9684, -1194.2866, 19.0043)) // Richman tolls
	{
		L_i_TollID = RichmanToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 39.7039, -1522.9891, 5.1995) || IsPlayerInRangeOfPoint(playerid, 10.0, 62.7378, -1539.9891, 5.0639)) // Flint tolls
	{
		L_i_TollID = FlintToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 1795.9447, 704.2550, 15.0006) || IsPlayerInRangeOfPoint(playerid, 10.0, 1778.9886, 702.6728, 15.2574)) // LV tolls
	{
		L_i_TollID = LVToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 612.53070, 346.59592, 17.92614) || IsPlayerInRangeOfPoint(playerid, 10.0, 604.37152, 346.88141, 17.92614)) // LV tolls
	{
		L_i_TollID = BlueberryTollR;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, -195.2768,252.2416,12.0781) || IsPlayerInRangeOfPoint(playerid, 10.0, -199.5153,260.3405,12.0781)) // LV tolls
	{
		L_i_TollID = BlueberryTollL;
	}
	else
	{
		SendServerMessage(playerid, "Herhangi bir giþeye yakýn deðilsin.");
		return 1;
	}
	if(!Toll_TimePassedCivil(L_i_TollID, playerid))
		return 1;


    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL)
	{
		if(aTolls[L_i_TollID][E_tLocked] == 1)
		{
		    SendServerMessage(playerid, "Giþeler açýlmýyor. Gerekçe: Departman giþeleri kapatmýþ.");
			return 1;
		}
		if(aTolls[L_i_TollID][E_tLocked] == 1)
		{
		    SendServerMessage(playerid, "Giþeler açýlmýyor. Gerekçe: Departman giþeleri kapatmýþ.");
			return 1;
		}
		if(GetMoney(playerid) < TollCost)
		{
			SendServerMessage(playerid, "Giþeyi açmak için 5 dolarýn bulunmuyor.");
			return 1;
		}
		GiveMoney(playerid, -TollCost);
		}
	SendServerMessage(playerid, "Giþe açýldý. 5 saniye sonra kapatýlacak.");
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s, pasaport evraklarýný görevli kiþiye gösterir.", ReturnName(playerid, 0));
	Toll_OpenToll(L_i_TollID);
	return 1;
}


CMD:dashcamlimit(playerid, params[])
{
	new limit, vehicleid;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

    if(sscanf(params, "i", limit)) return SendSyntaxMessage(playerid, "/dashcamlimit [KM/H]");

	if (!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Bu komutu polis araçlarýnda kullanabilirsin.");
	if (!CoreVehicles[vehicleid][vehRadar]) return SendErrorMessage(playerid, "Ýlk önce aracýn Dashcam'ý açýk olmalýdýr.");

    if(limit < 50 || limit > 250) return SendErrorMessage(playerid, "Limit en az 0, en fazla 250 olmalýdýr.");

    CoreVehicles[vehicleid][vehRadarLimit] = limit;
	SendServerMessage(playerid, "Uyarýlacak hýz seviyesi %d KM/H olarak ayarlandý.", limit);
	return 1;
}

CMD:birimler(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

	new string[1024], sayi, durum[256];
    for (new i = 1; i != MAX_VEHICLES; i ++) if(vehiclecallsign[i] == 1)
	{
	    format(durum, sizeof(durum), "Araç ID %d -   %s - %s\n", i, vehicletext[i], ReturnVehicleModelName(GetVehicleModel(i)));
		strcat(string, durum);
		sayi++;
	}
	if(sayi == 0) return SendErrorMessage(playerid, "Aktif birim yok.");
	Dialog_Show(playerid, birimler, DIALOG_STYLE_LIST, "Birimler", string, "Tamam", "");
	return 1;
}

CMD:gecikmiscezalar(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

	new string[1024], sayi, durum[256];
    foreach ( new i : Player)
	{
	    new query[128], sonuc, Cache: sayi_query;
		mysql_format(g_iHandle, query, sizeof(query), "SELECT null FROM `warrants` WHERE `ID` = '%d' AND `Description` = 'Gecikmiþ Ceza'", PlayerData[i][pID]);
		sayi_query = mysql_query(g_iHandle, query);
		sonuc = cache_num_rows();
		cache_delete(sayi_query);
		if(sonuc > 0)   {
		    format(durum, sizeof(durum), "{FFFFFF}%s ( %d )  - Gecikmiþ Ceza {FF0000}[%d]{FFFFFF}\n", ReturnName(i, 0), i, sonuc);
			strcat(string, durum);
		}
		sayi++;
	}
	if(sayi == 0) return SendErrorMessage(playerid, "Gecikmiþ ceza yok.");
	Dialog_Show(playerid, GecikmisCezalar, DIALOG_STYLE_LIST, "Gecikmiþ Cezalar", string, "Tamam", "");
	return 1;
}

CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = Car_GetID(vehicleid);

	new string[32];
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Yetkin yok!");

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

	if (CarData[id][carFaction] != FACTION_POLICE && CarData[id][carFaction] != FACTION_INTEL)
	    return SendErrorMessage(playerid, "Bir polis kruvazörü içinde olmalýsýn.");

	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 1)
	{
 		Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	    vehiclecallsign[vehicleid] = 0;
	    SendServerMessage(playerid, "Callsign silindi.");
	    return 1;
	}
	if(sscanf(params, "s[32]",string)) return SendErrorMessage(playerid, "Bir çaðrý iþareti oluþturmalýsýnýz.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 0)
	{
	    format(vehicletext[vehicleid], 24, string);
 		vehicle3Dtext[vehicleid] = Create3DTextLabel(string, COLOR_WHITE, -1.0, -2.6, 0.0, 10.0, 0, 1);
		vehiclecallsign[vehicleid] = 1;
		 Attach3DTextLabelToVehicle( vehicle3Dtext[ vehicleid ] , vehicleid, -1.0, -2.6, 0.0);
		 SendServerMessage(playerid, "Callsign oluþturuldu.");

	}
	return 1;
}


CMD:b(playerid, params[])
{
    if(GetPVarInt(playerid, "TV") == 1) return 1;
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/b [OOC]");

	if (PlayerData[playerid][pDisableOOC])
	    return SendErrorMessage(playerid, "OOC konuþma platformunuz kapalý ilk önce aktif etmeniz gerekir (/ayarlar)!");

	    if(PlayerData[playerid][pJailTime] > 0) return SendErrorMessage(playerid, "Hapisteyken bu iþlemi kullanamazsýnýz.");

	    if (PlayerData[playerid][pCK]) return SendErrorMessage(playerid, "Karakterin öldüðü için bu komutun kullanamazsýn!");

	if (strlen(params) > 64)
	{
	    if(PlayerData[playerid][pAdminDuty] == 1)
	    {
	        SendNearbyMessage(playerid, 20.0, 0xFFFFFF, "{7a1306}%s{FFFFFF}: (( %.64s", ReturnName(playerid, 0), params);
	    	SendNearbyMessage(playerid, 20.0, 0xFFFFFF, "...%s ))", params[64]);
	        return 1;
		}
	    SendNearbyMessageEx(playerid, 20.0, 0xFFFFFF, "%s [%d]: (( %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessageEx(playerid, 20.0, 0xFFFFFF, "...%s ))", params[64]);
	}
	else
	{
	    if(PlayerData[playerid][pAdminDuty] == 1)
	    {
	        SendNearbyMessage(playerid, 20.0, 0xC4FFFFFF, "{7a1306}%s{FFFFFF}: (( %s ))", ReturnName(playerid, 0), params);
			return 1;
		}
	    SendNearbyMessageEx(playerid, 20.0, 0xC4FFFFFF, "%s: (( %s ))", ReturnName(playerid, 0), params);
	}
	Log_Write("logs/blog.txt", "[%s] %s adli oyuncu /b'den sunu yazdi: %s", ReturnDate(), ReturnName(playerid, 0), params);
	return 1;
}

CMD:me(playerid, params[])
{

    new
		str[128];
		
		
    if(GetPVarInt(playerid, "TV") == 1) return 1;
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/me [Hareket]");

	new action[256];
    strdel(action, 0, 256);
	strcat(action, params);
    if(strfind(action, "\"", true, 1) != -1)
	{
			new ilkdenden = strfind(action, "\"", true, 1);
			new sonrakidenden = strfind(action, "\"", true, ilkdenden+1);
			strins(action, "{FFFFFF}", ilkdenden);
			strins(action, "{C2A2DA}", sonrakidenden+9);
	}
	if (strlen(action) > 120) {
 	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %.120s", ReturnName(playerid, 0), action); // ciyan
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "...%s", action[120]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s %s", ReturnName(playerid, 0), action);
	    SetPlayerChatBubble(playerid, str, COLOR_CYAN, 20.0, 3000);
	}
	//format(string, sizeof(string), "* %s %s", ReturnName(playerid, 0), action);
 	//ayarlaChatBubble(playerid, string, COLOR_CYAN, 30.0, 6000);
	return 1;
}
/*CMD:edo(playerid, params[])
{
new id = GetPVarInt(playerid, "KAI");
        if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
		{
    if(GetPVarInt(playerid, "TV") == 1) return 1;
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/edo [Durum]");

	if (strlen(params) > 120) {
	    SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "* %.120s", params);
	    SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "...%s ( %s )", params[120], ReturnName(playerid, 0));
	}
	else {
	    SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "* %s ( %s )", params, ReturnName(playerid, 0));
	}
	foreach (new i : Player) if (House_Inside(i) == id)
	{
 	SendClientMessage(i, 0x80CAADFF, "* %s ( %s )", params, ReturnName(i, 0));
	}
}
	//format(string, sizeof(string), "* %s (( %s ))", params, ReturnName(playerid, 0));
 	//ayarlaChatBubble(playerid, string, COLOR_CYAN, 30.0, 6000);
	return 1;
}*/
CMD:do(playerid, params[])
{
    if(GetPVarInt(playerid, "TV") == 1) return 1;
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/do [Durum]");

	if (strlen(params) > 120) {
	    SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "* %.120s", params);
	    SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "...%s ( %s )", params[120], ReturnName(playerid, 0));
	}
	else {
	    SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "* %s ( %s )", params, ReturnName(playerid, 0));
	}
	//format(string, sizeof(string), "* %s (( %s ))", params, ReturnName(playerid, 0));
 	//ayarlaChatBubble(playerid, string, COLOR_CYAN, 30.0, 6000);
	return 1;
}

CMD:ame(playerid, params[])
{
	static
	    string[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ame [Hareket]");

	format(string, sizeof(string), "* %s %s", ReturnName(playerid, 0), params);
 	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 30.0, 10000);

 	SendClientMessageEx(playerid, COLOR_CYAN, "* %s %s", ReturnName(playerid, 0), params);
	return 1;
}

CMD:ado(playerid, params[])
{
    static
	    string[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ado [Durum]");

	format(string, sizeof(string), "* %s (( %s ))", params, ReturnName(playerid, 0));
 	SetPlayerChatBubble(playerid, string, COLOR_GREEN, 30.0, 10000);

 	SendClientMessageEx(playerid, COLOR_GREEN, "* %s (( %s ))", params, ReturnName(playerid, 0));
	return 1;
}


CMD:s(playerid, params[])
{
	if(GetPVarInt(playerid, "TV") == 1) return 1;

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/s [Baðýrma]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s(Baðýrma): %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "...%s!", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s(Baðýrma): %s!", ReturnName(playerid, 0), params);
	}
 	//format(string, sizeof(string), "shouts: %s", params);
	//ayarlaChatBubble(playerid, string, COLOR_WHITE, 30.0, 6000);
	return 1;
}

CMD:c(playerid, params[])
{


	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/c (Kýsýk Ses)");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "(Kýsýk Sesle) %s: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "(Kýsýk Sesle) %s: %s", ReturnName(playerid, 0), params);
	}
 	//format(string, sizeof(string), "[low] says: %s", params);
	//SetPlayerChatBubble(playerid, string, COLOR_WHITE, 5.0, 6000);
	return 1;
}


CMD:int(playerid, params[])
{
	    	if(KaravanID[playerid] != INVALID_VEHICLE_ID) {
		        if(IsPlayerInRangeOfPoint(playerid, 2.0, 2513.5132, -1729.1434, 778.7484)) {
		            new Float: x, Float: y, Float: z;
	                GetVehicleRelativePos(KaravanID[playerid], x, y, z, 1.5, 0.0, 0.0);
	                JBC_SetPlayerPos(playerid, x, y, z);
	                SetPlayerVirtualWorld(playerid, 0);
	                KaravanID[playerid] = INVALID_VEHICLE_ID;
		        }else{
		            SendErrorMessage(playerid, "Kapýya yakýn deðilsiniz.");
		        }
		    }else{
		        new Float: x, Float: y, Float: z;

			    for(new i; i < MAX_VEHICLES; ++i)
			    {
			        if(!IsValidVehicle(i)) continue;
			        if(GetVehicleModel(i) != 508) continue;
	                GetVehicleRelativePos(i, x, y, z, 1.0, 0.0, 0.0);

	                if(IsPlayerInRangeOfPoint(playerid, 1.5, x, y, z))
	                {
	                  	TogglePlayerControllable(playerid, 0);
						SetTimerEx("HastaneTimer", 3000, false, "d", playerid);
	                    JBC_SetPlayerPos(playerid, 2513.5132, -1729.1434, 778.7484);
	                    SetPlayerVirtualWorld(playerid, i);
	                    KaravanID[playerid] = i;
						return 1;
	                }
			    }

			    SendErrorMessage(playerid, "Etrafýnýzda içine girebileceðiniz bir araç yok ya da kapýsýna yakýn deðilsiniz.");
		    }


	return 1;
}


CMD:ss(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ss [IC]");

	if (PlayerData[playerid][pDisableOOC])
	    return SendErrorMessage(playerid, "/ayarlar'dan ooc chat kapatmýþsýn!");

    if (strlen(params) > 64)
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
		    SendClientMessageEx(i, 0xAAC4E5FF, "(( [Sokaktan Sesler]: %.64s", params);
		    SendClientMessageEx(i, 0xAAC4E5FF, "...%s ))", params[64]);
		}
	}
	else
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
		    SendClientMessageEx(i, 0xAAC4E5FF, "(( Sokaktan Sesler]: %s ))", params);
		}
	}
	return 1;
}

/*CMD:o(playerid, params[])
{
	if (g_StatusOOC && PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Bir yönetici OOC konuþma platformunu devredýþý býrakmýþ!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/o [Sunucu OOC Yazý]");

	if (PlayerData[playerid][pDisableOOC])
	    return SendErrorMessage(playerid, "/ayarlar'dan ooc chat kapatmýþsýn!");

SendClientMessageToAllEx(0x804000FF, "[OOC] (%s): {FFFFFF}%s", PlayerData[playerid][pAdminName], params);
return 1;
}*/ // eski ooc chat

CMD:o(playerid, params[])
{
	if (g_StatusOOC && PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Bir yönetici OOC konuþma platformunu devredýþý býrakmýþ !");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/o [Sunucu OOC Yazý]");

	if (PlayerData[playerid][pDisableOOC])
	    return SendErrorMessage(playerid, "Bir yönetici OOC konuþma platformunu deaktif etmiþ !");

    if (strlen(params) > 600)
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
		    SendClientMessageEx(i, COLOR_GREEN, "(( [Oyun Dýþý] %s: %.64s", PlayerData[playerid][pAdminName], params);
		    SendClientMessageEx(i, COLOR_GREEN, "...%s ))", params[64]);
		}
	}
	else
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
		    SendClientMessageEx(i, COLOR_WHITE, "(( {FF0000}%s: {FFFFFF}%s ))", PlayerData[playerid][pAdminName], params);
		}
	}
	return 1;
}

CMD:radio(playerid, params[])
	return cmd_r(playerid, params);

CMD:ooc(playerid, params[])
	return cmd_o(playerid, params);

CMD:f(playerid, params[])
	return cmd_fac(playerid, params);

CMD:shout(playerid, params[])
	return cmd_s(playerid, params);

CMD:m(playerid, params[])
	return cmd_megafon(playerid, params);

CMD:gsign(playerid, params[])
	return cmd_gesture(playerid, params);

CMD:gise(playerid, params[])
	return cmd_giseac(playerid, params);

CMD:d(playerid, params[])
	return cmd_dept(playerid, params);

CMD:kgs(playerid, params[])
	return cmd_giseac(playerid, params);

CMD:ct(playerid, params[])
	return cmd_chattemizle(playerid, params);

CMD:l(playerid, params[])
	return cmd_c(playerid, params);

CMD:low(playerid, params[])
	return cmd_c(playerid, params);

CMD:yap(playerid, params[])
return cmd_do(playerid, params);

CMD:admin(playerid, params[])
	return cmd_achat(playerid, params);

CMD:w(playerid, params[])
	return cmd_fisilda(playerid, params);


CMD:pdtamir(playerid, params[])
{
if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Araçta deðilsin.");
if(!IsPlayerInRangeOfPoint(playerid, 4.1, 2072.3440, -1831.4056, 13.5545)) // idlewood
if(!IsPlayerInRangeOfPoint(playerid, 4.1, 1025.2369,-1030.9207,32.0168)) // temple
if(!IsPlayerInRangeOfPoint(playerid, 4.1, 488.3592,-1732.6564,11.1894)) // east beach
        return SendErrorMessage(playerid, "Araç tamir etme noktasýnda deðilsiniz.");

if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_INTEL)
	    return SendErrorMessage(playerid, "Polis memuru veya devlet memuru deðilsin.");

new vehicleid = GetPlayerVehicleID(playerid);
if (GetEngineStatus(vehicleid))
        return SendErrorMessage(playerid, "Aracýn motoru kapalý deðil.");

if (!ModifiyeEdilemezArac(vehicleid))
		    return SendErrorMessage(playerid, "Bu araba kuruma ait deðil!");

TogglePlayerControllable(playerid, 0);
GameTextForPlayer(playerid, "ARAC TAMIR EDILIYOR...", 7500, 3);
return SetTimerEx("Player_RepairVehicle", 7500, false, "i", playerid);
}
CMD:telsizkir(playerid, params[])
{

    if (!Inventory_HasItem(playerid, "Telsiz"))
        return SendErrorMessage(playerid, "Telsizin yok.");

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawnedEx(playerid))
        return SendErrorMessage(playerid, "Þuanda telsizini atamazsýn.");

    Inventory_Remove(playerid, "Telsiz");
    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s belinden telsizini alýp yere atar ve ayaðýyla parçalar.", ReturnName(playerid, 0));

    SetAccessories(playerid);

    return 1;
}

CMD:telefonkir(playerid, params[])
{

    if (!Inventory_HasItem(playerid, "Telefon"))
        return SendErrorMessage(playerid, "Cep telefonun yok.");

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawnedEx(playerid))
        return SendErrorMessage(playerid, "Þuanda telefonunu atamazsýn.");

    Inventory_Remove(playerid, "Telefon");
    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cebinden telefonunu çýkartýr ve yere atýp ayaðýyla parçalar.", ReturnName(playerid, 0));

    SetAccessories(playerid);

    return 1;
}
CMD:fastfood(playerid, params[])
{
 static
	    userid,
	    food[24];

if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");

		    if (!TezgahData[playerid][tezgahPlaced])
	        return SendErrorMessage(playerid, "Tezgahý kurmamýþsýn! '/tezgah'");

if (sscanf(params, "us[24]d", userid, food))
	{
	    SendSyntaxMessage(playerid, "/fastfood [id] [gýda adý]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ÝSÝMLER]:{FFFFFF} sosisli, soda, bira.");
	    return 1;
	}
	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 7.0))
	    return SendErrorMessage(playerid, "Oyuncu oyunda deðil veya sana yakýn deðil.");
if (!Inventory_HasItem(playerid, "Tezgah"))
	    return SendErrorMessage(playerid, "Tezgah malzemelerin yok.");

	     if (!TezgahData[playerid][tezgahPlaced])
	        return SendErrorMessage(playerid, "Tezgah kurmamýþsýn.");

if (!strcmp(food, "sosisli", true))
	{
    Inventory_Add(userid, "Sosisli", 2880);
    //GiveMoney(userid, -3);

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");

		    if (userid == playerid)
	    return SendErrorMessage(playerid, "Bu komutu kendi leyhine kullanamazsýn.");


		//SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir müzik kutusu alýr ve yere koyar.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "%s adlý oyuncuya sosisli verdiniz.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s adlý oyuncu sana sosisli verdi.", ReturnName(playerid, 0));
	}
	if (!strcmp(food, "bira", true))
	{
    Inventory_Add(userid, "Bira", 1486);
    //GiveMoney(userid, -3);

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");

		    if (userid == playerid)
	    return SendErrorMessage(playerid, "Bu komutu kendi leyhine kullanamazsýn.");


		//SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir müzik kutusu alýr ve yere koyar.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "%s adlý oyuncuya bira verdiniz.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s adlý oyuncu sana bira verdi. Ýçmek için /bira", ReturnName(playerid, 0));
	}
if (!strcmp(food, "soda", true))
	{
    Inventory_Add(userid, "Soda", 19835);
    //GiveMoney(userid, -4);

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");

		    if (userid == playerid)
	    return SendErrorMessage(playerid, "Bu komutu kendi leyhine kullanamazsýn.");


		//SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir müzik kutusu alýr ve yere koyar.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "%s adlý oyuncuya soda verdiniz.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s adlý oyuncu sana soda verdi.", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:kamerasatinal(playerid, params[])
{
if(!IsPlayerInRangeOfPoint(playerid, 4.0, -2236.8955,130.1768,1035.4141)) return SendErrorMessage(playerid, "Kamera satýn alma noktasýnda deðilsiniz.");
if(GetMoney(playerid) < 150) return SendErrorMessage(playerid, "Yeterli paranýz yok.");
GiveWeaponToPlayer(playerid, 43, 500);
GiveMoney(playerid, -150);
SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s 150 dolar öder ve 1 adet kamera satýn alýr.", ReturnName(playerid, 0));
return 1;
}
CMD:cadiral(playerid, params[])
{
if(!IsPlayerInRangeOfPoint(playerid, 15.0, -27.3383,-57.6907,1003.5469)) return SendErrorMessage(playerid, "Çadýr alma noktasýnda deðilsiniz!");
if (Inventory_HasItem(playerid, "Portatif Cadir")) return SendErrorMessage(playerid, "Zaten envanterinde çadýr bulunuyor.");
if(GetMoney(playerid) < 150) return SendErrorMessage(playerid, "Çadýr satýn almak için 150 dolara ihtiyacýn var.");
GiveMoney(playerid, -150);
SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s 150 dolar öder, portatif çadýr satýn alýr.", ReturnName(playerid, 0));
Inventory_Add(playerid, "Portatif Cadir", 3243);
return 1;
}
CMD:telebycoord(playerid, params[])
{
 if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");
		       new x,y,z;
        if(sscanf(params, "iii", x, y, z))return SendClientMessage(playerid, 0xFF0000FF, "Usage: /telebycoord [X Pos] [Y Pos] [Z Pos]");
        SetPlayerPos(playerid, x, y, z);
        return 1;
}
CMD:cadir(playerid, params[])
{
	static
	    type[24],
	    Float:x,
	    Float:y,
	    Float:z,
	    string[128];

	if (!Inventory_HasItem(playerid, "Portatif Cadir"))
	    return SendErrorMessage(playerid, "Çadýr malzemelerin yok.");


	if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/cadir [ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} koy, kaldir");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
     if (CadirData[playerid][cadirPlaced])
	        return SendErrorMessage(playerid, "Zaten bir tezgah koymuþsun.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");
        GetPlayerPos(playerid, x, y, z);
	    JBC_SetPlayerPos(playerid, x + 3, y, z);
		Cadir_Place(playerid);
		SendServerMessage(playerid, "Çadýrýný koydun. (Ayarlarý  \"/cadir\" komutu ile yapabilirsin).");
	}
	else if (!strcmp(type, "kaldir", true))
	{
	    if (!CadirData[playerid][cadirPlaced])
	        return SendErrorMessage(playerid, "Çadýrýn kaldýrýldý.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, CadirData[playerid][cadirPos][0], CadirData[playerid][cadirPos][1], CadirData[playerid][cadirPos][2]))
		    return SendErrorMessage(playerid, "Tezgahýnýn yanýnda olmalýsýn.");

		Cadir_Destroy(playerid);
		SendServerMessage(playerid, "Çadýrýný baþarýyla kaldýrdýn.");
	}

	return 1;
}
CMD:tezgah(playerid, params[])
{
	static
	    type[24],
	    string[128];

	if (!Inventory_HasItem(playerid, "Tezgah"))
	    return SendErrorMessage(playerid, "Tezgah malzemelerin yok.");


	if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/tezgah [ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} koy, kaldir");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
     if (TezgahData[playerid][tezgahPlaced])
	        return SendErrorMessage(playerid, "Zaten bir tezgah koymuþsun.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");


		Tezgah_Place(playerid);

		SendServerMessage(playerid, "Tezgahýný koydun. (Ayarlarý  \"/tezgah\" komutu ile yapabilirsin).");
	}
	else if (!strcmp(type, "kaldir", true))
	{
	    if (!TezgahData[playerid][tezgahPlaced])
	        return SendErrorMessage(playerid, "Tezgah malzemelerin kaldýrýldý.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, TezgahData[playerid][tezgahPos][0], TezgahData[playerid][tezgahPos][1], TezgahData[playerid][tezgahPos][2]))
		    return SendErrorMessage(playerid, "Tezgahýnýn yanýnda olmalýsýn.");

		Tezgah_Destroy(playerid);
		SendServerMessage(playerid, "Tezgahýný baþarýyla kaldýrdýn.");
	}

	return 1;
}
/*CMD:oocmarket(playerid, params[])
{
new string[1024];
strcat(string, "Ýsim Deðiþikliði\t5 TL\nForum Ýsim Deðiþikliði\t5 TL\nÖzel Numara\t10 TL\nGate\t15 TL\nMaske Kullanýmý\t5 TL\nBisiklet Kullanýmý\t10 TL\nÖzel Harita\t50 TL\nÖzel Skin\t5 TL\nÖzel Plaka\t10 TL\nSoyadý Kilitleme\t20 TL\nBaðýþçý\t20 TL");
Dialog_Show(playerid, OOCMarket, DIALOG_STYLE_TABLIST_HEADERS, "OOC Market", string, "Tamam", "Ýptal");
return 1;
}
Dialog:OOCMarket(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerData[playerid][pVCoin] < 5)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

				PlayerData[playerid][pVCoin] -= 5;
				SendServerMessage(playerid, "Ýsim deðiþikliðini baþarýyla satýn aldýn! Kod: %d"), kod);
				SendServerMessage(playerid, "Bu ekraný fotoðraf çekip ticket atmalýsýnýz!");
	        }

	        case 1:
	        {
	            if(PlayerData[playerid][pVCoin] < 5)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");
                PlayerData[playerid][pVCoin] -= 5;
				SendServerMessage(playerid, "Forum isim deðiþikliðini baþarýyla satýn aldýn! Kod: %d"), kod);
				SendServerMessage(playerid, "Bu ekraný fotoðraf çekip ticket atmalýsýnýz!");
			}
	        case 2:
	        {
	            if(PlayerData[playerid][pVCoin] < 10)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");
                SendServerMessage(playerid, "Özel telefon numarasýný baþarýyla satýn aldýn! Kod: %d"), kod);
				SendServerMessage(playerid, "Bu ekraný fotoðraf çekip ticket atmalýsýnýz!");
	            PlayerData[playerid][pVCoin] -= 10;
	        }
	        case 3:
	        {
	            if(PlayerData[playerid][pVCoin] < 15)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

                SendServerMessage(playerid, "Gate baþarýyla satýn aldýn! Kod: %d"), kod);
				SendServerMessage(playerid, "Bu ekraný fotoðraf çekip ticket atmalýsýnýz!");
	            PlayerData[playerid][pVCoin] -= 5;
	        }
	        case 4:
	        {
	            if(PlayerData[playerid][pVCoin] < 5)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

                PlayerData[playerid][pVCoin] -= 5;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 5:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_BISIKLET)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

	            //Urun_Ekle(playerid, "Bisiklet Olusturma");
                PlayerData[playerid][pVCoin] -= URUN_BISIKLET;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 6:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_GATE)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

				//Urun_Ekle(playerid, "Gate/Garaj Kapisi (Sinirsiz)");
                PlayerData[playerid][pVCoin] -= URUN_GATE;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 7:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_HIZLIMOTOR)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

                //Urun_Ekle(playerid, "Hizli Motor Calistirma");
            	PlayerData[playerid][pVCoin] -= URUN_HIZLIMOTOR;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 8:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_BIRLIK_TIPI)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

				//Urun_Ekle(playerid, "Birlik Tipi Degistirme");
                PlayerData[playerid][pVCoin] -= URUN_BIRLIK_TIPI;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 9:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_BIRLIK_ADI)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

				//Urun_Ekle(playerid, "Birlik Adi Degistirme");
                PlayerData[playerid][pVCoin] -= URUN_BIRLIK_ADI;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 10:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_OOCSICIL)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

				//Urun_Ekle(playerid, "OOC Sicil Sifirlama");
                PlayerData[playerid][pVCoin] -= URUN_OOCSICIL;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 11:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_PREMIUMSLOT)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

			    //Urun_Ekle(playerid, "Ozel Karakter Slotu");
                PlayerData[playerid][pVCoin] -= URUN_PREMIUMSLOT;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 12:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_SOYAD)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

                //Urun_Ekle(playerid, "Soyadi Kilitleme");
            	PlayerData[playerid][pVCoin] -= URUN_SOYAD;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
 	}
	return 1;
}*/


CMD:hasarlar(playerid, params[])
{
	static
	    userid, hasarsayi;

if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");
	    
	    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/hasarlar [id]");

    if (!PlayerData[userid][pBaygin])
	    return SendErrorMessage(playerid, "Oyuncu baygýn/yaralý deðil!");

    static
		string[MAX_HASAR * 128];

	string[0] = 0;

	strcat(string, "Hasar\tBölge\tHasar Veren\tSilah\n");
	for (new i = 0; i < 10; i ++)
	{
		if (Hasarlar[userid][i][hasarVarmi] && IsPlayerConnected(Hasarlar[userid][i][hasarVeren])) {
			format(string, sizeof(string), "%s%.2f\t%s\t%s\t%s\n", string, Hasarlar[userid][i][hasarDeger], HasarBolge(Hasarlar[userid][i][hasarBolge]), ReturnName(Hasarlar[userid][i][hasarVeren], 0), ReturnWeaponName(Hasarlar[userid][i][hasarSilah]));
			hasarsayi++;
		}
	}
	if(hasarsayi == 0) return SendErrorMessage(playerid, "Hiç hasarý yok.");
	Dialog_Show(playerid, Hasarlar, DIALOG_STYLE_TABLIST_HEADERS, ReturnName(userid, 0), string, "Tamam", "{FF6347}Iptal");
	return 1;
}
CMD:dat(playerid, params[])
{
for (new i = 0; i < 5; i ++) {
RemovePlayerAttachedObject(playerid, i);
PlayerData[playerid][pTSlot][i] = false;
ShowPlayerFooter(playerid, "Aksesuarlar cikartildi.");
}
return 1;
}
CMD:bagimlilik(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREEN, "* BAÐIMLILIK: {FFFFFF}%s", (PlayerData[playerid][pTotalUsed] > GEREKEN_BAGIMLILIK) ? ("{2ECC71}Evet") : ("{E74C3C}Hayýr"));
	SendClientMessageEx(playerid, COLOR_GREEN, "* TOPLAM UYUÞTURUCU KULLANMA: {FFFFFF}%d kez.", PlayerData[playerid][pTotalUsed]);
	//SendServerMessage(playerid, "Baðýmlýlýðýný sýfýrlamak için all saints hastanesine gitmen gerekir.");
	return 1;
}
CMD:bira(playerid, params[])
{
if (!Inventory_HasItem(playerid, "Bira")) return SendErrorMessage(playerid, "Bir biraya sahip deðilsin.");
SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
return 1;
}
CMD:kumar(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid,25,1128.6823,-2.9520,1000.6797)) return SendErrorMessage(playerid, "Casino'nun içerisinde deðilsiniz!");
	new string[1024];
	strcat(string, "{FFFFFF}Supreme Number\n{FFFFFF}Tek Çift");
	Dialog_Show(playerid, BahisTur, DIALOG_STYLE_LIST, "Kumarhane", string, "Oyna", "Ýptal");
	return 1;
}
/*CMD:bagimliliksifirla(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

    PlayerData[userid][pTotalUsed] = 0;
    SendServerMessage(userid, "%s adlý yetkili senin baðýmlýlýðýný sýfýrladý. Kontrol için, /bagimlilik ", ReturnName(playerid, 0));
    SendAdminAlert(COLOR_LIGHTRED, "%s adlý yetkili %s adlý oyuncunun baðýmlýlýðýný sýfýrladý.", PlayerData[playerid][pAdminName], ReturnName(userid, 0));
	return 1;
}*/
CMD:cw(playerid, params[])
{
new vehicleid = GetPlayerVehicleID(playerid);
if (!IsEngineVehicle(vehicleid)) return SendErrorMessage(playerid, "Araç içi sohbet için araç içinde olman gerekmektedir!");
if (isnull(params)) return SendSyntaxMessage(playerid, "/cw [yazý]");
if (CoreVehicles[vehicleid][vehWindowsDown]) return SendErrorMessage(playerid, "Aracýn camý kapalý deðil!");
SendVehicleMessage(GetPlayerVehicleID(playerid), -1, "[Araç Ýçi] %s: %s", ReturnName(playerid, 0), params);
return 1;
}
CMD:tohumek(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/tohumek [marijuana/skunk]");

	if (Plant_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "Yakýnda ekilmiþ tohumlar var!");

	if (!strcmp(params, "marijuana", true))
	{
	    if (Inventory_Count(playerid, "Marijuana Tohumu") < 1)
	        return SendErrorMessage(playerid, "1 adet marijuana tohumuna ihtiyacýn var.");

		Inventory_Remove(playerid, "Marijuana Tohumu", 1);

		Plant_Create(playerid, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s topraða marijuana tohumlarýný yerleþtirir.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "skunk", true))
	{
	    if (Inventory_Count(playerid, "Skunk Tohumu") < 1)
	        return SendErrorMessage(playerid, "1 adet skunk tohumuna ihtiyacýn var.");

		Inventory_Remove(playerid, "Skunk Tohumu", 1);

		Plant_Create(playerid, 3);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s topraða skunk tohumlarýný yerleþtirir.", ReturnName(playerid, 0));
	}
	else {
	    SendSyntaxMessage(playerid, "/tohumek [marijuana/skunk]");
	}
	return 1;
}
CMD:hasatet(playerid, params[])
{
	new id = Plant_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Bir uyuþturucu bitkisine yakýn deðilsin.");

	if (PlantData[id][plantDrugs] < Plant_MaxGrams(PlantData[id][plantType]))
	    return SendErrorMessage(playerid, "Bu bitki henüz tam yetiþtirilmiþ deðil.");

	if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    return SendErrorMessage(playerid, "Bitkiyi hasat etmek için çömelmen gerekir.");

	if (PlayerData[playerid][pHarvesting])
	    return SendErrorMessage(playerid, "Zaten hasat ediyorsun.");

	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Toplaniyor...", 3100, 3);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bitkileri hasat etmeye baþlar.", ReturnName(playerid, 0));

	PlayerData[playerid][pHarvesting] = 1;
	SetTimerEx("HarvestPlant", 3000, false, "dd", playerid, id);
	return 1;
}
CMD:mouse(playerid, params[])
{
SelectTextDraw(playerid, -1);
SendServerMessage(playerid, "Mouse getirildi.");
return 1;
}
/*CMD:aksan(playerid, params[])
{
	new accent;
	if(sscanf(params, "d", accent))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /aksan [aksan ID]");
		SendServerMessage(playerid, "Kullanýlabilir Isimler: Normal [1], Ingiliz [2], Asyalý [3], Iskoç [4], Irlandalý [5], Rus [6], Amerikan [7]");
		SendServerMessage(playerid, "Kullanýlabilir Aksanlar: Ispanyol [8], Güney [9], Kübalý [10], Italyan [11], Avustralyalý [12]");
		SendServerMessage(playerid, "Kullanýlabilir Aksanlar: Balkan [13], Kanadalý [14], Jamaikalý [15], Fransýz [16], Alman [17]");
		SendServerMessage(playerid, "Aksaný silmek istersen, '/aksan 18' kullan.");
		return 1;
	}

	switch(accent)
	{
	case 1:
		{
			PlayerData[playerid][pAccent] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Normal aksan ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 2:
		{
			PlayerData[playerid][pAccent] = 2;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Ingiliz aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 3:
		{
			PlayerData[playerid][pAccent] = 3;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Asyalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 4:
		{
			PlayerData[playerid][pAccent] = 4;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Iskoç aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 5:
		{
			PlayerData[playerid][pAccent] = 5;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Irlandalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 6:
		{
			PlayerData[playerid][pAccent] = 6;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Rus aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 7:
		{
			PlayerData[playerid][pAccent] = 7;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Amerikan aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 8:
		{
			PlayerData[playerid][pAccent] = 8;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Ispanyol aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 9:
		{
			PlayerData[playerid][pAccent] = 9;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Güney aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 10:
		{
			PlayerData[playerid][pAccent] = 10;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Kübalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 11:
		{
			PlayerData[playerid][pAccent] = 11;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Italyan aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 12:
		{
			PlayerData[playerid][pAccent] = 12;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Avustrulyalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 13:
		{
			PlayerData[playerid][pAccent] = 13;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Balkan aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 14:
		{
			PlayerData[playerid][pAccent] = 14;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Kanadalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 15:
		{
			PlayerData[playerid][pAccent] = 15;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Jamaikalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 16:
		{
			PlayerData[playerid][pAccent] = 16;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Fransýz aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 17:
		{
			PlayerData[playerid][pAccent] = 17;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Alman aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
 	case 18:
		{
			PlayerData[playerid][pAccent] = 18;
			SendClientMessage(playerid, COLOR_WHITE, "Herhangi bir aksanýn yok, /aksan ile deðiþtirebilirsin.");
		}
	}
	return 1;
}*/
CMD:skinidim(playerid, params[])
{
if (!PlayerData[playerid][pAdmin]) return SendErrorMessage(playerid, "Admin deðilsin!");
SendServerMessage(playerid, "Skin idniz: %d", PlayerData[playerid][pSkin]);
return 1;
}
CMD:memurcagir(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 246.3690,117.8564,1003.2188))
	    return SendErrorMessage(playerid, "Memur çaðýrma noktasýnda deðilsiniz.");
if (GetFactionType(playerid) == FACTION_POLICE)  return SendErrorMessage(playerid, "LSPD bu komutu kullanamaz!");
   //	if(!spamProtect(playerid, "MemurCagirma", 60))  return SendErrorMessage(playerid, "Memur çaðýrma komutunu 1 dakikada bir kullanabilirsiniiz.");
   	SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "MEMUR ÇAÐRISI: %s lobiye memur talep ediyor.", ReturnName(playerid, 0));
    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s masanýn üstünde duran zile basar.", ReturnName(playerid, 0));
    return 1;
}
CMD:kututasi(playerid, params[])
{
if (GetFactionType(playerid) == FACTION_POLICE) return SendErrorMessage(playerid, "LSPD olduðun için bu komutu kullanamazsýn!");
if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Bu komut araçta kullanýlamaz!");
if (PlayerData[playerid][pJob] != JOB_UYUSTURUCU) return SendErrorMessage(playerid, "Uyuþturucu kaçakçýsý deðilsin.");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2213.3701,-2289.8210,14.7647)) return SendErrorMessage(playerid, "Kutu taþýma noktasýnda deðilsiniz.");
if (PlayerData[playerid][pKutu]) return SendErrorMessage(playerid, "Zaten kutu taþýyorsun!");
SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
SetPlayerAttachedObject(playerid, 9, 2912, 2, -0.169999, 0.496999, -0.408999, 0.000000, 0.000000, 0.000000, 0.613000, 0.853999, 0.947000);
SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kutuyu kavrar.", ReturnName(playerid, 0));
SendServerMessage(playerid, "Aracýnýn bagaj kýsmýna yönel ve /kutubirak komutunu kullanarak kutuyu bagaja býrak.");
SendServerMessage(playerid, "Kutuyu elinizden býrakmak için /kutugeribirak yazabilirsiniz.");
PlayerData[playerid][pKutu] = 1;
SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "911 HATTI: Ýllegal kutu taþýyan uyuþturucu kaçakçýlarý kasalý araçlara yük yüklüyor!");
return 1;
}
CMD:kutugeribirak(playerid, params[])
{
if (GetFactionType(playerid) == FACTION_POLICE) return SendErrorMessage(playerid, "LSPD olduðun için bu komutu kullanamazsýn!");
if (PlayerData[playerid][pJob] != JOB_UYUSTURUCU) return SendErrorMessage(playerid, "Uyuþturucu kaçakçýsý deðilsin.");
if (!PlayerData[playerid][pKutu]) return SendErrorMessage(playerid, "Kutu taþýmýyorsun!");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2213.3701,-2289.8210,14.7647)) return SendErrorMessage(playerid, "Kutu taþýma noktasýnda deðilsiniz.");
RemovePlayerAttachedObject(playerid, 9);
ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
ClearAnimations(playerid);
SetPlayerSpecialAction(playerid, 0);
PlayerData[playerid][pKutu] = 0;
return 1;
}
CMD:kutubirak(playerid, params[])
{
if (GetFactionType(playerid) == FACTION_POLICE) return SendErrorMessage(playerid, "LSPD olduðun için bu komutu kullanamazsýn!");
new carid = Car_Nearest(playerid);
if (PlayerData[playerid][pJob] != JOB_UYUSTURUCU) return SendErrorMessage(playerid, "Uyuþturucu kaçakçýsý deðilsin.");
if (!PlayerData[playerid][pKutu]) return SendErrorMessage(playerid, "Kutu taþýmýyorsun!");
if (!Car_Meslek(playerid, carid)) return SendErrorMessage(playerid, "Meslek aracý deðil.");
if ((carid = Car_Nearest(playerid)) != -1)
{
RemovePlayerAttachedObject(playerid, 9);
new vehicleid = CarData[carid][carVehicle];
CoreVehicles[vehicleid][vehUyusturucuObj] = CreateDynamicObject(2912, -0.59500, 1.60220, 0.09180, 0.00000, 0.00000, 90.00000);
AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehUyusturucuObj], vehicleid, 0.004999, -1.204999, -0.304999, 0.000000, 0.000000, 0.000000);
ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kutuyu aracýn bagajýna yerleþtirir.", ReturnName(playerid, 0));
ClearAnimations(playerid);
SetPlayerSpecialAction(playerid, 0);
PlayerData[playerid][pKutu] = 0;
CoreVehicles[vehicleid][vehUKutu] = 1;
}
else SendErrorMessage(playerid, "Aracýna yakýn deðilsin.");
return 1;
}
CMD:kututeslim(playerid, params[])
{
if (GetFactionType(playerid) == FACTION_POLICE) return SendErrorMessage(playerid, "LSPD olduðun için bu komutu kullanamazsýn!");
if (PlayerData[playerid][pJob] != JOB_UYUSTURUCU) return SendErrorMessage(playerid, "Uyuþturucu kaçakçýsý deðilsin!");
if(!IsPlayerInRangeOfPoint(playerid, 3.5, 979.0511,-1255.4989,16.9495)) return SendErrorMessage(playerid, "Kutu teslim noktasýnda deðilsin.");
if (!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçta deðilsin.");
if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid)))) return SendErrorMessage(playerid, "Meslek aracý deðil.");
if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");
new carid = CarData[carid][carVehicle];
new vehicleid = GetPlayerVehicleID(playerid);
if (CoreVehicles[vehicleid][vehUKutu] == 0) return SendErrorMessage(playerid, "Bu araçta kutu yok.");
if (!PlayerData[playerid][pKutuNokta]) return SendErrorMessage(playerid, "/kutunokta komutunu kullanmadan teslim edemezsin!");
CoreVehicles[vehicleid][vehUKutu] = 0;
GiveMoney(playerid, 350);
DisablePlayerCheckpoint(playerid);
SendServerMessage(playerid, "Bu iþten $350 kaptýn, yakalanmadan uzaklaþ.");
PlayerData[playerid][pKutuNokta] = 0;
if (IsValidDynamicObject(CoreVehicles[vehicleid][vehUyusturucuObj])) DestroyDynamicObject(CoreVehicles[vehicleid][vehUyusturucuObj]);
return 1;
}
CMD:kutunokta(playerid, params[])
{
if (GetFactionType(playerid) == FACTION_POLICE) return SendErrorMessage(playerid, "LSPD olduðun için bu komutu kullanamazsýn!");
if (PlayerData[playerid][pJob] != JOB_UYUSTURUCU) return SendErrorMessage(playerid, "Uyuþturucu kaçakçýsý deðilsin!");
if (!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçta deðilsin.");
if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid)))) return SendErrorMessage(playerid, "Meslek aracý deðil.");
if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");
if (PlayerData[playerid][pKutuNokta]) return SendErrorMessage(playerid, "Nokta zaten belirlenmiþ, sýfýrlamak istersen '/cpsifirla' kullan.");
new vehicleid = GetPlayerVehicleID(playerid);
if (CoreVehicles[vehicleid][vehUKutu] == 0) return SendErrorMessage(playerid, "Bu araçta kutu yok.");
Waypoint_Set(playerid, "Kutu Teslim Noktasi", 979.0511, -1255.4989, 16.9495);
PlayerData[playerid][pKutuNokta] = 1;
SendServerMessage(playerid, "Kutu teslim edeceðin nokta haritada belirtildi.");
return 1;
}

CMD:hapistemi(playerid, params[])
{
new userid;

if (PlayerData[playerid][pTester] < 4 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");
	    if (sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/hapistemi [id]");
if (PlayerData[userid][pJailTime]) {
SendErrorMessage(playerid, "Kalan %d hapis süresi var.", PlayerData[userid][pJailTime]);
}
else {
SendErrorMessage(playerid, "Þahýs hapiste deðil.");
}
return 1;
}
CMD:hesapla(playerid, params[])
{
	new string[128], method[20], value1, value2;
	if(sscanf(params, "ds[20]d", value1, method, value2))
	{
		SendServerMessage(playerid,"/hesapla [rakam] [iþlem] [rakam].");
		SendServerMessage(playerid, "Iþlemler: Topla, Çýkar, Çarp, Böl.");
		return 1;
	}

	if(strcmp(method,"Çarp",true) == 0 || strcmp(method,"*",true) == 0)
	{
		new sum = value1*value2;
		format(string,sizeof(string),"%d çarpý %d eþittir %d.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"Böl",true) == 0 || strcmp(method,"/",true) == 0)
	{
		if(value2 == 0)
			return GameTextForPlayer(playerid, "face~r~palm", 1000, 3);

		new sum = value1/value2;
		format(string,sizeof(string),"%d bölü %d eþittir %d.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"Topla",true) == 0 || strcmp(method,"+",true) == 0)
	{
		new sum = value1+value2;
		format(string,sizeof(string),"%d artý %d eþittir %d.",value1,value2,sum);
  SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"Çýkar",true) == 0 || strcmp(method,"-",true) == 0)
	{
		new sum = value1-value2;
		format(string,sizeof(string),"%d eksi %d eþittir %d.",value1,value2,sum);
  SendClientMessage(playerid,COLOR_WHITE,string);
	}
	return 1;
}
CMD:yurumetarzi(playerid, params[])
{
//ShowPlayerDialog(playerid, SÉTASTILUS, DIALOG_STYLE_LIST, "Varna Roleplay - Yürüme Tarzý Seçme", "Normal\nLow Walk\nGangsta\nGangsta2\nOld Walk\nOld Walk2\nNormal Walk2\nFemale Walk\nFemale Walk2\nWhore Walk\nFemale Walk3\nDrunk Walk\nBlind Walk\nNormal", "Tamam", "Iptal");
return 1;
}
CMD:yardim(playerid, params[])
{
new yardim[128];
format(yardim, sizeof(yardim),"______________________________________________");
SendClientMessage(playerid, COLOR_DARKGREEN, yardim);
format(yardim, sizeof(yardim),"[HESAP] /karakter, /mouse, /admins, /rapor, /raporiptal, /forumbagla");
SendClientMessage(playerid, COLOR_GRAD1, yardim);
format(yardim, sizeof(yardim),"[GENEL] /silahbirak, /maske, /ssmodac, /ssmodkapa");
SendClientMessage(playerid, COLOR_GRAD2, yardim);
format(yardim, sizeof(yardim),"[GENEL] /satinal, /sat, /frekans, /boombox");
SendClientMessage(playerid, COLOR_GRAD1, yardim);
format(yardim, sizeof(yardim),"[GENEL] /lisansgoster, /kimlikgoster, /atm");
SendClientMessage(playerid, COLOR_GRAD2, yardim);
format(yardim, sizeof(yardim),"[SÝLAH/UYUÞTURUCU] /silahbirak, /silahkalansaat /sarjor, /ukullan, /uyusturucularim");
SendClientMessage(playerid, COLOR_GRAD1, yardim);
format(yardim, sizeof(yardim),"[ARAÇ] /arac motor, /arac kilit, /arac far, /arac radyo, /arac benzin");
SendClientMessage(playerid, COLOR_GRAD1, yardim);
format(yardim, sizeof(yardim),"[ROL] /me, /do, /ame, /ado, /s, /c, /e");
SendClientMessage(playerid, COLOR_GRAD2, yardim);
format(yardim, sizeof(yardim),"[TELEFON] /telefon, /ara, /kapat, /sms");
SendClientMessage(playerid, COLOR_GRAD1, yardim);
format(yardim, sizeof(yardim),"[EV/ÝSYERÝ] /imhaet, /mulkkilit, /ev, /isyeri, /garajkilit, /gardolap");
SendClientMessage(playerid, COLOR_GRAD2, yardim);
format(yardim, sizeof(yardim),"[MESLEK] /meslek katil, /meslek ayril, /meslek yardim");
SendClientMessage(playerid, COLOR_GRAD1, yardim);
format(yardim, sizeof(yardim),"[BÝRLÝK] /birlik, /factions");
SendClientMessage(playerid, COLOR_GRAD2, yardim);
//format(yardim, sizeof(yardim),"[SÝLAH] /silahliste, /silahkalansaat, /silahyenile");
//SendClientMessage(playerid, COLOR_GRAD2, yardim);
format(yardim, sizeof(yardim),"______________________________________________");
SendClientMessage(playerid, COLOR_DARKGREEN, yardim);
return 1;
}
/*CMD:help(playerid, params[])
{
	SendClientMessage(playerid, COLOR_DARKGREEN, "______________________________________________");

	SendClientMessage(playerid, COLOR_GRAD1, "[ACCOUNT] /karakter, /admins, /rapor, /o(oc) /forumbagla");
	SendClientMessage(playerid, COLOR_GRAD2, "[GENERAL] /time, /rcp, /silahliste, /silahbirak, /grabgun, /maske");
	SendClientMessage(playerid, COLOR_GRAD1, "[GENERAL] /satinal, /frekans, /setslot, /radio, /radiolow, /damages, /acceptdeath,");
	SendClientMessage(playerid, COLOR_GRAD2, "[GENERAL] /respawnme, /setspawn, /levelup, /bank, /withdraw, /balance, /ammuhelp,");
	SendClientMessage(playerid, COLOR_GRAD1, "[GENERAL] /license, /licenseexam, /unimpound, /fixr");
	SendClientMessage(playerid, COLOR_GRAD1, "[VEHICLES] /v(ehicle), /engine, /unscramble, /check, /place, /setstation, /refill");
	SendClientMessage(playerid, COLOR_GRAD2, "[EMOTES] /me, /do, /ame, /ado, /s, /c, /e, /b, /pm");
	SendClientMessage(playerid, COLOR_GRAD1, "[PHONE] /call, /hangup, /pickup, /sms, /loudspeaker");
	SendClientMessage(playerid, COLOR_GRAD2, "[PROPERTY] /buyproperty, /lock, /check, /place, /placepos, /setstation, /property, /setrent, /rentfee");
	SendClientMessage(playerid, COLOR_GRAD1, "[BUSINESS] /buybiz, /bizinfo, /bizfee, /bizcash, /sellbiz");
	SendClientMessage(playerid, COLOR_GRAD2, "[FACTION] /factionhelp, /birlikler, /f, /togfam, /factionon, /accept");

	SendClientMessage(playerid, COLOR_DARKGREEN, "______________________________________________");
	return 1;
}*/
forward Konektovano();
public Konektovano()
{
	new Connected;
	for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && !IsPlayerNPC(i)) Connected++;
	return Connected;
}
/*CMD:market(playerid, params[])
{
	new string[2056], row[256];
	strcat(string, "Ürün Adý\tKredi\n");

	format(row, sizeof(row), "Ýsim Deðiþtirme Hakký\t%d\n", URUN_ISIM_DEGISTIRME);
	strcat(string, row);

	format(row, sizeof(row), "Köken Deðiþtirme Hakký\t%d\n", URUN_KOKEN_DEGISTIRME);
	strcat(string, row);

	format(row, sizeof(row), "Doðum Tarihi Deðiþtirme Hakký\t%d\n", URUN_DOGUMTARIHI_DEGISTIRME);
	strcat(string, row);

	format(row, sizeof(row), "Özel Numara\t%d\n", URUN_OZEL_NUMARA);
	strcat(string, row);

	format(row, sizeof(row), "Dil Sýfýrlama\t%d\n", URUN_DIL_SIFIRLAMA);
	strcat(string, row);

	format(row, sizeof(row), "Karakter Sýfýrlama\t%d\n", URUN_KARAKTER_SIFIRLAMA);
	strcat(string, row);

	format(row, sizeof(row), "Maske Kullanýmý\t%d\n", URUN_MASKE_KULLANIMI);
	strcat(string, row);

	format(row, sizeof(row), "Bisiklet Oluþturma\t%d\n", URUN_BISIKLET);
	strcat(string, row);

	format(row, sizeof(row), "Gate/Garaj Kapýsý\t%d\n", URUN_GATE);
	strcat(string, row);

	format(row, sizeof(row), "Hýzlý Motor Çalýþtýrma\t%d\n", URUN_HIZLIMOTOR);
	strcat(string, row);

	format(row, sizeof(row), "Birlik Tipi Deðiþtirme\t%d\n", URUN_BIRLIK_TIPI);
	strcat(string, row);

	format(row, sizeof(row), "Birlik Adý Deðiþtirme\t%d\n", URUN_BIRLIK_ADI);
	strcat(string, row);

	format(row, sizeof(row), "OOC Sicil Sýfýrlama\t%d\n", URUN_OOCSICIL);
	strcat(string, row);

	format(row, sizeof(row), "Premium Slot\t%d\n", URUN_PREMIUMSLOT);
	strcat(string, row);

	format(row, sizeof(row), "Soyadý Kilitleme\t%d\n", URUN_SOYAD);
	strcat(string, row);


	new header[256];
	format(header, sizeof(header), "{FF8282}MARKET: {FFFFFF}Toplam {FF8282}%d {FFFFFF}krediniz bulunmaktadýr.", PlayerData[playerid][pVCoin]);
	Dialog_Show(playerid, KrediMarket, DIALOG_STYLE_TABLIST_HEADERS, header, string, "Satýn Al", "Kapat");
	return 1;
}

Dialog:KrediMarket(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_ISIM_DEGISTIRME)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

	            Dialog_Show(playerid, nrn, DIALOG_STYLE_INPUT, "OOC Market", "Baþarýyla isim deðiþikliðini satýn aldýn!\nLütfen yeni isim girin.\n - Ad_Soyad tarzýnda olmalý.\n - Yabancý ad soyad olmalý.\n - Ünlü adý olmamalý.", "Deðiþtir", "{FF6347}Iptal");
				PlayerData[playerid][pVCoin] -= URUN_ISIM_DEGISTIRME;
	        }
	        case 1:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_KOKEN_DEGISTIRME)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

                //Urun_Ekle(playerid, "Koken Degistirme");
	            PlayerData[playerid][pVCoin] -= URUN_KOKEN_DEGISTIRME;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 2:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_DOGUMTARIHI_DEGISTIRME)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

                //Urun_Ekle(playerid, "Dogum Tarihi Degistirme");
                PlayerData[playerid][pVCoin] -= URUN_DOGUMTARIHI_DEGISTIRME;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
			}
	        case 3:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_OZEL_NUMARA)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

	            //Urun_Ekle(playerid, "Ozel Numara");
	            PlayerData[playerid][pVCoin] -= URUN_OZEL_NUMARA;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 4:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_DIL_SIFIRLAMA)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

	            //Urun_Ekle(playerid, "Dil Sifirlama");
	            PlayerData[playerid][pVCoin] -= URUN_DIL_SIFIRLAMA;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 5:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_KARAKTER_SIFIRLAMA)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

	            //Urun_Ekle(playerid, "Karakter Sifirlama");
	            PlayerData[playerid][pVCoin] -= URUN_KARAKTER_SIFIRLAMA;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 6:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_MASKE_KULLANIMI)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

	            //Urun_Ekle(playerid, "Maske Kullanimi");
                PlayerData[playerid][pVCoin] -= URUN_MASKE_KULLANIMI;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 7:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_BISIKLET)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

	            //Urun_Ekle(playerid, "Bisiklet Olusturma");
                PlayerData[playerid][pVCoin] -= URUN_BISIKLET;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 8:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_GATE)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

				//Urun_Ekle(playerid, "Gate/Garaj Kapisi (Sinirsiz)");
                PlayerData[playerid][pVCoin] -= URUN_GATE;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 9:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_HIZLIMOTOR)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

                //Urun_Ekle(playerid, "Hizli Motor Calistirma");
            	PlayerData[playerid][pVCoin] -= URUN_HIZLIMOTOR;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 10:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_BIRLIK_TIPI)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

				//Urun_Ekle(playerid, "Birlik Tipi Degistirme");
                PlayerData[playerid][pVCoin] -= URUN_BIRLIK_TIPI;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 11:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_BIRLIK_ADI)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

				//Urun_Ekle(playerid, "Birlik Adi Degistirme");
                PlayerData[playerid][pVCoin] -= URUN_BIRLIK_ADI;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 12:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_OOCSICIL)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

				//Urun_Ekle(playerid, "OOC Sicil Sifirlama");
                PlayerData[playerid][pVCoin] -= URUN_OOCSICIL;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 13:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_PREMIUMSLOT)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

			    //Urun_Ekle(playerid, "Ozel Karakter Slotu");
                PlayerData[playerid][pVCoin] -= URUN_PREMIUMSLOT;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
	        }
	        case 14:
	        {
	            if(PlayerData[playerid][pVCoin] < URUN_SOYAD)
	                return SendErrorMessage(playerid, "Bu ürünü satýn almak için yeterli krediniz yok.");

                //Urun_Ekle(playerid, "Soyadi Kilitleme");
            	PlayerData[playerid][pVCoin] -= URUN_SOYAD;
				SendErrorMessage(playerid, "Ürün baþarýyla satýn alýndý. (/urunlerim)");
 	}
	return 1;
}*/

Dialog:Yardim(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new string[2056], baslik[24];
		format(baslik, sizeof(baslik), "{ff9933} < %s", inputtext);

        for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
		{
	 		if (Komutlar[i][komutVarmi] && Komutlar[i][komutKatagori] == listitem && Komutlar[i][komutOlusum] == -1)
			{
				new komutstr[512];
				format(komutstr, sizeof(komutstr), "{FF6347} %s »» :{FFFFFF}%s\n", Komutlar[i][komutAd], Komutlar[i][komutTanim]);
				strcat(string, komutstr);
			}
		}
		if(strfind(inputtext, "Birlik", true) != -1) {
		    if (GetFactionType(playerid) == FACTION_POLICE) {
			    for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
				{
			 		if (Komutlar[i][komutVarmi] && Komutlar[i][komutKatagori] == listitem && Komutlar[i][komutOlusum] == FACTION_POLICE)
					{
						new komutstr[512];
						format(komutstr, sizeof(komutstr), "{FF6347} %s »» :{FFFFFF}%s\n", Komutlar[i][komutAd], Komutlar[i][komutTanim]);
						strcat(string, komutstr);
					}
				}
 		    }
			else if (GetFactionType(playerid) == FACTION_NEWS) {
			   for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
				{
			 		if (Komutlar[i][komutVarmi] && Komutlar[i][komutKatagori] == listitem && Komutlar[i][komutOlusum] == FACTION_NEWS)
					{
						new komutstr[512];
						format(komutstr, sizeof(komutstr), "{FF6347} %s »» :{FFFFFF}%s\n", Komutlar[i][komutAd], Komutlar[i][komutTanim]);
						strcat(string, komutstr);
					}
				}
			}
	  		else if (GetFactionType(playerid) == FACTION_MEDIC) {
	 		    for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
				{
			 		if (Komutlar[i][komutVarmi] && Komutlar[i][komutKatagori] == listitem && Komutlar[i][komutOlusum] == FACTION_MEDIC)
					{
						new komutstr[512];
						format(komutstr, sizeof(komutstr), "{FF6347} %s »» :{FFFFFF}%s\n", Komutlar[i][komutAd], Komutlar[i][komutTanim]);
						strcat(string, komutstr);
					}
				}
			}
			else if (GetFactionType(playerid) == FACTION_GOV) {
	 		    for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
				{
			 		if (Komutlar[i][komutVarmi] && Komutlar[i][komutKatagori] == listitem && Komutlar[i][komutOlusum] == FACTION_GOV)
					{
						new komutstr[512];
						format(komutstr, sizeof(komutstr), "{FF6347} %s »» :{FFFFFF}%s\n", Komutlar[i][komutAd], Komutlar[i][komutTanim]);
						strcat(string, komutstr);
					}
				}
			}
			else if (GetFactionType(playerid) == FACTION_GANG && FactionData[PlayerData[playerid][pFaction]][gTip] == GTIP_HITMAN) {
	 		    for (new i = 0; i != MAX_YARDIM_KOMUTLARI; i ++)
				{
			 		if (Komutlar[i][komutVarmi] && Komutlar[i][komutKatagori] == listitem && Komutlar[i][komutOlusum] == FACTION_GANG)
					{
						new komutstr[512];
						format(komutstr, sizeof(komutstr), "{FF6347} %s »» :{FFFFFF}%s\n", Komutlar[i][komutAd], Komutlar[i][komutTanim]);
						strcat(string, komutstr);
					}
				}
			}
		}
		Dialog_Show(playerid, YardimGeriTusu, DIALOG_STYLE_MSGBOX, baslik, string, "Tamam", "{FF6347}<< Geri");
	}
	return 1;
}

Dialog:YardimGeriTusu(playerid, response, listitem, inputtext[])
{
	if(!response) cmd_yardim(playerid, "\1");
	return 1;
}

CMD:iayril(playerid, params[])
{
    if (PlayerData[playerid][pBizJob] == -1) return SendErrorMessage(playerid, "Herhangi bir iþyeri çalýþaný deðilsin.");

	SendServerMessage(playerid, "\"%s\" adlý iþyerinin çalýþanlýðýndan ayrýldýn.", BusinessData[PlayerData[playerid][pBizJob]][bizName]);
	PlayerData[playerid][pBizJob] = -1;
	PlayerData[playerid][pBizRank] = 0;
	PlayerData[playerid][pBizJobID] = -1;
	return 1;
}

CMD:tv(playerid, params[])
{
	if(!YayinVeri[YayinDurum]) return SendErrorMessage(playerid, "Aktif bir yayýn yok.");
	new id = House_Inside(playerid);
	new idx = Business_Inside(playerid);
	if(GetPVarInt(playerid, "TV") == 0)
	{
	    if(id == -1 && idx == -1) return SendErrorMessage(playerid, "Yayýný izleyebilmek için ev veya iþyerinde olmalýsýn.");
	   	SetPVarInt(playerid, "pInt", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "pVW", GetPlayerVirtualWorld(playerid));
		GetPlayerPos(playerid, Dx[playerid], Dy[playerid],  Dz[playerid]);
	    new Float:ayy[2];
		GetPlayerHealth(playerid, ayy[0]);
		GetPlayerArmour(playerid, ayy[1]);
	    SetPVarFloat(playerid, "EskiCan", ayy[0]);
	    SetPVarFloat(playerid, "EskiZirh", ayy[1]);
		SetPVarInt(playerid, "TV", 1);
		for (new i = 0; i < 100; i ++) {
	    SendClientMessage(playerid, -1, "");
		}
  		YayinGuncelle(playerid);
		SendServerMessage(playerid, "Televizyonu izlemeye baþladýn.");
	}
	else
	{
	    YayinBitir(playerid);
	    SetPVarInt(playerid, "TV", 0);
	    SendServerMessage(playerid, "Televizyonu izlemeyi býraktýn.");
	}
	return 1;
}

CMD:yayinmenu(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Haberci deðilsin.");

    new string[1024];
	strcat(string, "Ýþlem Adý\tDurum\n");
	new reyting[128], sayi;
	new pmdurumu[128], toplamoyuncu[128];
	foreach(new i : Player) { if(GetPVarInt(i, "TV") == 1) sayi++; }
	format(reyting, sizeof(reyting), "{D0AEEB}Yayýný Ýzleyen Kiþi Sayýsý (Reyting)\t{33CC33}%d\n", sayi);
	strcat(string, reyting);
	if(YayinVeri[YayinDurum]) format(pmdurumu, 24, "{228B22}Açýk");
 	else format(pmdurumu, 24, "{8B0000}Kapalý");
	format(toplamoyuncu, sizeof(toplamoyuncu), "Yayýný Baþlat/Durdur\t%s\n", pmdurumu);
	strcat(string, toplamoyuncu);
	strcat(string, "Kameranýn Yerini Deðiþtir\n");
	strcat(string, "Kameranýn Baktýðý Yeri Deðiþtir\n");
	strcat(string, "Altyazý Deðiþtir\n");
	strcat(string, "Ekstra Metini Deðiþtir\n");
	strcat(string, "Yayýn Adýný Deðiþtir\n");
 	if(strlen(YayinVeri[YayinURL]) > 0) format(pmdurumu, 24, "{228B22}Açýk");
 	else format(pmdurumu, 24, "{8B0000}Kapalý");
	format(toplamoyuncu, sizeof(toplamoyuncu), "Müzik Deðiþtir\t%s\n", pmdurumu);
	strcat(string, toplamoyuncu);
	Dialog_Show(playerid, YayinMenu, DIALOG_STYLE_TABLIST_HEADERS, "{33CC33}Yayýn Menü", string, "Tamam", "Kapat");
	return 1;
}

Dialog:YayinMenu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if(listitem == 1)
		{
			if(!YayinVeri[YayinDurum])
			{
			    YayinVeri[YayinDurum] = true;
				SendClientMessageToAllEx(COLOR_ORANGE,"{33CC33} NTV yayýnýna baþladý, evinize veya iþyerlerine giderek yayýný izleyebilirsiniz.");
			}
			else {
				YayinVeri[YayinDurum] = false;
				SendServerMessage(playerid, "Yayýn kapatýldý.");
			}
		}
	    if(listitem == 2)
		{
		    new Float:pos[4];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			GetPlayerFacingAngle(playerid, pos[3]);
			YayinVeri[yayinVW] = GetPlayerVirtualWorld(playerid);
			YayinVeri[yayinInterior] = GetPlayerInterior(playerid);
		 	if (IsValidDynamicObject(YayinVeri[YayinObject]))
	        	DestroyDynamicObject(YayinVeri[YayinObject]);

            YayinVeri[YayinObject] = CreateDynamicObject(1253, pos[0], pos[1], pos[2]+2, 0.0, 0.0, pos[3]+90);
            for(new iq; iq < 3; iq++) YayinVeri[cPos][iq] = pos[iq];
            SendServerMessage(playerid, "Kamera noktasý deðiþtirildi.");

            foreach(new i : Player)	{ if(GetPVarInt(i, "TV") == 1) YayinGuncelle(i); }
		}
		if(listitem == 3)
		{
	       new
	            Float:fPX, Float:fPY, Float:fPZ,
	            Float:fVX, Float:fVY, Float:fVZ,
	            Float:object_x, Float:object_y, Float:object_z;

	        // Change me to change the scale you want. A larger scale increases the distance from the camera.
	        // A negative scale will inverse the vectors and make them face in the opposite direction.
	        const
	            Float:fScale = 5.0;

	        GetPlayerCameraPos(playerid, fPX, fPY, fPZ);
	        GetPlayerCameraFrontVector(playerid, fVX, fVY, fVZ);

	        object_x = fPX + floatmul(fVX, fScale);
	        object_y = fPY + floatmul(fVY, fScale);
	        object_z = fPZ + floatmul(fVZ, fScale);

            YayinVeri[lPos][0] = object_x	;
            YayinVeri[lPos][1] = object_y;
            YayinVeri[lPos][2] = object_z;
            SendServerMessage(playerid, "Kamera bakýþ noktasý sizin bakýþ açýnýz olarak deðiþtirildi.");
            foreach(new i : Player)	{ if(GetPVarInt(i, "TV") == 1) YayinGuncelle(i); }
		}
		if(listitem == 4)
		{
			Dialog_Show(playerid, AltYazi, DIALOG_STYLE_INPUT, "{33CC33}Altyazý Deðiþtir", "{FFFFFF}Yeni altyazý girin;\nÞu anki: %s", "Deðiþtir", "<< Geri", YayinVeri[YayinAltyazi]);
		}
		if(listitem == 5)
		{
			Dialog_Show(playerid, EkstraYazi, DIALOG_STYLE_INPUT, "{33CC33}Ekstra Metini Deðiþtir", "{FFFFFF}Yeni ekstra metini girin;\nÞu anki: %s", "Deðiþtir", "<< Geri", YayinVeri[YayinEkstra]);
		}
		if(listitem == 6)
		{
			Dialog_Show(playerid, YayinAdi, DIALOG_STYLE_INPUT, "{33CC33}Yayýn Adý Deðiþtir", "{FFFFFF}Yeni yayýn adý girin;\nÞu anki: %s", "Deðiþtir", "<< Geri", YayinVeri[YayinAdi]);
		}
		if(listitem == 7)
		{
		    if(strlen(YayinVeri[YayinURL]) != 0)
		    {
				strdel(YayinVeri[YayinURL], 0, sizeof(YayinVeri[YayinURL]));
				SendServerMessage(playerid, "Müzik kaldýrýldý.");
				foreach(new i : Player)	{ if(GetPVarInt(i, "TV") == 1) YayinGuncelle(i); }
			}
			else {
			Dialog_Show(playerid, YayinMuzik, DIALOG_STYLE_INPUT, "{33CC33}Müzik Deðiþtir", "{FFFFFF}Müzik URL girin [mp3 uzantýlý];\nÞu anki: %s", "Deðiþtir", "<< Geri", YayinVeri[YayinURL]);
			}
		}
	}
}

Dialog:AltYazi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if(isnull(inputtext)) return SendErrorMessage(playerid, "Boþ býrakýlamaz.");
	    if(strlen(inputtext) > 128) return SendErrorMessage(playerid, "Yazý 128 karakterden uzun olamaz.");
 		SendServerMessage(playerid, "Altyazý deðiþtirildi.");
		format(YayinVeri[YayinAltyazi], 128, inputtext);
	    cmd_yayinmenu(playerid, "\1");
	} else cmd_yayinmenu(playerid, "\1");
	return 1;
}


Dialog:YayinAdi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if(isnull(inputtext)) return SendErrorMessage(playerid, "Boþ býrakýlamaz.");
	    if(strlen(inputtext) > 24) return SendErrorMessage(playerid, "Yazý 24 karakterden uzun olamaz.");
		SendServerMessage(playerid, "Yayýn adý deðiþtirildi.");
		format(YayinVeri[YayinAdi], 128, inputtext);
		cmd_yayinmenu(playerid, "\1");
	} else cmd_yayinmenu(playerid, "\1");
	return 1;
}


Dialog:EkstraYazi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if(isnull(inputtext)) return SendErrorMessage(playerid, "Boþ býrakýlamaz.");
	    if(strlen(inputtext) > 64) return SendErrorMessage(playerid, "Yazý 64 karakterden uzun olamaz.");
		SendServerMessage(playerid, "Ekstra kutu deðiþtirildi.");
		format(YayinVeri[YayinEkstra], 128, inputtext);
		cmd_yayinmenu(playerid, "\1");
	} else cmd_yayinmenu(playerid, "\1");
	return 1;
}


Dialog:YayinMuzik(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if(isnull(inputtext)) return SendErrorMessage(playerid, "Boþ býrakýlamaz.");
		    if(strlen(inputtext) > 256) return SendErrorMessage(playerid, "Yazý 256 karakterden uzun olamaz.");
			SendServerMessage(playerid, "Müzik URL (%s) olarak deðiþtirildi.", inputtext);
			format(YayinVeri[YayinURL],  256, inputtext);
			foreach(new i : Player)	{ if(GetPVarInt(i, "TV") == 1) YayinGuncelle(i); }

	} else cmd_yayinmenu(playerid, "\1");
	return 1;
}



stock YayinGuncelle(playerid)
{
	if(GetPVarInt(playerid, "TV") == 1)
	{
	    new Float:posaf[4];
	    TogglePlayerSpectating(playerid, true);
        GetPlayerCameraPos(playerid, posaf[0], posaf[1], posaf[2]);
		InterpolateCameraPos(playerid, posaf[0], posaf[1], posaf[2], YayinVeri[cPos][0], YayinVeri[cPos][1], YayinVeri[cPos][2], 1000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, posaf[0], posaf[1], posaf[2], YayinVeri[lPos][0], YayinVeri[lPos][1], YayinVeri[lPos][2], 1000, CAMERA_MOVE);

		TextDrawSetString(Yayin[8], YayinVeri[YayinAltyazi]);
        TextDrawSetString(Yayin[7], YayinVeri[YayinAdi]);
		TextDrawSetString(Yayin[10], YayinVeri[YayinEkstra]);
		SetPlayerVirtualWorld(playerid, YayinVeri[yayinVW]);
		SetPlayerInterior(playerid, YayinVeri[yayinInterior]);
		if(strlen(YayinVeri[YayinURL]) == 0) StopAudioStreamForPlayer(playerid);
		else PlayAudioStreamForPlayer(playerid, YayinVeri[YayinURL]);
		for(new i; i < 11; i++) TextDrawShowForPlayer(playerid, Yayin[i]);
	}
}

stock YayinBitir(playerid)
{
   	SetWeapons(playerid);
 	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pVW"));
 	SetPlayerInterior(playerid, GetPVarInt(playerid, "pInt"));
 	JBC_SetPlayerPos(playerid, Dx[playerid], Dy[playerid],  Dz[playerid]);
	SetWeapons(playerid);
	CanDegistir(playerid, GetPVarFloat(playerid, "EskiCan"));
	ZirhDegistir(playerid, GetPVarFloat(playerid, "EskiZirh"));
	SetPVarInt(playerid, "TV", 0);
	SetCameraBehindPlayer(playerid);
	TogglePlayerSpectating(playerid, false);
	StopAudioStreamForPlayer(playerid);
	for(new i; i < 11; i++) TextDrawHideForPlayer(playerid, Yayin[i]);
}

Dialog:Urunlerim(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if(strfind(inputtext, "Birlik Adi", true) != -1)
	    {
			if(PlayerData[playerid][pFaction] == -1 || PlayerData[playerid][pFactionRank] != 10 || GetFactionType(playerid) != FACTION_GANG) return SendErrorMessage(playerid, "Ýsmini deðiþtirebileceðin bir birlikte deðilsin.");
			Dialog_Show(playerid, Market_BNC, DIALOG_STYLE_INPUT, "{2F4F4F}Market - {FFFFFF}Birlik Adý Deðiþtirme","{FFFFFF}Lütfen birliðinizin yeni adýný girin:", "Deðiþtir", "{FF6347}Iptal");
	    }
	    if(strfind(inputtext, "Birlik Tipi", true) != -1)
	    {
			if(PlayerData[playerid][pFaction] == -1 || PlayerData[playerid][pFactionRank] != 10 || GetFactionType(playerid) != FACTION_GANG) return SendErrorMessage(playerid, "Ýsmini deðiþtirebileceðin bir birlikte deðilsin.");
			Dialog_Show(playerid, Market_BTD, DIALOG_STYLE_LIST, "{2F4F4F}Market - {FFFFFF}Birlik Tipi Deðiþtirme","{FFFFFF}Çete\nMafya\nYarýþ\nLegal/Þirket", "Deðiþtir", "{FF6347}Iptal");
	    }
	    if(strfind(inputtext, "Dil", true) != -1)
	    {
			Dialog_Show(playerid, Market_Dil, DIALOG_STYLE_MSGBOX, "{2F4F4F}Market - {FFFFFF}Dil Sýfýrlama","{FFFFFF}Ýkinci dilinizi sýfýrlamak istiyor musunuz?", "Evet", "Hayýr");
	    }
	    if(strfind(inputtext, "Ozel Numara", true) != -1)
	    {
			Dialog_Show(playerid, Market_Telefon, DIALOG_STYLE_INPUT, "{2F4F4F}Market - {FFFFFF}Özelleþtirilmiþ Numara","{FFFFFF}Lütfen istediðiniz numarayý giriniz (5 haneli):", "Deðiþtir", "{FF6347}Iptal");
	    }
	   	if(strfind(inputtext, "Gate", true) != -1)
	    {
			new id = Gate_Create(playerid);
			GateData[id][gateOwner] = PlayerData[playerid][pID];
			SendErrorMessage(playerid, "Gate / kapý oluþturuldu, '/gatelerim' ile yönetebilirsiniz.");
			Urun_Sil(playerid, "Gate/Garaj Kapisi (Sinirsiz)", 1);
	    }
	    if(strfind(inputtext, "Sicil", true) != -1)
	    {
			new query[128];
   			format(query, sizeof(query), "DELETE FROM `kickbanlog` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
  			mysql_tquery(g_iHandle, query);

			SendErrorMessage(playerid, "OOC siciliniz sýfýrlandý.");
			Urun_Sil(playerid, "OOC Sicil Sifirlama", 1);
	    }
	    if(strfind(inputtext, "Plaka", true) != -1)
	    {
			if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Sahibi olduðun bir araçta olmalýsýn.");
			Dialog_Show(playerid, Market_OAP, DIALOG_STYLE_INPUT, "{2F4F4F}Market - {FFFFFF}Özelleþtirilmiþ Araç Plakasý","{FFFFFF}Lütfen istediðiniz araç plakasýný girin;\n\nNOT: Format (AAA 111) þeklinde olmalý. Ýlk satýr harf, ikincisi\nrakam olmalýdýr. Aralarýnda boþluk yapýn.", "Ayarla", "{FF6347}Iptal");
		}
	    if(strfind(inputtext, "Slot", true) != -1)
	    {
	        new user_id = -1, querye[512], Cache: owner_query, string[1024];
			mysql_format(g_iHandle, querye, sizeof(querye), "SELECT `ID` FROM `accounts` WHERE `Username` = '%s'", PlayerData[playerid][pUsername]);
			owner_query = mysql_query(g_iHandle, querye);
			if(cache_num_rows()) user_id = cache_get_field_content_int(0, "ID");
			cache_delete(owner_query);
   	    	format(string, sizeof(string), "UPDATE `accounts` SET `ExtraSlot` = '1' WHERE `ID` = '%d'", user_id);
			mysql_tquery(g_iHandle, string);
			Urun_Sil(playerid, "Ozel Karakter Slotu", 1);
			SendServerMessage(playerid, "Premium slot ürününüz aktif edildi, relog atýp yeni karakter oluþturabilirsiniz.");
        }
		if(strfind(inputtext, "Hizli Motor Calistirma", true) != -1)
	    {
			SendServerMessage(playerid, "Bu ürünün çalýþmasý için üzerinizde olmasý yeterlidir.");
		}
		if(strfind(inputtext, "Maske Kullanimi", true) != -1)
	    {
			SendServerMessage(playerid, "Bu ürünün çalýþmasý için üzerinizde olmasý yeterlidir.");
		}
		if(strfind(inputtext, "Kaykay Kullanimi", true) != -1)
	    {
			SendServerMessage(playerid, "Bu ürünün çalýþmasý için üzerinizde olmasý yeterlidir.");
		}
		if(strfind(inputtext, "Karakter Sifirlama", true) != -1)
	    {
		    PlayerData[playerid][pLevel] = 1;
		    PlayerData[playerid][pEXP] = 0;
		    SendServerMessage(playerid, "Karakterinizin seviyesi sýfýrlandý.");
		    Urun_Sil(playerid, "Karakter Sifirlama", 1);
		}
		if(strfind(inputtext, "Soyadi Kilitleme", true) != -1)
	    {
		    Dialog_Show(playerid, Market_Soyad, DIALOG_STYLE_INPUT, "{2F4F4F}Market - {FFFFFF}Soyadý Kilitleme","{FFFFFF}'%s' soyadýný kullanýma kapatmak istiyor musun?", "Evet", "{FF6347}Hayýr", GetPlayerLastName(playerid, ReturnName(playerid)));

		}
	}
	return 1;
}


CMD:aksesuarbugfix(playerid, params[])
{
PlayerData[playerid][pAksesuar] = 1;
return 1;
}
Dialog:Market_Soyad(playerid, response, listitem, inputtext[])
{
	if(response) {
        new
		    query[512];

		format(query, sizeof(query), "INSERT INTO `kilitlisoyadlar` (`Soyad`, `Kilitleyen`, `Tarih`) VALUES('%s', '%s', '%s')", GetPlayerLastName(playerid, ReturnName(playerid)), ReturnName(playerid), ReturnDate());
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Soyadýnýz kilitlendi.");
   		Urun_Sil(playerid, "Soyadi Kilitleme", 1);
	}
	return 1;
}

Dialog:Market_BNC(playerid, response, listitem, inputtext[])
{
	if(response) {
	    if (isnull(inputtext) || strlen(inputtext) < 4)
		    return SendErrorMessage(playerid, "Geçerli bir isim belirtmediniz.");

		if(PlayerData[playerid][pFaction] == -1 || PlayerData[playerid][pFactionRank] != 10 || GetFactionType(playerid) != FACTION_GANG) return 1;

		new factionid = PlayerData[playerid][pFaction];
		Urun_Sil(playerid, "Birlik Adi Degistirme", 1);
		format(FactionData[factionid][factionName], 24, inputtext);
		SendErrorMessage(playerid, "Birlik Adý Deðiþtirme Hakkýnýzý kullandýnýz ve birlik adý deðiþtirildi.");
		Faction_Save(factionid);
	}
	return 1;
}




CMD:forpawn(playerid, params[])
{
	static
	    userid,
		reason[128],
		query[512];

    if (!PlayerData[playerid][pAksesuar])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/forpawn [id] [sebep]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendinizi yasaklayamazsýnýz.");


 	foreach (new i : Player) {
		if (!strcmp(PlayerData[i][pIP], PlayerData[userid][pIP]) && i != userid) {
		    KickEx(i);
		}
	}
	if(PlayerData[userid][pLevel] >= 3)
	{
		format(query, sizeof(query), "INSERT INTO `kickbanlog` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '%d')",  PlayerData[userid][pID], ReturnDate(), reason, ReturnName(playerid), SICIL_BAN);
		mysql_tquery(g_iHandle, query);
	}

	Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], "", PlayerData[playerid][pUsername], reason);
	PlayerData[ playerid ][ aTBan ]++;
	KickEx(userid);
	return 1;
}




Dialog:Market_BTD(playerid, response, listitem, inputtext[])
{
	if(response) {
		if(PlayerData[playerid][pFaction] == -1 || PlayerData[playerid][pFactionRank] != 10 || GetFactionType(playerid) != FACTION_GANG) return 1;
		new factionid = PlayerData[playerid][pFaction];
		SendErrorMessage(playerid, "Birlik Tipi Deðiþtirme Hakkýnýzý kullandýnýz ve birlik tipi deðiþtirildi.");
		Urun_Sil(playerid, "Birlik Tipi Degistirme", 1);
		FactionData[factionid][gTip] = listitem+1;
	}
	return 1;
}

Dialog:Market_OAP(playerid, response, listitem, inputtext[])
{
	if(response) {
		if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Aracýn içinde olmalýsýn.");
		new vehicleid = GetPlayerVehicleID(playerid);
		new id = Car_GetID(vehicleid);
  		if(strlen(inputtext) < 3|| strlen(inputtext) > 7) return SendErrorMessage(playerid, "Geçersiz format girdiniz.");
  		for (new i = 1; i != MAX_VEHICLES; i ++)
		{
			new carid = Car_GetID(i);
			if(carid == -1) continue;
			if ( !strcmp(CarData[carid][carPlaka], inputtext, true) ) return SendErrorMessage(playerid, "Bu araç plakasý kullanýlýyor.");
			break;
		}
    	format(CarData[id][carPlaka], 256, "%s", inputtext);
		SetVehicleNumberPlate(vehicleid, CarData[id][carPlaka]);
		RespawnVehicle(vehicleid);
		SendServerMessage(playerid, "Plaka %s olarak deðiþtirildi!", inputtext);
	}
	return 1;
}

Dialog:Market_Cinsiyet(playerid, response, listitem, inputtext[])
{
    if(response)
	{
	    PlayerData[playerid][pGender] = listitem + 1;
	    SendErrorMessage(playerid, "{2ECC71}$3500 {FFFFFFF}ödediniz ve ve cinsiyetiniz '%s' olarak deðiþtirildi.", (PlayerData[playerid][pGender] == 2) ? ("Kadin") : ("Erkek"));
       // Urun_Sil(playerid, "Cinsiyet Degistirme", 1);
       GiveMoney(playerid, -3500);
 	}
	return 1;
}

Dialog:Market_DT(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			iDay,
			iMonth,
			iYear;

	    static const
	        arrMonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

	    if (sscanf(inputtext, "p</>ddd", iDay, iMonth, iYear)) return SendErrorMessage(playerid, "Geçersiz format!");
		else if (iYear < 1900 || iYear > 2014) return SendErrorMessage(playerid, "Geçersiz format!");
		else if (iMonth < 1 || iMonth > 12)  return SendErrorMessage(playerid, "Geçersiz format!");
		else if (iDay < 1 || iDay > arrMonthDays[iMonth - 1]) return SendErrorMessage(playerid, "Geçersiz format!");
		else {
			format(PlayerData[playerid][pBirthdate], 24, inputtext);
	        //Urun_Sil(playerid, "Dogum Tarihi Degistirme", 1);
	        GiveMoney(playerid, -2500);
			SendServerMessage(playerid, "{2ECC71}$2500 {FFFFFFF}ödediniz ve doðum tarihiniz '%s' olarak deðiþtirildi.", inputtext);
		}
	}
	return 1;
}


Dialog:Market_Koken(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    format(PlayerData[playerid][pOrigin], 32, inputtext);
	    GiveMoney(playerid, -2500);
		SendServerMessage(playerid, "{2ECC71}$2500 {FFFFFFF}ödediniz ve kökeniniz '%s' olarak deðiþtirildi.", inputtext);
		//Urun_Sil(playerid, "Koken Degistirme", 1);
	}
	return 1;
}


Dialog:Market_Dil(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    PlayerData[playerid][pEkstraDil] = 0;
     	SendErrorMessage(playerid, "Dil Sýfýrlama Hakký ürününüzden bir tanesini kullandýnýz ve ikinci diliniz sýfýrlandý.");
		Urun_Sil(playerid, "Dil Sifirlama", 1);
	}
	return 1;
}

Dialog:Market_Telefon(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if(isnull(inputtext) || strlen(inputtext) > 5  || strlen(inputtext) < 5 || !IsNumeric(inputtext)) return SendErrorMessage(playerid, "Geçerli telefon numarasý girdiniz.");
	    PlayerData[playerid][pPhone] = strval(inputtext);
		SendErrorMessage(playerid, "Özelleþtirilmiþ Numara Hakký ürününüzden bir tanesini kullandýnýz ve telefon numaranýz '%d' olarak deðiþtirildi.", strval(inputtext));
		Urun_Sil(playerid, "Ozel Numara", 1);
	}
	return 1;
}

Dialog:DisGorunus(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if(strlen(inputtext) > 256) return SendErrorMessage(playerid, "Dýþ görünüþ 250 karakterden uzun olamaz.");
		format(PlayerData[playerid][pGorunus], 256, inputtext);
		SendServerMessage(playerid, "Dýþ görünüþ deðiþtirildi.");
	}
	return 1;
}


CMD:gorunus(playerid, params[])
{
	Dialog_Show(playerid, DisGorunus, DIALOG_STYLE_INPUT, "{72C425}» Dýþ Görünüþ", "{FFFFFF}Ýstediðiniz yeni dýþ görünüþü girin: \nMaksimum karakter: 300", "Deðiþtir", "{FF6347}Iptal");
	return 1;
}
CMD:ayarlar(playerid, params[])
{
	new menu[640], baslik[MAX_PLAYER_NAME + 18];
	format(baslik, sizeof(baslik), "Hesap Ayarlarý - %s", ReturnName(playerid, 0));
	format(menu, sizeof(menu), "Seçenek\t\tÝþlem\n\
	Þifre Deðiþimi\t\t\n\
	Konuþma Animasyonu\t\t%s\n\
	Hýz Hudu\t\t%s\n\
	PM Kanalý\t\t%s\n\
	Duyuru Kanalý\t\t%s\n\
	Faction Konuþmalarý\t\t%s", kapatac(PlayerData[playerid][pDisableSpeedo]), kapatac(PlayerData[playerid][pDisablePM]), kapatac(PlayerData[playerid][pDisableOOC]), kapatac(PlayerData[playerid][pDisableFaction]), kapatac(PlayerData[playerid][pDisableBC]));
	Dialog_Show(playerid, hesap, DIALOG_STYLE_TABLIST_HEADERS, baslik, menu, "Tamam", "Vazgeç");
	return 1;
}
Dialog:hesap(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
            Dialog_Show(playerid, ChangePassword, DIALOG_STYLE_PASSWORD, "Þifre Deðiþtirme Platformu", "Mevcut þifrenizi giriniz:", "Tamam", "Geri");
			}
			case 1:
			{
			    if (PlayerData[playerid][pChatAnimation])
			    {
					PlayerData[playerid][pChatAnimation] = 0;
		   			SendServerMessage(playerid, "Otomatik konuþma animini kapattýnýz, tekrar aktif etmek için /ayarlar komutunu kullanýn.");
				}
				else
				{
		  			PlayerData[playerid][pChatAnimation] = 1;
		     		SendServerMessage(playerid, "Otomatik konuþma animini aktif hale getirdiniz.");
				}
				cmd_ayarlar(playerid, inputtext);
			}
			case 2:
			{
			    if (!PlayerData[playerid][pDisableSpeedo])
			    {
			        for (new i = 34; i < 39; i ++) {
						PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
			    	}
			        PlayerData[playerid][pDisableSpeedo] = 1;
					SendServerMessage(playerid, "Hýz hudunu devre dýþýný býraktýnýz, tekrar aktif etmek için /ayarlar komutunu kullanýn.");
				}
				else
				{
				    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsSpeedoVehicle(GetPlayerVehicleID(playerid)))
				    {
				        for (new i = 34; i < 39; i ++) {
							PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			    		}
				    }
		  			PlayerData[playerid][pDisableSpeedo] = 0;
		     		SendServerMessage(playerid, "Hýz hudunu aktif hale getirdiniz.");
				}
				cmd_ayarlar(playerid, inputtext);
			}
			case 3:
			{
			    if (!PlayerData[playerid][pDisablePM])
			    {
					PlayerData[playerid][pDisablePM] = 1;
		   			SendServerMessage(playerid, "Özel mesaj alýmýný kapattýnýz, tekrar aktif etmek için /ayarlar komutunu kullanýn.");
				}
				else
				{
		  			PlayerData[playerid][pDisablePM] = 0;
		     		SendServerMessage(playerid, "Özel mesaj alýmýný aktif hale getirdiniz.");
				}
				cmd_ayarlar(playerid, inputtext);
			}
			case 4:
			{
			    if (!PlayerData[playerid][pDisableOOC])
			    {
			        PlayerData[playerid][pDisableOOC] = 1;
		         	SendServerMessage(playerid, "Duyuru kanalýný kapattýnýz, tekrar aktif etmek için /ayarlar komutunu kullanýn.");
				}
				else
				{
		  			PlayerData[playerid][pDisableOOC] = 0;
		  			SendServerMessage(playerid, "Duyuru kanalýný açtýnýz.");
				}
				cmd_ayarlar(playerid, inputtext);
			}
			case 5:
			{
			    if (PlayerData[playerid][pFaction] == -1) {
			        SendErrorMessage(playerid, "Her hangi bir birlik üyesi deðilsiniz.");
			        cmd_ayarlar(playerid, inputtext);
			        return 1;
				}

			    if (!PlayerData[playerid][pDisableFaction])
			    {
			        PlayerData[playerid][pDisableFaction] = 1;
					SendServerMessage(playerid, "OOC Faction kanalýnýzý kapattýnýz, tekrar aktif etmek için /ayarlar komutunu kullanýn.");
				}
				else
				{
		  			PlayerData[playerid][pDisableFaction] = 0;
		     		SendServerMessage(playerid, "Faction konuþmasýný aktif hale getirdiniz.");
				}
				cmd_ayarlar(playerid, inputtext);
			}
			case 6:
			{
			    if (!PlayerData[playerid][pDisableBC])
			    {
			        PlayerData[playerid][pDisableBC] = 1;
					SendServerMessage(playerid, "Canlý yayýný devre dýþý býraktýnýz, tekrar aktif etmek için /ayarlar komutunu kullanýn.");
				}
				else
				{
		  			PlayerData[playerid][pDisableBC] = 0;
		     		SendServerMessage(playerid, "Canlý yayýn kanalýný tekrar aktif hale getirdiniz.");
				}
				cmd_ayarlar(playerid, inputtext);
			}
		}
	}
	else {
	    SendServerMessage(playerid, "Hesabýnýzda iþlem yapmaktan vazgeçtiniz.");
	}
	return 1;
}


CMD:songiris(playerid, params[])
{
if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/songiris [Kullanýcý Adý]");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	mysql_function_query(g_iHandle, query, true, "OnLoginDate", "ds", playerid, params);

 	return 1;
}
/*CMD:acam(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsWindowedVehicle(vehicleid))
		return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz !");

	switch (CoreVehicles[vehicleid][vehWindowsDown])
	{
	    case true:
	    {
         	CoreVehicles[vehicleid][vehWindowsDown] = false;
	        ShowPlayerFooter(playerid, "Cam ~g~kapandi!");
	        SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracýn cam kapatma düðmesine basar ve camý kapatýr.", ReturnName(playerid, 0));
		}
		case false:
		{
		    CoreVehicles[vehicleid][vehWindowsDown] = true;
		    ShowPlayerFooter(playerid, "Cam ~r~acildi!");
		    SetVehicleParamsCarWindows(vehicleid, 0, 0, 0, 0);
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracýn cam açma düðmesine basar ve camý açar.", ReturnName(playerid, 0));
		}
	}
	return 1;
}*/

/*CMD:akapi(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz !");

	switch (CoreVehicles[vehicleid][vehKapilar])
	{
	    case false:
	    {
	        CoreVehicles[vehicleid][vehKapilar] = true;
	        ShowPlayerFooter(playerid, "Kapilar ~g~acildi!");
	        SetVehicleParamsCarDoors(vehicleid, 1, 1, 1, 1);
		}
		case true:
		{
		    CoreVehicles[vehicleid][vehKapilar] = false;
		    ShowPlayerFooter(playerid, "Kapilar ~r~kapandi");
		    SetVehicleParamsCarDoors(vehicleid, 0, 0, 0, 0);
		}
	}
	return 1;
}*/
CMD:arac(playerid, params[])
{
if(!strcmp(params, "motor", true)) // a motor
{
	new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz!");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Bu komutu sadece aracýn sürücü koltuðundayken kullanabilirsiniz!");

	if (CoreVehicles[vehicleid][vehFuel] < 1)
	    return SendErrorMessage(playerid, "Benzin bitmiþ, motor çalýþtýrýlamýyor!");

	if (ReturnVehicleHealth(vehicleid) <= 300)
	    return SendErrorMessage(playerid, "Araç kullanýlmaz halde olduðundan motor çalýþtýrýlamýyor!");
	if (Car_IsOwner(playerid, id) || PlayerData[playerid][pAdmin] >= 999 || Car_Birlik(playerid, id) || Car_Anahtar(playerid, id) || Car_Meslek(playerid, id) ||  vehicleid == PlayerData[playerid][pTestCar] || (PlayerData[playerid][pFaction] != -1 && GetFactionType(playerid) != FACTION_GANG && CarData[id][carFaction] == GetFactionType(playerid)))
	{
		switch (GetEngineStatus(vehicleid))
		{
		    case false:
		    {
				if (PlayerData[playerid][pHizliMotor])
				{
	     		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s anahtarý çevirir ve '%s' model aracýn motorunu çalýþtýrýr.", ReturnName(playerid, 0), ReturnVehicleModelName(GetVehicleModel(vehicleid)));
			        SetEngineStatus(vehicleid, true);
				    ShowPlayerFooter(playerid, "Motor ~g~calistirildi!");
				} else {
                    GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", 1500, 3);
                    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s anahtarý çevirir ve '%s' model aracýn motorunu açmaya çalýþýr.", ReturnName(playerid, 0), ReturnVehicleModelName(GetVehicleModel(vehicleid)));
                    SetTimerEx("MotorCalistir", 2 * 1000, false, "ud", playerid, vehicleid);
				}
			}
			case true:
			{
			    SetEngineStatus(vehicleid, false);
			    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s '%s' model aracýn motorunu kapatýr.", ReturnName(playerid, 0), ReturnVehicleModelName(GetVehicleModel(vehicleid)));
			}
		}
	}
	else SendErrorMessage(playerid, "Bu aracýn anahtarýna sahip deðilsin.");
	return 1;
}
if(!strcmp(params, "bagaj", true)) // a bagaj
{
	new
	    id = -1;

	if ((id = Car_Nearest(playerid)) != -1)
	{
	    if (IsVehicleImpounded(CarData[id][carVehicle]))
	        return SendErrorMessage(playerid, "Bu araç baðlanmýþ.");

	    if(Arac_VergiGecikmismi(GetPlayerVehicleID(playerid)))
			return SendErrorMessage(playerid, "Bu aracýn vergi ödemesi gecikmiþ, o yüzden kullanamazsýnýz.");

	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Önce araçtan inmen gereklidir.");

		if( GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		    return SendErrorMessage(playerid, "Bu komutu sadece dururken kullanabilirsiniz.");

		if (!IsDoorVehicle(CarData[id][carVehicle]))
		    return SendErrorMessage(playerid, "Bu aracýn bagajý yok.");

		if (CarData[id][carLocked])
		    return SendErrorMessage(playerid, "Bu araç/bagaj kilitli.");

         if ((GetFactionType(playerid) == FACTION_POLICE && CarData[id][carFaction] == FACTION_POLICE) || GetFactionType(playerid) == FACTION_INTEL && CarData[id][carFaction] == FACTION_INTEL)
  		{
       		Car_LSPDTrunk(playerid, CarData[id][carVehicle]);
       		return 1;
       	}
		if( Car_IsOwner(playerid, id) && (GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_GOV ) ) return SendErrorMessage(playerid, "Polisler bagaj özelliðini kullanamaz.");
		else if(Car_IsOwner(playerid, id) || ( !Car_IsOwner(playerid, id) && GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pFactionRank] > 5 )) Car_ShowTrunk(playerid, id);
		else SendErrorMessage(playerid, "Aracýn sahibi deðilsin.");
	}
	else SendErrorMessage(playerid, "Aracýna yakýn deðilsin.");
	return 1;
}
if(!strcmp(params, "kaput", true)) // a kaput
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsDoorVehicle(i))
	        return SendErrorMessage(playerid, "This vehicle doesn't have a hood.");

	    if (!GetHoodStatus(i))
		{
	        SetHoodStatus(i, true);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s elini kaputun altýna sokar ve mandalý çekerek kaputu açar.", ReturnName(playerid, 0));
	        ShowPlayerFooter(playerid, "Kaput ~g~acildi!");
		}
		else
		{
			SetHoodStatus(i, false);

	        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s elini kaputun üzerine koyar ve hafifce kaputu kapatýr.", ReturnName(playerid, 0));
	        ShowPlayerFooter(playerid, "Kaput ~r~kapandi");
		}
	    return 1;
	}
	SendErrorMessage(playerid, "Bu komutu kullanmak için bir aracýn yakýnýnda olmalýsýnýz !");
	return 1;
}
if(!strcmp(params, "tamir", true)) // a tamir
{
if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Araçta deðilsin.");
if(!IsPlayerInRangeOfPoint(playerid, 4.1, 2072.3440, -1831.4056, 13.5545)) // idlewood
if(!IsPlayerInRangeOfPoint(playerid, 4.1, 1025.2369,-1030.9207,32.0168)) // temple
if(!IsPlayerInRangeOfPoint(playerid, 4.1, 488.3592,-1732.6564,11.1894)) // east beach
        return SendErrorMessage(playerid, "Araç tamir etme noktasýnda deðilsiniz.");

if(GetMoney(playerid) < 100)
        return SendErrorMessage(playerid, "100 dolarýn bulunmuyor.");
new vehicleid = GetPlayerVehicleID(playerid);
if (GetEngineStatus(vehicleid))
        return SendErrorMessage(playerid, "Aracýn motoru kapalý deðil.");
GiveMoney(playerid, -100);
SendServerMessage(playerid, "Tamir iþlemi için $100 ödedin.");
TogglePlayerControllable(playerid, 0);
GameTextForPlayer(playerid, "ARAC TAMIR EDILIYOR...", 7500, 3);
return SetTimerEx("Player_RepairVehicle", 7500, false, "i", playerid);
}
if(!strcmp(params, "benzin", true)) // a benzin
{
new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pRefill] != INVALID_VEHICLE_ID)
	{
	    BusinessData[PlayerData[playerid][pGasStation]][bizVault] += PlayerData[playerid][pRefillPrice];
		Business_Save(PlayerData[playerid][pGasStation]);

        GiveMoney(playerid, -PlayerData[playerid][pRefillPrice]);

		SendServerMessage(playerid, "Aracýnýzýn benzin deposu $%d'a dolduruldu.", PlayerData[playerid][pRefillPrice]);
		TogglePlayerControllable(playerid,1);
        StopRefilling(playerid);

        return 1;
	}
	if (!vehicleid)
	    return SendErrorMessage(playerid, "Herhangi bir aracýn içinde deðilsin!");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Aracýn sürücüsü olmalýsýn!");

	if (GetEngineStatus(vehicleid))
	    return SendErrorMessage(playerid, "Önce motoru kapatman gerekir.");

	new id = Pump_Nearest(playerid);

	if (id != -1)
	{
		if (CoreVehicles[vehicleid][vehFuel] > 95)
			return SendErrorMessage(playerid, "Bu araca yakýt gerekmez.");

		if (IsPumpOccupied(id))
		    return SendErrorMessage(playerid, "Bu yakýt pompasý iþgal edilmiþ.");

		if (PumpData[id][pumpFuel] < 1)
   			return SendErrorMessage(playerid, "Bu pompada yakýt kalmamýþ.");

		PlayerData[playerid][pGasPump] = id;
		PlayerData[playerid][pGasStation] = PumpData[id][pumpBusiness];

		PlayerData[playerid][pRefill] = vehicleid;
		TogglePlayerControllable(playerid,0);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s benzin doldurmaya baþladý.", ReturnName(playerid, 0));
	}
	else
	{
		SendErrorMessage(playerid, "Herhangi bir yakýt pompasýna yakýn deðilsin.");
	}
	return 1;
}
if(!strcmp(params, "park", true)) // a park
{
new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "Aracýnýzýn içinde olmanýz gerekmektedir.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "Bu araç baðlanmýþ, bu iþlemi uygulayamazsýnýz.");

    if(Arac_VergiGecikmismi(carid))
		return SendErrorMessage(playerid, "Bu aracýn vergi ödemesi gecikmiþ, o yüzden kullanamazsýnýz.");

	new Float:health;
 	GetVehicleHealth(carid, health);
 	if(health < 750) return SendErrorMessage(playerid, "Aracý parkedebilmek için aracýn hasarsýz olmasý gerekmektedir.");
 	if(IsPlayerInRangeOfPoint(playerid, 100.0, 2086.4290,-1774.2683,13.3828)) return SendErrorMessage(playerid, "Idlewood'a araç park edemezsin!");
	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    //if(!spamProtect(playerid, "Binis", 160))
	      //  return SendErrorMessage(playerid, "Aracýnýzý 2 dakikada bir parkedebilirsiniz!");

	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "Sürücü deðilsin!");

        if (GetMoney(playerid) < 150)
	        return SendErrorMessage(playerid, "Araç park yeri satýn almak için $150 gereklidir!");

		GiveMoney(playerid, -150);
	    static
			g_arrSeatData[10] = {INVALID_PLAYER_ID, ...},
			g_arrDamage[4],
			seatid;

		GetVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		GetVehicleHealth(CarData[carid][carVehicle], health);

		foreach (new i : Player) if (IsPlayerInVehicle(i, CarData[carid][carVehicle])) {
		    seatid = GetPlayerVehicleSeat(i);

		    g_arrSeatData[seatid] = i;
		}
		GetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
		GetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

		Car_Save(carid);
		Car_Spawn(carid);
        SetPlayerArmedWeapon(playerid, 0);
		SendServerMessage(playerid, "%s model araç baþarýyla parkedildi.", ReturnVehicleName(CarData[carid][carVehicle]));

        UpdateVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		SetVehicleHealth(CarData[carid][carVehicle], health);
		CarData[carid][carDisplay] = true;
        SetVehicleVirtualWorld(CarData[carid][carVehicle], GetPlayerVirtualWorld(playerid));

		for (new i = 0; i < sizeof(g_arrSeatData); i ++) if (g_arrSeatData[i] != INVALID_PLAYER_ID) {
		    PutPlayerInVehicle(g_arrSeatData[i], CarData[carid][carVehicle], i);

		    g_arrSeatData[i] = INVALID_PLAYER_ID;
		}
	}
	else SendErrorMessage(playerid, "Parkedebileceðin birþeyin içinde deðilsin.");
	return 1;
}
if(!strcmp(params, "kilit", true)) //a kilit
{
new
	   id = -1;

    if ((id = Car_Nearest(playerid)) != -1)
	{
	    static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);

	    if (Car_IsOwner(playerid, id) || Car_Birlik(playerid, id) || Car_Anahtar(playerid, id) || (PlayerData[playerid][pFaction] != -1 && CarData[id][carFaction] != 5 && CarData[id][carFaction] == GetFactionType(playerid)))
	    {
			if (!CarData[id][carLocked])
			{
				CarData[id][carLocked] = true;
				Car_Save(id);
				GameTextForPlayer(playerid, "~r~Arac kilitlendi!", 1500, 6);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s yanýndaki aracý kilitler.", ReturnName(playerid, 0));
			}
			else
			{
				CarData[id][carLocked] = false;
				Car_Save(id);

				GameTextForPlayer(playerid, "~g~Aracin kilidi acildi!", 1500, 6);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s yanýndaki aracýn kilidini açar.", ReturnName(playerid, 0));
				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
			}
		}
		else SendErrorMessage(playerid, "Bu aracýn kilidini açamazsýn!");
	}
	else SendErrorMessage(playerid, "Herhangi bir araca yakýn deðilsin.");
	return 1;
}
if(!strcmp(params, "far", true)) //a far
{
new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz !");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Bu komutu sadece aracýn sürücü koltuðundayken kullanabilirsiniz !.");

	switch (GetLightStatus(vehicleid))
	{
	    case false:
	    {
	        SetLightStatus(vehicleid, true);
	        ShowPlayerFooter(playerid, "far ~g~ acildi!");
		}
		case true:
		{
		    SetLightStatus(vehicleid, false);
		    ShowPlayerFooter(playerid, "far ~r~ kapandi!");
		}
	}
	return 1;
}
if(!strcmp(params, "radyo", true)) //a radyo
{
new vehicleid = GetPlayerVehicleID(playerid);

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Herhangi bir araç sürmüyorsun.");

 if (!IsEngineVehicle(vehicleid))
	    return SendErrorMessage(playerid, "Bu araçta radyo yoktur.");

	Dialog_Show(playerid, Radio, DIALOG_STYLE_LIST, "Radyo Kanallarý", "Cultural\nOldies\nDiðer\nPop\nRhythm & Blues\nRock\nTalk\nUrban\nElectric\nURL Gir\nRadyoyu Kapat", "Seç", "{FF6347}Iptal");
	return 1;
}
if(!strcmp(params, "anahtarver", true)) // a anahtarver
{
new
     carid = GetPlayerVehicleID(playerid);

	new userid;

 	if (!IsEngineVehicle(carid))
		return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz !");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{

			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Sürücü deðilsin!");


        	if (sscanf(params, "i", userid))
		    	return SendSyntaxMessage(playerid, "/a anahtarver [id] ((9999 ID'sýný girerseniz anahtar kimsede kalmaz.))");

            if(userid == 9999)
			{
		    	CarData[carid][carAnahtar] = -1;
				SendServerMessage(playerid, "Anahtar tüm oyunculardan alýndý.");
			    return 0;
  			}

       		if (!IsPlayerConnected(userid) || !IsPlayerConnected(userid))
		    	return SendErrorMessage(playerid, "Böyle bir oyuncu yok.");

            if(CarData[carid][carKiralik]) return SendErrorMessage(playerid, "Araç kiralanabilirken anahtar veremezsin.");
		    CarData[carid][carAnahtar] = PlayerData[userid][pID];
			SendServerMessage(playerid, "Anahtar %s (%d) 'a ayarlandý. (Araç ID: %d )", ReturnName(userid), userid, carid);
			SendServerMessage(userid, "%s (%d) adlý oyuncu %d ID'lý aracýn anahtarýný sana verdi.", ReturnName(playerid), playerid, carid);

	}
	else
	{
     	SendErrorMessage(playerid, "Bu araç senin deðil.");
	}
	return 1;
}
if(!strcmp(params, "at", true)) // a at
{
	new State;
	if(IsPlayerInAnyVehicle(playerid))
	{
		State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)
		{
			SendClientMessage(playerid,COLOR_GREY,"   Þoför olarak sadece oturanlarý atabilirsin!");
			return 1;
		}

		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /a at [ID]");

		new test;
		test = GetPlayerVehicleID(playerid);
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendini atamazsýn!"); return 1; }
				if(IsPlayerInVehicle(giveplayerid,test))
				{
					//if(GetPVarInt(giveplayerid, "EMSAttempt") != 0) return SendClientMessage(playerid, COLOR_GRAD2, "Hastalarý atamazsýn!");
					SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s araçtaki þahýsý araçtan atar.", ReturnName(playerid, 0));
					RemovePlayerFromVehicle(giveplayerid);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Oyuncu arabada deðil!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Bunu kullanabilmek için bir araçta olman gerek!");
	}
	return 1;
}
	return 1; // a komutunun bitiþi
}

CMD:adminyap(playerid, params[])
{
	static
		userid,
	    level;
if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ud", userid, level))
		return SendSyntaxMessage(playerid, "/adminyap [id] [Seviye]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

if (level < 0 || level > 4)
	    return SendErrorMessage(playerid, "Maksimum 5 seviye yöneticilik verilebilir.");

	if (level > PlayerData[userid][pAdmin])
	{
	    SendAdminAction(playerid, "%s adlý þahýsa yönetici seviyesi verdin. (%d)", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s adlý yetkili sana yöneticilik verdi. (%d)", ReturnName(playerid, 0), level);
	}
	else
	{
	    SendAdminAction(playerid, "%s adlý oyuncuyu (%d) seviye yönetici yaptýnýz.", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s adlý yetkili seni (%d) seviye yönetici yaptý.", ReturnName(playerid, 0), level);
	}
	PlayerData[userid][pAdmin] = level;
 	Log_Write("logs/admin_log.txt", "[%s] %s has set %s's admin level to %d.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), level);

	return 1;
}

CMD:achat(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkili konuþma platformunu kullanamazsýnýz !");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/a [yazý]");

	if (strlen(params) > 64) {
	    SendAdminAlert(0xFF5E5EFF, "[ADM][%d] {FFFFFF}%s: %.64s", PlayerData[playerid][pAdmin], ReturnName(playerid, 0), params);
	    SendAdminAlert(0xFF5E5EFF, "...%s", params[64]);
	}
	else {
	    SendAdminAlert(0x33FF66FF, "[ADM][%d] {FFFFFF}%s: %s", PlayerData[playerid][pAdmin], ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:acopbosalt(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

    for(new i = 0; i <= MAX_GARBAGE_BINS; i++)
    {
		GarbageData[i][garbageCapacity] = 0;
		Garbage_Refresh(i);
 	}
	SendServerMessage(playerid, "Tüm çöpler boþaltýldý.");
	return 1;
}

Dialog:Haberler(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		SetPVarInt(playerid, "haberid", strval(notreal));
		Haber_Incele(playerid, strval(notreal));
	}
	return 1;
}

CMD:haberduzenle(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "GOV yetkilisi deðilsin.");

	if (!IsPlayerInCityHall(playerid))
	    return SendErrorMessage(playerid, "Þehir binasýnda olmalýsýn.");

    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Rütben en az %d olmalý.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	new string[2048];
	strcat(string, "{F0CC00}{F0CC00}Baþlýk\t{F0CC00}Yazan\n{FFFFFF}");

    for (new i = 0; i != MAX_HABER; i ++) if(Haberler[i][haberVarmi])
	{
		format(string, sizeof(string), "%s{%6x}%d ) %s\t%s\n", string, RemoveAlpha(FactionData[Haberler[i][haberTip]][factionColor]) >>> 8, i, Haberler[i][haberBaslik], Haberler[i][haberYazan]);
	}
	strcat(string, "{FF0000}Haber Ekle\n");
	Dialog_Show(playerid, HaberDuzenle, DIALOG_STYLE_TABLIST_HEADERS, "Haber Düzenleme", string, "Seç", "Ýptal");
	return 1;
}
Haber_Incele(playerid, i)
{
    Haberler[i][haberOkunma]++;
	new string[2048], haber_string[512], karakter = 64;
	strcat(haber_string, Haberler[i][haberIcerik]);

	new kac_kere = floatround((strlen(haber_string) / karakter), floatround_floor);
	if(kac_kere > 0) for(new j = 1; j <= kac_kere; j++) strins(haber_string, "\n", j * karakter);

	format(string, sizeof(string), "{F0CC00}Haber Baþlýðý: {FFFFFF}%s\n\n", Haberler[i][haberBaslik]);
	format(string, sizeof(string), "%s________________________________________________\n\n", string);
	format(string, sizeof(string), "%s{FFFFFF}%s\n", string, haber_string);

	format(string, sizeof(string), "%s________________________________________________\n\n", string);
	format(string, sizeof(string), "%s{F0CC00}Yazan: {FFFFFF}%s      {F0CC00}Okunma Sayýsý: {FFFFFF}%d", string, Haberler[i][haberYazan], Haberler[i][haberOkunma]);
	Dialog_Show(playerid, HaberIncele, DIALOG_STYLE_MSGBOX, "Haber Ýnceleme", string, "Tamam", "");
	return 1;
}

Dialog:HaberDuzenle(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		if(!strcmp(inputtext,"Haber Ekle"))
		{
			Dialog_Show(playerid, HaberBaslik, DIALOG_STYLE_INPUT, "{F0CC00}> Haber Ekle", "{FFFFFF}Lütfen haberin baþlýðýný girin:\n(Baþlýk minimum 3, maksimum 128 karakter olabilir)", "Ýleri", "Ýptal");
		    return 1;
		}
	    new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		SetPVarInt(playerid, "haberid", strval(notreal));
		Dialog_Show(playerid, HaberAction, DIALOG_STYLE_LIST, "{F0CC00}> Haber Ekle", "{FFFFFF}Haberi Oku\nHaberi Sil", "Seç", "Ýptal");
	}
	return 1;
}

Dialog:HaberAction(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new haberid = GetPVarInt(playerid, "haberid");
	    if(listitem == 0)
	    {
	        Haber_Incele(playerid, haberid);
	    }
	    if(listitem == 1)
	    {
	        Haber_Sil(haberid);
	        SendServerMessage(playerid, "Haber silindi.");
	    }
	}
	return 1;
}

Dialog:HaberBaslik(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		if(strlen(inputtext) < 3 || strlen(inputtext) > 128) return SendErrorMessage(playerid, "Geçersiz baþlýk girdiniz, baþlýk minimum 3, maksimum 128 karakter olabilir.");
		SetPVarString(playerid, "HaberBasligi", inputtext);
		Dialog_Show(playerid, HaberIcerik, DIALOG_STYLE_INPUT, "{F0CC00}> Haber Ekle", "{FFFFFF}Lütfen haberin içeriðini girin:\n(Ýçerik minimum 10, maksimum 512 karakter olabilir)", "Ýleri", "Ýptal");
	}
	return 1;
}

Dialog:HaberIcerik(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		if(strlen(inputtext) < 10 || strlen(inputtext) > 512) return SendErrorMessage(playerid, "Geçersiz içerik girdiniz, baþlýk minimum 10, maksimum 512 karakter olabilir.");
		new baslik[128];
		GetPVarString(playerid, "HaberBasligi", baslik, 128);
		new id = Haber_Olustur(playerid, baslik, inputtext);
		if (id == -1) return SendErrorMessage(playerid, "Sunucu maksimum haber sýnýrýna ulaþmýþtýr.");
		Haber_Kaydet(id);
		SendServerMessage(playerid, "Haber eklendi.");
	}
	return 1;
}
CMD:aracsahip(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	new vehicleid;
	if (sscanf(params, "d", vehicleid)) return SendSyntaxMessage(playerid, "/aracasahip [Araç ID]");
	static query[256];
	new id = Car_GetID(vehicleid);
	if (!IsValidVehicle(vehicleid)) return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");
	if(id == -1) return SendErrorMessage(playerid, "Bu araç veritabanýnda bulunmuyor.");
	format(query, sizeof(query), "SELECT characters.Character as sahip, characters.ID as sahipid FROM characters INNER JOIN cars ON characters.ID = cars.carOwner WHERE cars.carID = %d", CarData[id][carID]);
	mysql_tquery(g_iHandle, query, "SahipYazdir", "i", playerid);
 	return 1;
}

forward SahipYazdir(playerid);
public SahipYazdir(playerid)
{
    if (!IsPlayerConnected(playerid)) return 0;
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
		static ad[MAX_PLAYER_NAME], user_id;
		cache_get_field_content(0, "sahip", ad);
  		user_id = cache_get_field_content_int(0, "sahipid");
		SendServerMessage(playerid, "Bu aracýn sahibi: %s (Karakter ID: %d).", ad, user_id);
	} else {
		SendErrorMessage(playerid, "Bu aracýn sahibi yok.");
	}
	return 1;
}

CMD:evsahip(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	new evid;
	if (sscanf(params, "d", evid)) return SendSyntaxMessage(playerid, "/evsahip [Ev ID]");
	static query[256];
	if ((evid < 0 || evid >= MAX_HOUSES) || !HouseData[evid][houseExists]) return SendErrorMessage(playerid, "Geçersiz bir ev evid'sý belirttiniz.");
	if(evid == -1) return SendErrorMessage(playerid, "Bu ev veritabanýnda bulunmuyor.");
	format(query, sizeof(query), "SELECT characters.Character as sahip, characters.ID as sahipid FROM characters INNER JOIN houses ON characters.ID = houses.houseOwner WHERE houses.houseID = %d", HouseData[evid][houseID]);
	mysql_tquery(g_iHandle, query, "SahipYazdirEv", "i", playerid);
 	return 1;
}
CMD:toplufiyatayar(playerid, params[]) // TOPLU FÝYAT AYARLAMA
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");


	for (new i = 0; i < MAX_HOUSES; i ++) if (HouseData[i][houseExists])
	{
		HouseData[i][houseInt][0] = 244.0710;
        HouseData[i][houseInt][1] = 304.9403;
        HouseData[i][houseInt][2] = 999.1484;
        HouseData[i][houseInt][3] = 270.0000;
        HouseData[i][houseLevel] = 1;
		House_Save(i);
		House_Refresh(i);
	}
	SendServerMessage(playerid, "Ýþlem tamam.");
 	return 1;
}


forward SahipYazdirEv(playerid);
public SahipYazdirEv(playerid)
{
    if (!IsPlayerConnected(playerid)) return 0;
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
		static ad[MAX_PLAYER_NAME], user_id;
		cache_get_field_content(0, "sahip", ad);
		user_id = cache_get_field_content_int(0, "sahipid");
		SendServerMessage(playerid, "Bu evin sahibi: %s (Karakter ID: %d).", ad, user_id);
	} else {
		SendErrorMessage(playerid, "Bu evin sahibi yok.");
	}
	return 1;
}



forward MalKontrolEv(playerid, houseid);
public MalKontrolEv(playerid, houseid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
 		new username[24];
	    cache_get_field_content(0, "sahip", username);

		new query[512], Cache: owner_query;
		mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `blacklist` WHERE `Username` = '%s'", username);
		owner_query = mysql_query(g_iHandle, query);
		if(cache_num_rows())
		{
		    SendServerMessage(playerid,"Ev ID: %d, Sahip: %s", houseid, username);
			printf("Ev ID: %d, Sahip: %s", houseid, username);
		}
		cache_delete(owner_query);
	} else {
		//	HouseData[houseid][houseOwner] = 0;
	   // HouseData[houseid][houseMoney] = 0;
	   // for (new i = 0; i != 10; i++)
	//	{
//		    HouseData[houseid][houseWeapons][i] = 0;
//		    HouseData[houseid][houseAmmo][i] = 0;
//		}
//		House_Refresh(houseid);
//		House_Save(houseid);
	}
	return 1;
}



forward CharKontrolEv(playerid, houseid);
public CharKontrolEv(playerid, houseid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);

	if (!rows) {
  		SendServerMessage(playerid,"Ev ID: %d", houseid);
		printf("Ev ID: %d", houseid);
	}
	return 1;
}


forward CharKontrolArac(playerid, aracid);
public CharKontrolArac(playerid, aracid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);

	if (!rows) {
	    SendServerMessage(playerid,"Araç ID: %d", CarData[aracid][carVehicle]);
		printf("Araç ID: %d", CarData[aracid][carVehicle]);
	}
	return 1;
}

forward MalKontrolArac(playerid, aracid);
public MalKontrolArac(playerid, aracid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    new username[24];
	    cache_get_field_content(0, "sahip", username);

		new query[512], Cache: owner_query;
		mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `blacklist` WHERE `Username` = '%s'", username);
		owner_query = mysql_query(g_iHandle, query);
		if(cache_num_rows())
		{
		    SendServerMessage(playerid,"Araç ID: %d, Sahip: %s", CarData[aracid][carVehicle], username);
			printf("Araç ID: %d, Sahip: %s", CarData[aracid][carVehicle], username);
		}
		cache_delete(owner_query);
	} else {
		//Car_Delete(aracid);
	}
	return 1;
}


forward LoginArac(playerid, aracid);
public LoginArac(playerid, aracid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    new songiris  =  cache_get_field_int(0, "songiris");
		if(songiris < 1467503999)
		{
		    SendServerMessage(playerid, "Tarihi geçmiþ Araç ID: %d", CarData[aracid][carVehicle]);
			printf("Tarihi geçmiþ Araç ID: %d", CarData[aracid][carVehicle]);
		}
	} else {
		//Car_Delete(aracid);
	}
	return 1;
}

forward LoginEv(playerid, houseid);
public LoginEv(playerid, houseid)
{
	new rows, fields;
	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    new songiris  =  cache_get_field_int(0, "songiris");
		if(songiris < 1467503999)
		{
		    SendServerMessage(playerid, "Tarihi geçmiþ Ev ID: %d", houseid);
			printf("Tarihi geçmiþ Ev ID: %d", houseid);
		}
	} else {
		//Car_Delete(aracid);
	}
	return 1;
}

/*CMD:dovustarzi(playerid, params[])
{
//if (PlayerData[playerid][pSilverVip] < 1 && !PlayerData[playerid][pGoldVip] && !PlayerData[playerid][pQuantumVip]) return SendErrorMessage(playerid, "VIP deðilsin!");
SendServerMessage(playerid, "1: Box, 2: Kungfu, 3: Normal");
switch(strval(params))
{
case 1: SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING) return SendErrorMessage(playerid, "Dövüþ tarzý 'Box' uygulandý.");
case 2: SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU) return SendErrorMessage(playerid, "Dövüþ tarzý 'Kungfu' uygulandý.");
case 3: SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL) return SendErrorMessage(playerid,"Dövüþ tarzý 'Normal' uygulandý.");
default: SendSyntaxMessage(playerid, "/dovustarzi [1-3]");
}
return 1;
}

CMD:vipdolap(playerid, params[])
{
if (PlayerData[playerid][pSilverVip] < 1 && !PlayerData[playerid][pGoldVip] && !PlayerData[playerid][pQuantumVip]) return SendErrorMessage(playerid, "VIP deðilsin!");
if(!IsPlayerInRangeOfPoint(playerid, 4.0, 681.5215,-459.2425,-25.6172)) return SendErrorMessage(playerid, "VIP dolap noktasýnda deðilsiniz.");
Dialog_Show(playerid, Vip, DIALOG_STYLE_LIST, "VIP Dolap", "Silver Vip\nGold Vip\nQuantum Vip\nVIP Özel Skinler", "Seç", "Iptal");
return 1;
}
CMD:viptag(playerid, params[])
{
if (PlayerData[playerid][pSilverVip] < 1 && !PlayerData[playerid][pGoldVip] && !PlayerData[playerid][pQuantumVip]) return SendErrorMessage(playerid, "VIP deðilsin!");
if(IsValidDynamic3DTextLabel(VipText[playerid])) DestroyDynamic3DTextLabel(VipText[playerid]);
if (PlayerData[playerid][pSilverVip] == 1)
{
// bitroast vip'e özel renk sistemi.
SetPlayerColor(playerid, 0xCFCFCFFF);
}
if (PlayerData[playerid][pGoldVip] == 1)
{
SetPlayerColor(playerid, 0xDDDD00FF);
}
if (PlayerData[playerid][pQuantumVip] == 1)
{
SetPlayerColor(playerid, 0xFF66FFFF); //
}
new Float: x,y,z;
if(PlayerData[playerid][pSilverVip] == 1) VipText[playerid] = CreateDynamic3DTextLabel("[Silver VIP]", 0xC0C0C0FF, x, y,z+1.5,9.0,.attachedplayer = playerid, .playerid = playerid);
if(PlayerData[playerid][pGoldVip] == 1) VipText[playerid] = CreateDynamic3DTextLabel("[Gold VIP]", 0xEFFB11FF, x, y,z+1.5,9.0,.attachedplayer = playerid, .playerid = playerid);
if(PlayerData[playerid][pQuantumVip] == 1) VipText[playerid] = CreateDynamic3DTextLabel("[Quantum VIP]", 0xFF00FFFF, x, y,z+1.5,9.0,.attachedplayer = playerid, .playerid = playerid);
Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, VipText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.37);
SendServerMessage(playerid, "Artýk kafanýn üstünde vip tagý gözükecek, kapatmak istersen '/viptagkapat'");
return 1;
}
CMD:viptagkapat(playerid, params[])
{
if (PlayerData[playerid][pSilverVip] < 1 && !PlayerData[playerid][pGoldVip] && !PlayerData[playerid][pQuantumVip]) return SendErrorMessage(playerid, "VIP deðilsin!");
DestroyDynamic3DTextLabel(VipText[playerid]);
Delete3DTextLabel(VipText[playerid]);
SetPlayerColor(playerid, DEFAULT_COLOR);
SendServerMessage(playerid, "Vip tagýn kapandý, tekrar açmak ister isen /viptag kullan.");
return 1;
}*/
CMD:h(playerid, params[])
{
	if (PlayerData[playerid][pTester] < 1 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Helper konuþma platformunu kullanamazsýnýz !");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/h [yazý]");

	if (strlen(params) > 64)
	{
	    if (PlayerData[playerid][pAdmin])
	    	SendTesterMessage(COLOR_LIGHTRED, "** %d Seviye Admin %s: %.64s", PlayerData[playerid][pAdmin], ReturnName(playerid, 0), params);

		else
			SendTesterMessage(COLOR_LIGHTRED, "** %d Seviye Helper %s: %.64s", PlayerData[playerid][pTester], ReturnName(playerid, 0), params);

		SendTesterMessage(COLOR_LIGHTRED, "...%s **", params[64]);
	}
	else
	{
	    if (PlayerData[playerid][pAdmin])
	        SendTesterMessage(COLOR_LIGHTRED, "** %d Seviye Admin %s: %s", PlayerData[playerid][pAdmin], ReturnName(playerid, 0), params);

	    else SendTesterMessage(COLOR_LIGHTRED, "** %d Seviye Helper %s: %s",  PlayerData[playerid][pTester], ReturnName(playerid, 0), params);
	}
	return 1;
}
CMD:aduty(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (!PlayerData[playerid][pAdminDuty])
	{
        //if(IsValidDynamic3DTextLabel(aDutyText[playerid]))  DestroyDynamic3DTextLabel(aDutyText[playerid]);
    	//new Float: x,y,z;
	    //if(PlayerData[playerid][pAdmin] == 1) aDutyText[playerid] = CreateDynamic3DTextLabel("[Administrator]", COLOR_RED, x, y,z+1.5,9.0,.attachedplayer = playerid, .playerid = playerid);
    	//if(PlayerData[playerid][pAdmin] == 2) aDutyText[playerid] = CreateDynamic3DTextLabel("[Administrator]", COLOR_RED, x, y,z+1.5,9.0,.attachedplayer = playerid, .playerid = playerid);
    	//if(PlayerData[playerid][pAdmin] == 3) aDutyText[playerid] = CreateDynamic3DTextLabel("[Lead Administrator]", COLOR_RED, x, y,z+1.5,9.0,.attachedplayer = playerid, .playerid = playerid);
    	//if(PlayerData[playerid][pAdmin] == 4) aDutyText[playerid] = CreateDynamic3DTextLabel("[Developer]", COLOR_RED, x, y,z+1.5,9.0,.attachedplayer = playerid, .playerid = playerid);
    	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, aDutyText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.37);
    	format(eskiad[playerid], 24, "%s", ReturnName(playerid));
    	//SetPlayerName(playerid, PlayerData[playerid][pAdminName]);
    	//SetPlayerColor(playerid, 0x800000FF);
		AdminDuty[playerid] = 1;
		SendServerMessage(playerid, "Yönetici olarak iþbaþý yaptýn.");
		PlayerData[playerid][pGodMode] = 1;
		PlayerData[playerid][pAdminDuty] = 1;
	}
	else
	{
		PlayerData[playerid][pAdminDuty] = 0;
		//SetPlayerColor(playerid, DEFAULT_COLOR);
		SetPlayerName(playerid, eskiad[playerid]);
		PlayerData[playerid][pGodMode] = 0;
		AdminDuty[playerid] = 0;
		DestroyDynamic3DTextLabel(aDutyText[playerid]);
		Delete3DTextLabel(aDutyText[playerid]);
		SendServerMessage(playerid, "Yönetici olarak iþbaþýný býraktýn.");
		//SendServerMessage(playerid, "Hack programlarýnýz varsa kapatmayý unutmayýn(s0beit'i devredýþý býrakmak için F12).");
	}
	return 1;
}
CMD:hduty(playerid, params[])
{
	if (PlayerData[playerid][pTester] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");
    if (PlayerData[playerid][pAdmin] > 1) return SendErrorMessage(playerid, "Adminler bu komudu kullanamaz.");

	if (!PlayerData[playerid][pTesterDuty])
	{
        if(IsValidDynamic3DTextLabel(hDutyText[playerid]))  DestroyDynamic3DTextLabel(hDutyText[playerid]);
	    //if(PlayerData[playerid][pTester] == 1) hDutyText[playerid] = CreateDynamic3DTextLabel("[Level 1 Helper]", COLOR_HELPERRENK1, 0, 0, -20, 25, playerid);
        //if(PlayerData[playerid][pTester] == 2) hDutyText[playerid] = CreateDynamic3DTextLabel("[Level 2 Helper]", COLOR_HELPERRENK1, 0, 0, -20, 25, playerid);
    	//if(PlayerData[playerid][pTester] == 3) hDutyText[playerid] = CreateDynamic3DTextLabel("[Level 3 Helper]", COLOR_HELPERRENK1, 0, 0, -20, 25, playerid);
    	//if(PlayerData[playerid][pTester] == 4) hDutyText[playerid] = CreateDynamic3DTextLabel("[Level 4 Helper]", COLOR_HELPERRENK1, 0, 0, -20, 25, playerid);
    	//if(PlayerData[playerid][pTester] == 5) hDutyText[playerid] = CreateDynamic3DTextLabel("[Level 5 Helper]", COLOR_HELPERRENK1, 0, 0, -20, 25, playerid);
    	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, hDutyText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.37);
   		format(eskiad[playerid], 24, "%s", ReturnName(playerid));
    	SetPlayerName(playerid, PlayerData[playerid][pTesterName]);
    	//SetPlayerColor(playerid, COLOR_HELPERRENK1);
		foreach(new i : Player) ShowPlayerNameTagForPlayer(i, playerid, 1);
		SendServerMessage(playerid, "Ýþbaþý yaptýn!");
		PlayerData[playerid][pTesterDuty] = 1;
	}
	else
	{
	    DestroyDynamic3DTextLabel(hDutyText[playerid]);
	    foreach(new i : Player) ShowPlayerNameTagForPlayer(i, playerid, 1);
		Delete3DTextLabel(hDutyText[playerid]);
		SetPlayerColor(playerid, DEFAULT_COLOR);
		SetPlayerName(playerid, eskiad[playerid]);
		PlayerData[playerid][pTesterDuty] = 0;
		SendServerMessage(playerid, "Helper olarak iþbaþýný býraktýn!");
	}
	return 1;
}
/*CMD:silvervipver(playerid, params[])
{
static userid;
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
if (sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/silvervipver [id]");
if (!IsPlayerConnected(userid)) return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");
if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter]) return SendErrorMessage(playerid, "Bu oyuncu giriþ yapmamýþ.");
PlayerData[userid][pSilverVip] = 1;
SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuya silver vip verdi.", ReturnName(playerid, 0), ReturnName(userid, 0));
SendServerMessage(playerid, "%s adlý kiþiye silver vip verdin!", ReturnName(userid));
return 1;
}
CMD:goldvipver(playerid, params[])
{
static userid;
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
if (sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/goldvipver [id]");
if (!IsPlayerConnected(userid)) return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");
if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter]) return SendErrorMessage(playerid, "Bu oyuncu giriþ yapmamýþ.");
PlayerData[userid][pGoldVip] = 1;
SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuya gold vip verdi.", ReturnName(playerid, 0), ReturnName(userid, 0));
SendServerMessage(playerid, "%s adlý kiþiye gold vip verdin!", ReturnName(userid));
return 1;
}
CMD:quantumvipver(playerid, params[])
{
static userid;
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
if (sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/quantumvipver [id]");
if (!IsPlayerConnected(userid)) return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");
if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter]) return SendErrorMessage(playerid, "Bu oyuncu giriþ yapmamýþ.");
PlayerData[userid][pQuantumVip] = 1;
SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuya quantum vip verdi.", ReturnName(playerid, 0), ReturnName(userid, 0));
SendServerMessage(playerid, "%s adlý kiþiye quantum vip verdin!", ReturnName(userid));
return 1;
}*/
CMD:maskever(playerid, params[])
{
static userid;
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
if (sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/maskever [id]");
if (!IsPlayerConnected(userid)) return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");
if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter]) return SendErrorMessage(playerid, "Bu oyuncu giriþ yapmamýþ.");
PlayerData[userid][pMask] = 1;
SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuya maske kullanýmý verdi.", ReturnName(playerid, 0), ReturnName(userid, 0));
SendServerMessage(playerid, "%s adlý kiþiye maske kullanýmý verdi.", ReturnName(userid));
return 1;
}
CMD:petver(playerid, params[])
{
static userid;
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
if (sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/petver [id]");
if (!IsPlayerConnected(userid)) return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");
if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter]) return SendErrorMessage(playerid, "Bu oyuncu giriþ yapmamýþ.");
PlayerData[userid][pPet] = 1;
SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuya pet verdi.", ReturnName(playerid, 0), ReturnName(userid, 0));
return 1;
}


CMD:bagiscial(playerid, params[])
{
static userid;
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
if (sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/bagiscial [id]");
if (!IsPlayerConnected(userid)) return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");
if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter]) return SendErrorMessage(playerid, "Bu oyuncu giriþ yapmamýþ.");
PlayerData[userid][pBagisci] = 0;
SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncudan baðýþçýlýðýný sildi.", ReturnName(playerid, 0), ReturnName(userid, 0));
SendServerMessage(playerid, "%s adlý kiþiden baðýþçýyý sildin!", ReturnName(userid));
return 1;
}

CMD:ahelp(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (PlayerData[playerid][pAdmin] >= 1) {
	    SendClientMessage(playerid, COLOR_GREEN, "[Game Admin]:{FFFFFF} /a, /destekler, /jail, /kick, /freeze, /unfreeze, /jetpack");
	    SendClientMessage(playerid, COLOR_GREEN, "[Game Admin]:{FFFFFF} /aduty, /ojail, /ban, /skin, /goto, /gethere, /level1, /an, /dn");
	    SendClientMessage(playerid, COLOR_GREEN, "[Game Admin]:{FFFFFF} /aracirespawnla, /revive, /apm, /unjail, /ahsayi");
	    SendClientMessage(playerid, COLOR_GRAY, "-----------------------------------------------------------------------------------");
	}
	if (PlayerData[playerid][pAdmin] >= 2) {
	    SendClientMessage(playerid, COLOR_DARKGREEN, "[Senior Admin]:{FFFFFF} /uyariver, /sicilkontrol, /kontrol, /intayarla, /vwduzenle");
	    SendClientMessage(playerid, COLOR_DARKGREEN, "[Senior Admin]:{FFFFFF} /spawnla, /chattemizle, /doldur, /atokat, /apm.");
	    SendClientMessage(playerid, COLOR_DARKGREEN, "[Senior Admin]:{FFFFFF} /maskeliler, /silahlistele, /aracirespawnla, /yaracspawnla, /canduzenle, /araccek, /aracagit.");
	    SendClientMessage(playerid, COLOR_GRAY, "-----------------------------------------------------------------------------------");
 	}
	if (PlayerData[playerid][pAdmin] >= 3) {
	    SendClientMessage(playerid, COLOR_RED, "[Lead Admin]:{FFFFFF} /bankaldir, /karaliste, /mulklerim, /zirhayarla, /silahsifirla, /atamir, /uyarilistele.");
	    SendClientMessage(playerid, COLOR_RED, "[Lead Admin]:{FFFFFF} /aracagir, /veh, /aracsil, /near, /tcanfulle, /numaraogren, /ayarala.");
	    SendClientMessage(playerid, COLOR_RED, "[Lead Admin]:{FFFFFF} /arenk,  /afire, /akillfire, /adestroybox.");
	    SendClientMessage(playerid, COLOR_GRAY, "-----------------------------------------------------------------------------------");
	}
	if (PlayerData[playerid][pAdmin] >= 4) {
        SendClientMessage(playerid, COLOR_BLUE, "[Developer]:{FFFFFF} /helperyap, /banbilgi, /isimdegistir, /aolusumayarla, /aolusumrutbe, /itemver.");
        SendClientMessage(playerid, COLOR_BLUE, "[Developer]:{FFFFFF} /evsifirla, /isyerisifirla, /jetpack, /havaayarla, /benzinleridoldur, /benzinayarla, /acanayarla.");
        SendClientMessage(playerid, COLOR_BLUE, "[Developer]:{FFFFFF} /itemsil, /lideryap, /ayarla.");
        SendClientMessage(playerid, COLOR_GRAY, "-----------------------------------------------------------------------------------");
	}
	return 1;
}
CMD:hhelp(playerid, params[])
{
	if (!PlayerData[playerid][pTester])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (PlayerData[playerid][pTester] >= 1) {
	    SendClientMessage(playerid, COLOR_GRAY, "[LEVEL 1]:{FFFFFF} /tac, /tar, /taf, /spawnla, /ro, /rr");
	    SendClientMessage(playerid, COLOR_GRAY, "-----------------------------------------------------------------------------------");
	}
	if (PlayerData[playerid][pTester] >= 2) {
	    SendClientMessage(playerid, COLOR_GRAY, "[LEVEL 2]:{FFFFFF} /go, /get");
	    SendClientMessage(playerid, COLOR_GRAY, "-----------------------------------------------------------------------------------");
 	}
	if (PlayerData[playerid][pTester] >= 3) {
	    SendClientMessage(playerid, COLOR_GRAY, "[LEVEL 3]:{FFFFFF} /getcar, /aracagit, /respawncar");
	    SendClientMessage(playerid, COLOR_GRAY, "-----------------------------------------------------------------------------------");
	}
	if (PlayerData[playerid][pTester] >= 4) {
        SendClientMessage(playerid, COLOR_GRAY, "[LEVEL 4]:{FFFFFF} /revive, /kick");
        SendClientMessage(playerid, COLOR_GRAY, "-----------------------------------------------------------------------------------");
	}
	if (PlayerData[playerid][pTester] >= 5) {
        SendClientMessage(playerid, COLOR_GRAY, "[LEVEL 5]:{FFFFFF} /jail, /unjail");
        SendClientMessage(playerid, COLOR_GRAY, "-----------------------------------------------------------------------------------");
	}
	return 1;
}

CMD:dinamikyardim(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	    return 1;

	SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /createhouse, /createbiz, /createentrance, /createpump, /createcrate, /createfaction.");
    SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /gateolustur, /createcar, /createatm, /createvendor, /creategarbage, /edithouse, /editbiz.");
	SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /bizstate, /destroybiz, /editentrance, /editfaction, /gateduzenle, /setpump, /destroyhouse.");
	SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /destroypump, /destroyentrance, /destroypump, /destroycrate, /destroyfaction, /gatesil");
	SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /destroyatm, /destroygarbage, /createrack, /editrack, /destroyrack, /createspeed, /destroyspeed.");
	SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /destroyplant, /createdetector, /destroydetector. /createbillboard /destroybillboard /editbillboard");
	SendClientMessage(playerid, COLOR_CLIENT, "DÝNAMÝK:{FFFFFF} /createobject, /destroyobject, /editobject.");
	return 1;
}

CMD:raporiptal(playerid, params[])
{
	if (Report_GetCount(playerid) <= 0)
	    return SendErrorMessage(playerid, "Bakýlmasý beklenen hiç raporunuz yok!");

	    if (PlayerData[playerid][pCK]) return SendErrorMessage(playerid, "Karakterin öldüðü için bu komutun kullanamazsýn!");

    Report_Clear(playerid);
    SendServerMessage(playerid, "Desteðiniz iptal edildi.");
	return 1;
}
/*CMD:sorusor(playerid, params[])
{
	new soruid = -1;

	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/sorusor [Soru]");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Bu komutu gerçek amacý için kullanýn yoksa ceza alabilirsiniz.");
	    return 1;
	}
	if (Soru_GetCount(playerid) >= 1)
	    return SendErrorMessage(playerid, "Bakýlmasý beklenen 1 adet sorunuz var daha fazla soru yollayamazsýnýz ! (/soruiptal)");


	if(PlayerData[playerid][pJailTime] > 0) return SendErrorMessage(playerid, "Hapiste olduðunuz için bu komutu kullanamazsýnýz. (Eðer hatalý ise forumdan destek bildirimi açýn)");


	if (PlayerData[playerid][pSoruTime] >= gettime())
	    return SendErrorMessage(playerid, "Baþka bir soru göndermeden önce %d saniye beklemeniz gerekiyor !", PlayerData[playerid][pSoruTime] - gettime());

	if ((soruid = Soru_Add(playerid, params)) != -1)
	{
		ShowPlayerFooter(playerid, "~g~Soru ~w~gonderildi!");

  foreach (new i : Player)
		{
			if (PlayerData[i][pTester] > 0) {
				SendClientMessageEx(i, COLOR_CLIENT, "SORU-ID[%d]: %s (ID: %d) Soru: %s", soruid, ReturnName(playerid, 0), playerid, params);
			}
		}
		PlayerData[playerid][pSoruTime] = gettime() + 15;
		SendServerMessage(playerid, "Sorun iþbaþý yapmýþ helpera gönderildi lütfen bekleyiniz...");
	}
	else
	{
	    SendErrorMessage(playerid, "Soru listesi dolu soru göndermek için lütfen biraz bekleyiniz...");
	}
	return 1;
}
CMD:soruiptal(playerid, params[])
{
	if (Soru_GetCount(playerid) <= 0)
	    return SendErrorMessage(playerid, "Bakýlmasý beklenen hiç sorunuz yok!");

    Soru_Clear(playerid);
    SendServerMessage(playerid, "Sorunuz iptal edildi.");
	return 1;
}*/
CMD:destekmute(playerid, params[])
{
if (PlayerData[playerid][pAdmin] < 2) return SendErrorMessage(playerid, "Yetkin yok!");
new userid;
static string;
if(sscanf(params, "ud", userid, string)) return SendErrorMessage(playerid, "/rapormute [ID [süre]");
if (string < 1) return SendErrorMessage(playerid, "1 dakikadan aþaðý atamazsýn.");
if (string > 30) return SendErrorMessage(playerid, "30 dakikadan yukarý atamazsýn.");
SendServerMessage(userid, "%s adlý admin seni destek talebi kanalýndan %d dakika muteledi.", ReturnName(playerid, 0), string);
SendServerMessage(playerid, "%s adlý oyuncuyu destek talebi kanalýndan %d dakika muteledin.", ReturnName(userid, 0), string);
PlayerData[userid][pDestekMute] = string * 60;
return 1;
}
CMD:rapor(playerid, params[])
{
	new reportid = -1,
    destekid = RandomEx(3, 6);

	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/rapor [Yazý]");
	    //SendClientMessage(playerid, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Bu komutu gerçek amacý için kullanýn yoksa ceza alabilirsiniz.");
	    return 1;
	}
    if (PlayerData[playerid][pAdmin] > 1) return SendErrorMessage(playerid, "Yetkiliyken destek atamazsýn!");
	if(PlayerData[playerid][pJailTime] > 0) return SendErrorMessage(playerid, "Hapiste olduðunuz için bu komutu kullanamazsýnýz. (Eðer hatalý ise forumdan destek bildirimi açýn)");
    if(PlayerData[playerid][pDestekMute] > 0) return SendErrorMessage(playerid, "Destek talebi kanalýndan mutelemiþsin!");
	if (Report_GetCount(playerid) >= 1)
	    return SendErrorMessage(playerid, "Bakýlmasý beklenen 1 adet destek talebiniz var daha fazla destek talebi yollayamazsýnýz ! (/destekiptal)");

	if (PlayerData[playerid][pReportTime] >= gettime())
	    return SendErrorMessage(playerid, "Baþka bir destek talebi göndermeden önce %d saniye beklemeniz gerekiyor !", PlayerData[playerid][pReportTime] - gettime());

	if ((reportid = Report_Add(playerid, params)) != -1)
	{
		//ShowPlayerFooter(playerid, "~g~Destek talebi ~w~gonderildi!");

	foreach (new i : Player)
		{
   if (PlayerData[i][pAdmin] > 0) { // if (PlayerData[i][pAdmin] > 0) { if (PlayerData[i][pTester] > 0
				SendClientMessageEx(i, COLOR_LIGHTYELLOW, "[DESTEK TALEBÝ: %d]: %s (ID: %d) Sebep: %s", reportid, ReturnName(playerid, 0), playerid, params);
			}
			if (PlayerData[i][pTester] > 0) {
			SendClientMessageEx(i, COLOR_LIGHTYELLOW, "[DESTEK TALEBÝ: %d]: %s (ID: %d) Sebep: %s", reportid, ReturnName(playerid, 0), playerid, params);
			}
		}
		PlayerData[playerid][pReportTime] = gettime() + 15;
        SendClientMessageEx(playerid, COLOR_GREEN, "Destek talebin müsait olan tüm yetkililere gönderildi! Destek ID: %d", destekid);
	}
	else
	{
	    SendErrorMessage(playerid, "Destek listesi dolu rapor göndermek için lütfen biraz bekleyiniz.");
	}
	return 1;
}

stock CevapSifirla(playerid)
{
    SoruID[playerid] = -1;
	CevaplananSoru[playerid] = 0;
	YanlisCevap[playerid] = 0;
	for(new i; i < MAX_QUIZ; i++) SoruSoruldu[playerid][i] = false;
	SetPVarInt(playerid, "RaporBakanKisi", -1);
	return 1;
}

forward CevapTimer(playerid);
public CevapTimer(playerid)
{
	CevapSifirla(playerid);
	return 1;
}

CMD:destekler(playerid, params[])
{
	if (PlayerData[playerid][pTester] < 1 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	new
		count,
		text[128];

	for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (!ReportData[i][rExists])
			continue;

		strunpack(text, ReportData[i][rText]);

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "[DESTEK TALEBÝ-ID: %d] %s (ID: %d) Sebep: %s", i, ReturnName(ReportData[i][rPlayer]), ReportData[i][rPlayer], text);
		count++;
	}
	if (!count)
	    return SendErrorMessage(playerid, "Aktif destek görünmüyor.");

	SendServerMessage(playerid, "/ar ile rapor cevaplar, /fr ile foruma yönlendirir, /dr ile de reddedersin.");
	return 1;
}

CMD:ar(playerid, params[])
{
new reportid, string[128];
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

    if(sscanf(params, "is[128]", reportid, string)) return SendErrorMessage(playerid, "/ar [destek id] [cevap]");

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "Geçersiz destek ID'sý.");

	PlayerData[playerid][pRaporSayisi]++;
	SendClientMessageEx(ReportData[reportid][rPlayer], COLOR_YELLOW, "[CEVAP] (Lv. %d) Admin %s: %s", PlayerData[playerid][pAdmin], PlayerData[playerid][pAdminName], string);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncunun destek talebine cevap verdi.", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
    SetPVarInt(ReportData[reportid][rPlayer], "RaporBakanKisi", playerid);
	Report_Remove(reportid);
	return 1;
}
CMD:tac(playerid, params[])
{
new reportid, string[128];
    if (PlayerData[playerid][pTester] < 1) return SendErrorMessage(playerid, "Yetkin yok!");
    if (PlayerData[playerid][pAdmin] > 1) return SendErrorMessage(playerid, "Adminler bu komudu kullanamaz.");

    if(sscanf(params, "is[128]", reportid, string)) return SendErrorMessage(playerid, "/tac [destek id] [cevap]");

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "Geçersiz destek ID'sý.");

	PlayerData[playerid][pSoruSayisi]++;
	SendClientMessageEx(ReportData[reportid][rPlayer], COLOR_YELLOW, "[CEVAP] (Lv. %d) Helper %s: %s", PlayerData[playerid][pTester], PlayerData[playerid][pTesterName], string);
	SendTesterMessage(COLOR_LIGHTRED, "[HELPER]: %s adlý helper %s adlý oyuncunun destek talebine cevap verdi.", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
    SetPVarInt(ReportData[reportid][rPlayer], "RaporBakanKisi", playerid);
	Report_Remove(reportid);
	return 1;
}

CMD:dr(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/dr [destek id] (/destekler komutu ile bakabilirsin.)");

	new
		reportid = strval(params),
		string[64];

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "Geçersiz destek ID'sý. Destek Sayýsý: %d.", MAX_REPORTS);

	format(string, sizeof(string), "Destek talebini ~r~sildin~w~, Destek: ID: %d.", reportid);
	ShowPlayerFooter(playerid, string);

    SendAdminAction(ReportData[reportid][rPlayer], "%s adlý yetkili destek talebini sildi.", PlayerData[playerid][pAdminName]);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncunun destek talebini sildi.", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));

    Report_Remove(reportid);
	return 1;
}
CMD:tar(playerid, params[])
{
    if (PlayerData[playerid][pTester] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");
    if (PlayerData[playerid][pAdmin] > 1) return SendErrorMessage(playerid, "Adminler bu komudu kullanamaz.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/tar [destek id] (/destekler komutu ile bakabilirsin.)");

	new
		reportid = strval(params),
		string[64];

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "Geçersiz destek ID'sý. Destek Sayýsý: %d.", MAX_REPORTS);

	format(string, sizeof(string), "Destek talebini ~r~sildin~w~, Destek: ID: %d.", reportid);
	ShowPlayerFooter(playerid, string);

    SendAdminAction(ReportData[reportid][rPlayer], "%s adlý helper destek talebini sildi.", PlayerData[playerid][pTesterName]);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý helper %s adlý oyuncunun destek talebini sildi.", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));

    Report_Remove(reportid);
	return 1;
}

stock OlusumAksesuariSil(iTargetID)
{
	for(new iToyIter; iToyIter < 5; ++iToyIter) {
		for(new LoopRapist; LoopRapist < sizeof(AttachCops); ++LoopRapist) {
			if(AttachCops[LoopRapist][olusumamodel] == PlayerData[iTargetID][pASlot][iToyIter]) {
                RemovePlayerAttachedObject(iTargetID, iToyIter);
                PlayerData[iTargetID][pASlot][iToyIter] = 0;
				SetAccessories(iTargetID);
			}
		}
	}
	return 1;
}

CMD:fr(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/fr [destek id] (/destekler komutu ile bakabilirsin.)");

	new
		reportid = strval(params),
		string[64];

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "Geçersiz destek talebi ID'sý. Destek Talebi Sayýsý: %d.", MAX_REPORTS);

	format(string, sizeof(string), "Destek talebini ~r~sildin~w~, Destek Talebi: ID: %d.", reportid);
	ShowPlayerFooter(playerid, string);

    SendAdminAction(ReportData[reportid][rPlayer], "%s adlý yetkili seni foruma yönlendirdi.", PlayerData[playerid][pAdminName]);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncunun destek talebini foruma yönlendirdi.", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));

    Report_Remove(reportid);
	return 1;
}
CMD:taf(playerid, params[])
{
    if (PlayerData[playerid][pTester] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");
	    
    if (PlayerData[playerid][pAdmin] > 1) return SendErrorMessage(playerid, "Adminler bu komudu kullanamaz.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/taf [destek id] (/destekler komutu ile bakabilirsin.)");

	new
		reportid = strval(params),
		string[64];

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "Geçersiz destek talebi ID'sý. Destek Talebi Sayýsý: %d.", MAX_REPORTS);

	format(string, sizeof(string), "Destek talebini ~r~sildin~w~, Destek Talebi: ID: %d.", reportid);
	ShowPlayerFooter(playerid, string);

    SendAdminAction(ReportData[reportid][rPlayer], "%s adlý helper seni foruma yönlendirdi.", PlayerData[playerid][pTesterName]);
	SendTesterMessage(COLOR_LIGHTRED, "[HELPER]: %s adlý helper %s adlý oyuncunun destek talebini foruma yönlendirdi.", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));

    Report_Remove(reportid);
	return 1;
}

CMD:izlemesuresi(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	new string[128];
	format(string, sizeof(string), "Ýzleme Süren: {FFFFFF}%s", ConvertTime(SpecSuresi[playerid]));
	SendClientMessage(playerid, 0xEEE93CFF, string);
	return 1;
}

CMD:izle(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "KULLANIM: /izle [oyuncu id]");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "Ýzlemek istediðin kiþi oyunda deðil.");
	if(!IsPlayerSpawnedEx(id)) return SendClientMessage(playerid, -1, "Bu oyuncu ALT-TAB durumunda.");
	if(id == playerid) return SendClientMessage(playerid, -1, "Kendini izleyemezsin.");
	new string[128];
	IzlenenID[playerid] = id;
	KillTimer(IzlemeGuncelle[playerid]);

    //SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuyu izlemeye baþladý.", ReturnName(playerid, 0), ReturnName(id, 0));
    SendServerMessage(playerid, "Ýzlemeden çýkmak için, '/izlekapat' komutunu kullanabilirsin.");
	SetPVarInt(playerid, "pInt", GetPlayerInterior(playerid));
	SetPVarInt(playerid, "pVW", GetPlayerVirtualWorld(playerid));

	GetPlayerName(playerid, string, MAX_PLAYER_NAME);
	format(string, sizeof(string), "specsure/%s.json", string);

   	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING) {
   		GetPlayerPos(playerid, Dx[playerid], Dy[playerid],  Dz[playerid]);
	}
	if(SpecSuresi[playerid] == -1)
	{
		if(!fexist(string))
		{
			djCreateFile(string);
			djSetInt(string, "SpecSuresi", 0, false);
		}

		SpecSuresi[playerid] = djInt(string, "SpecSuresi", false);
	}

	KillTimer(SureGuncelle[playerid]);
 	SureGuncelle[playerid] = SetTimerEx("SpecSureArttir", 1000, true, "i", playerid);

	SetPlayerInterior(playerid, GetPlayerInterior(id));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
	TogglePlayerSpectating(playerid, true);
    if(IsPlayerInAnyVehicle(id)) {
	GetPlayerName(id, string, sizeof(string));
        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
	}else{
	    PlayerSpectatePlayer(playerid, id);
	}

	foreach(new i : Player) Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, OyuncuLabel[i], E_STREAMER_PLAYER_ID, playerid);
	return 1;
}

CMD:izlekapat(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	TogglePlayerSpectating(playerid, 0);
    IzlemeBitir(playerid);
	return 1;
}
/*CMD:ck(playerid, params[])
{
if (PlayerData[playerid][pCK]) return SendErrorMessage(playerid, "Zaten karakterin ölü durumda!");
SendServerMessage(playerid, "CK onaylamak istiyor isen, /ckonay");
PlayerData[playerid][pCKOnay] = 1;
return 1;
}
CMD:ckonay(playerid, params[])
{
if (!PlayerData[playerid][pCKOnay]) return SendErrorMessage(playerid, "CK olmak için ilk önce /ck yazman gerekli.");
JBC_SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
SetPlayerInterior(playerid, 3);
SetPlayerVirtualWorld(playerid, (playerid + 100));
SetPlayerFacingAngle(playerid, 0.0);
SetCameraBehindPlayer(playerid);
ResetWeapons(playerid);
PlayerData[playerid][pCK] = 1;
ResetPlayer(playerid);
SendClientMessageToAllEx(0xFF8040FF, "(( %s adlý oyuncu sistem tarafýndan cezalandýrýldý. Gerekce: Karakter Ölümü ))", ReturnName(playerid, 0));
return 1;
}*/

/*CMD:unck(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/unck [id]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil!");

	if (PlayerData[playerid][pCK] < 1)
	    return SendErrorMessage(playerid, "Kiþi CK olmamýþ!");

	SendAdminAction(playerid, "%s adlý oyuncunun CK kilidini açtýnýz!", ReturnName(userid, 0));
	SendAdminAction(userid, "%s adlý yetkili sizin CK kilidinizi açtý!", ReturnName(playerid, 0));
	JBC_SetPlayerPos(userid, 1529.6,-1691.2,13.3);
	SetPlayerVirtualWorld(userid, 0);
	SetPlayerInterior(userid,0);
	PlayerData[playerid][pCK] = 0;
	ObjeleriYukle(userid);
	PlayerData[userid][pHouse] = -1;
	PlayerData[userid][pBusiness] = -1;
	PlayerData[userid][pEntrance] = -1;
	PlayerData[userid][pHospitalInt]  = -1;
	return 1;
}*/

CMD:jail(playerid, params[])
{
	static
		userid,
		minutes,
		reason[128];

	if (PlayerData[playerid][pTester] < 5 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "uds[128]", userid, minutes, reason))
	    return SendSyntaxMessage(playerid, "/ajail [id] [Dakika] [Gerekçe]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil!");

	if (minutes < 1)
		return SendErrorMessage(playerid, "1 dakikadan aþaðý atamazsýn.");

	if (minutes > 60 && PlayerData[playerid][pTester] >= 5 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Helper olduðun için en fazla 60 dakika atabiliyorsun.");

	ClearAnimations(userid);
	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);

    JBC_SetPlayerPos(userid, 197.6346, 175.3765, 1003.0234);
    SetPlayerInterior(userid, 3);

	SetPlayerVirtualWorld(userid, (userid + 100));
 	SetPlayerFacingAngle(userid, 0.0);

	SetCameraBehindPlayer(userid);
	ResetWeapons(userid);
    Telefon_Kapat(userid);
    //ShowHungerTextdraw(userid, 0);
	ResetPlayer(userid);
	PlayerData[userid][pJailTime] = minutes * 60;
	format(PlayerData[userid][pJailReason], 128, reason);
	PlayerData[userid][pPrisoned] = 0;
	if(PlayerData[userid][pLevel] >= 3)
	{
	    new query[1024];
	    format(query, sizeof(query), "INSERT INTO `kickbanlog` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '%d')",  PlayerData[userid][pID], ReturnDate(), reason, ReturnName(playerid), SICIL_JAIL);
		mysql_tquery(g_iHandle, query);
	}
	SendAdminAction(playerid, "%s adlý oyuncuyu %d dakika hapse attýn. (%s).", ReturnName(userid, 0), minutes, reason);
    new str[128];
	format(str, sizeof str, "%s adli oyuncu cezalandirildi. Gerekce: %s Sure: %d %s", ReturnName(userid), reason, minutes, ReturnDate());
	SendClientMessageToAllEx(0xFF8040FF, "(( %s cezalandirildi. Gerekce: %s Sure: %d %s ))", ReturnName(userid, 0),reason, minutes, ReturnDate());
    PlayerData[ playerid ][ aTJail ]++;
    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuyu hapse attý. Gerekçe: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
	Log_Write("logs/jail_log.txt", "[%s] %s has jailed %s for %d minutes, reason: %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), minutes, reason);
	return 1;
}
CMD:sjail(playerid, params[])
{
	static
		userid,
		minutes,
		reason[128];

	if (PlayerData[playerid][pTester] < 5 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "uds[128]", userid, minutes, reason))
	    return SendSyntaxMessage(playerid, "/sjail [id] [Dakika] [Gerekçe]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil!");

	if (minutes < 1)
		return SendErrorMessage(playerid, "1 dakikadan aþaðý atamazsýn.");

	if (minutes > 30 && PlayerData[playerid][pTester] >= 5 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Helper olduðun için en fazla 60 dakika atabiliyorsun.");

	ClearAnimations(userid);
	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);

    JBC_SetPlayerPos(userid, 197.6346, 175.3765, 1003.0234);
    SetPlayerInterior(userid, 3);

	SetPlayerVirtualWorld(userid, (userid + 100));
 	SetPlayerFacingAngle(userid, 0.0);

	SetCameraBehindPlayer(userid);
	ResetWeapons(userid);

    //ShowHungerTextdraw(userid, 0);
	ResetPlayer(userid);
	PlayerData[userid][pJailTime] = minutes * 60;
	format(PlayerData[userid][pJailReason], 128, reason);
	PlayerData[userid][pPrisoned] = 0;
	if(PlayerData[userid][pLevel] >= 3)
	{
	    new query[1024];
	    format(query, sizeof(query), "INSERT INTO `kickbanlog` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '%d')",  PlayerData[userid][pID], ReturnDate(), reason, ReturnName(playerid), SICIL_JAIL);
		mysql_tquery(g_iHandle, query);
	}
	SendAdminAction(playerid, "%s adlý oyuncuyu %d dakika hapse attýn. (%s).", ReturnName(userid, 0), minutes, reason);
//	SendAdminAction(userid, "%s adlý yetkili seni %d dakika hapse attý. (%s).", ReturnName(playerid, 0), minutes, reason);

    PlayerData[ playerid ][ aTJail ]++;
	Log_Write("logs/jail_log.txt", "[%s] %s has jailed %s for %d minutes, reason: %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), minutes, reason);
	return 1;
}
CMD:unjail(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/unjail [id]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!PlayerData[userid][pJailTime])
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu hapiste deðil.");

	PlayerData[userid][pJailTime] = 1;

	SendAdminAction(playerid, "%s adlý oyuncuyu hapisten çýkarttýnýz.", ReturnName(userid, 0));
	PlayerData[ playerid ][ aTUnjail ]++;
	SendAdminAction(userid, "%s adlý yetkili sizi hapisten çýkarttý.", ReturnName(playerid, 0));
    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuyu hapisten çýkarttý.", ReturnName(playerid, 0), ReturnName(userid, 0));
	Log_Write("logs/jail_log.txt", "[%s] %s has released %s from jail.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:atokat(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/atokat [id]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(userid, x, y, z);
	JBC_SetPlayerPos(userid, x, y, z + 5);

	PlayerPlaySound(userid, 1130, 0.0, 0.0, 0.0);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuyu tokatladý.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}
CMD:aduzelt(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Bu komutu kullanmak için yetkiniz yok !");

	if (vehicleid > 0 && isnull(params))
	{
		FlipVehicle(vehicleid);
		SendServerMessage(playerid, "Bindiðin araç düzeltildi.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
	    	return SendSyntaxMessage(playerid, "/aduzelt [araç ID]");

		else if (!IsValidVehicle(vehicleid))
	    	return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

		FlipVehicle(vehicleid);
		SendServerMessage(playerid, "%d ID'li aracý düzelttin!", vehicleid);
	}
	return 1;
}
CMD:kick(playerid, params[])
{
	static
	    userid,
	    reason[128];
		//query[512];

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pTester] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/kick [id] [reason]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");
    new str[128];
	format(str, sizeof str, "%s adli oyuncu . Gerekce: %s %s", ReturnName(userid), reason, ReturnDate());
 	SendClientMessageToAllEx(0xFF8040FF, "(( %s sunucudan %s tarafýndan atýldý. Gerekçe: %s Tarih: %s ))", ReturnName(playerid, 0), ReturnName(userid, 0),reason,ReturnDate());
	Log_Write("logs/kick_log.txt", "[%s] %s has kicked %s for: %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), reason);
    PlayerData[ playerid ][ aTKick ]++;
	KickEx(userid);
	//SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuyu kickledi. Gerekçe: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
	return 1;
}

CMD:kickall(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	SendClientMessageToAllEx(COLOR_LIGHTRED, "(( [ADMIN]: %s adlý yetkili herkesi oyundan attý. ))", PlayerData[playerid][pAdminName]);
	foreach(new i : Player) { SQL_SaveCharacter(i);  KickEx(i);}
	return 1;
}

CMD:freeze(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/freeze [id]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	TogglePlayerControllable(userid, 0);
	SendAdminAction(playerid, "%s adlý oyuncunun hareket etmesini engellediniz.", ReturnName(userid, 0));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/unfreeze [id]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    PlayerData[playerid][pFreeze] = 0;

	TogglePlayerControllable(userid, 1);
	SendAdminAction(playerid, "%s adlý oyuncunun hareket edememe engelini kaldýrdýnýz.", ReturnName(userid, 0));
	return 1;
}

CMD:revive(playerid, params[])
{
	static
 		yarali[128],
	    userid;

    if (PlayerData[playerid][pTester] < 4 && !PlayerData[playerid][pAdmin]) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/revive [id]");

    if (!IsPlayerConnected(userid)) return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!PlayerData[userid][pBaygin]) return SendErrorMessage(playerid, "Bu oyuncu zaten yaralý deðil!");
    TogglePlayerControllable(userid, 1);
	SetCameraBehindPlayer(userid);
	//ShowHungerTextdraw(userid, 1);
	PlayerData[userid][pBaygin] = false;
    PlayerData[userid][pGodMode] = 0;
	ClearAnimations(userid);
	PlayerData[userid][pKilled] = false;
	DestroyDynamic3DTextLabel(PlayerData[playerid][oYarali]);
	TextDrawHideForPlayer(userid, gServerTextdraws[2]);
	format(yarali, sizeof(yarali), "", playerid);
	PlayerData[playerid][oYarali] = CreateDynamic3DTextLabel(yarali, COLOR_RED, 0.0, 0.0, 0.3, 10.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1);
	Yarali[userid] = false;
	SetPlayerHealth(userid, 100);
	SendAdminAction(playerid, "%s adlý karakteri canlandýrdýn.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s seni canlandýrdý.", ReturnName(playerid, 0));
	return 1;
}

stock SoygunHaberiVer()
{
    SendFactionMessageEx(FACTION_POLICE, COLOR_RED, "[!][RADYO] > Banka alarmý çalmaya baþladý! Tüm birimler derhal merkez bankasýna (Yer: Market St. Bankasý)");
    SendFactionMessageEx(FACTION_MEDIC, COLOR_RED, "[!][RADYO] > Banka alarmý çalmaya baþladý! Tüm birimler derhal merkez bankasýna (Yer: Market St. Bankasý)");
    SendFactionMessageEx(FACTION_GOV, COLOR_RED, "[!][RADYO] > Banka alarmý çalmaya baþladý! Tüm birimler derhal merkez bankasýna (Yer: Market St. Bankasý)");
	return 1;
}

CMD:jailed(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 1) return SendErrorMessage(playerid, "Yetkin yok!");
	new string[1024];
 foreach (new i : Player)
	{
	    if(PlayerData[i][pJailTime] > 1)
		{
		    new bilgiler[256];
		    format(bilgiler, sizeof(bilgiler), "%s - [ID: %d ] - [Hapis Süresi: %d saniye.]\n", ReturnName(i), i, PlayerData[i][pJailTime]);
		    strcat(string, bilgiler);
		}
	}
	Dialog_Show(playerid, soyguncular, DIALOG_STYLE_LIST, "Mahkûmlar", string, "Tamam", "");
	return 1;
}

/*CMD:macolustur(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return 1;
   	Mac_Olustur(1.5); Mac_Olustur(2.0); Mac_Olustur(3.0); Mac_Olustur(1.5); Mac_Olustur(2.5);
	SendServerMessage(playerid, "Maç oluþturuldu.");
	return 1;
}*/


Dialog:Fabrikalar(playerid, response, listitem, inputtext[]) {
	if (response)
	{
        new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		new fabrikaid = strval(notreal);
        Waypoint_Set(playerid, Fabrikalar[fabrikaid][fabrikaAd], Fabrikalar[fabrikaid][fabrikaPos][0], Fabrikalar[fabrikaid][fabrikaPos][1], Fabrikalar[fabrikaid][fabrikaPos][2]);
        SendServerMessage(playerid, "Seçtiðiniz fabrika haritada iþaretlendi.");
	}
	return 1;
}

/*CMD:hasarlar(playerid, params[])
{
	static
	    userid, hasarsayi;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/hasarlar [id]");

    if (!PlayerData[userid][pBaygin])
	    return SendErrorMessage(playerid, "Oyuncu baygýn/yaralý deðil!");

    static
		string[MAX_HASAR * 128];

	string[0] = 0;

	strcat(string, "Hasar\tBölge\tHasar Veren\tSilah\n");
	for (new i = 0; i < 10; i ++)
	{
		if (Hasarlar[userid][i][hasarVarmi] && IsPlayerConnected(Hasarlar[userid][i][hasarVeren])) {
			format(string, sizeof(string), "%s%.2f\t%s\t%s\t%s\n", string, Hasarlar[userid][i][hasarDeger], HasarBolge(Hasarlar[userid][i][hasarBolge]), ReturnName(Hasarlar[userid][i][hasarVeren], 0), ReturnWeaponName(Hasarlar[userid][i][hasarSilah]));
			hasarsayi++;
		}
	}
	if(hasarsayi == 0) return SendErrorMessage(playerid, "Hiç hasarý yok.");
	Dialog_Show(playerid, Hasarlar, DIALOG_STYLE_TABLIST_HEADERS, ReturnName(userid, 0), string, "Tamam", "{FF6347}Iptal");
	return 1;
}*/

Dialog:KontraktYaz(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = strval(inputtext);
		if(!IsNumeric(inputtext) || !IsPlayerConnected(id) || !SQL_IsLogged(id)) return SendErrorMessage(playerid, "Geçersýz ID girdiniz.");
		SetPVarInt(playerid, "KontraktID", id);
		Dialog_Show(playerid, KontraktYaz2, DIALOG_STYLE_INPUT, "Kontrakt Yaz", "Þahýsýn kellesine ne kadar koymak istiyorsun?\n\nNOT: En az %s, en fazla %s olabilir.", "Devam", "{FF6347}Iptal", FormatNumber(MIN_KONTRAKTUCRET), FormatNumber(MAX_KONTRAKTUCRET));
	}
	return 1;
}

Dialog:KontraktYaz2(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = GetPVarInt(playerid, "KontraktID"), miktar = strval(inputtext);
		if(!IsNumeric(inputtext) || !IsPlayerConnected(id) || !SQL_IsLogged(id)) return SendErrorMessage(playerid, "Kontrakt imzaladýðýnýz kiþi oyundan çýkmýþ yada tam olarak girmemiþ. (Geçersiz ID) ");
		if (GetMoney(playerid) < miktar) return SendErrorMessage(playerid, "Yeterli paranýz yok.");
		if (miktar < MIN_KONTRAKTUCRET || miktar > MAX_KONTRAKTUCRET) return SendErrorMessage(playerid, "Miktar en az %s, en fazla %s olabilir.", MIN_KONTRAKTUCRET, MAX_KONTRAKTUCRET);
		if ((GetFactionType(id) == FACTION_POLICE || GetFactionType(id) == FACTION_INTEL || GetFactionType(id) == FACTION_GOV)&& miktar < MIN_OLUSUMKONTRAKTUCRET) return SendErrorMessage(playerid, "Kiþi resmi hizmet görevlisi olduðu için miktar en az %s, en fazla %s olabilir.", MIN_KONTRAKTUCRET, MAX_KONTRAKTUCRET);
        SetPVarInt(playerid, "KontraktMiktar", miktar);
        Dialog_Show(playerid, KontraktYaz3, DIALOG_STYLE_INPUT, "Kontrakt Yaz", "Kurbanýn neden ölmesini istiyorsun?\n\nNOT: Geçerli bir sebep girilmezse kiþi öldürülmez.", "Devam", "{FF6347}Iptal");
	}
	return 1;
}

Dialog:KontraktYaz3(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = GetPVarInt(playerid, "KontraktID"), miktar = GetPVarInt(playerid, "KontraktMiktar");
		if(strlen(inputtext) < 10) return SendErrorMessage(playerid, "Geçerli sebep girmediniz.");
		if (Kontrakt_Ekle(id, miktar, playerid, inputtext) != -1)
		{
		    for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][gTip] == GTIP_HITMAN) {
		 		SendFactionMessage(i, COLOR_LIGHTRED, "SERÝKATÝL: {FFFFFF}%s, %s adýnda bir kurbana %s'lik kontrakt imzaladý.", ReturnName(playerid, 0), ReturnName(id, 0), FormatNumber(miktar));
			}
		    GiveMoney(playerid, -miktar);
	    	SendServerMessage(playerid, "%s adlý kiþiye %s'lik kontrakt imzalandý, kellesi alýndýðýnda haberlerden duyabilirsin!", ReturnName(id, 0), FormatNumber(miktar));
		}
        else SendErrorMessage(playerid, "Kurban maksimum kontrakta ulaþmýþ.");
	}
	return 1;
}


CMD:objelerim(playerid, params[])
{
    static
		string[1024], durum[256], sayi;

	string[0] = 0;

	strcat(string, "Obje ID\tModel\tÝþlem\t\n");
	for (new i = 0; i != MAX_OBJECTS; i ++) if (ObjectData[i][objectVarmi] && ObjectData[i][objectOwner] == PlayerData[playerid][pID]) {
		format(durum, sizeof(durum), "{FFFF00}%d ID\t%d\t{FF6347}[ Ýþlem Yap ]\n", i, ObjectData[i][objectModel]);
		strcat(string, durum);
		sayi++;
	}
	if(sayi == 0) return SendErrorMessage(playerid, "Size ait obje yok.");
	Dialog_Show(playerid, ObjeMenu, DIALOG_STYLE_TABLIST_HEADERS, "{ED4D18}Objelerim", string, "Deðiþtir", "Kapat");
	return 1;
}

CMD:gatelerim(playerid, params[])
{
    static
		string[1024], durum[256], sayi;

	string[0] = 0;

	strcat(string, "Gate ID\tÝþlem\t\n");
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateOwner] == PlayerData[playerid][pID]) {
		format(durum, sizeof(durum), "{FFFF00}%d ID\t{FF6347}[ Ýþlem Yap ]\n", i);
		strcat(string, durum);
		sayi++;
	}
	if(sayi == 0) return SendErrorMessage(playerid, "Size ait hiç gate & garaj kapýsý yok.");
	Dialog_Show(playerid, GateMenu, DIALOG_STYLE_TABLIST_HEADERS, "{ED4D18}Gatelerim", string, "Deðiþtir", "Kapat");
	return 1;
}

Dialog:Kuponlarim(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!Kuponlar[playerid][listitem][kuponVarmi])
	        return SendErrorMessage(playerid, "Seçilen yuvada hiç kupon yok.");

		new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		PlayerData[playerid][pMacID] = strval(notreal);
		new macid = MacID(Kuponlar[playerid][listitem][kuponMacID]);
		new string[2500], durum[256], durum2[256];
		format(durum, sizeof(durum), "{FFFFFF}Kupon NO: {2ECC71}%d\n", listitem);
		strcat(string, durum);
		format(durum, sizeof(durum), "{FFFFFF}Kupon Yazma Tarihi: {2ECC71}%s\n", Kuponlar[playerid][listitem][kuponTarih]);
		strcat(string, durum);
		format(durum, sizeof(durum), "{FFFFFF}Yatýrýlan Miktar: {2ECC71}%s\n", FormatNumber(Kuponlar[playerid][listitem][kuponYatirilan]));
		strcat(string, durum);
		format(durum, sizeof(durum), "{FFFFFF}Alýnacak Miktar: {2ECC71}%s\n", FormatNumber(Kuponlar[playerid][listitem][kuponOdul]));
		strcat(string, durum);
		if(Maclar[macid][macOynandimi])
		{
			format(durum, sizeof(durum), "{FFFFFF}Maç Skoru: {2ECC71}%s (%d) - %s (%d)\n", Takimlar[Maclar[macid][macTakim1]][takimAd], Maclar[macid][macTakim1Skor], Takimlar[Maclar[macid][macTakim2]][takimAd], Maclar[macid][macTakim2Skor]);
			strcat(string, durum);
		}
		if(Kuponlar[playerid][listitem][kuponTahmin] == 1) format(durum2, sizeof(durum2), "%s takýmý yener.", Takimlar[Maclar[macid][macTakim1]][takimAd]);
		if(Kuponlar[playerid][listitem][kuponTahmin] == 2) format(durum2, sizeof(durum2), "Berabere biter.");
        if(Kuponlar[playerid][listitem][kuponTahmin] == 3) format(durum2, sizeof(durum2), "%s takýmý yener.", Takimlar[Maclar[macid][macTakim2]][takimAd]);

		format(durum, sizeof(durum), "{FFFFFF}Tahmin: %s\n", durum2);
		strcat(string, durum);
		Dialog_Show(playerid, KuponBilgi, DIALOG_STYLE_MSGBOX, "Kupon Bilgi", string, "Kontrol", "Ýptal");
	}
	return 1;
}

Dialog:KuponBilgi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new kuponid = PlayerData[playerid][pMacID], macid = MacID(Kuponlar[playerid][kuponid][kuponMacID]);
	    if(!IddaaBayidemi(playerid)) return SendErrorMessage(playerid, "Ödemeyi alabilmek için iddaa bâyide olmanýz gerekmektedir.");
        if(!Maclar[macid][macOynandimi]) return SendErrorMessage(playerid, "Maç daha oynanmamýþ.");

        if(Mac_Kontrol(macid) == 1 && Kuponlar[playerid][kuponid][kuponTahmin] == 1)
        {
        	GiveMoney(playerid, Kuponlar[playerid][kuponid][kuponOdul]);
		    Kupon_Sil(playerid, kuponid);
		    SendServerMessage(playerid, "Tebriker kupon tutmuþ, paran verildi! (1)");
		}
		else if(Mac_Kontrol(macid) == 2 && Kuponlar[playerid][kuponid][kuponTahmin] == 2)
		{
		    GiveMoney(playerid, Kuponlar[playerid][kuponid][kuponOdul]);
		    Kupon_Sil(playerid, kuponid);
		    SendServerMessage(playerid, "Tebriker kupon tutmuþ, paran verildi! (2)");
		}
		else if(Mac_Kontrol(macid) == 3 && Kuponlar[playerid][kuponid][kuponTahmin] == 3)
		{
  			GiveMoney(playerid, Kuponlar[playerid][kuponid][kuponOdul]);
		    Kupon_Sil(playerid, kuponid);
		    SendServerMessage(playerid, "Tebriker kupon tutmuþ, paran verildi! (3)");
		}
		else
		{
		    Kupon_Sil(playerid, kuponid);
		    SendServerMessage(playerid, "Malesef kupon tutmamýþ, kupon silindi.");
		}
	}
	return 1;
}


CMD:level1(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 1) return SendErrorMessage(playerid, "Yetkin yok!");
	new string[1024];
 	foreach (new i : Player)
	{
	    if(PlayerData[i][pLevel] == 1 && SQL_IsLogged(i) && IsPlayerSpawned(i))
		{
		    new bilgiler[256];
		    format(bilgiler, sizeof(bilgiler), "%s - [ID: %d ]\n", ReturnName(i), i);
		    strcat(string, bilgiler);
		}
	}
	Dialog_Show(playerid, Level1ler, DIALOG_STYLE_LIST, "Acemi Oyuncular", string, "Tamam", "");
	return 1;
}

CMD:spawnla(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pTester] < 1 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/spawnla [id]");

    if (!IsPlayerConnected(userid) || IsPlayerNPC(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

//	if (!IsPlayerSpawnedEx(userid))
//	    return SendErrorMessage(playerid, "Oyuncu daha spawn olmadýðý için onu yeniden spawn edemezsiniz.");


	if (GetPlayerState(userid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 1658.8656,-1708.3640,20.4844);
		LinkVehicleToInterior(tmpcar, 0);
		SetPlayerVirtualWorld(userid, 0);
	}
	else
	{
		JBC_SetPlayerPos(userid, 1530.0323,-1741.5183,13.5469);
		SetPlayerVirtualWorld(userid, 0);
	}
 	SetPlayerInterior(userid,0);

	SendAdminAction(playerid, "%s adlý oyuncuyu spawnladýnýz.", ReturnName(userid, 0));
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yönetici %s adlý oyuncuyu spawnladý.", ReturnName(playerid, 0), ReturnName(userid, 0));
	SendErrorMessage(userid, "%s adlý yönetici sizi spawnladý.", ReturnName(playerid, 0)); // normal durumda adminactionmessage olmasý gerek renk deðissin diye böyle.
	ObjeleriYukle(userid);
	PlayerData[userid][pHouse] = -1;
	PlayerData[userid][pBusiness] = -1;
	PlayerData[userid][pEntrance] = -1;
	PlayerData[userid][pHospitalInt]  = -1;
	return 1;
}

CMD:doldur(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/doldur [id]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	PlayerData[userid][pHunger] = 100;
	PlayerData[userid][pThirst] = 100;

	SendAdminAction(playerid, "%s adlý oyuncunun açlýk ve susuzluðunu doldurdunuz.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s adlý yetkili senin  açlýk ve susuzluðunu doldurdu.", ReturnName(playerid, 0));

	return 1;
}

CMD:skin(playerid, params[])
{
	static
	    userid,
		skinid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ud", userid, skinid))
	    return SendSyntaxMessage(playerid, "/skin [id] [skin id]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	/*if (skinid < 0 || skinid > 311)
	    return SendErrorMessage(playerid, "Geçersiz skin ID. Skinler 0-311 arasýnda deðiþir.");*/

	SetPlayerSkin(userid, skinid);
	PlayerData[userid][pSkin] = skinid;

	SendAdminAction(playerid, "%s adlý oyuncunun kýyafetini ID %d olarak deðiþtirdiniz.", ReturnName(userid, 0), skinid);
	SendAdminAction(userid, "%s adlý yetkili kýyafetinini ID %d olarak deðiþtirdi.", ReturnName(playerid, 0), skinid);

	return 1;
}
/*CMD:setplayer(playerid, params[])
{
	static
	    userid,
	    type[16],
	    amount[32];
	    
 	if (sscanf(params, "us[16]S()[32]", userid, type, amount))
	 	SendSyntaxMessage(playerid, "/setplayer [id] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ÝSÝMLER]:{FFFFFF} cinsiyet, koken, oynamasaati, frekans, exp, payday");
		return 1;
	    
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Geçersiz kullanýcý.");

	if (!strcmp(type, "cinsiyet", true))
	{
	    if (isnull(amount) || strval(amount) < 1 || strval(amount) > 2)
     	   return SendSyntaxMessage(playerid, "/setplayer [oyuncu ID/isim] [cinsiyet] [1: erkek - 2: bayan]");

		PlayerData[userid][pGender] = strval(amount);

		if (PlayerData[userid][pGender] == 1)
			SendServerMessage(playerid, "%s adlý kiþinin cinsiyeti erkek olarak ayarlandý.", ReturnName(userid, 0));

		else if (PlayerData[userid][pGender] == 2)
			SendServerMessage(playerid, "%s adlý kiþinin cinsiyeti bayan olarak ayarlandý.", ReturnName(userid, 0));
	}
	else if (!strcmp(type, "koken", true))
	{
	    if (isnull(amount) || strlen(amount) > 32)
     	   return SendSyntaxMessage(playerid, "/setplayer [oyuncu ID/isim] [origin] [new origin]");

		format(PlayerData[userid][pOrigin], 32, amount);
		SendServerMessage(playerid, " %s adlý oyunun kökenini \"%s\"olarak ayarladýnýz.", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "oynamasaati", true))
	{
	    if (isnull(amount))
     	   return SendSyntaxMessage(playerid, "/setplayer [oyuncu ID/isim] [playinghours] [miktar]");

		PlayerData[userid][pPlayingHours] = strval(amount);
		SendServerMessage(playerid, "You have set %s's playing hours to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "frekans", true))
	{
	    if (isnull(amount))
     	   return SendSyntaxMessage(playerid, "/setplayer [oyuncu ID/isim] [Kanal] [Radyo Kanalý]");

		PlayerData[userid][pChannel] = strval(amount);
		SendServerMessage(playerid, " %s adlý kiþinin telsiz frekansýný %s kanala göre ayarladýnýz.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if(!strcmp(type, "exp", true))
	{
	    if(isnull(amount))
     	   return SendSyntaxMessage(playerid, "/setplayer [oyuncu ID/isim] [exp] [yeni exp]");
		PlayerData[userid][pEXP] = strval(amount);
		SendServerMessage(playerid, "%s adlý kiþinin level puanýný(exp) %d olarak deðiþtirdiniz.", ReturnName(userid, 0), strval(amount));
	}
	else if(!strcmp(type, "payday", true))
	{
	    if(isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [oyuncu ID/isim] [payday] [ypayday]");
		PlayerData[userid][pMinutes] = strval(amount);
		SendServerMessage(playerid, "%s adlý kiþinin payday süresini %d olarak deðiþtirdiniz.", ReturnName(userid, 0), strval(amount));
	}
 	SQL_SaveCharacter(playerid);
	return 1;
}*/

CMD:ban(playerid, params[])
{
	static
	    userid,
		reason[128],
		query[512];

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/ban [id] [sebep]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendinizi yasaklayamazsýnýz.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");


 	foreach (new i : Player) {
		if (!strcmp(PlayerData[i][pIP], PlayerData[userid][pIP]) && i != userid) {
		    KickEx(i);
		}
	}
	if(PlayerData[userid][pLevel] >= 3)
	{
		format(query, sizeof(query), "INSERT INTO `kickbanlog` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '%d')",  PlayerData[userid][pID], ReturnDate(), reason, ReturnName(playerid), SICIL_BAN);
		mysql_tquery(g_iHandle, query);
	}
    new str[128];
	format(str, sizeof str, "%s sunucudan banlandi. Gerekce: %s %s", ReturnName(userid), reason, ReturnDate());
	SendClientMessageToAllEx(0xFF8040FF, "(( %s sunucudan %s tarafýndan yasaklandý. Gerekçe: %s Tarih:%s ))", ReturnName(userid, 0), ReturnName(playerid, 0), reason,ReturnDate());
	Log_Write("logs/ban_log.txt", "[%s] %s was banned by %s for: %s.", ReturnDate(), ReturnName(userid, 0), ReturnName(playerid, 0), reason);
	Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], "", PlayerData[playerid][pUsername], reason);
	PlayerData[ playerid ][ aTBan ]++;
	KickEx(userid);
	//SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuyu yasakladý. Gerekçe: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
	return 1;
}

/*CMD:araczirhlat(playerid, params[]) V1'de eklenecek
{
       if(!IsPlayerInAnyVehicle(playerid))
	   		return SendErrorMessage(playerid, "Aracýnýzda deðilsiniz.");
       
       	if (!IsEngineVehicle(vehicleid))
			return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz!");

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    	return SendErrorMessage(playerid, "Bu komutu sadece aracýn sürücü koltuðundayken kullanabilirsiniz!");
	    	
 		if(!IsPlayerInRangeOfPoint(playerid, 4.1, 2072.3440, -1831.4056, 13.5545))
        	return SendErrorMessage(playerid, "Araç tamir etme noktasýnda deðilsiniz.");

    new vehicleid = GetPlayerVehicleID(playerid);
    if(AracZirh[vehicleid] < MAX_ARAC_ZIRH)
    {
     if(GetPlayerMoney(playerid) < 40000) return SendErrorMessage(playerid, "Aracýný Zýrhlatmak için 40000 $ gereklidir.");
	GiveMoney(playerid,-40000);

            AracZirh[vehicleid] = MAX_ARAC_ZIRH;
            SendClientMessage(playerid, -1, "Araç Zýrhlandý.");
    } else { SendClientMessage(playerid, -1, "Araç zaten zýrhlý!"); }
    return 1;
}*/

CMD:sban(playerid, params[])
{
	static
	    userid,
		reason[128],
		query[512];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/sban [id] [sebep]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendinizi yasaklayamazsýnýz.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");


 	foreach (new i : Player) {
		if (!strcmp(PlayerData[i][pIP], PlayerData[userid][pIP]) && i != userid) {
		    KickEx(i);
		}
	}
	if(PlayerData[userid][pLevel] >= 3)
	{
		format(query, sizeof(query), "INSERT INTO `kickbanlog` (`ID`, `Tarih`, `Sebep`, `Uygulayan`, `Tur`) VALUES('%d', '%s', '%s', '%s', '%d')",  PlayerData[userid][pID], ReturnDate(), reason, ReturnName(playerid), SICIL_BAN);
		mysql_tquery(g_iHandle, query);
	}
	Log_Write("logs/ban_log.txt", "[%s] %s was banned by %s for: %s.", ReturnDate(), ReturnName(userid, 0), ReturnName(playerid, 0), reason);
	Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], "", PlayerData[playerid][pUsername], reason);
	PlayerData[ playerid ][ aTBan ]++;
	KickEx(userid);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuyu sessiz yasakladý. Gerekçe: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
	return 1;
}

CMD:hesap(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] <= 0 ) return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params) || strlen(params) > 24)
		return SendSyntaxMessage(playerid, "/hesap [karakter adý]");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
	mysql_function_query(g_iHandle, query, true, "OnResolveUsername", "ds", playerid, params);

	return 1;
}

CMD:karakter(playerid, params[])
{
	ShowStatsForPlayer(playerid, playerid);
	return 1;
}

CMD:kontrol(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/kontrol [id]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Bu oyuncu henüz oturum açmýþ deðil.");

	ShowStatsForPlayer(playerid, userid);
	return 1;
}

CMD:sicilkontrol(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/sicilkontrol [id]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Bu oyuncu henüz oturum açmýþ deðil.");

	SicilKontrol(playerid, userid);
	SendAdminAction(playerid, "%s adlý oyuncunun sicilini kontrol etmektesiniz.", ReturnName(userid, 0));
	return 1;
}

CMD:aksesuar(playerid, params[])
{
	new string[1288], slot[256];
	for(new i; i < 5; i++)
	{

	    if(PlayerData[playerid][pASlot][i] != 0)
	    {
			format(slot, 256, "Slot ID: %d (Kullanýlýyor) (Model ID: %d)\n", i, PlayerData[playerid][pASlot][i]);
	    }
	    else format(slot, 256, "Slot ID: %d\n", i);
	    strcat(string, slot);
	}
    ShowPlayerDialog(playerid, DIALOG_ATTACH_INDEX_SELECTION, DIALOG_STYLE_LIST, "{FF0000}Aksesuar Slotlarý", string, "Seç", "{FF6347}Iptal");
	return 1;
}

CMD:taskagitmakas(playerid, params[])
{
    new
		szMessage[124];

    switch(random(3)) {
        case 0: format(szMessage, sizeof(szMessage), "* %s sað elini 'Taþ' yaptý.", ReturnName(playerid, 0));
		case 1: format(szMessage, sizeof(szMessage), "* %s sað elini 'Makas' yaptý.", ReturnName(playerid, 0));
 		case 2: format(szMessage, sizeof(szMessage), "* %s sað elini 'Kaðýt' yaptý.", ReturnName(playerid, 0));
    }
    return 	SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, szMessage);
}

CMD:goto(playerid, params[])
{
	static
	    id,
	    type[24],
	    userid,
		string[64];

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");


	if (sscanf(params, "u", id))
 	{
	 	SendSyntaxMessage(playerid, "/git [oyuncu veya isim]");
		SendClientMessage(playerid, COLOR_YELLOW, "[ÝSÝMLER]:{FFFFFF} spawn, hapis, ev, business, entrance, job, gate, interior");
		return 1;
	}
    if (id == INVALID_PLAYER_ID)
	{
	    if (sscanf(params, "s[24]S()[64]", type, string))
		{
		    SendSyntaxMessage(playerid, "/git [oyuncu veya isim]");
			SendClientMessage(playerid, COLOR_YELLOW, "[ÝSÝMLER]:{FFFFFF} spawn, ev, isyeri, bina, gate, interior");
			SendClientMessage(playerid, COLOR_YELLOW, "[ÝSÝMLER]:{FFFFFF} ls, sf, lv");
			return 1;
	    }
	    if (!strcmp(type, "spawn", true)) {
	        SetDefaultSpawn(playerid);

	        return SendServerMessage(playerid, "Varsayýlan spawn noktasýna gönderildin.");
		}
		else if (!strcmp(type, "ev", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/git [ev] [ev ID]");

			if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
			    return SendErrorMessage(playerid, "Geçersiz bir ev kimliði belirttiniz.");

		    JBC_SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		    SetPlayerInterior(playerid, HouseData[id][houseExterior]);

			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
		    SendServerMessage(playerid, "ID: %d numaralý eve gönderildin.", id);
		    return 1;
		}
		else if (!strcmp(type, "isyeri", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/git [iþyeri] [iþyeri ID]");

			if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
			    return SendErrorMessage(playerid, "Geçersiz bir iþyeri kimliði belirttiniz.");

		    JBC_SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		    SetPlayerInterior(playerid, BusinessData[id][bizExterior]);

			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
		    SendServerMessage(playerid, "ID: %d numaralý iþyerine gönderildin.", id);
		    return 1;
		}
		else if (!strcmp(type, "bina", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/git [bina] [bina ID]");

			if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
			    return SendErrorMessage(playerid, "Geçersiz bir bina kimliði belirttiniz.");

		    JBC_SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		    SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);

			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
		    SendServerMessage(playerid, "ID: %d numaralý binaya gönderildin.", id);
		    return 1;
		}
		else if (!strcmp(type, "gate", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/git [gate] [gate ID]");

			if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
			    return SendErrorMessage(playerid, "Geçersiz bir kapý kimliði belirttiniz.");

		    JBC_SetPlayerPos(playerid, GateData[id][gatePos][0] - (2.5 * floatsin(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][1] - (2.5 * floatcos(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][2]);
		    SetPlayerInterior(playerid, GateData[id][gateInterior]);

			SetPlayerVirtualWorld(playerid, GateData[id][gateWorld]);
		    SendServerMessage(playerid, "ID: %d numaralý gate'e gönderildin.", id);
		    return 1;
		}
		else if (!strcmp(type, "interior", true))
		{
		    static
		        str[1536];

			str[0] = '\0';

			for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
			    strcat(str, g_arrInteriorData[i][e_InteriorName]);
			    strcat(str, "\n");
		    }
		    Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Iþýnlan: Interior Listesi", str, "Seç", "Cancel");
		    return 1;
		}
	    else return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");
	}
	//if (!IsPlayerSpawnedEx(id))
	//	return SendErrorMessage(playerid, "Spawn olmadý.");

	SendPlayerToPlayer(playerid, id);
	SendServerMessage(playerid, "%s adlý oyuncunun yanýna ýþýnlandýn.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s adlý yetkili senin yanýna ýþýnlandý.", ReturnName(playerid, 0));
	ShowPlayerFooter(playerid, string);
	return 1;
}
CMD:go(playerid, params[])
{
static
	    id,
		userid,
		string[64];
if (PlayerData[playerid][pTester] < 2) return SendErrorMessage(playerid, "Yetkin yok!");
if (PlayerData[playerid][pAdmin] > 1) return SendErrorMessage(playerid, "Adminler bu komudu kullanamaz.");
if (sscanf(params, "u", id))
 	{
	 	SendSyntaxMessage(playerid, "/go [oyuncu veya isim]");
		return 1;
	}
SendPlayerToPlayer(playerid, id);
SendServerMessage(playerid, "%s adlý oyuncunun yanýna ýþýnlandýn.", ReturnName(userid, 0));
SendServerMessage(userid, "%s adlý yetkili senin yanýna ýþýnlandý.", ReturnName(playerid, 0));
ShowPlayerFooter(playerid, string);
SendTesterMessage(COLOR_LIGHTRED, "[HELPER]: %s adlý helper %s adlý oyuncunun yanýna gotolandý.", ReturnName(playerid, 0), ReturnName(id, 0));
return 1;
}
CMD:gonder(playerid, params[])
{
	static
	    userid,
	    type[24];

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/gonder [id] [ad]");
		SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} spawn, prison");
		return 1;
	}
    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

 	if (!strcmp(type, "spawn", true))
	 {
  		SetDefaultSpawn(userid);

		SendServerMessage(playerid, "%s adlý oyuncuyu varsayýlan spawn noktasýna ýþýnladýn.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s adlý yetkili sizi varsayýlan spawn noktasýna ýþýnladý.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "prison", true))
	{
		JBC_SetPlayerPos(playerid, 283.5930, 1413.3511, 10.4078);
  		SetPlayerFacingAngle(playerid, 180.0000);

		SetPlayerInterior(playerid, 0);
  		SetPlayerVirtualWorld(playerid, 0);

    	SendServerMessage(playerid, "%s adlý oyuncuyu cezaevine ýþýnladýn.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s adlý yetkili sizi varsayýlan cezaevine ýþýnladý.", ReturnName(playerid, 0));
	}
	return 1;
}
/*CMD:fly(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");


	    new Float:x, Float:y, Float:z;
		if((flying[playerid] = !flying[playerid]))
		{
		    GetPlayerPos(playerid, x, y, z);
		    SetPlayerPos(playerid, x, y, z+5);
    		SetPlayerArmour(playerid, 1000000000.0);
		    SetPlayerHealth(playerid, 1000000000.0);
		    SetTimerEx("AdminFly", 100, 0, "d", playerid);
		}
		else
		{
		    GetPlayerPos(playerid, x, y, z);
		    SetPlayerPos(playerid, x, y, z+0.5);
		    ClearAnimations(playerid);
		    SetPlayerArmour(playerid, 100.0);
            SetPlayerHealth(playerid, 100.0);
}
return 1;
}*/
CMD:get(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pTester] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");
 	if (PlayerData[playerid][pAdmin] > 1) return SendErrorMessage(playerid, "Adminler bu komudu kullanamaz.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/get [id]");

    if (!IsPlayerConnected(userid) || IsPlayerNPC(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");
    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý helper %s adlý oyuncuyu yanýna çekti.", ReturnName(playerid, 0), ReturnName(userid, 0));
	SendPlayerToPlayer(userid, playerid);
	SendServerMessage(playerid, "%s adlý oyuncuyu yanýna çektin.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s adlý yetkili seni yanýna çekti.", ReturnName(playerid, 0));
	return 1;
}
CMD:gethere(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/cek [ID]");

    if (!IsPlayerConnected(userid) || IsPlayerNPC(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	SendPlayerToPlayer(userid, playerid);
	SendServerMessage(playerid, "%s adlý oyuncuyu yanýnýza çektin.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s adlý yetkili seni yanýna çekti.", ReturnName(playerid, 0));
	return 1;
}

CMD:envanter(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pBaygin] || !IsPlayerSpawnedEx(playerid))
	    return SendErrorMessage(playerid, "Þu anda envanter açamazsýn.");

	if (PlayerData[playerid][pJailTime] > 0)
		return SendErrorMessage(playerid, "Hapisteyken envanter açamazsýn.");

	OpenInventory(playerid);
	return 1;
}


CMD:intayarla(playerid, params[])
{
	static
		userid,
	    interior;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ud", userid, interior))
		return SendSyntaxMessage(playerid, "/intayarla [id] [interior]");

	if (!IsPlayerConnected(userid) || IsPlayerNPC(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	SetPlayerInterior(userid, interior);
	PlayerData[userid][pInterior] = interior;

	SendServerMessage(playerid, "%s adlý oyuncunun interiorunu (%d) olarak deðiþtirdin.", ReturnName(userid, 0), interior);
	return 1;
}

CMD:vwduzenle(playerid, params[])
{
	static
		userid,
	    world;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ud", userid, world))
		return SendSyntaxMessage(playerid, "/vwduzenle [id] [VW]");

	if (!IsPlayerConnected(userid) || IsPlayerNPC(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	SetPlayerVirtualWorld(userid, world);
	PlayerData[userid][pWorld] = world;
	SendServerMessage(userid, "%s adlý yetkili virtual worldunu (%d) olarak deðiþtirdi.", ReturnName(playerid));
	SendServerMessage(playerid, "%s adlý oyuncunun virtual worldunu (%d) olarak deðiþtirdin.", ReturnName(userid, 0), world);
	return 1;
}

CMD:apm(playerid, params[])
{
	static
	    userid,
	    text[128];

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[128]", userid, text))
		return SendSyntaxMessage(playerid, "/apm [id] [mesaj]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	SendClientMessageEx(userid, COLOR_YELLOW, "[Yönetici]: %s: %s", PlayerData[playerid][pAdminName], text);
	PlayerData[ playerid ][ aTPM ]++;

	if (playerid != userid) {
		SendClientMessageEx(playerid, COLOR_YELLOW, "[Yönetici]: %s: %s", PlayerData[playerid][pAdminName], text);
	}
	return 1;
}

CMD:bankaldir(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params) || strlen(params) > 24)
	{
		SendSyntaxMessage(playerid, "/bankaldir [hesap]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[NOT]:{FFFFFF} \"/hesap\" komutunu kullanarak oyuncunun hesap adýný öðrenebilirsin. ");
	}
	else
	{
	    Blacklist_Remove(params);

	    SendServerMessage(playerid, " \"%s\" adlý oyuncunun yasaðýný kaldýrdýn.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili, \"%s\" adlý oyuncunun yasaðýný kaldýrdý.", ReturnName(playerid, 0), params);
        PlayerData[ playerid ][ aTUnban ]++;

	    Log_Write("logs/ban_log.txt", "[%s] %s has unbanned account \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:karaliste(playerid, params[])
{
	static
		type[24];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "s[24]s[128]", type, params))
 	{
	 	SendSyntaxMessage(playerid, "/karaliste [ad] [parametre]");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[ÝSÝMLER]:{FFFFFF} ban, banip, unbanip");
	 	return 1;
	}
	if (!strcmp(type, "ban", true))
	{
	    if (!IsValidPlayerName(params))
	        return SendErrorMessage(playerid, "Girdiðiniz ad doðru deðil.");

		foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], params) || !strcmp(ReturnName(i), params, true)) {
		    KickEx(i);
		}

		Blacklist_Add("0.0.0.0", params, "", PlayerData[playerid][pUsername], "Name Ban (/karaliste)");

	    SendServerMessage(playerid, "\"%s\" adlý oyuncuyu sunucudan yasakladýnýz.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili, \"%s\" adlý oyuncuyu sunucudan yasakladý.", ReturnName(playerid, 0), params);

	    Log_Write("logs/ban_log.txt", "[%s] %s has banned \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	else if (!strcmp(type, "banip", true))
	{
	    if (!IsAnIP(params))
	        return SendErrorMessage(playerid, "Girdiðiniz IP adresi doðru biçimde deðil.");

		foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], params)) {
		    KickEx(i);
		}
		Blacklist_Add(params, "", "", PlayerData[playerid][pUsername], "IP Ban (/karaliste)");

	    SendServerMessage(playerid, "You have banned IP \"%s\" successfully.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has banned IP \"%s\".", ReturnName(playerid, 0), params);

	    Log_Write("logs/ban_log.txt", "[%s] %s has banned IP \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	else if (!strcmp(type, "serial", true))
	{
		Blacklist_Add("0.0.0.0", "", params, PlayerData[playerid][pUsername], "Serial Ban (/karaliste)");

	    SendServerMessage(playerid, "You have banned serial \"%s\" successfully.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has banned serial \"%s\".", ReturnName(playerid, 0), params);

	    Log_Write("logs/ban_log.txt", "[%s] %s has banned serial \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	else if (!strcmp(type, "unbanip", true))
	{
	    if (!IsAnIP(params))
	        return SendErrorMessage(playerid, "Girdiðiniz IP adresi doðru biçimde deðil.");

		Blacklist_RemoveIP(params);

	  	SendServerMessage(playerid, " \"%s\" adlý oyuncunun yasaðýný kaldýrdýn.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili, \"%s\" adlý oyuncunun yasaðýný kaldýrdý.", ReturnName(playerid, 0), params);


	    Log_Write("logs/ban_log.txt", "[%s] %s has unbanned IP \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	return 1;
}
CMD:balikduzenle(playerid, params[]) // SUNUCU BALIK ORAN SÝSTEMÝ
{
	static
	    oran;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "i", oran))
		return SendSyntaxMessage(playerid, "/balikduzenle [balýk oraný]");


    TUTMA_ORANI = oran;
    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili balýk oranýný yüzde %d olarak düzenledi.", ReturnName(playerid, 0), oran);
	return 1;
}
CMD:paydayduzenle(playerid, params[]) // SUNUCU PAYDAY SÝSTEMÝ
{
	static
	    oran;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "i", oran))
		return SendSyntaxMessage(playerid, "/paydayduzenle [payday oraný]");


    PAYDAY_ORANI = oran;
    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili saatlik maaþý %d dakika olarak düzenledi.", ReturnName(playerid, 0), oran);
	return 1;
}

CMD:sethp(playerid, params[])
{
	static
		userid,
	    Float:amount;
	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "uf", userid, amount))
		return SendSyntaxMessage(playerid, "/sethp [id] [deðer]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	CanDegistir(userid, amount);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncunun canýný %.2f olarak ayarladý.", ReturnName(playerid, 0), ReturnName(userid, 0), amount);
	SendServerMessage(playerid, "%s adlý oyuncunun canýný %.2f olarak deðiþtirdin.", ReturnName(userid, 0), amount);
	return 1;
}
CMD:pmoku(playerid, params[])
{
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
PMSpec[playerid] = 1;
SendServerMessage(playerid, "Sana özel PM okuma aktif!");
return 1;
}
CMD:pmokuma(playerid, params[])
{
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
PMSpec[playerid] = 0;
SendServerMessage(playerid, "Sana özel PM okuma de-aktif!");
return 1;
}
CMD:setarmor(playerid, params[])
{
	static
		userid,
	    Float:amount;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "uf", userid, amount))
		return SendSyntaxMessage(playerid, "/armor [id] [amount]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    ZirhDegistir(userid, amount);
    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncunun zýrhýný %.2f olarak ayarladý.", ReturnName(playerid, 0), ReturnName(userid, 0), amount);
	SendServerMessage(playerid, "%s adlý oyuncunun zýrhýný %.2f olarak deðiþtirdin.", ReturnName(userid, 0), amount);
	return 1;
}

CMD:reklamlar(playerid, params[])
{
    if (PlayerData[playerid][pTester] < 1 && !PlayerData[playerid][pAdmin]) return SendErrorMessage(playerid, "Yetkin yok!");
	new string[1024], sayi, text[1024];
	SendServerMessage(playerid, "Reklamý onaylamak için /ro id, reddetmek için ise /rr id kullanýn.");
 	foreach (new i : Player)
	{
	    if(strlen(PlayerData[i][pAdvertise]) > 0)
		{
 			strunpack(text, PlayerData[playerid][pAdvertise]);
		    new bilgiler[256];
		    format(bilgiler, sizeof(bilgiler), "[ID: %d - NO: %d] %s", i, PlayerData[i][pPhone], ReturnName(i, 0));
		    SendServerMessage(playerid, "ID %d - NO: %d - Reklam: %s", i, PlayerData[i][pPhone], text);
		    strcat(string, bilgiler);
		    sayi++;
		}
	}
	if(sayi == 0) return SendErrorMessage(playerid, "Hiç reklam yok.");
 //Dialog_Show(playerid, Reklamlar, DIALOG_STYLE_MSGBOX, "Reklamlar", string, "Tamam", "");
	return 1;
}

CMD:ihbarlar(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_INTEL) return SendErrorMessage(playerid, "Yetkin yok!");
	new string[1024], sayi, text[128];
 	foreach (new i : Player)
	{
	    if(strlen(PlayerData[playerid][pIhbar]) > 0)
		{
 			strunpack(text, PlayerData[playerid][pIhbar]);
		    new bilgiler[256];
		    format(bilgiler, sizeof(bilgiler), "[ID: %d - NO: %d] %s: %s\n", i, PlayerData[i][pPhone], ReturnName(i), text);
		    strcat(string, bilgiler);
		    sayi++;
		}
	}
	if(sayi == 0) return SendErrorMessage(playerid, "Hiç ihbar yok.");
	Dialog_Show(playerid, Ihbarlar, DIALOG_STYLE_MSGBOX, "Ýhbarlar", string, "Tamam", "");
	return 1;
}

CMD:silahsifirla(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/silahsifirla [ID]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	ResetWeapons(userid);
	SendAdminAction(playerid, "%s Adlý oyuncunun silahlarýný sýfýrladýnýz.", ReturnName(userid, 0));
    SendAdminAction(userid, "%s Adlý admin senin silahlarýný sýfýrladý.", ReturnName(playerid, 0));
	return 1;
}

CMD:atamir(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (vehicleid > 0 && isnull(params))
	{
		RepairVehicle(vehicleid);
		SetPVarInt(playerid, "VehicleRepair", 1);
		SendServerMessage(playerid, "Bulunduðunuz araç tamir edildi.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
	    	return SendSyntaxMessage(playerid, "/atamir [araç ID]");

		else if (!IsValidVehicle(vehicleid))
	    	return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

		RepairVehicle(vehicleid);
		SetPVarInt(playerid, "VehicleRepair", 1);
		SendServerMessage(playerid, "Araç ID: %d tamir edildi.  ", vehicleid);
	}
	return 1;
}

CMD:araccek(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pTester] < 3 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/araccek [araç]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 2, y - 2, z);

 	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	return 1;
}

CMD:plakadegistir(playerid, params[])
{
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Aracýn içinde olmalýsýn.");
Dialog_Show(playerid, Market_OAP, DIALOG_STYLE_INPUT, "{2F4F4F}Market - {FFFFFF}Özelleþtirilmiþ Araç Plakasý","{FFFFFF}Lütfen istediðiniz araç plakasýný girin;\n\nNOT: Format (AAA 111) þeklinde olmalý. Ýlk satýr harf, ikincisi\nrakam olmalýdýr. Aralarýnda boþluk yapýn.", "Ayarla", "{FF6347}Iptal");
return 1;
}
CMD:aracabin(playerid, params[])
{
	new vehicleid, seatid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/aracabin [araç id]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

	seatid = GetAvailableSeat(vehicleid, 0);

	if (seatid == -1)
	    return SendErrorMessage(playerid, "Araçta boþ koltuk yok.");

	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return 1;
}

CMD:aracagit(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pTester] < 3 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/aracagit [Araç ID]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);
	JBC_SetPlayerPos(playerid, x, y - 2, z + 2);

	return 1;
}

CMD:aracirespawnla(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pTester] < 3 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/aracirespawnla [Araç ID]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

	RespawnVehicle(vehicleid);
	SendServerMessage(playerid, "ID: %d nolu araç respawn edildi.", vehicleid);

	return 1;
}


CMD:respawntrailer(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	new count;

	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    new modelid = GetVehicleModel(i);
	    if (modelid == 435)
	    {
	        RespawnVehicle(i);
	        tiryuk[i] = 0;
			count++;
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "Hiç araç yok.");

	SendServerMessage(playerid, "%d adet araç respawn edildi.", count);
	return 1;
}

CMD:araclarirespawnla(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	new count;

	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    new modelid = GetVehicleModel(i);
	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID && modelid != 435)
	    {
	        RespawnVehicle(i);
			count++;
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "Hiç araç yok.");

	SendServerMessage(playerid, "%d adet araç respawn edildi.", count);
	return 1;
}
CMD:vergisifirla(playerid, params[])
{
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
for (new i = 1; i != MAX_VEHICLES; i ++)
{
CarData[i][carVergi] = 0;
SendServerMessage(playerid, "Tüm arabalarýn vergisi sýfýrlandý");
}
return 1;
}
CMD:yaracspawnla(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	new count;

	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ;

	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
		{
			GetVehiclePos(i, fX, fY, fZ);

			if (IsPlayerInRangeOfPoint(playerid, 50.0, fX, fY, fZ))
			{
		        RespawnVehicle(i);
				count++;
			}
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "Respawn için yakýnýnýzda hiçbir araç bulunmaktadýr.");

	SendServerMessage(playerid, "%d adet araç spawnladýn.", count);
	return 1;
}
CMD:asilahver(playerid, params[])
{
	static
	    userid,
	    weaponid,
	    ammo;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "udI(500)", userid, weaponid, ammo))
	    return SendSyntaxMessage(playerid, "/asilahver [id] [silahid] [mermi]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

	if (weaponid <= 0 || weaponid > 46 || (weaponid >= 19 && weaponid <= 21))
		return SendErrorMessage(playerid, "Geçersiz silah ID'sý.");

	GiveWeaponToPlayer(userid, weaponid, ammo);
	SendAdminAlert(COLOR_LIGHTRED, "[SÝSTEM] %s adlý admin %s adlý oyuncuya %s(%d mermi) model silah verdi.", ReturnName(playerid), ReturnName(userid), ReturnWeaponName(weaponid), ammo);
	//SendTesterMessage(COLOR_LIGHTRED, "[SÝSTEM] %s adlý admin %s adlý oyuncuya %s(%d mermi) model silah verdi.", ReturnName(playerid), ReturnName(userid), ReturnWeaponName(weaponid), ammo);
	Log_Write("logs/silahverme_log.txt", "[%s] %s adlý admin %s adlý oyuncuya %s(%d mermi) model silah verdi.", ReturnDate(), ReturnName(playerid), ReturnName(userid), ReturnWeaponName(weaponid), ammo);
	SendServerMessage(playerid, "%s adlý oyuncuya %s(%d mermi) model silah verdin.", ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
	return 1;
}

CMD:ayarla(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "{FFFFFF}Komutu sadece yönetici kullanabilir.");

	static
	    userid,
	    type[16],
	    amount[32];

	if (sscanf(params, "us[16]S()[32]", userid, type, amount))
 	{
	 	SendSyntaxMessage(playerid, "/ayarla [id] [Fonksiyon]");
	 	SendClientMessage(playerid, COLOR_GRAY, "Fonksiyon:{FFFFFF} cinsiyet, dogumtarihi, tenrengi");
	 	SendClientMessage(playerid, COLOR_GRAY, "Fonksiyon:{FFFFFF} dilsifirla, koken, level, exp");
	 	SendClientMessage(playerid, COLOR_GRAY, "Fonksiyon:{FFFFFF} oynamasaati, payday, frekans");
		return 1;
	}
	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil!");

	if (!strcmp(type, "cinsiyet", true))
	{
	    if (isnull(amount) || strval(amount) < 1 || strval(amount) > 2)
	        return SendSyntaxMessage(playerid, "/ayarla [id] [cinsiyet] [1: erkek - 2: kadýn]");

		PlayerData[userid][pGender] = strval(amount);

		if (PlayerData[userid][pGender] == 1)
			SendServerMessage(playerid, "%s adlý oyuncunun cinsiyetini 'Erkek' olarak deðiþtirdin.", ReturnName(userid, 0));

		else if (PlayerData[userid][pGender] == 2)
			SendServerMessage(playerid, "%s adlý oyuncunun cinsiyetini 'Kadýn' olarak deðiþtirdin.", ReturnName(userid, 0));
	}
	else if (!strcmp(type, "dogumtarihi", true))
	{
	    if (isnull(amount) || strlen(amount) > 24)
	        return SendSyntaxMessage(playerid, "/ayarla [id] [dogumtarihi] [Yeni Doðum Tarihi]");

		format(PlayerData[userid][pBirthdate], 24, amount);
		SendServerMessage(playerid, "%s adlý oyuncunun doðum tarihini \"%s\" olarak deðiþtirdin.", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "tenrengi", true))
	{
	    if (isnull(amount) || strlen(amount) > 32)
	        return SendSyntaxMessage(playerid, "/ayarla [id] [tenrengi] [Yeni Ten Rengi (Beyaz, siyah)]");

		format(PlayerData[userid][pTenRengi], 32, amount);
		SendServerMessage(playerid, "You have set %s's tenrengi to \"%s\".", ReturnName(userid, 0), amount);
	}
	else if(!strcmp(type, "level", true))
	{
	    if(isnull(amount))
 		return SendSyntaxMessage(playerid, "/setplayer [oyuncu ID/isim] [yeni level]");
		PlayerData[userid][pLevel] = strval(amount);
		SendServerMessage(playerid, "%s adlý oyuncunun seviyesini deðiþtirdiniz.", ReturnName(userid, 0), strval(amount));
	}
	else if (!strcmp(type, "dilsifirla", true))
	{
		PlayerData[userid][pEkstraDil] = 0;
		SendServerMessage(playerid, "%s adlý oyuncunun ekstra dilini sýfýrladýnýz.", ReturnName(userid, 0));
	}
	else if (!strcmp(type, "koken", true))
	{
	    if (isnull(amount) || strlen(amount) > 32)
	        return SendSyntaxMessage(playerid, "/ayarla [id] [koken] [Yeni Köken]");

		format(PlayerData[userid][pOrigin], 32, amount);
		SendServerMessage(playerid, "You have set %s's origin to \"%s\".", ReturnName(userid, 0), amount);
	}
	else if(!strcmp(type, "payday", true))
	{
	    if(isnull(amount))
	        return SendSyntaxMessage(playerid, "/ayarla [id] [payday] [ypayday]");
		PlayerData[userid][pMinutes] = strval(amount);
		SendServerMessage(playerid, "%s adlý oyuncunun payday süresini %d olarak deðiþtirdiniz.", ReturnName(userid, 0), strval(amount));
	}
 	else if (!strcmp(type, "oynamasaati", true))
	{
	    if (isnull(amount))
     	   return SendSyntaxMessage(playerid, "/ayarla [id] [playinghours] [miktar]");

		PlayerData[userid][pPlayingHours] = strval(amount);
		SendServerMessage(playerid, "%s adlý oyunucunun oynama saatini deðiþtirdiniz. Yeni saat: %s saat.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "frekans", true))
	{
	    if (isnull(amount))
     	   return SendSyntaxMessage(playerid, "/ayarla [id] [Kanal] [Radyo Kanalý]");

		PlayerData[userid][pChannel] = strval(amount);
		SendServerMessage(playerid, " %s adlý oyuncunun telsiz frekansýný %s kanala göre ayarladýnýz.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if(!strcmp(type, "exp", true))
	{
	    if(isnull(amount))
     	   return SendSyntaxMessage(playerid, "/ayarla [oyuncu ID/isim] [exp] [yeni exp]");
		PlayerData[userid][pEXP] = strval(amount);
		SendServerMessage(playerid, "%s adlý kiþinin level puanýný(exp) %d olarak deðiþtirdiniz.", ReturnName(userid, 0), strval(amount));
	}
	SQL_SaveCharacter(playerid);
 	return 1;

}

CMD:banbilgi(playerid, params[])
{
    static
		string[128];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params) || strlen(params) > 24)
	{
		SendSyntaxMessage(playerid, "/banbilgi [hesap adý]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[NOT]:{FFFFFF} \"/hesap\" komutunu kullanarak oyuncunun hesap adýný öðrenebilirsin. ");
	}
	else
	{
	    format(string, sizeof(string), "SELECT * FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	    mysql_function_query(g_iHandle, string, true, "OnBanLookup", "ds", playerid, params);
	}
	return 1;
}

CMD:helperyap(playerid, params[])
{
	static
	    userid, seviye;

    if (PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ud", userid, seviye))
	    return SendSyntaxMessage(playerid, "/helperyap [id] [Seviye]");

	if (seviye < 0 || seviye > 5) return SendErrorMessage(playerid, "Belirttiðiniz seviye 0'den az, 5'ten fazla olamaz!");
	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil!");

	if (seviye == 0)
	{
	    PlayerData[userid][pTester] = 0;
	    SendAdminAction(playerid, "%s adlý oyuncuyu helperlikten kovdun.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s adlý yetkili seni helperlikten kovdu.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pTester] = seviye;
        SendAdminAction(playerid, "%s adlý oyuncuyu %d seviye helper yaptýn.", ReturnName(userid, 0), seviye);
		SendAdminAction(userid, "%s adlý yetkili seni %d seviye helper yaptý.", ReturnName(playerid, 0), seviye);
	}
	return 1;
}

CMD:setadminname(playerid, params[])
{
	static
	    userid,
	    newname[24];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[24]", userid, newname))
	    return SendSyntaxMessage(playerid, "/setadminname [id] [adminname]");

	if (!IsPlayerConnected(userid))
		return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Bu oyuncu giriþ yapmamýþ.");

	format(PlayerData[userid][pAdminName], 24, "%s", newname);
	SendServerMessage(userid, "%s adlý yetkili senin admin adýný %s olarak deðiþtirdi.", ReturnName(playerid), newname);
	SendServerMessage(playerid, "%s adlý oyuncunun admin adýný %s olarak deðiþtirdiniz.", ReturnName(userid), newname);
	return 1;
}
CMD:sethelpername(playerid, params[])
{
	static
	    userid,
	    newname[24];

 if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[24]", userid, newname))
	    return SendSyntaxMessage(playerid, "/sethelpername [id] [helpername]");

	if (!IsPlayerConnected(userid))
		return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Bu oyuncu giriþ yapmamýþ.");

	format(PlayerData[userid][pTesterName], 24, "%s", newname);
	SendServerMessage(userid, "%s adlý yetkili senin helper adýný %s olarak deðiþtirdi.", ReturnName(playerid), newname);
	SendServerMessage(playerid, "%s adlý oyuncunun helper adýný %s olarak deðiþtirdiniz.", ReturnName(userid), newname);
	return 1;
}
CMD:setforumnick(playerid, params[])
{
	static
	    userid,
	    rows,
	    fields,
	    newname[32];
        cache_get_data(rows, fields, g_iHandle);

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[24]", userid, newname))
	    return SendSyntaxMessage(playerid, "/setforumnick [id] [forumnick]");

	if (!IsPlayerConnected(userid))
		return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Bu oyuncu giriþ yapmamýþ.");


	if (rows) return SendErrorMessage(playerid, "\"%s\" forum nicki kullanýlýyor.", newname);


	format(PlayerData[userid][pForumNick], 32, "%s", newname);
	SendServerMessage(userid, "%s adlý yetkili senin forum adýný %s olarak deðiþtirdi.", ReturnName(playerid), newname);
	SendServerMessage(playerid, "%s adlý oyuncunun forum adýný %s olarak deðiþtirdiniz.", ReturnName(userid), newname);
	return 1;
}


CMD:isimdegistir(playerid, params[])
{
	static
	    userid,
	    newname[24],
		query[128];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[24]", userid, newname))
	    return SendSyntaxMessage(playerid, "/isimdegistir [ID] [Yeni Ýsim]");

	if (!IsPlayerConnected(userid))
		return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Bu oyuncu giriþ yapmamýþ.");

	if (!IsValidPlayerName(newname))
	    return SendErrorMessage(playerid, "Geçersiz bir ad biçimi belirttiniz.");

	foreach (new i : Player) if (!strcmp(ReturnName(i), newname)) {
	    return SendErrorMessage(playerid, "Bu isim þuan kullanýmdadýr. Baþka bir isim tercih edin.");
	}
	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(newname));
	mysql_function_query(g_iHandle, query, true, "OnNameChange", "dds", playerid, userid, newname);
    IC_Sicil_Reset(playerid);
	return 1;
}

CMD:chattemizle(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	for (new i = 0; i < 100; i ++) {
	    SendClientMessageToAll(-1, "");
	}
	return 1;
}

CMD:ccmy(playerid, params[])
{
	for (new i = 0; i < 100; i ++) {
	    SendClientMessage(playerid, -1, "");
	}
	return 1;
}

CMD:kutu(playerid, params[]) // inþaat mesleði
{
if(PlayerData[playerid][pJob] == JOB_INSAAT)
		{
	if(isnull(params))
 	return SendClientMessage(playerid, -1, "{a64ca6}[Ýnþaat Mesleði] {FFFFFF}Kullaným: /kutu [al/birak]");

	if(!strcmp(params, "al", true))
	{

			if(GetPVarInt(playerid, "KutuTasiyor") == 1)
		    return SendClientMessage(playerid, -1, "{a64ca6}[Ýnþaat Mesleði] {FFFFFF}Zaten kutu taþýyorsunuz.");

		if(!IsPlayerInRangeOfPoint(playerid, 1.0, kutual))
	    	return SendClientMessage(playerid, -1, "{a64ca6}[Ýnþaat Mesleði] {FFFFFF}Kutu almak için bölgenin içinde olmalýsýnýz.");

		SetPVarInt(playerid, "KutuTasiyor", 1);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 5000, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		SetPlayerAttachedObject(playerid, INDEX_EKSTRASILAH, 1220, 5, 0.101, -0.0, 0.0, 5.50, 90, 90, 1, 1);
		SendClientMessage(playerid, -1, "{a64ca6}[Ýnþaat Mesleði] {FFFFFF}Kutuyu aldýnýz, kutuyu en yakýn bölgeye býrakmanýz gerekmektedir.");
	}

	else if(!strcmp(params, "birak", true))
	{


		if(GetPVarInt(playerid, "KutuTasiyor") == 0)
		    return SendClientMessage(playerid, -1, "{a64ca6}[Ýnþaat Mesleði] {FFFFFF}Bu komutu kullanabilmek için elinizde kutu olmalý.");

		if(!IsPlayerInRangeOfPoint(playerid, 2.0, kutubirak))
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, kutubirak2))
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, kutubirak3))
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, kutubirak4))
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, kutubirak5))
	    	return SendClientMessage(playerid, -1, "{a64ca6}[Ýnþaat Mesleði] {FFFFFF}Kutuyu býrakmak için bölgede olmanýz gerekmektedir.");

        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 5000, 1);
		RemovePlayerAttachedObject(playerid, INDEX_EKSTRASILAH);
		SetPVarInt(playerid, "KutuTasiyor", 0);
		GiveMoney(playerid, 370);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SendClientMessage(playerid, -1, "{56AA79}[Ýnþaat Mesleði] {FFFFFF}Kutuyu bölgeye býraktýnýz ve {56AA79}$370 {FFFFFF}kazandýnýz.");

	}

	else return SendClientMessage(playerid, -1, "{a64ca6}[Ýnþaat Mesleði] {FFFFFF}Kullaným: /kutu [al/birak]");
	}
		else
		{
		SendErrorMessage(playerid,"Mesleðe katýlmadan komut kullanýlamaz.");
		}
	return 1;
}

CMD:x(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "KULLANIM: /x [Kordinat]");
		GetPlayerPos(playerid, x, y, z);
		JBC_SetPlayerPos(playerid, x+npos, y, z);
		return 1;
	}
	else return SendErrorMessage(playerid, "Bu komutu sadece yöneticiler kullanabilir !");
}
COMMAND:y(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "KULLANIM: /y [Kordinat]");
		GetPlayerPos(playerid, x, y, z);
		JBC_SetPlayerPos(playerid, x, y+npos, z);
		return 1;
	}
	else return SendErrorMessage(playerid, "Bu komutu sadece yöneticiler kullanabilir !");
}
COMMAND:z(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "KULLANIM: /z [Kordinat]");
		GetPlayerPos(playerid, x, y, z);
		JBC_SetPlayerPos(playerid, x, y, z+npos);
		return 1;
	}
	else return SendErrorMessage(playerid, "Bu komutu sadece yöneticiler kullanabilir !");
}

CMD:futbolgit(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

    JBC_SetPlayerPos(playerid, BallSpawn[0] + random(5), BallSpawn[1] + random(5), BallSpawn[2]);
	return 1;
}

CMD:futbolsifirla(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

    RecreateBall();
    SendServerMessage(playerid, "Toplar sýfýrlandý.");
	return 1;
}

CMD:bilardosifirla(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

    RespawnPoolBalls();
    SendServerMessage(playerid, "Toplar sýfýrlandý.");
	return 1;
}

CMD:gotopos(playerid, params[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		interior;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "dfff", interior, x, y, z))
	    return SendSyntaxMessage(playerid, "/spawn [interior] [x] [y] [z]");

	JBC_SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interior);

	return 1;
}

CMD:createhouse(playerid, params[])
{
	static
	    price,
	    id,
	    address[32];

    if (PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[32]", price, address))
	    return SendSyntaxMessage(playerid, "/createhouse [fiyat] [adres]");

	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], address, true)) {
	    return SendErrorMessage(playerid, "Belirttiðiniz \"%s\" adresi zaten kullanýmda. (ID: %d).", address, i);
	}
	id = House_Create(playerid, address, price);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu yeterli ev sýnýrýna ulaþmýþtýr.");

	SendServerMessage(playerid, "Baþarýyla ev oluþturdun, ID: %d.", id);
	return 1;
}

CMD:destroyhouse(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyhouse [house id]");

	if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
	    return SendErrorMessage(playerid, "Geçersiz bir ev ID'sý belirttiniz.");

	House_Delete(id);
	GarajSil(id);
	SendServerMessage(playerid, "Baþarýyla evi sildin, Silinen ID: %d.", id);
	return 1;
}


CMD:yarisyardim(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "YARIÞ:{FFFFFF} /yarisayril, /yariscilar, /yarisolustur, /yarisduzenle.");
	return 1;
}

CMD:evyardim(playerid, params[])
{
    SendClientMessage(playerid, 0xFFFF00FF, "_____________________________________________");
	SendClientMessage(playerid, COLOR_CLIENT, "EV:{FFFFFF} /satinal, /imhaet, /mulkkilit, /ev");
	SendClientMessage(playerid, COLOR_CLIENT, "EV:{FFFFFF} /tv, /garajkilit, /gardolap");
	SendClientMessage(playerid, 0xFFFF00FF, "_____________________________________________");
	return 1;
}

CMD:aracyardim(playerid, params[])
{
    SendClientMessage(playerid, 0xFFFF00FF, "_____________________________________________");
    SendClientMessage(playerid, COLOR_CLIENT, "KULLANIM:{FFFFFF} /arac [aksiyon]");
	SendClientMessage(playerid, COLOR_CLIENT, "AKSÝYON:{FFFFFF} /arac motor, /arac kilit, /arac park");
	SendClientMessage(playerid, COLOR_CLIENT, "AKSÝYON:{FFFFFF} /arac benzin, /arac bagaj, /arac kaput");
	SendClientMessage(playerid, COLOR_CLIENT, "AKSÝYON:{FFFFFF} /arac anahtarver, /arac tamir, /arac radyo, /arac at");
	SendClientMessage(playerid, 0xFFFF00FF, "_____________________________________________");
	return 1;
}

CMD:aile(playerid, params[])
{
	new kisi[256];
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	if(PlayerData[playerid][pPartner] == 0) return SendClientMessage(playerid, COLOR_CLIENT, "Kimseyle evli deðilsin.");
	else {
	    format(kisi, 256, "Evli olduðun kiþi: %s", SQLName(PlayerData[playerid][pPartner]));
		SendClientMessage(playerid, COLOR_CLIENT, kisi);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:amotd(playerid, params[])
{
	static
		motd[128];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "s[128]", motd))
	    return SendSyntaxMessage(playerid, "/amotd [motd] ");

    SendServerMessage(playerid, "MOTD deðiþtirildi.");
    format(g_ServerMOTD, 128, motd);
    new smotd[128];
    Server_Save();
	format(smotd, 128,  "[YENÝ SUNUCU DUYURUSU]:{FFFFFF} %s", g_ServerMOTD);
    foreach(new i : Player)
    {
		SendClientMessage(i, COLOR_RADIO, smotd);
		//PlayerTextDrawSetString(i, LoginTD[i][24], g_ServerMOTD);
  	}
	return 1;
}


CMD:satinal(playerid, params[])
{
	static
		id = -1;

	if ((id = House_Nearest(playerid)) != -1)
	{
		if (House_GetCount(playerid) >= MAX_OWNABLE_HOUSES)
			return SendErrorMessage(playerid, "En fazla %d eve sahip olabilirsin.", MAX_OWNABLE_HOUSES);

		if (HouseData[id][houseOwner] != 0)
		    return SendErrorMessage(playerid, "Bu evin zaten þu anda sahibi var.");

		if (HouseData[id][housePrice] > GetMoney(playerid))
		    return SendErrorMessage(playerid, "Satýn almak için yeterli paran yok.");

	    HouseData[id][houseOwner] = GetPlayerSQLID(playerid);

        format(HouseData[id][houseOwnerName], 24, ReturnName(playerid));
		House_Refresh(id);
		SQL_SaveCharacter(playerid);
		House_Save(id);
		HouseData[id][houseMoney] = 0;
		for (new i = 0; i != 10; i++)
		{
		    HouseData[id][houseWeapons][i] = 0;
		    HouseData[id][houseAmmo][i] = 0;
		}
	    GiveMoney(playerid, -HouseData[id][housePrice]);
	    SendClientMessageEx(playerid, 0x804040FF, "Ev Satýn Alma: {FFFFFF}%s karþýlýðýnda evi satýn aldýn!", FormatNumber(HouseData[id][housePrice]));
	    Log_Write("logs/house_log.txt", "[%s] %s has purchased house ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(HouseData[id][housePrice]));
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{

		if (BusinessData[id][bizOwner] != 0)
		    return SendErrorMessage(playerid, "Bu iþyerinin zaten þu anda sahibi var.");

		if (BusinessData[id][bizPrice] > GetMoney(playerid))
		    return SendErrorMessage(playerid, "Satýn almak için yeterli paran yok.");

	    BusinessData[id][bizOwner] = GetPlayerSQLID(playerid);

        format(BusinessData[id][bizOwnerName], 24, ReturnName(playerid));
		Business_Refresh(id);
		Business_Save(id);
		BusinessData[id][bizVault] = 0;
	    GiveMoney(playerid, -BusinessData[id][bizPrice]);
	    SendServerMessage(playerid, "\"%s\" adlý iþyerini %s'a baþarýyla satýn aldýn !", BusinessData[id][bizName], FormatNumber(BusinessData[id][bizPrice]));

		ShowPlayerFooter(playerid, "Isyeri basariyla satin ~g~alindi!~w~");
	    Log_Write("logs/biz_log.txt", "[%s] %s has purchased business ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(BusinessData[id][bizPrice]));
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
	//	if (BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner])
	//	    return SendErrorMessage(playerid, "Bu iþyeri kapalý!");

		if (BusinessData[id][bizType] == 5) {
		    Business_CarMenu(playerid, id);
		} else {
			Business_PurchaseMenu(playerid, id);
		}
	}
	return 1;
}

stock DestekGuncelle(playerid)
{
    if(BkDurum[playerid])
    {
		 new Float:pos[3];
		 GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
         for (new i = 0; i < MAX_PLAYERS; i++)
         {
         	if(IsPlayerConnected(i))
            {
            	if(GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_INTEL)
                {
					if(i != playerid)
					{
                   		SetPlayerCheckpoint(i, pos[0], pos[1], pos[2], 4);
                		SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
                	}
                }
			}
         }
    }
	return 1;
}


CMD:destekiste(playerid, params[])
{

   if(IsPlayerConnected(playerid))
   {
            if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL)
            {
                if(!BkDurum[playerid])
                {
					BkDurum[playerid] = true;
                    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADYO: %s adlý memur destek istiyor.", ReturnName(playerid, 0));
                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telsizin acil durum butonuna basar ve destek ister.", ReturnName(playerid, 0));
                    SendServerMessage(playerid, "Destek istendi, desteði kapatmak için tekrar /destekiste yazabilirsin.");
                    SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
                }
                else
                {
                    BackupClear(playerid, 0);

                    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADYO: %s adlý memur destek isteðini kapattý.", ReturnName(playerid, 0));
                }
            }
            else
            {
                SendServerMessage(playerid, "Polis deðilsin.");
            }
	}
	return 1;
}


forward BackupClear(playerid, calledbytimer);
public BackupClear(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
		if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL)
		{
			if (BkDurum[playerid])
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_INTEL)
						{
							SetPlayerMarkerForPlayer(i, playerid, COLOR_RADIO);
							DisablePlayerCheckpoint(i);
						}
					}
				}
				if (calledbytimer != 1)
				{
					SendServerMessage(playerid, "Destek kapatýldý.");
				}
				else
				{
					SendServerMessage(playerid, "Destek otomatik olarak kapatýldý.");
				}
				BkDurum[playerid] = false;
			}
		}
	}
	return 1;
}

CMD:createobject(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	id = Object_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu maksimum obje limitine ulaþtý.");
	SendServerMessage(playerid, "Obje yaratýldý, ID: %d.", id);
	return 1;
}

stock Object_Create(playerid, ownerid = 0)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_OBJECTS; i ++) if (!ObjectData[i][objectVarmi])
		{
			ObjectData[i][objectVarmi] = true;
			ObjectData[i][objectModel] = 2000;
			ObjectData[i][objectPos][0] = x + (3.0 * floatsin(-angle, degrees));
			ObjectData[i][objectPos][1] = y + (3.0 * floatcos(-angle, degrees));
			ObjectData[i][objectPos][2] = z;
			ObjectData[i][objectPos][3] = 0.0;
			ObjectData[i][objectPos][4] = 0.0;
			ObjectData[i][objectPos][5] = 0.0;
			ObjectData[i][objectInterior] = GetPlayerInterior(playerid);
			ObjectData[i][objectWorld] = GetPlayerVirtualWorld(playerid);
			ObjectData[i][objectOwner] = PlayerData[ownerid][pID];

            ObjectData[i][objectObject] = CreateDynamicObject(ObjectData[i][objectModel], ObjectData[i][objectPos][0], ObjectData[i][objectPos][1], ObjectData[i][objectPos][2], ObjectData[i][objectPos][3], ObjectData[i][objectPos][4], ObjectData[i][objectPos][5], ObjectData[i][objectWorld], ObjectData[i][objectInterior]);

			mysql_tquery(g_iHandle, "INSERT INTO `objects` (`objectModel`) VALUES(2000)", "OnObjectCreated", "d", i);
			return i;
		}
	}
	return -1;
}


CMD:imhaet(playerid, params[])
{
	static
	    id = -1;

    if (!IsPlayerInAnyVehicle(playerid) && (id = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "kabul", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/imhaet [kabul]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Hiçbir geri ödeme bulunmadan evinizi terk etmek üzeresiniz.");
		}
		else if (!strcmp(params, "kabul", true))
		{
		    new odenecekmiktar = HouseData[id][housePrice] / 3;
			HouseData[id][houseOwner] = 0;
            HouseData[id][houseKiralayan] = -1;
		 	HouseData[id][houseKiralanabilir] = false;
			HouseData[id][houseKiraZaman] = 0;
			HouseData[id][houseKiraSure] = 0;
			HouseData[id][houseKiraUcret] = 0;

			GiveMoney(playerid, odenecekmiktar);
			House_Refresh(id);
			SQL_SaveCharacter(playerid);
			House_Save(id);

			SendServerMessage(playerid, "Ev elden çýkarýldý: %s. (Geri ödenen miktar: %s)", HouseData[id][houseAddress], FormatNumber(odenecekmiktar));
			Log_Write("logs/house_log.txt", "[%s] %s has abandoned house ID: %d, (Geri Odenen Miktar: %s)", ReturnDate(), ReturnName(playerid), id, FormatNumber(odenecekmiktar));
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "kabul", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/imhaet [kabul]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[UYARI]:{FFFFFF} Hiçbir geri ödeme bulunmadan evinizi terk etmek üzeresiniz.");
		}
		else if (!strcmp(params, "kabul", true))
		{
		    new odenecekmiktar = BusinessData[id][bizPrice] / 3;
			BusinessData[id][bizOwner] = 0;

			Business_Refresh(id);
			Business_Save(id);
            GiveMoney(playerid, odenecekmiktar);

			SendServerMessage(playerid, "Ýþyeri elden çýkarýldý: %s. (Geri ödenen miktar: %s)", BusinessData[id][bizName], FormatNumber(odenecekmiktar));
			Log_Write("logs/biz_log.txt", "[%s] %s has abandoned business ID: %d, (Geri Odenen Miktar: %s)", ReturnDate(), ReturnName(playerid), id, FormatNumber(odenecekmiktar));
		}
	}
	else if ((id = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "kabul", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/imhaet [kabul]");
	        new
			    model = CarData[id][carModel],
				fiyat = AracFiyati(model);

			if(fiyat == -1) return SendErrorMessage(playerid, "Bu araç galeride yok, fiyat biçemiyoruz.");

	        SendServerMessage(playerid, "Bu aracý imha ederseniz %s alacaksýnýz.", FormatNumber(fiyat / 2));
		}
		else if (CarData[id][carImpounded] != -1)
    		return SendErrorMessage(playerid, "Bu araç þu anda cezalý ve bu iþlemi uygulayamazsýnýz.");

		else if (!strcmp(params, "kabul", true))
		{
			new
			    model = CarData[id][carModel],
				fiyat = AracFiyati(model);

			if(fiyat == -1) return SendErrorMessage(playerid, "Bu araç galeride yok, fiyat biçemiyoruz.");

			GiveMoney(playerid, fiyat / 2);
			Car_Delete(id);

			SendServerMessage(playerid, "%s model araç imha edildi.", ReturnVehicleModelName(model));
			Log_Write("logs/car_log.txt", "[%s] %s has abandoned their %s. (Geri Odenen Miktar: %s)", ReturnDate(), ReturnName(playerid), ReturnVehicleModelName(model), FormatNumber(fiyat / 2));
		}
	}
	else SendErrorMessage(playerid, "Ýmha edecek birþeyde deðilsin.");
	return 1;
}

CMD:garajkilit(playerid, params[])
{

	static
	    id = -1;

	if ((id = (House_GarajInside(playerid) == -1) ? (House_GarajaYakinMi(playerid)) : (House_GarajInside(playerid))) != -1 && House_IsOwner(playerid, id))
	{
		if (!HouseData[id][garajKilit])
		{
			HouseData[id][garajKilit] = true;
			House_Save(id);

			ShowPlayerFooter(playerid, "Garaj kilitlendi!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			HouseData[id][garajKilit] = false;
			House_Save(id);

			ShowPlayerFooter(playerid, "Garaj kilidi acildi!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

CMD:sat(playerid, params[])
{
	static
	    targetid,
	    type[24],
	    string[128];

	if (sscanf(params, "us[24]S()[128]", targetid, type, string))
	{
	    SendSyntaxMessage(playerid, "/sat [id] [fonksiyon]");
	    SendClientMessage(playerid, COLOR_YELLOW, "Fonksiyon:{FFFFFF} ev, isyeri, arac");
	    return 1;
	}
	if (targetid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, targetid, 5.0))
	{
		SendErrorMessage(playerid, "Oyuncu size yakýn deðil veya oyunda deðil.");
		return 1;
	}
	if (targetid == playerid)
	{
		SendErrorMessage(playerid, "Kendinize satamazsýnýz.");
		return 1;
	}
	if (!strcmp(type, "ev", true))
	{
		static
		    price,
			houseid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/sat [id] [ev] [fiyat]");

		if (price < 1 || price > 999999)
		    return SendErrorMessage(playerid, "Fiyat $1'ýn altýnda olamaz.");

		if ((houseid = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, houseid)) {
			PlayerData[targetid][pHouseSeller] = playerid;
			PlayerData[targetid][pHouseOffered] = houseid;
			PlayerData[targetid][pHouseValue] = price;

		    SendServerMessage(playerid, "Evi %s adlý oyuncuya satmayý talep ettin. (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s adlý oyuncu size %s dolara evi satmayý talep etti. (Kabul etmek için \"/kabulet ev\" yazýn).", ReturnName(playerid, 0), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "Evinin yakýnýnda deðilsin.");
	}
	else if (!strcmp(type, "isyeri", true))
	{
		static
		    price,
			bizid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/sat [id] [isyeri] [fiyat]");

		if (price < 1 || price > 999999)
		    return SendErrorMessage(playerid, "Fiyat $1'ýn altýnda olamaz.");

		if ((bizid = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, bizid)) {
			PlayerData[targetid][pBusinessSeller] = playerid;
			PlayerData[targetid][pBusinessOffered] = bizid;
			PlayerData[targetid][pBusinessValue] = price;

		    SendServerMessage(playerid, "Ýþyerini %s adlý oyuncuya satmayý talep ettin. (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s adlý oyuncu size %s dolara iþyerini satmayý talep etti. (Kabul etmek için \"/kabulet isyeri\" yazýn).", ReturnName(playerid, 0), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "Ýþyerinin yakýnýnda deðilsin.");
	}
	else if (!strcmp(type, "arac", true))
	{
		static
		    price,
			carid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/sat [id] [arac] [fiyat]");

		if (price < 1 || price > 999999)
		    return SendErrorMessage(playerid, "Fiyat $1'ýn altýnda olamaz.");

		if ((carid = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, carid)) {
			PlayerData[targetid][pCarSeller] = playerid;
			PlayerData[targetid][pCarOffered] = carid;
			PlayerData[targetid][pCarValue] = price;

		    SendServerMessage(playerid, "%s model aracý %s adlý oyuncuya satmayý talep ettin. (%s).", ReturnVehicleModelName(CarData[carid][carModel]), ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s adlý oyuncu %s model aracý size satmayý talep etti. (%s) (Kabul etmek için \"/kabulet arac\" yazýn).", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "Aracýnýn içinde olmalýsýn.");
	}
 	return 1;
}



CMD:kabulet(playerid, params[])
{
 if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/kabulet [fonksiyon]");
		SendClientMessage(playerid, COLOR_YELLOW, "Fonksiyon:{FFFFFF} ev, isyeri, arac, gida, birlik, selamlama, arama, dovus, evlilik.");
		return 1;
	}
	if (!strcmp(params, "ev", true) && PlayerData[playerid][pHouseSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pHouseSeller],
	        houseid = PlayerData[playerid][pHouseOffered],
	        price = PlayerData[playerid][pHouseValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Oyuncuya yakýn deðilsin.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Bu evi satýn almak yeterli paraya sahip deðilsin.");

		if (House_Nearest(playerid) != houseid)
		    return SendErrorMessage(playerid, "Evi satýn almak için evin yakýnýnda olman gereklidir.");

		if (!House_IsOwner(sellerid, houseid))
		    return SendErrorMessage(playerid, "Bu ev teklifi artýk geçerli deðil.");

		SendServerMessage(playerid, "%s adlý oyuncudan %s'a evi baþarýyla satýn aldýn.", ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s adlý oyuncuya %s'a ev baþarýyla satýldý.", ReturnName(playerid, 0), FormatNumber(price));

		HouseData[houseid][houseOwner] = GetPlayerSQLID(playerid);
		House_Save(houseid);

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) has sold a house to %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pHouseOffered] = -1;
		PlayerData[playerid][pHouseValue] = 0;
	}
	if (!strcmp(params, "isyeri", true) && PlayerData[playerid][pBusinessSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pBusinessSeller],
	        bizid = PlayerData[playerid][pBusinessOffered],
	        price = PlayerData[playerid][pBusinessValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Oyuncuya yakýn deðilsin.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Bu iþyerini satýn almak yeterli paraya sahip deðilsin.");

		if (Business_Nearest(playerid) != bizid)
		    return SendErrorMessage(playerid, "Ýþyerini satýn almak için iþyerinin yakýnýnda olman gereklidir.");

		if (!Business_IsOwner(sellerid, bizid))
		    return SendErrorMessage(playerid, "Bu iþyeri teklifi artýk geçerli deðil.");

		SendServerMessage(playerid, "You have successfully purchased %s's business for %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s has successfully purchased your business for %s.", ReturnName(playerid, 0), FormatNumber(price));

		BusinessData[bizid][bizOwner] = GetPlayerSQLID(playerid);
		Business_Save(bizid);

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) has sold a business to %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pBusinessOffered] = -1;
		PlayerData[playerid][pBusinessValue] = 0;
	}
	if (!strcmp(params, "arac", true) && PlayerData[playerid][pCarSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pCarSeller],
	        carid = PlayerData[playerid][pCarOffered],
	        price = PlayerData[playerid][pCarValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Oyuncuya yakýn deðilsin.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Bu aracý satýn almak yeterli paraya sahip deðilsin.");

		if (Car_Nearest(playerid) != carid)
		    return SendErrorMessage(playerid, "You must be near the vehicle to purchase it.");

		if (!Car_IsOwner(sellerid, carid))
		    return SendErrorMessage(playerid, "Bu araç teklifi artýk geçerli deðil.");

		SendServerMessage(playerid, "Araç satýldý.", ReturnName(sellerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
		SendServerMessage(sellerid, "Araç satýldý.", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));

		CarData[carid][carOwner] = GetPlayerSQLID(playerid);
		Car_Save(carid);

        CarData[carid][carPrice] = 0;
		AracIlan(CarData[carid][carVehicle]);

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) has sold a %s to %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnVehicleModelName(CarData[carid][carModel]), ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pCarOffered] = -1;
		PlayerData[playerid][pCarValue] = 0;
	}
	if (!strcmp(params, "evlilik", true) && PlayerData[playerid][pPartnerTeklif] != INVALID_PLAYER_ID)
	{
	    new
	        partnerid = PlayerData[playerid][pPartnerTeklif];

		if (!IsPlayerNearPlayer(playerid, partnerid, 6.0))
		    return SendErrorMessage(playerid, "Oyuncuya yakýn deðilsin.");

		if(PlayerData[playerid][pPartner] != 0 || PlayerData[partnerid][pPartner] != 0 )
	    	return SendErrorMessage(playerid, "Evlilik için iki çiftinde partneri olmamasý gereklidir.");

		PlayerData[playerid][pPartner] = PlayerData[partnerid][pID];
        PlayerData[partnerid][pPartner] = PlayerData[playerid][pID];

		SendClientMessageToAllEx(0xB8860BAA, "KÝLÝSE: {FFFFFF}%s ile %s evlendi!", ReturnName(partnerid, 0), ReturnName(playerid, 0));
		Log_Write("logs/evlilik_log.txt", "[%s] %s, %s ile evlendi.", ReturnDate(), ReturnName(playerid, 0), ReturnName(partnerid , 0));

		PlayerData[playerid][pPartnerTeklif] = INVALID_PLAYER_ID;
	}
	if (!strcmp(params, "gida", true) && PlayerData[playerid][pFoodSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pFoodSeller],
			type = PlayerData[playerid][pFoodType],
	        price = PlayerData[playerid][pFoodPrice];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Oyuncuya yakýn deðilsin.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Bu gýdayý satýn almak yeterli paraya sahip deðilsin.");

		switch (type)
		{
		    case 1:
		    {
				new id = Inventory_Add(playerid, "Su", 2958);

				if (id == -1)
				    return SendErrorMessage(playerid, "Envanterde boþ yer yok.");

				GiveMoney(sellerid, price);
                GiveMoney(playerid, -price);

		        SendServerMessage(playerid, "%s adlý kiþiden $%d'a 'Su' aldýnýz.", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s adlý kiþi teklifi kabul etti ve sana $%d verdi.", ReturnName(playerid, 0), price);
			}
			case 2:
		    {
				new id = Inventory_Add(playerid, "Soda", 1543);

				if (id == -1)
				    return SendErrorMessage(playerid, "Envanterde boþ yer yok.");
                GiveMoney(sellerid, price);
                GiveMoney(playerid, -price);
		       	SendServerMessage(playerid, "%s adlý kiþiden $%d'a 'Soda' aldýnýz.", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s adlý kiþi teklifi kabul etti ve sana $%d verdi.", ReturnName(playerid, 0), price);
			}
			case 3:
		    {
				new id = Inventory_Add(playerid, "Pismis Hamburger", 2703);

				if (id == -1)
				    return SendErrorMessage(playerid, "Envanterde boþ yer yok.");
                GiveMoney(sellerid, price);
                GiveMoney(playerid, -price);
		        SendServerMessage(playerid, "%s adlý kiþiden $%d'a 'Hambuger' aldýnýz.", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s adlý kiþi teklifi kabul etti ve sana $%d verdi.", ReturnName(playerid, 0), price);
			}
			case 4:
		    {
				new id = Inventory_Add(playerid, "Pismis Pizza", 2702);

				if (id == -1)
				    return SendErrorMessage(playerid, "Envanterde boþ yer yok.");
                GiveMoney(sellerid, price);
                GiveMoney(playerid, -price);
		        SendServerMessage(playerid, "%s adlý kiþiden $%d'a 'Pizza' aldýnýz.", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s adlý kiþi teklifi kabul etti ve sana $%d verdi.", ReturnName(playerid, 0), price);
			}
			case 5:
		    {
				new id = Inventory_Add(playerid, "Tavuk", 2663);

				if (id == -1)
				    return SendErrorMessage(playerid, "Envanterde boþ yer yok.");
                GiveMoney(sellerid, price);
                GiveMoney(playerid, -price);
				SendServerMessage(playerid, "%s adlý kiþiden $%d'a 'Tavuk' aldýnýz.", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s adlý kiþi teklifi kabul etti ve sana $%d verdi.", ReturnName(playerid, 0), price);
			}
			case 6:
		    {
		        if (PlayerData[playerid][pHunger] > 90)
            		return SendErrorMessage(playerid, "Þuanda hiç aç deðilsin.");

				PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 15 > 100) ? (100) : (PlayerData[playerid][pHunger] + 15);
                GiveMoney(sellerid, price);
                GiveMoney(playerid, -price);
				SendServerMessage(playerid, "%s adlý kiþiden $%d'a 'Dondurma' aldýnýz.", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s adlý kiþi teklifi kabul etti ve sana $%d verdi.", ReturnName(playerid, 0), price);
			}
		}
		PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pFoodType] = 0;
		PlayerData[playerid][pFoodPrice] = 0;
	}
	if (!strcmp(params, "birlik", true) && PlayerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pFactionOffer],
	        factionid = PlayerData[playerid][pFactionOffered];

		if (!FactionData[factionid][factionExists] || PlayerData[targetid][pFactionRank] < FactionData[PlayerData[targetid][pFaction]][factionRanks] - 1)
	   	 	return SendErrorMessage(playerid, "Envanterde boþ yer yok.");

		SetFaction(playerid, factionid);
		PlayerData[playerid][pFactionRank] = 1;

		SendServerMessage(playerid, "You have accepted %s's offer to join \"%s\".", ReturnName(targetid, 0), Faction_GetName(targetid));
		SendServerMessage(targetid, "%s has accepted your offer to join \"%s\".", ReturnName(playerid, 0), Faction_GetName(targetid));

        PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFactionOffered] = -1;
	}
	if (!strcmp(params, "tokalasma", true) && PlayerData[playerid][pShakeOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pShakeOffer],
	        type = PlayerData[playerid][pShakeType];

        if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "Oyuncuya yakýn deðilsin.");

		SetPlayerToFacePlayer(playerid, targetid);
		SetPlayerToFacePlayer(targetid, playerid);

		PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
		PlayerData[playerid][pShakeType] = 0;

		switch (type)
		{
		    case 1:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			    ApplyAnimation(targetid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			}
	    }
	    SendServerMessage(playerid, "%s adlý oyuncununu tokalaþma isteðini kabul ettin.", ReturnName(targetid, 0));
	    SendServerMessage(targetid, "%s senin tokalaþma isteðini kabul etti.", ReturnName(playerid, 0));
	}
	if (!strcmp(params, "arama", true) && PlayerData[playerid][pFriskOffer] != INVALID_PLAYER_ID)
	{
	    new
			targetid = PlayerData[playerid][pFriskOffer];

	    if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "Oyuncuya yakýn deðilsin.");

		static string[2056];

		string[0] = 0;
	    for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
		{
	 		if (InventoryData[playerid][i][invExists]) {
	   			format(string, sizeof(string), "%s%d\n%d\n", string, InventoryData[playerid][i][invModel], InventoryData[playerid][i][invQuantity]);
			}
		}
		//ShowPlayerDialog(targetid, MODEL_SELECTION_INVENTORY, DIALOG_STYLE_PREVMODEL, ReturnName(playerid), string, "Sec", "Iptal");
		SendServerMessage(targetid, "Kiþinin üzerindeki para miktari: %s", FormatNumber(GetMoney(playerid)));
		SendServerMessage(playerid, "Kiþi þu anda üstünü aramakta.");
		SendServerMessage(targetid, "Kiþi üstünü aramayý kabul etti.");
		if (Inventory_HasItem(playerid, "Marijuana Tohumu"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Marijuana Tohumu (%d)", Inventory_Count(playerid, "Marijuana Tohumu"));

//    if (Inventory_HasItem(playerid, "Kokain Tohumu"))
//		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Kokain Tohumu (%d)", Inventory_Count(playerid, "Kokain Tohumu"));

		if (Inventory_HasItem(playerid, "Golf Club"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Golf Club (%d)", Inventory_Count(playerid, "Golf Club"));

		if (Inventory_HasItem(playerid, "Knife"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Knife (%d)", Inventory_Count(playerid, "Knife"));

		if (Inventory_HasItem(playerid, "Shovel"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Shovel (%d)", Inventory_Count(playerid, "Shovel"));

		if (Inventory_HasItem(playerid, "Katana"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Katana (%d)", Inventory_Count(playerid, "Katana"));

		if (Inventory_HasItem(playerid, "Colt 45"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Colt 45 (%d)", Inventory_Count(playerid, "Colt 45"));

		if (Inventory_HasItem(playerid, "Desert Eagle"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Desert Eagle (%d)", Inventory_Count(playerid, "Desert Eagle"));
		
			if (Inventory_HasItem(playerid, "Maymuncuk"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Maymuncuk (%d)", Inventory_Count(playerid, "Maymuncuk"));


		if (Inventory_HasItem(playerid, "Micro SMG"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Micro SMG (%d)", Inventory_Count(playerid, "Micro SMG"));

		if (Inventory_HasItem(playerid, "Tec-9"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Tec-9 (%d)", Inventory_Count(playerid, "Tec-9"));

		if (Inventory_HasItem(playerid, "MP5"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** MP5 (%d)", Inventory_Count(playerid, "MP5"));

		if (Inventory_HasItem(playerid, "Shotgun"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Shotgun (%d)", Inventory_Count(playerid, "Shotgun"));

		if (Inventory_HasItem(playerid, "AK-47"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** AK-47 (%d)", Inventory_Count(playerid, "AK-47"));

		if (Inventory_HasItem(playerid, "Sniper"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Sniper (%d)", Inventory_Count(playerid, "Sniper"));

		if (Inventory_HasItem(playerid, "Rifle"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Rifle (%d)", Inventory_Count(playerid, "Rifle"));

		if (Inventory_HasItem(playerid, "Sarjor"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Sarjor (%d)", Inventory_Count(playerid, "Sarjor"));

		if (Inventory_HasItem(playerid, "Pismis Hamburger"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Pismis Hamburger (%d)", Inventory_Count(playerid, "Pismis Hamburger"));

        if (Inventory_HasItem(playerid, "Pismis Pizza"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Pismis Pizza (%d)", Inventory_Count(playerid, "Pismis Pizza"));

		if (Inventory_HasItem(playerid, "Ehliyet"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Ehliyet (%d)", Inventory_Count(playerid, "Ehliyet"));

		if (Inventory_HasItem(playerid, "Motor Ehliyeti"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Motor Ehliyeti (%d)", Inventory_Count(playerid, "Motor Ehliyeti"));

		if (Inventory_HasItem(playerid, "Ruhsat"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Ruhsat (%d)", Inventory_Count(playerid, "Ruhsat"));

		if (Inventory_HasItem(playerid, "Telefon"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Telefon (%d)", Inventory_Count(playerid, "Telefon"));

		if (Inventory_HasItem(playerid, "GPS Cihazi"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** GPS Cihazi (%d)", Inventory_Count(playerid, "GPS Cihazi"));

		if (Inventory_HasItem(playerid, "Sprey Kutusu"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Sprey Kutusu (%d)", Inventory_Count(playerid, "Sprey Kutusu"));

		if (Inventory_HasItem(playerid, "Su"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Su (%d)", Inventory_Count(playerid, "Su"));

		if (Inventory_HasItem(playerid, "Bira"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Bira (%d)", Inventory_Count(playerid, "Bira"));

		if (Inventory_HasItem(playerid, "Soda"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Soda (%d)", Inventory_Count(playerid, "Soda"));

		if (Inventory_HasItem(playerid, "Benzin Kutusu"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Benzin Kutusu (%d)", Inventory_Count(playerid, "Benzin Kutusu"));

		if (Inventory_HasItem(playerid, "Levye"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Levye (%d)", Inventory_Count(playerid, "Levye"));

		if (Inventory_HasItem(playerid, "Boombox"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Boombox (%d)", Inventory_Count(playerid, "Boombox"));

		if (Inventory_HasItem(playerid, "Tezgah"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Tezgah (%d)", Inventory_Count(playerid, "Tezgah"));

		if (Inventory_HasItem(playerid, "Sandalye"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Sandalye (%d)", Inventory_Count(playerid, "Sandalye"));

		if (Inventory_HasItem(playerid, "Sosisli"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Sosisli (%d)", Inventory_Count(playerid, "Sosisli"));

		if (Inventory_HasItem(playerid, "Maske"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Maske (%d)", Inventory_Count(playerid, "Maske"));

		if (Inventory_HasItem(playerid, "Ilkyardim Kiti"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Ilkyardim Kiti (%d)", Inventory_Count(playerid, "Ilkyardim Kiti"));

		if (Inventory_HasItem(playerid, "Alet Cantasi"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Alet Cantasi (%d)", Inventory_Count(playerid, "Alet Cantasi"));

		if (Inventory_HasItem(playerid, "NOS Kapagi"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** NOS Kapagi (%d)", Inventory_Count(playerid, "NOS Kapagi"));

		if (Inventory_HasItem(playerid, "Dondurulmus Pizza"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Dondurulmus Pizza (%d)", Inventory_Count(playerid, "Dondurulmus Pizza"));

		if (Inventory_HasItem(playerid, "Dondurulmus Hamburger"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Dondurulmus Hamburger (%d)", Inventory_Count(playerid, "Dondurulmus Hamburger"));

		if (Inventory_HasItem(playerid, "Cephane Kartusu"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Cephane Kartusu (%d)", Inventory_Count(playerid, "Cephane Kartusu"));

		if (Inventory_HasItem(playerid, "Celik Yelek"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Celik Yelek (%d)", Inventory_Count(playerid, "Celik Yelek"));

		if (Inventory_HasItem(playerid, "Bos Sise"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Bos Sise (%d)", Inventory_Count(playerid, "Bos Sise"));

		if (Inventory_HasItem(playerid, "Karton"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Karton (%d)", Inventory_Count(playerid, "Karton"));

		if (Inventory_HasItem(playerid, "Tavuk"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Tavuk (%d)", Inventory_Count(playerid, "Tavuk"));

		if (Inventory_HasItem(playerid, "Telsiz"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Telsiz (%d)", Inventory_Count(playerid, "Telsiz"));

		if (Inventory_HasItem(playerid, "Metal"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Metal (%d)", Inventory_Count(playerid, "Metal"));

		if (Inventory_HasItem(playerid, "Zar"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Zar (%d)", Inventory_Count(playerid, "Zar"));

		if (Inventory_HasItem(playerid, "Sigara"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Sigara (%d)", Inventory_Count(playerid, "Sigara"));

		if (Inventory_HasItem(playerid, "Ip"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Ip (%d)", Inventory_Count(playerid, "Ip"));

        if (Inventory_HasItem(playerid, "Goz Bagi"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Goz Bagi (%d)", Inventory_Count(playerid, "Goz Bagi"));

		if (Inventory_HasItem(playerid, "Bugday"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Bugday (%d)", Inventory_Count(playerid, "Bugday"));

		if (Inventory_HasItem(playerid, "Kalas"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Kalas (%d)", Inventory_Count(playerid, "Kalas"));

        if (Inventory_HasItem(playerid, "Kaykay"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Kaykay (%d)", Inventory_Count(playerid, "Kaykay"));

		if (Inventory_HasItem(playerid, "Mayo"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Mayo (%d)", Inventory_Count(playerid, "Mayo"));



    if (Inventory_HasItem(targetid, "Skunk Tohumu"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Skunk Tohumu (%d)", Inventory_Count(playerid, "Skunk Tohumu"));

	if (Inventory_HasItem(playerid, "LSD"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** LSD (%d)", Inventory_Count(playerid, "LSD"));

    if (Inventory_HasItem(playerid, "Marijuana"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Marijuana (%d)", Inventory_Count(playerid, "Marijuana"));

    if (Inventory_HasItem(playerid, "Kokain"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Kokain (%d)", Inventory_Count(playerid, "Kokain"));

    if (Inventory_HasItem(playerid, "Eroin"))
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Eroin (%d)", Inventory_Count(playerid, "Eroin"));

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] && PlayerData[playerid][pAmmo][i] > 0) {
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "** %s", ReturnWeaponName(PlayerData[playerid][pGuns][i]));
	    }
		PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	}
	return 1;
}
CMD:forumbagla(playerid, params[])
{
if (isnull(params)) return SendSyntaxMessage(playerid, "/forumbagla [forumnick]");
if (PlayerData[playerid][pForumBaglandi]) return SendErrorMessage(playerid, "Zaten önceden forum hesabýný baðlamýþsýn!");
format(PlayerData[playerid][pForumNick], 32, "%s", params);
PlayerData[playerid][pForumBaglandi] = 1;
SendServerMessage(playerid, "Forum ve karakter baðlantýnýz baþarýyla tamamlanmýþtýr.");
SendServerMessage(playerid, "Yanlýþ forum adý yazdýysanýz sunucudan yasaklanacaksýnýz.");
SendServerMessage(playerid, "Forum adýnýz: %s olarak belirlendi.", params);
return 1;
}

CMD:edithouse(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/edithouse [id] [parametre]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} lokasyon, interior, fiyat, adres, tip, garaj, garajsil");
		return 1;
	}
	if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
	    return SendErrorMessage(playerid, "Geçersiz ev ID'sý.");

	if (!strcmp(type, "lokasyon", true))
	{
		GetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		GetPlayerFacingAngle(playerid, HouseData[id][housePos][3]);

		HouseData[id][houseExterior] = GetPlayerInterior(playerid);
		HouseData[id][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

		House_Refresh(id);
		House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu evin lokasyonunu deðiþtirdi.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
		GetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

		HouseData[id][houseInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pHouse] == HouseData[id][houseID])
			{
				JBC_SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

				SetPlayerInterior(i, HouseData[id][houseInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		House_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu evin interiorunu deðiþtirdi.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "fiyat", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [fiyat] [Yeni Fiyat]");

	    HouseData[id][housePrice] = price;

	    House_Refresh(id);
	    House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu evin fiyatýný %s olarak deðiþtirdi.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "adres", true))
	{
	    new address[32];

	    if (sscanf(string, "s[32]", address))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [adres] [Yeni Adres]");

	    format(HouseData[id][houseAddress], 32, address);

	    House_Refresh(id);
	    House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu evin adresini \"%s\" olarak deðiþtirdi.", ReturnName(playerid, 0), id, address);
	}
	else if (!strcmp(type, "tip", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [tip] [Interior Tipi]");

		if (typeint < 1 || typeint > sizeof(arrHouseInteriors))
			return SendErrorMessage(playerid, "Belirtilen tip 1 ve %d arasýnda olmalýdýr.", sizeof(arrHouseInteriors));

	    HouseData[id][houseInt][0] = arrHouseInteriors[typeint][eHouseX];
	    HouseData[id][houseInt][1] = arrHouseInteriors[typeint][eHouseY];
	    HouseData[id][houseInt][2] = arrHouseInteriors[typeint][eHouseZ];
	    HouseData[id][houseInt][3] = arrHouseInteriors[typeint][eHouseAngle];
        HouseData[id][houseInterior] = arrHouseInteriors[typeint][eHouseInterior];

  foreach (new i : Player)
		{
			if (PlayerData[i][pHouse] == HouseData[id][houseID])
			{
				JBC_SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

				SetPlayerInterior(i, HouseData[id][houseInterior]);
				SetCameraBehindPlayer(i);
			}
		}
	    House_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu evin tipini %d olarak deðiþtirdi.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "garaj", true))
	{
	    if(HouseData[id][garajTip] >= 1) return SendErrorMessage(playerid, "Bu evin zaten bir garajý var.");
	    new Float:pos[4];
	   	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerFacingAngle(playerid, pos[3]);

    	GarajOlustur(id, pos[0], pos[1], pos[2], pos[3]);
		House_Refresh(id);
		House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu eve bir garaj oluþturdu.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "garajsil", true))
	{
	    if(HouseData[id][garajTip] >= 1) return SendErrorMessage(playerid, "Bu evin garajý yok.");

    	GarajSil(id);
		House_Refresh(id);
		House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu evin garajýný sildi.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:near(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if ((id = Car_Nearest(playerid)) != -1)
		SendServerMessage(playerid, "Yakýnýndaki Araç ID: %d.", id);

	if ((id = House_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndaki Ev ID: %d.", id);

    if ((id = Business_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndaki Ýþyeri ID: %d.", id);

    if ((id = Entrance_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndaki Bina ID: %d.", id);

    if ((id = Job_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndaki Meslek ID: %d.", id);

    if ((id = Arrest_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndaki Hapishane Noktasý ID: %d.", id);

    if ((id = Pump_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndaki Yakýt Pompasý ID: %d.", id);

    if ((id = Obje_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndaki Obje ID: %d.", id);

    if ((id = Crate_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndaki Sandýk ID: %d.", id);

    if ((id = Gate_NearestEx(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndaki Gate ID: %d.", id);

    if ((id = Garbage_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndaki Çöp Kutusu ID: %d.", id);

    if ((id = Vendor_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Yakýnýndai Gýda Makinasý ID: %d.", id);

	if ((id = Rack_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Yakýnýndaki Raf ID: %d.", id);

    if ((id = Speed_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Yakýnýndaki Radar ID: %d.", id);

    if ((id = Graffiti_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Yakýnýndaki Graffiti ID: %d.", id);

    if ((id = Detector_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Yakýnýndaki Metal Dedektörü ID: %d.", id);

	return 1;
}

CMD:createbiz(playerid, params[])
{
    static
		type,
	    price,
	    id;

    if (PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "dd", type, price))
 	{
	 	SendSyntaxMessage(playerid, "/createbiz [tip] [fiyat]");
    	SendClientMessage(playerid, COLOR_YELLOW, "[TÝPLER]:{FFFFFF} 1: Market | 2: Silahçý | 3: Giyim | 4: Fast Food | 5: Araç Bayiliði | 6: Benzin Ýstasyonu | 7: Mobilya | 8: Elektronik");
  		SendClientMessage(playerid, COLOR_YELLOW, "[TÝPLER]:{FFFFFF} 9: Pub/Bar");
    	return 1;
	}
	if (type < 1 || type > 9)
	    return SendErrorMessage(playerid, "Geçersiz tip belirtilmiþ. Tipler 1-9 arasýnda deðiþmektedir.");

	id = Business_Create(playerid, type, price);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu iþyeri sýnýrýna ulaþtý.");

	SendServerMessage(playerid, "Baþarýyla iþyeri oluþturuldu, ID: %d.", id);
	return 1;
}

CMD:editbiz(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

		if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editbiz [id] [ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} lokasyon, kilit, interior, teslimat, ad, fiyat, stok, tip, araclar, spawn");
		return 1;
	}
	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "Geçersiz iþyeri ID'sý.");

	if (!strcmp(type, "lokasyon", true))
	{
 		GetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3]);

		BusinessData[id][bizExterior] = GetPlayerInterior(playerid);
		BusinessData[id][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

		Business_Refresh(id);
		Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu iþyerinin lokasyonunu deðiþtirdi.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

		BusinessData[id][bizInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
			{
				JBC_SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

				SetPlayerInterior(i, BusinessData[id][bizInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu iþyerinin interiorunu deðiþtirdi.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "teslimat", true))
	{
	    if (BusinessData[id][bizType] == 5)
	        return SendErrorMessage(playerid, "Bu iþyeri teslimatlarý kabul etmez.");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "Teslimat noktasý sadece dýþarýda olabilir!");

	    GetPlayerPos(playerid, BusinessData[id][bizDeliver][0], BusinessData[id][bizDeliver][1], BusinessData[id][bizDeliver][2]);
		Business_Refresh(id);

		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu iþyerinin teslimat noktasýný deðiþtirdi.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "fiyat", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/editbiz [id] [fiyat] [Yeni Fiyat]");

	    BusinessData[id][bizPrice] = price;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu iþyerinin fiyatýný %s olarak deðiþtirdi.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "stok", true))
	{
	    new amount;

	    if (sscanf(string, "d", amount))
	        return SendSyntaxMessage(playerid, "/editbiz [id] [stok] [Ürün Sayýsý]");

	    BusinessData[id][bizProducts] = amount;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu iþyerinin stok sayýsýný %s olarak deðiþtirdi.", ReturnName(playerid, 0), id, FormatNumber(amount, ""));
	}
	else if (!strcmp(type, "ad", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editbiz [id] [ad] [Yeni Ad]");

	    format(BusinessData[id][bizName], 32, name);

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu iþyerinin adýný \"%s\" olarak deðiþtirdi.", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "kilit", true))
	{
	  	if(BusinessData[id][bizLocked])
		{
		    BusinessData[id][bizLocked] = false;
		    SendServerMessage(playerid, "Dükkanýn kilidi açýldý.");
		}
		else
		{
		    BusinessData[id][bizLocked] = true;
		    SendServerMessage(playerid, "Dükkan kilitlendi.");
		}

	    Business_Refresh(id);
	    Business_Save(id);
	}
	else if (!strcmp(type, "tip", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        SendSyntaxMessage(playerid, "/editbiz [id] [tip] [Ýþyeri Tipi]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TÝPLER]:{FFFFFF} 1: Market | 2: Silahçý | 3: Giyim | 4: Fast Food | 5: Araç Bayiliði | 6: Benzin Ýstasyonu | 7: Mobilya | 8: Elektronik");
  			SendClientMessage(playerid, COLOR_YELLOW, "[TÝPLER]:{FFFFFF} 9: Pub/Bar");
			return 1;
		}
		if (typeint < 1 || typeint > 9)
			return SendErrorMessage(playerid, "Belirtilen tip 1 ve 9 arasýnda olmalýdýr.");

        BusinessData[id][bizType] = typeint;

        switch (typeint) {
            case 1: {
            	BusinessData[id][bizInt][0] = -27.3074;
           		BusinessData[id][bizInt][1] = -30.8741;
            	BusinessData[id][bizInt][2] = 1003.5573;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 4;
            }
            case 2: {
            	BusinessData[id][bizInt][0] = 316.3963;
            	BusinessData[id][bizInt][1] = -169.8375;
            	BusinessData[id][bizInt][2] = 999.6010;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 3: {
            	BusinessData[id][bizInt][0] = 161.4801;
            	BusinessData[id][bizInt][1] = -96.5368;
            	BusinessData[id][bizInt][2] = 1001.8047;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 18;
			}
			case 4: {
            	BusinessData[id][bizInt][0] = 363.3402;
            	BusinessData[id][bizInt][1] = -74.6679;
            	BusinessData[id][bizInt][2] = 1001.5078;
            	BusinessData[id][bizInt][3] = 315.0000;
				BusinessData[id][bizInterior] = 10;
			}
			case 5: {
            	BusinessData[id][bizInt][0] = 1494.5612;
            	BusinessData[id][bizInt][1] = 1304.2061;
            	BusinessData[id][bizInt][2] = 1093.2891;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 3;
			}
			case 6: {
				BusinessData[id][bizInt][0] = -27.3383;
   				BusinessData[id][bizInt][1] = -57.6909;
			   	BusinessData[id][bizInt][2] = 1003.5469;
      			BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 7: {
				BusinessData[id][bizInt][0] = -2240.4954;
   				BusinessData[id][bizInt][1] = 128.3774;
			   	BusinessData[id][bizInt][2] = 1035.4210;
      			BusinessData[id][bizInt][3] = 270.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 8: {
				BusinessData[id][bizInt][0] = 1004.19;
   				BusinessData[id][bizInt][1] = 52.3467;
			   	BusinessData[id][bizInt][2] = 55.4;
      			BusinessData[id][bizInt][3] = 270.0000;
				BusinessData[id][bizInterior] = 1;
		   	}
	   		case 9: {
				BusinessData[id][bizInt][0] = 2015.23;
   				BusinessData[id][bizInt][1] = 1345.85;
			   	BusinessData[id][bizInt][2] = 107.48;
      			BusinessData[id][bizInt][3] = 180.0000;
				BusinessData[id][bizInterior] = 1;
		   	}
		}
		DestroyDynamicPickup(BusinessData[id][bizPickup]);
  foreach (new i : Player)
		{
			if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
			{
				JBC_SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

				SetPlayerInterior(i, BusinessData[id][bizInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Business_Refresh(id);

	    Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu iþyerinin tipini %s olarak deðiþtirdi.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "cars", true))
	{
	    if (BusinessData[id][bizType] != 5)
	        return SendErrorMessage(playerid, "Bu iþyeri bir araç bayiliði deðil!");

		PlayerData[playerid][pDealership] = id;
		Business_EditCars(playerid, id);
	}
	else if (!strcmp(type, "spawn", true))
	{
	    if (BusinessData[id][bizType] != 5)
	        return SendErrorMessage(playerid, "Bu iþyeri bir araç bayiliði deðil!");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "Araç spawn noktasý sadece dýþarýda olabilir.");

	    GetPlayerPos(playerid, BusinessData[id][bizSpawn][0], BusinessData[id][bizSpawn][1], BusinessData[id][bizSpawn][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizSpawn][3]);

		BusinessData[id][bizExterior] = GetPlayerInterior(playerid);

		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu iþyerinin araç spawn noktasýný deðiþtirdi.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:bizstate(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/bizstate [biz id]");

	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "Geçersiz iþyeri ID'sý.");

	BusinessData[id][bizOwner] = 99999999;

	Business_Refresh(id);
	Business_Save(id);

	SendServerMessage(playerid, "Bu iþyeri artýk devletindir.(/bizcmds).", id);
	return 1;
}

CMD:destroybiz(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroybiz [biz id]");

	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "Geçersiz iþyeri ID'sý.");

	Business_Delete(id);
	SendServerMessage(playerid, "ID: %d nolu iþyerini sildiniz.", id);
	return 1;
}

CMD:ic(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pBaygin] || !IsPlayerSpawnedEx(playerid))
	    return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýnýz.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ic [su/soda]");

	if (PlayerData[playerid][pDrinking])
	    return SendErrorMessage(playerid, "Zaten bir içecek içiyorsun.");

	if (!strcmp(params, "soda", true))
	{
	    if (!Inventory_HasItem(playerid, "Soda"))
	    	return SendErrorMessage(playerid, "Bir sodaya sahip deðilsin.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "(Susamamýþsýn) Þu anda bu komutu kullanamazsýnýz.");

        PlayerData[playerid][pDrinking] = 1;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Bos Sise", 1484);
		Inventory_Remove(playerid, "Soda");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

 		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s soda þiþesini alýr ve açar.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Ýçmek için ~y~LMB~w~ tuþuna basýn.");
	}
	else if (!strcmp(params, "su", true))
	{
	    if (!Inventory_HasItem(playerid, "Su"))
	    	return SendErrorMessage(playerid, "Bir suya sahip deðilsin.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýnýz");

        PlayerData[playerid][pDrinking] = 2;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);


		Inventory_Add(playerid, "Bos Sise", 1484);
		Inventory_Remove(playerid, "Su");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

 		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s su þiþesini alýr ve açar.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Ýçmek için ~y~LMB~w~ tuþuna basýn.");
	}
	return 1;
}

CMD:pisir(playerid, params[])
{
	new houseid = House_Inside(playerid);

	if (houseid == -1)
	    return SendErrorMessage(playerid, "Bir yemek piþirmek için evin içinde olmalýsýn.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/pisir [burger/pizza]");

    if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýnýz.");

	if (!strcmp(params, "burger", true))
	{
	    if (!Inventory_HasItem(playerid, "Dondurulmus Hamburger"))
	        return SendErrorMessage(playerid, "Donmuþ Burger'e sahip deðilsin.");

		if (PlayerData[playerid][pCooking])
		    return SendErrorMessage(playerid, "Zaten bir yemeði piþiriyorsun.");

		Inventory_Add(playerid, "Karton", 928);

		PlayerData[playerid][pCooking] = 1;
		PlayerData[playerid][pCookingTime] = 20;
		PlayerData[playerid][pCookingHouse] = houseid;

		Inventory_Remove(playerid, "Dondurulmus Hamburger");
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s donmuþ hamburgeri mikrodalgaya koyar ve ýsýtmaya baþlar (20 saniye).", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "pizza", true))
	{
	    if (!Inventory_HasItem(playerid, "Dondurulmus Pizza"))
	        return SendErrorMessage(playerid, "Donmuþ Pizza'ya sahip deðilsin.");

		if (PlayerData[playerid][pCooking])
		    return SendErrorMessage(playerid, "Zaten bir yemeði piþiriyorsun.");

        Inventory_Add(playerid, "Karton", 928);

		PlayerData[playerid][pCooking] = 2;
		PlayerData[playerid][pCookingTime] = 55;
		PlayerData[playerid][pCookingHouse] = houseid;

        Inventory_Remove(playerid, "Dondurulmus Pizza");
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s donmuþ pizzayý mikrodalgaya koyar ve ýsýtmaya baþlar (55 saniye).", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:celikyelek(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pBaygin] || !IsPlayerSpawnedEx(playerid))
	    return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýnýz.");

	if (!Inventory_HasItem(playerid, "Celik Yelek"))
	    return SendErrorMessage(playerid, "Çelik yeleðe sahip deðilsin.");

	if (ReturnArmour(playerid) > 49)
	    return SendErrorMessage(playerid, "Çelik yeleði kullanmak için zýrhýnýn yarýnýn altýnda olmasý gereklidir.");

	ZirhDegistir(playerid, 50.0);

	Inventory_Remove(playerid, "Celik Yelek");
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir çelik yelek çýkarýr ve üzerine geçirir.", ReturnName(playerid, 0));
	return 1;
}


CMD:gardolap(playerid, params[])
{
	new id = House_Inside(playerid), baslik[128], string[512];
	if(id == -1) return SendErrorMessage(playerid, "Anahtarýnýn bulunduðu bir evde deðilsin.");
	if (!House_IsOwner(playerid, id) && !House_Anahtar(playerid, id)) return SendErrorMessage(playerid, "Bu evin anahtarýna sahip deðilsin.");
	format(baslik, sizeof(baslik), "Ev Gardolap: {A9A9A9}(#%d)", id);
	for(new i=0; i != 3; i++) {
		new string2[512];
		if(HouseData[id][houseGardolap][i] == 0) {
			format(string2, sizeof(string2), "(%d.) {2ECC71}Boþ\n",  i);
			strcat(string, string2);
		}
		else {
			format(string2, sizeof(string2), "(%d.) {FF0000}Dolu [ Kýyafet: %d ]\n",  i, HouseData[id][houseGardolap][i]);
			strcat(string, string2);
		}
	}

	SetPVarInt(playerid, "GID", id);
	Dialog_Show(playerid, EvGardolap, DIALOG_STYLE_TABLIST, baslik, string, "Seç", "{FF6347}Iptal");
	return 1;
}

Dialog:EvGardolap(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new baslik[128];
		format(baslik, sizeof(baslik), "Ev Gardolap Raf: {A9A9A9}(%d)", listitem);
		SetPVarInt(playerid, "GardolapRaf", listitem);
        Dialog_Show(playerid, EvGardolapAc, DIALOG_STYLE_LIST, baslik, "Üstündekiyle Deðiþtir\n{FF0000}Rafý Boþalt", "Seç", "{FF6347}Iptal");
	}
	return 1;
}

Dialog:EvGardolapAc(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "GID"), raf = GetPVarInt(playerid, "GardolapRaf");
		switch(listitem)
		{
		    case 0:
			{
			    if(HouseData[id][houseGardolap][raf] == 0)
				{
				    HouseData[id][houseGardolap][raf] = PlayerData[playerid][pSkin];
					SendServerMessage(playerid, "Kýyafet deðiþtirildi.");
				} else
				{
   					new eskiskin = PlayerData[playerid][pSkin];
	                SetPlayerSkin(playerid, HouseData[id][houseGardolap][raf]);
	                PlayerData[playerid][pSkin] = HouseData[id][houseGardolap][raf];
	                HouseData[id][houseGardolap][raf] = eskiskin;
	                SendServerMessage(playerid, "Kýyafet deðiþtirildi.");
				}
				House_Save(id);
			}
			case 1:
			{
			    if(HouseData[id][houseGardolap][raf] == 0)
		    		return SendErrorMessage(playerid, "Gardolabýn bu rafý zaten boþ.");

            	HouseData[id][houseGardolap][raf] = 0;
            	SendServerMessage(playerid, "Seçtiðiniz raf boþaltýldý.");
            	House_Save(id);
			}
		}
	}
	return 1;
}
CMD:ev(playerid, params[])
{
	static id = -1;
	if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
	
	{
	    SetPVarInt(playerid, "BEI", id);
		new string[1024], toplamoyuncu[1024], durum[24], baslik[256];
		strcat(string, "Ýþlem Adý\tDurum\n");
     	if (House_IsOwner(playerid, id) || House_Anahtar(playerid, id) || HouseData[id][houseKiralayan] == GetPlayerSQLID(playerid))
     	{
			if (!HouseData[id][houseLocked]) format(durum, 24, "{2ECC71}Açýk");
			else format(durum, 24, "{FF0000}Kapalý");
		    format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Kilidi Aç/Kapat\t[ %s {FFFFFF}]\n", durum);
			strcat(string, toplamoyuncu);
			format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Anahtar Ayarla\t[ %s {FFFFFF}]\n");
			strcat(string, toplamoyuncu);
		}
		if(House_Inside(playerid) == -1) {
		format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Zil Çal\n");
		strcat(string, toplamoyuncu); }
		if(House_Inside(playerid) == -1 && !House_IsOwner(playerid, id) && HouseData[id][houseKiralanabilir] && HouseData[id][houseKiralayan] == -1) {
		format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Evi Kirala\t[{2ECC71} %s {FFFFFF}]\n", FormatNumber(HouseData[id][houseKiraUcret]));
		strcat(string, toplamoyuncu); }
        if(House_Inside(playerid) == id)
  		{
			if (HouseData[id][houseLights]) format(durum, 24, "{2ECC71}Açýk");
			else format(durum, 24, "{FF0000}Kapalý");
			//format(toplamoyuncu, sizeof(toplamoyuncu), "Lamba Aç/Kapat\t[ %s {FFFFFF}]\n", durum);
			//strcat(string, toplamoyuncu);
		}
		if(House_Inside(playerid) == id && House_IsOwner(playerid, id))
  		{
  		    if(PlayerData[playerid][pFaction] != -1 && GetFactionType(playerid) == FACTION_GANG)
			{
			    if (HouseData[id][houseBirlik] != -1) format(durum, 24, "{2ECC71}[ Birlik Evi ]");
				else format(durum, 24, "{FF0000}[ Birlik Evi Deðil ]");
		 		format(toplamoyuncu, sizeof(toplamoyuncu), "Birlik Evi Yap / Çýkart\t\n", durum);
				strcat(string, toplamoyuncu);
			}


			format(toplamoyuncu, sizeof(toplamoyuncu), "Depo\n");
			strcat(string, toplamoyuncu);
			if(HouseData[id][houseLevel] < 15) {
				//format(toplamoyuncu, sizeof(toplamoyuncu), "Evi Yükselt\t{2ECC71}\n");
				//strcat(string, toplamoyuncu);
			}
   			format(toplamoyuncu, sizeof(toplamoyuncu), "Kira Ayarlarý\n");
			strcat(string, toplamoyuncu);
		}
		format(baslik, sizeof(baslik), "Ev: {E42020}%s {A9A9A9}(ID: %d)", HouseData[id][houseAddress], id);
		Dialog_Show(playerid, Ev, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Seç", "Ýptal");
	}
	else SendErrorMessage(playerid, "Eve yakýn deðilsiniz.");
	return 1;
}

Dialog:Ev(playerid, response, listitem, inputtext[])
{
	if (response)
	{
        new id = GetPVarInt(playerid, "KAI");
        if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
		{
			if(strfind(inputtext, "Kilidi Aç/Kapat", true) != -1)
			{
			    if (!HouseData[id][houseLocked])
				{
				//if (!IsPlayerInRangeOfPoint(playerid, 3.2, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2])) return SendErrorMessage(playerid, "Giriþ kapýsýnýn önünde olmalýsýn!");
					HouseData[id][houseLocked] = true;
					House_Save(id);
					House_Refresh(id);

					ShowPlayerFooter(playerid, "Ev kilitlendi!");
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				else
				{
			//	if (!IsPlayerInRangeOfPoint(playerid, 3.2, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2])) return SendErrorMessage(playerid, "Çýkýþ kapýsýnýn önünde olmalýsýn!");
					HouseData[id][houseLocked] = false;
					House_Save(id);
					House_Refresh(id);

					ShowPlayerFooter(playerid, "Evin kilidi acildi!");
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				cmd_ev(playerid, "\1");
			}
			if(strfind(inputtext, "Zil Çal", true) != -1)
			{
			    foreach (new i : Player) if (House_Inside(i) == id) {
				    SendClientMessage(i, COLOR_CYAN, "** Zil çalýyor.");
				    PlayerPlaySound(i, 20801, 0, 0, 0);
				}
				PlayerPlaySoundEx(playerid, 20801);
				SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s zili çalar.", ReturnName(playerid, 0));
			}
			if(strfind(inputtext, "Kira Ayar", true) != -1)
			{
				House_KiraAyar(playerid, id);
			}
			if(strfind(inputtext, "Anahtar", true) != -1)
			{
			    if(HouseData[id][houseKiralanabilir] || HouseData[id][houseKiralayan] != -1) return SendErrorMessage(playerid, "Ev kiralanmýþken veya kiralýyken anahtar veremezsiniz.");
			    Dialog_Show(playerid, EvAnahtar, DIALOG_STYLE_INPUT, "Ev Anahtarý", "Evinizin anahtarýný ayarlamak istediðiniz kiþinin ID'sýný girin;\n\nNOT: Eðer boþ enterlerseniz anahtar kimsede kalmaz.", "Ayarla", "{FF6347}Iptal");
			    SetPVarInt(playerid, "Anahtarverecegievid", id);
			}
			if(strfind(inputtext, "Kirala", true) != -1)
			{
				SetPVarInt(playerid, "KEI", id);
				if(!HouseData[id][houseKiralanabilir]) return SendErrorMessage(playerid, "Bu ev kiralanmaya müsait deðil.");
				if(HouseData[id][houseKiralayan] != -1) return SendErrorMessage(playerid, "Bu ev kiralanmýþ.");
				Dialog_Show(playerid, EviKirala, DIALOG_STYLE_MSGBOX, "Evi Kirala", "{FFFFFF}Bu ev {2ECC71}%s {FFFFFF}ödenerek {E42020}%d {FFFFFF}saatliðine kiralanabilir, eðer evi kiralarsanýz\nþu yetkilere sahip olacaksýnýz:\n\n{E42020} Kilidi açýp/kapatabilirsiniz.\n\n{FFFFFF}Kiralamak istiyor musunuz?", "Kirala", "Ýptal");
			}
			if(strfind(inputtext, "Birlik Evi", true) != -1)
			{
 				 if (HouseData[id][houseBirlik] == -1)
		         {
		            if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "Birliðiniz yok.");
		            if(GetFactionType(playerid) != 5) return SendErrorMessage(playerid, "Devlet kurumlarýna araç ekleyemezsiniz.");
                    for(new i=0; i<MAX_HOUSES; i++) if(HouseData[i][houseBirlik] == PlayerData[playerid][pFaction]) return SendErrorMessage(playerid, "Bu birliðin zaten evi var.");
					HouseData[id][houseBirlik] = FactionData[PlayerData[playerid][pFaction]][factionID];
		            SendServerMessage(playerid, "Ev birliðinizle paylaþýldý.");
		            House_Save(id);
					cmd_ev(playerid, "\1");
				 }
				 else {

					HouseData[id][houseBirlik] = -1;
				    SendServerMessage(playerid, "Ev artýk birliðinizle paylaþýlmayacak.");
				    House_Save(id);
				    cmd_ev(playerid, "\1");
				 }
			}
			if(strfind(inputtext, "Yükselt", true) != -1)
			{
				//Dialog_Show(playerid, EvYukselt, DIALOG_STYLE_MSGBOX, "Evi yükseltmek istiyor musun?", "{FFFFFF}%s ödeyerek evinizi %d. seviyeye yükseltmek istiyor musunuz?\nUnutmayýn bu iþlemin geri dönüþü yoktur.", "Yükselt", "<< Geri", FormatNumber(House_LevelPara(HouseData[id][houseLevel]+1)),HouseData[id][houseLevel]+1 );
				Dialog_Show(playerid, EvYukseltildi, DIALOG_STYLE_LIST, "Ev Yükseltme", "Evi Yükselt\nÝnterior Gözlemle", "Seç", "{FF6347}Iptal");
			}
			if(strfind(inputtext, "Lamba", true) != -1)
			{
			    if (!HouseData[id][houseLights])
				{
				    foreach (new i : Player) if (House_Inside(i) == id) {
				        PlayerTextDrawHide(i, PlayerData[i][pTextdraws][62]);
				    }
				    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s evin lambasýný açar.", ReturnName(playerid, 0));
				    HouseData[id][houseLights] = true;
				}
				else
				{
				    foreach (new i : Player) if (House_Inside(i) == id) {
				        PlayerTextDrawShow(i, PlayerData[i][pTextdraws][62]);
				    }
				    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s anahtara basar ve lambayý kapatýr.", ReturnName(playerid, 0));
				    HouseData[id][houseLights] = false;
				}
				cmd_ev(playerid, "\1");
			}
			if(strfind(inputtext, "Depo", true) != -1)
			{
			    if(House_IsOwner(playerid, id)) House_OpenStorage(playerid, id);
			}
		}
	}
	return 1;
}

House_KiraAyar(playerid, id)
{
    new baslik[256], durum[32];
    format(baslik, sizeof(baslik), "Ev: {E42020}%s {A9A9A9}(#%d) : Kira Ayar", HouseData[id][houseAddress], id);
	if (HouseData[id][houseKiralanabilir]) format(durum, sizeof(durum), "{2ECC71}Kiralanabilir");
	else format(durum,  sizeof(durum),  "{FF0000}Kiralanamaz");
	Dialog_Show(playerid, EvKiraAyar, DIALOG_STYLE_TABLIST_HEADERS, baslik, "Ýþlem\tDurum\nKiralanma Durumunu Ayarla\t[ %s {A9A9A9}]{FFFFFF}\nKira Ücretini Ayarla\t[ %s {FFFFFF}]\nKira Süresini Ayarla\t[ %d {FFFFFF}dakika ]\nKiracýyý Çýkar", "Seç", "<< Geri", durum,FormatNumber(HouseData[id][houseKiraUcret]), HouseData[id][houseKiraZaman]);
	return 1;
}

Dialog:EvKiraAyar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = House_Inside(playerid);
	    House_Refresh(id);
	    if(listitem == 0) {
			if (HouseData[id][houseKiralanabilir]) HouseData[id][houseKiralanabilir] = false;
			else HouseData[id][houseKiralanabilir] = true;
			House_KiraAyar(playerid, id);
	    }
		if(listitem == 1) Dialog_Show(playerid, EvKiraUcret, DIALOG_STYLE_INPUT, "Kira Ücretini Ayarla", "{FFFFFF}Ücret minimum $1, maksimum $1500 olabilir.\n\nEvin kiralama ücretini lütfen aþaðýya yazýnýz:", "Ayarla", "<< Geri");
		if(listitem == 2) Dialog_Show(playerid, EvKiraSure, DIALOG_STYLE_INPUT, "Kira Ücretini Ayarla", "{FFFFFF}Süre minimum 1, maksimum 120 dakika olabilir.\n\nEvin kiralama ücretini dakika cinsinden giriniz:", "Ayarla", "<< Geri");
		if(listitem == 3)
		{
            House_KiraAyar(playerid, id);
			if(HouseData[id][houseKiralayan] == -1)
			{
			    SendServerMessage(playerid, "Þu anda kiracýnýz yok.");
				return 1;
			}
			HouseData[id][houseKiralayan] = -1;
			SendServerMessage(playerid, "Kiracý evden çýkartýldý.");
		}
	} else cmd_ev(playerid, "\1");
	return 1;
}

Dialog:EvAnahtar(playerid, response, listitem, inputtext[])
{
    new ids = GetPVarInt(playerid, "Anahtarverecegievid");
	if (response)
	{
		if(strlen(inputtext) == 0)
		{
		    SendServerMessage(playerid, "Ev anahtarý sýfýrlandý.");
		    HouseData[ids][houseAnahtar] = -1;
			cmd_ev(playerid, "\1");
		    return 1;
		}
		new id = strval(inputtext);
		if(!IsNumeric(inputtext) || !IsPlayerConnected(id) || !SQL_IsLogged(id)) return SendErrorMessage(playerid, "Geçersýz ID girdiniz.");
		HouseData[ids][houseAnahtar] = PlayerData[id][pID];
	    SendServerMessage(playerid, "%s adlý oyuncuya %d ID'lý evin anahtarýný ayarladýnýz.", ReturnName(id, 0), ids);
	    SendServerMessage(id, "%s adlý oyuncu %d ID'lý evin anahtarýný sana ayarladý.", ReturnName(playerid, 0), ids);
	} else cmd_ev(playerid, "\1");
	return 1;
}


Dialog:EvKiraUcret(playerid, response, listitem, inputtext[])
{
    new id = House_Inside(playerid);
	if (response)
	{
		new deger = strval(inputtext);
		if( deger < 1 || deger > 1500 ) return SendErrorMessage(playerid, "Ücret minimum $1, maksimum $1500 olabilir.");
		HouseData[id][houseKiraUcret] = deger;
		House_KiraAyar(playerid, id);
	} else House_KiraAyar(playerid, id);
	return 1;
}

Dialog:EvYukselt(playerid, response, listitem, inputtext[])
{
    new id = House_Inside(playerid);
	if (response)
	{
		House_Yukselt(playerid, id, false);
	} else cmd_ev(playerid, "\1");
	return 1;
}
Dialog:EvIntBakma(playerid, response, listitem, inputtext[])
{
if (response)
{
switch (listitem)
{
case 0:
{
if (PlayerData[playerid][pEvGozlemliyor]) return SendErrorMessage(playerid, "Zaten ev interior gözlemliyorsun!");
PlayerData[playerid][pEvGozlemliyor] = 1;
GetPlayerPos(playerid, bakx, baky, bakz);
JBC_SetPlayerPos(playerid, 1730.3673, 1473.3276, -43.4118);
ObjeleriYukle(playerid);
PlayerData[playerid][pEvBakma] = SetTimerEx("EvBakma", 30000, false, "d", playerid);
SendServerMessage(playerid, "Evi gözlemlemek için 30 saniyen var.");
SendServerMessage(playerid, "Bu interior 20.000$ fiyatýndadýr.");
}
case 1:
{
if (PlayerData[playerid][pEvGozlemliyor]) return SendErrorMessage(playerid, "Zaten ev interior gözlemliyorsun!");
PlayerData[playerid][pEvGozlemliyor] = 1;
GetPlayerPos(playerid, bakx, baky, bakz);
JBC_SetPlayerPos(playerid, 1735.5527,1541.7477,-17.1321);
ObjeleriYukle(playerid);
PlayerData[playerid][pEvBakma] = SetTimerEx("EvBakma", 30000, false, "d", playerid);
SendServerMessage(playerid, "Evi gözlemlemek için 30 saniyen var.");
SendServerMessage(playerid, "Bu interior 30.500$ fiyatýndadýr.");
}
case 2:
{
if (PlayerData[playerid][pEvGozlemliyor]) return SendErrorMessage(playerid, "Zaten ev interior gözlemliyorsun!");
PlayerData[playerid][pEvGozlemliyor] = 1;
GetPlayerPos(playerid, bakx, baky, bakz);
JBC_SetPlayerPos(playerid, 2184.0823,1305.4028,-33.4921);
ObjeleriYukle(playerid);
PlayerData[playerid][pEvBakma] = SetTimerEx("EvBakma", 30000, false, "d", playerid);
SendServerMessage(playerid, "Evi gözlemlemek için 30 saniyen var.");
SendServerMessage(playerid, "Bu interior 41.500$ fiyatýndadýr.");
}
case 3:
{
if (PlayerData[playerid][pEvGozlemliyor]) return SendErrorMessage(playerid, "Zaten ev interior gözlemliyorsun!");
PlayerData[playerid][pEvGozlemliyor] = 1;
GetPlayerPos(playerid, bakx, baky, bakz);
JBC_SetPlayerPos(playerid, 1379.2466,-820.3939,1092.3500);
ObjeleriYukle(playerid);
PlayerData[playerid][pEvBakma] = SetTimerEx("EvBakma", 30000, false, "d", playerid);
SendServerMessage(playerid, "Evi gözlemlemek için 30 saniyen var.");
SendServerMessage(playerid, "Bu interior 52.000$ fiyatýndadýr.");
}
case 4:
{
if (PlayerData[playerid][pEvGozlemliyor]) return SendErrorMessage(playerid, "Zaten ev interior gözlemliyorsun!");
PlayerData[playerid][pEvGozlemliyor] = 1;
GetPlayerPos(playerid, bakx, baky, bakz);
JBC_SetPlayerPos(playerid, 243.4036, -1851.5670, 3333.9329);
ObjeleriYukle(playerid);
PlayerData[playerid][pEvBakma] = SetTimerEx("EvBakma", 30000, false, "d", playerid);
SendServerMessage(playerid, "Evi gözlemlemek için 30 saniyen var.");
SendServerMessage(playerid, "Bu interior 60.000$ fiyatýndadýr.");
}
}
}
return 1;
}
Dialog:EvYukseltildi(playerid, response, listitem, inputtext[])
{
if (response)
{
switch (listitem)
{
case 0:
{
new id = House_Inside(playerid);
House_Yukselt(playerid, id, false);
}
case 1:
{
Dialog_Show(playerid, EvIntBakma, DIALOG_STYLE_LIST, "Ev Interior Bakma", "Seviye 2\nSeviye 3\nSeviye 4\nSeviye 5\nSeviye 6", "Seç", "{FF6347}Iptal");
}
}
}
return 1;
}
Dialog:EvKiraSure(playerid, response, listitem, inputtext[])
{
    new id = House_Inside(playerid);
	if (response)
	{
		new deger = strval(inputtext);
		if( deger < 1 || deger > 120 ) return SendErrorMessage(playerid, "Süre minimum 1, maksimum 120 dakika olabilir.");
		HouseData[id][houseKiraZaman] = deger;
		House_KiraAyar(playerid, id);
	} else House_KiraAyar(playerid, id);
	return 1;
}

Dialog:EviKirala(playerid, response, listitem, inputtext[])
{
    new id = GetPVarInt(playerid, "KEI");
	if (response)
	{
		if( GetMoney(playerid) < HouseData[id][houseKiraUcret]) return SendErrorMessage(playerid, "Kiralamak için üzerinizde yeterli para yok (%s).", FormatNumber(HouseData[id][houseKiraUcret]));
		GiveMoney(playerid, -HouseData[id][houseKiraUcret]);
		HouseData[id][houseKiralayan] = GetPlayerSQLID(playerid);
		HouseData[id][houseKiraSure] = HouseData[id][houseKiraZaman];
		HouseData[id][houseMoney] += -HouseData[id][houseKiraUcret];
		SendServerMessage(playerid, "Ev kiralandý.");

	}
	return 1;
}

CMD:isyeri(playerid, params[])
{
	static id = -1;
    if (!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	{
	    new string[1024], toplamoyuncu[1024], durum[24], baslik[256];
	    if (Business_IsOwner(playerid, id) || Business_IsOrtak(playerid, id) || (PlayerData[playerid][pBizJob] == id &&  PlayerData[playerid][pBizRank] == 4))
		{
			if(BusinessData[id][bizOwner] == 99999999) return SendErrorMessage(playerid, "Devlete ait iþyerinde bu komutu kullanamazsýnýz.");
		    SetPVarInt(playerid, "KAI", id);

			strcat(string, "Ýþlem Adý\tDurum\n");

			if (!BusinessData[id][bizLocked]) format(durum, 24, "{2ECC71}Açýk");
			else format(durum, 24, "{FF0000}Kapalý");
		    format(toplamoyuncu, sizeof(toplamoyuncu), "{E42020}Kilidi Aç/Kapat\t[ %s ]\n", durum);
			strcat(string, toplamoyuncu);

			format(durum, 24, "{2ECC71}%s", FormatNumber(BusinessData[id][bizVault]));
		    format(toplamoyuncu, sizeof(toplamoyuncu), "{E42020}Kasa\t{2ECC71}[ %s ]\n", durum);
			strcat(string, toplamoyuncu);

			format(durum, 24, "{FF6347}%d ürün", BusinessData[id][bizProducts]);
		    format(toplamoyuncu, sizeof(toplamoyuncu), "{E42020}Ürün Sayýsý\t{2ECC71}[ %s ]\n", durum);
			strcat(string, toplamoyuncu);

			if(Business_IsOwner(playerid, id) && Business_IsOrtak(playerid, id))
			{
			    format(toplamoyuncu, sizeof(toplamoyuncu), "{E42020}Çalýþan Listesi\n");
				strcat(string, toplamoyuncu);
			}

			if (BusinessData[id][bizShipment]) format(durum, 24, "{2ECC71}Alýyor");
			else format(durum, 24, "{FF0000}Almýyor");
		    format(toplamoyuncu, sizeof(toplamoyuncu), "{E42020}Teslimat Durumunu Deðiþtir\t[ %s ]\n", durum);
			strcat(string, toplamoyuncu);

			format(toplamoyuncu, sizeof(toplamoyuncu), "Teslimat Noktasý Ayarla\n");
			strcat(string, toplamoyuncu);

			format(durum, 24, "{8D8DFF}%s", BusinessData[id][bizName]);
			format(toplamoyuncu, sizeof(toplamoyuncu), "Ýþyeri Adýný Deðiþtir {2ECC71}($2000)\t{FFFFFF}[ %s ]\n", durum);
			strcat(string, toplamoyuncu);

			format(durum, 24, "{8D8DFF}%s", FormatNumber(BusinessData[id][bizLoginFee]));
			format(toplamoyuncu, sizeof(toplamoyuncu), "Ýþyeri Giriþ Ücretini Deðiþtir\t[ %s ]\n", durum);
			strcat(string, toplamoyuncu);

			format(durum, 24, "{8D8DFF}%s", BusinessData[id][bizMessage]);
			format(toplamoyuncu, sizeof(toplamoyuncu), "Giriþ Mesajýný Deðiþtir\t[ %s ]\n", durum);
			strcat(string, toplamoyuncu);

			format(toplamoyuncu, sizeof(toplamoyuncu), "Ürün Fiyatlarýný Deðiþtir\n");
			strcat(string, toplamoyuncu);

			format(baslik, sizeof(baslik), "{2ECC71}Ýþyeri: %s {A9A9A9}(#%d)", BusinessData[id][bizName], id);
			Dialog_Show(playerid, Isyeri, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Seç", "Ýptal");
		}
		if ( (PlayerData[playerid][pBizJob] == id &&  PlayerData[playerid][pBizRank] == 5) || Business_IsOwner(playerid, id)) {
		    if(BusinessData[id][bizType] == 9)
			{
				if (strlen(BusinessData[id][bizMusic]) > 0) format(durum, 24, "{2ECC71}Açýk");
				else format(durum, 24, "{FF0000}Kapalý");
			    format(toplamoyuncu, sizeof(toplamoyuncu), "Müzik Aç/Kapat\t[ %s ]\n", durum);
				strcat(string, toplamoyuncu);
			}

			format(baslik, sizeof(baslik), "{2ECC71}Ýþyeri: %s {A9A9A9}(#%d)", BusinessData[id][bizName], id);
			Dialog_Show(playerid, Isyeri, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Seç", "Ýptal");
		}
		else SendErrorMessage(playerid, "Bu iþyerinin yetkilisi deðilsiniz.");
	}
	else SendErrorMessage(playerid, "Ýþyerinize yakýn deðilsiniz.");
	return 1;
}
Dialog:Isyeri(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "KAI");
		if(strfind(inputtext, "Teslimat", true) != -1)
		{
		    if (BusinessData[id][bizType] == 5)
			    return SendErrorMessage(playerid, "Bu iþyeri tipine ürün teslimatý yapýlamaz.");

			if (BusinessData[id][bizShipment])
			{
			    foreach (new i : Player) if (PlayerData[i][pShipment] == id)
				{
			        CancelShipment(i);
			        SendServerMessage(i, "Ýþyeri artýk ürün almayacak, teslimat iptal oldu.");
			    }
			    BusinessData[id][bizShipment] = 0;
			    Business_Save(id);

			    SendServerMessage(playerid, "Ýþyeri artýk ürün almayacak.");
			    SendJobMessage(1, COLOR_YELLOW, "** %s adlý iþyeri sahibi %s adlý iþyerisine artýk ürün aramýyor. **", ReturnName(playerid, 0), BusinessData[id][bizName]);
			}
			else
			{
			    if (BusinessData[id][bizDeliver][0] == 0.0 && BusinessData[id][bizDeliver][1] == 0.0 && BusinessData[id][bizDeliver][2] == 0.0)
			        return SendErrorMessage(playerid, "Teslimat noktanýz ayarlanmamýþ.");

			    BusinessData[id][bizShipment] = 1;
			    Business_Save(id);

			    SendServerMessage(playerid, "Ýþyeriniz artýk ürün alacak.");
				SendJobMessage(1, COLOR_YELLOW, "** %s adlý iþyeri sahibi %s adlý iþyeriye ürün arýyor. (/teslimatlar) **", ReturnName(playerid, 0), BusinessData[id][bizName]);
			}
		}
		if(strfind(inputtext, "Teslimat Noktasý", true) != -1)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0],  pos[1],  pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 30.0, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]))
				return SendErrorMessage(playerid, "Teslimat noktasý sadece dükkanýn yakýnýna koyulabilir.");

			if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		        return SendErrorMessage(playerid, "Teslimat noktasý sadece dýþarýda olabilir!");

            if (BusinessData[id][bizType] == 5)
	        return SendErrorMessage(playerid, "Bu iþyeri teslimatlarý kabul etmez.");

		    GetPlayerPos(playerid, BusinessData[id][bizDeliver][0], BusinessData[id][bizDeliver][1], BusinessData[id][bizDeliver][2]);
			Business_Refresh(id);
			Business_Save(id);
			SendServerMessage(playerid, "Teslimat noktasý ayarlandý.");
		}
		if(strfind(inputtext, "Kilidi Aç/Kapat", true) != -1)
		{
				if (Business_IsOwner(playerid, id))
				{
					if (!BusinessData[id][bizLocked])
					{
				//	if (!IsPlayerInRangeOfPoint(playerid, 3.2, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2])) return SendErrorMessage(playerid, "Kapýnýn önünde olmalýsýn!");
						BusinessData[id][bizLocked] = true;

						Business_Refresh(id);
						Business_Save(id);

						ShowPlayerFooter(playerid, "Isyeri kilitlendi!");
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					}
		  			else
					{
//						if (!IsPlayerInRangeOfPoint(playerid, 3.2, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2])) return SendErrorMessage(playerid, "Kapýnýn önünde olmalýsýn!");
						BusinessData[id][bizLocked] = false;

						Business_Refresh(id);
						Business_Save(id);

						ShowPlayerFooter(playerid, "Isyerinin kilidi acildi!");
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					}
					cmd_isyeri(playerid, "\1");
				}

		}
		if(strfind(inputtext, "Kasa", true) != -1)
		{
		    new baslik[128];
		    SetPVarInt(playerid, "KAI", id);
		    format(baslik, sizeof(baslik), "{FFFFFF}Ýþyeri: {A9A9A9}%s {2ECC71}(Kasadaki Miktar: %s)", BusinessData[id][bizName], FormatNumber(BusinessData[id][bizVault]));
		    Dialog_Show(playerid, IsyeriKasa, DIALOG_STYLE_LIST, baslik, "Para Koy\nPara Al", "Seç", "<< Geri");
		}
		if(strfind(inputtext, "Müzik", true) != -1)
		{
		    new baslik[128];
		    SetPVarInt(playerid, "KAI", id);
		    format(baslik, sizeof(baslik), "{2ECC71}Ýþyeri: %s {A9A9A9}(#%d) : Müzik URL Düzenleme", BusinessData[id][bizName], id);
		    Dialog_Show(playerid, IsyeriMuzikDegistir, DIALOG_STYLE_INPUT, baslik, "{FFFFFF}Müzik URL mesajýný deðiþtirmek için aþaðýya istediðiniz mesajý yazýn, eðer müzik\nistemiyorsanýz kutuya 'yok' yazýn.\n\nÞu anki URL: %s", "Seç", "<< Geri", BusinessData[id][bizMusic]);
		}
		if(strfind(inputtext, "Adýný", true) != -1)
		{
		    if(GetMoney(playerid) < 2000) return SendErrorMessage(playerid, "Ýþyeri adýný deðiþtirebilmek için $2,000 gereklidir.");
		    new baslik[128];
		    SetPVarInt(playerid, "KAI", id);
		    format(baslik, sizeof(baslik), "{2ECC71}Ýþyeri: %s {A9A9A9}(#%d) : Ad Düzenleme", BusinessData[id][bizName], id);
		    Dialog_Show(playerid, IsyeriAdDegistir, DIALOG_STYLE_INPUT, baslik, "{FFFFFF}Ýstediðiniz iþyeri adýna kutuya yazýn, \n\nÞu anki ad: %s", "Seç", "<< Geri", BusinessData[id][bizName]);
		}
		if(strfind(inputtext, "Mesajýný", true) != -1)
		{
		    new baslik[128];
		    SetPVarInt(playerid, "KAI", id);
		    format(baslik, sizeof(baslik), "{2ECC71}Ýþyeri: %s {A9A9A9}(#%d) : Mesaj Düzenleme", BusinessData[id][bizName], id);
		    Dialog_Show(playerid, IsyeriMesajDegistir, DIALOG_STYLE_INPUT, baslik, "{FFFFFF}Giriþ mesajýný deðiþtirmek için aþaðýya istediðiniz mesajý yazýn, eðer giriþ mesajý\nistemiyorsanýz kutuya 'yok' yazýn.\n\nÞu anki mesaj: %s", "Seç", "<< Geri", BusinessData[id][bizMessage]);
		}
		if(strfind(inputtext, "Ürün", true) != -1)
		{
		    Business_ProductMenu(playerid, id);
		}
		if(strfind(inputtext, "Ücretini", true) != -1)
		{
		    new baslik[128];
		    SetPVarInt(playerid, "KAI", id);
		    format(baslik, sizeof(baslik), "{2ECC71}Ýþyeri: %s {A9A9A9}(#%d) : Giriþ Ücreti Düzenleme", BusinessData[id][bizName], id);
		    Dialog_Show(playerid, IsyeriGirisDegistir, DIALOG_STYLE_INPUT, baslik, "{FFFFFF}Giriþ ücretini deðiþtirmek için aþaðýya istediðiniz giriþ ücretini yazýn, eðer giriþ ücreti\nistemiyorsanýz kutuya '0' yazýn.\n\nÞu anki deðer: %s", "Seç", "<< Geri", FormatNumber(BusinessData[id][bizLoginFee]));
		}
		if(strfind(inputtext, "Çalýþan", true) != -1)
		{
			IsyeriCalisanlari(playerid, id);
		}
	}
	return 1;
}

Dialog:IsyeriKasa(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new baslik[128];
	    new id = GetPVarInt(playerid, "KAI");
	    format(baslik, sizeof(baslik), "{FFFFFF}Ýþyeri: {A9A9A9}%s {2ECC71}(Kasadaki Miktar: %d)", BusinessData[id][bizName], FormatNumber(BusinessData[id][bizVault]));
		if(listitem == 0)
		{
			if(GetMoney(playerid) <= 0) {
  				cmd_isyeri(playerid, "\1");
			    return SendErrorMessage(playerid, "Üzerinizde hiç para yok.");
   			}
   			Dialog_Show(playerid, IsyeriKasayaKoy, DIALOG_STYLE_INPUT, baslik, "{FFFFFF}Ýþyeri kasasýna koymak istediðiniz miktarý girin:", "Seç", "<< Geri");
		}
		if(listitem == 1)
		{
		    if(BusinessData[id][bizVault] <= 0) {
  				cmd_isyeri(playerid, "\1");
			    return SendErrorMessage(playerid, "Kasada hiç para yok.");
   			}
   			Dialog_Show(playerid, IsyeriKasadanAl, DIALOG_STYLE_INPUT, baslik, "{FFFFFF}Ýþyeri kasasýna koymak istediðiniz miktarý girin:", "Seç", "<< Geri");
		}
	}
	else cmd_isyeri(playerid, "\1");
	return 1;
}

Dialog:IsyeriKasayaKoy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = GetPVarInt(playerid, "KAI");
	    new amount = strval(inputtext);
    	if (amount < 1 || amount > GetMoney(playerid)) return SendErrorMessage(playerid, "Geçersiz miktar !");

        BusinessData[bizid][bizVault] += amount;
        Business_Save(bizid);

        GiveMoney(playerid, -amount);
Log_Write("logs/isyerikasakoyma.txt", "[%s] %s %s:", ReturnDate(), ReturnName(playerid), FormatNumber(amount));
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasayý açar ve içine %s koyar.", ReturnName(playerid, 0), FormatNumber(amount));
        cmd_isyeri(playerid, "\1");
	}
	else cmd_isyeri(playerid, "\1");
	return 1;
}

Dialog:IsyeriKasadanAl(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = GetPVarInt(playerid, "KAI");
	    new amount = strval(inputtext);
     	if (amount < 1 || amount > BusinessData[bizid][bizVault])   return SendErrorMessage(playerid, "Geçersiz miktar !");

        BusinessData[bizid][bizVault] -= amount;
        Business_Save(bizid);

        GiveMoney(playerid, amount);
         Log_Write("logs/isyerikasacekme.txt", "[%s] %s %s:", ReturnDate(), ReturnName(playerid), FormatNumber(amount));
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kasayý açar ve içinden %s alýr.", ReturnName(playerid, 0), FormatNumber(amount));
        cmd_isyeri(playerid, "\1");
	}
	else cmd_isyeri(playerid, "\1");
	return 1;
}

Dialog:IsyeriAdDegistir(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "KAI");

	    if (isnull(inputtext)) SendErrorMessage(playerid, "Ýþyeri adý boþ kalamaz!");
		if (strlen(inputtext) > 32)
		    return SendErrorMessage(playerid, "Ýþyeri adý 32 karakterden uzun olamaz.");

		format(BusinessData[id][bizName], 32, inputtext);

		Business_Refresh(id);
		Business_Save(id);
		GiveMoney(playerid, -2000);
		//SendServerMessage(playerid, "Ýþyeri adý þu olarak deðiþtirildi: \"%s\".", inputtext);
        cmd_isyeri(playerid, "\1");
	}
	else cmd_isyeri(playerid, "\1");
	return 1;
}

Dialog:IsyeriMesajDegistir(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "KAI");
		if (!strcmp(inputtext, "yok", true))
		{
		    BusinessData[id][bizMessage][0] = '\0';

			Business_Save(id);
			SendServerMessage(playerid, "Ýþyeri mesajý kaldýrýldý.");
		}
		else
		{
			format(BusinessData[id][bizMessage], 128, inputtext);

			Business_Save(id);
			//SendServerMessage(playerid, "Ýþyeri mesajý þu olarak deðiþtirildi: \"%s\".", inputtext);
		}
        cmd_isyeri(playerid, "\1");
	}
	else cmd_isyeri(playerid, "\1");
	return 1;
}

Dialog:IsyeriMuzikDegistir(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "KAI");
		if (!strcmp(inputtext, "yok", true))
		{
		    BusinessData[id][bizMusic][0] = '\0';

			Business_Save(id);
   foreach (new i : Player)
			{
				if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
				{
					StopAudioStreamForPlayer(i);
				}
			}
			SendServerMessage(playerid, "Ýþyeri müziði kaldýrýldý.");
		}
		else
		{
			format(BusinessData[id][bizMusic], 128, inputtext);
            foreach (new i : Player)
			{
				if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
				{
					PlayAudioStreamForPlayer(i, inputtext);
				}
			}
			Business_Save(id);
			//SendServerMessage(playerid, "Ýþyeri mesajý þu olarak deðiþtirildi: \"%s\".", inputtext);
		}
        cmd_isyeri(playerid, "\1");
	}
	else cmd_isyeri(playerid, "\1");
	return 1;
}

Dialog:IsyeriGirisDegistir(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = GetPVarInt(playerid, "KAI");
	    new fee = strval(inputtext);
		if (fee < 0 || fee > 200 )
		    return SendErrorMessage(playerid, "Ýþyeri giriþ ücreti 0'dan düþük 200'den büyük olamaz.");

		BusinessData[id][bizLoginFee] = fee;

		Business_Refresh(id);
		Business_Save(id);

		//SendServerMessage(playerid, "Ýþyeri adý þu olarak deðiþtirildi: \"%s\".", inputtext);
        cmd_isyeri(playerid, "\1");
	}
	else cmd_isyeri(playerid, "\1");
	return 1;
}

CMD:ehliyetal(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0439, -117.4885, 1035.1719))
	    return SendErrorMessage(playerid, "Ehliyet alma noktasýnda deðilsin.");

	if (Inventory_HasItem(playerid, "Ehliyet"))
	    return SendErrorMessage(playerid, "Zaten lisansýn var!");

	if (GetMoney(playerid) < 500)
	    return SendErrorMessage(playerid, "Üzerinde 500 dolar yok.");

		Inventory_Add(playerid, "Ehliyet", 1581);
		SendServerMessage(playerid, "Baþarýyla ehliyet satýn aldýnýz!");
	return 1;
}

CMD:createentrance(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params) || strlen(params) > 32)
	    return SendSyntaxMessage(playerid, "/createentrance [ad]");

	new id = Entrance_Create(playerid, params);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu bina sýnýrýna ulaþmýþtýr.");

	SendServerMessage(playerid, "Baþarýyla bina oluþturdun, ID: %d.", id);
	return 1;
}

CMD:fabrikaolustur(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params) || strlen(params) > 32)
	    return SendSyntaxMessage(playerid, "/createfabrika [ad]");

	new id = Fabrika_Olustur(playerid, params);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu fabrika sýnýrýna ulaþmýþtýr.");

	SendServerMessage(playerid, "Baþarýyla fabrika oluþturdun, ID: %d.", id);
	return 1;
}


CMD:mezarolustur(playerid, params[])
{
    static
	    ad[32],
		yazit[128],
		otopsi[32];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "s[32]s[32]s[128]", ad, otopsi, yazit))
	    return SendSyntaxMessage(playerid, "/mezarolustur [ad] [otopsi] [yazit] ");


	new id = Mezar_Olustur(playerid, ad, yazit, otopsi);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu mezar sýnýrýna ulaþmýþtýr.");

	SendServerMessage(playerid, "Baþarýyla mezar oluþturdun, ID: %d.", id);
	return 1;
}
CMD:hoodolustur(playerid, params[])
{
if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params) || strlen(params) > 32)
	    return SendSyntaxMessage(playerid, "/hoodolustur [birlik ad]");

	new id = Hood_Olustur(playerid, params);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu bina sýnýrýna ulaþmýþtýr.");
	return 1;
}

CMD:editentrance(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editentrance [id] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} location, interior, password, name, locked, mapicon, type, custom, virtual");
		return 1;
	}
	if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

	if (!strcmp(type, "location", true))
	{
	    GetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		GetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);

		EntranceData[id][entranceExterior] = GetPlayerInterior(playerid);
		EntranceData[id][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

		Entrance_Refresh(id);
		Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the location of entrance ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
		GetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

		EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
			{
				JBC_SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

				SetPlayerInterior(i, EntranceData[id][entranceInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the interior spawn of entrance ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "custom", true))
	{
	    new status;

	    if (sscanf(string, "d", status))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [custom] [0/1]");

		if (status < 0 || status > 1)
		    return SendErrorMessage(playerid, "You must specify at least 0 or 1.");

	    EntranceData[id][entranceCustom] = status;
	    Entrance_Save(id);

	    if (status) {
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has enabled custom interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
		}
		else {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has disabled custom interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
		}
	}
		else if (!strcmp(type, "baglanti", true))
	{
	    new status;

	    if (sscanf(string, "d", status))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [baglanti] [0/1]");

		if (status < 0 || status > 1)
		    return SendErrorMessage(playerid, "You must specify at least 0 or 1.");

	    EntranceData[id][entranceBaglanti] = status;
	    Entrance_Save(id);

	    if (status) {
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has enabled baðlantý interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
		}
		else {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has disabled baðlantý interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
		}
	}
	else if (!strcmp(type, "virtual", true))
	{
	    new worldid;

	    if (sscanf(string, "d", worldid))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [virtual] [interior world]");

	    EntranceData[id][entranceWorld] = worldid;

		foreach (new i : Player) if (Entrance_Inside(i) == id) {
			SetPlayerVirtualWorld(i, worldid);
		}
		Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the virtual of entrance ID: %d to %d.", ReturnName(playerid, 0), id, worldid);
	}
	else if (!strcmp(type, "mapicon", true))
	{
	    new icon;

	    if (sscanf(string, "d", icon))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [mapicon] [map icon]");

		if (icon < 0 || icon > 63)
		    return SendErrorMessage(playerid, "Invalid map icon! Valid map icons can be found at \"wiki.sa-mp.com/wiki/MapIcons\".");

	    EntranceData[id][entranceIcon] = icon;

	    Entrance_Refresh(id);
	    Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the price of entrance ID: %d to %d.", ReturnName(playerid, 0), id, icon);
	}
	else if (!strcmp(type, "password", true))
	{
	    new password[32];

	    if (sscanf(string, "s[32]", password))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [password] [entrance pass] (use 'none' to disable)");

		if (!strcmp(password, "none", true)) {
			EntranceData[id][entrancePass][0] = 0;
		}
		else {
		    format(EntranceData[id][entrancePass], 32, password);
		}
	    Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the password of entrance ID: %d to \"%s\".", ReturnName(playerid, 0), id, password);
	}
	else if (!strcmp(type, "locked", true))
	{
	    new locked;

	    if (sscanf(string, "d", locked))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [locked] [locked 0/1]");

		if (locked < 0 || locked > 1)
		    return SendErrorMessage(playerid, "Invalid value. Use 0 for unlocked and 1 for locked.");

	    EntranceData[id][entranceLocked] = locked;
	    Entrance_Refresh(id);
	    Entrance_Save(id);

	    if (locked) {
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has locked entrance ID: %d.", ReturnName(playerid, 0), id);
		} else {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has unlocked entrance ID: %d.", ReturnName(playerid, 0), id);
		}
	}
	else if (!strcmp(type, "name", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [name] [new name]");

	    format(EntranceData[id][entranceName], 32, name);

	    Entrance_Refresh(id);
	    Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the name of entrance ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        SendSyntaxMessage(playerid, "/editentrance [id] [type] [entrance type]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 0: None | 1: DMV | 2: Bank | 3: Warehouse | 4: City Hall | 5: Shooting Range | 6: Ýddaa Bayi");
			return 1;
		}
		if (typeint < 0 || typeint > 7)
			return SendErrorMessage(playerid, "The specified type must be between 0 and 7.");

		if (EntranceData[id][entranceType] == 3 && typeint != 3) {
		    DestroyForklifts(id);
		}
		else if (EntranceData[id][entranceType] != 3 && typeint == 3) {
		    CreateForklifts(id);
		}
        EntranceData[id][entranceType] = typeint;

        switch (typeint) {
            case 1: {
            	EntranceData[id][entranceInt][0] = -2029.5531;
           		EntranceData[id][entranceInt][1] = -118.8003;
            	EntranceData[id][entranceInt][2] = 1035.1719;
            	EntranceData[id][entranceInt][3] = 0.0000;
				EntranceData[id][entranceInterior] = 3;
            }
			case 2: {
 	 			EntranceData[id][entranceInt][0] = 2305.29;
           		EntranceData[id][entranceInt][1] = -16.04;
            	EntranceData[id][entranceInt][2] = 26.74;
            	EntranceData[id][entranceInt][3] = 0.0000;
				EntranceData[id][entranceInterior] = 0;
            }
            case 3: {
                EntranceData[id][entranceInt][0] = 1291.8246;
           		EntranceData[id][entranceInt][1] = 5.8714;
            	EntranceData[id][entranceInt][2] = 1001.0078;
            	EntranceData[id][entranceInt][3] = 180.0000;
				EntranceData[id][entranceInterior] = 18;
			}
			case 4: {
			    EntranceData[id][entranceInt][0] = 390.1687;
           		EntranceData[id][entranceInt][1] = 173.8072;
            	EntranceData[id][entranceInt][2] = 1008.3828;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 3;
			}
			case 5: {
			    EntranceData[id][entranceInt][0] = 304.0165;
           		EntranceData[id][entranceInt][1] = -141.9894;
            	EntranceData[id][entranceInt][2] = 1004.0625;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 7;
			}
		}
  foreach (new i : Player)
		{
			if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
			{
				JBC_SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

				SetPlayerInterior(i, EntranceData[id][entranceInterior]);
				SetCameraBehindPlayer(i);
			}
		}
	    Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the type of entrance ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
	}
	return 1;
}

CMD:destroyentrance(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyentrance [entrance id]");

	if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

	Entrance_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed entrance ID: %d.", id);
	return 1;
}

CMD:cephanekartusu(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pBaygin] || !IsPlayerSpawnedEx(playerid))
	    return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýnýz.");

	if (!Inventory_HasItem(playerid, "Cephane Kartusu"))
	    return SendErrorMessage(playerid, "Cephane kartuþun yok.");

	new weaponid = 0;

	switch ((weaponid = GetWeapon(playerid)))
	{
		case 22, 23: GiveWeaponToPlayer(playerid, weaponid, 68);
		case 24, 27: GiveWeaponToPlayer(playerid, weaponid, 35);
	    case 25, 26: GiveWeaponToPlayer(playerid, weaponid, 20);
	    case 28, 31, 32: GiveWeaponToPlayer(playerid, weaponid, 200);
	    case 29, 30: GiveWeaponToPlayer(playerid, weaponid, 120);
	    case 33, 34: GiveWeaponToPlayer(playerid, weaponid, 20);
	    case 35..37: GiveWeaponToPlayer(playerid, weaponid, 4);
	    case 38: GiveWeaponToPlayer(playerid, weaponid, 500);
		default: return SendErrorMessage(playerid, "Bu silah için bir cephane kartuþu kullanamazsýnýz.");
	}
	PlayReloadAnimation(playerid, weaponid);
	Inventory_Remove(playerid, "Cephane Kartusu");
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s model silaha cephane kartuþu ekledi.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
	return 1;
}
/*
CMD:sss(playerid, params[])
{
	Dialog_Show(playerid, FAQ, DIALOG_STYLE_LIST, "Sýkça Sorulan Sorular", "Herhangi bir binaya nasýl girebilirim?\nEnvanterime nasýl eriþebilirim?\nYerdeki eþyalarý nasýl alabilirim?\nEkranýmdaki ikonlar nedir?\nAçlýðýmý ve susuzluðumu nasýl giderebilirim?\nHaritadaki semboller ne anlama geliyor?\nMeslekten nasýl çýkabilirim?\nSilah nasýl alýrým ve silahýmý nasýl doldurabilirim?\nEvimdeki mobilyalarý nasýl düzenlerim?\nBinalara nasýl girebilirim?", "Seç", "{FF6347}Iptal");
	return 1;
}
*/
/*
CMD:amodifiye(playerid, params[])
{
 	new vehicleid = GetPlayerVehicleID(playerid);
 	new id = PlayerData[playerid][pFaction];
	if(FactionData[id][gTip] == GTIP_TAMIRHANE || PlayerData[playerid][pAdmin] > 3)
	{

		if (!IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz !");

	    if (ModifiyeEdilemezArac(vehicleid))
		    return SendErrorMessage(playerid, "Bu aracý modifiye edemezsin.");

	     ShowPlayerDialog( playerid, dialog_TUNING, DIALOG_STYLE_LIST, "Modifiye Menüsü", D_TEXT, "Seç", "{FF6347}Iptal");
	}
 	else SendErrorMessage(playerid, "Yetkin yok!");
	return 1;
}

CMD:modifiye(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You are not in any vehicle.");

	if (!IsDoorVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "You can't tune this vehicle.");

	Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Tune Vehicle", "Add Wheels\nAdd Nitrous\nAdd Hydraulics", "Select", "Cancel");
	return 1;
}
*/

CMD:modifiye(playerid, params[])
{
	new id = ModifiyeGaraji_ID(playerid, 3);

	if (!IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz !");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(IsPlayerInRangeOfPoint(playerid, 100.0, 614.7092,-1.9900,1000.7025) && IsPlayerInAnyVehicle(playerid)) return ModifiyeCik(playerid);

	if(id == -1) return SendErrorMessage(playerid, "Modifiye garajýna yakýn deðilsin.");

    if (ModifiyeEdilemezArac(vehicleid)) return SendErrorMessage(playerid, "Bu aracý modifiye edemezsin! Gerekçe: Oluþum aracý,meslek aracý, veya kiralýk araç.");

 foreach (new i : Player)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && i != playerid)
	    {
			 static
			    Float:x,
			    Float:y,
			    Float:z;

			GetPlayerPos(i, x, y, z);
			JBC_SetPlayerPos(i, x, y, z + 5);
	    }
	}
	SetVehiclePos(vehicleid, 614.7092,-1.9900,1000.7025);
//	SetVehicleZAngle(vehicleid, 90.0000);
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	LinkVehicleToInterior(vehicleid, 1);
	SetPlayerInterior(playerid, 1);
	SetVehicleVirtualWorld(vehicleid, playerid+7000);
	SetPlayerVirtualWorld(playerid, playerid+7000);
	SetPVarInt(playerid, "ModifiyeYapiyormu", 1); 	SetPVarInt(playerid, "ModifiyeGarajID", id); SetPVarInt(playerid, "ModifiyeAracID", vehicleid);
    SetPVarInt(playerid, "Garajdami", 0);
 	ShowPlayerDialog( playerid, dialog_TUNING, DIALOG_STYLE_LIST, "Modifiye Menüsü", D_TEXT, "Seç", "{FF6347}Iptal");
 	SendServerMessage(playerid, "Lütfen modifiye ettirdikten sonra '/a park' yapmayý unutmayýn!");
	return 1;
}
public OnPlayerUseGarage(playerid, vehicleid, type)
{
	if(type == GARAGE_PAYNSPRAY)
    {
        if (!IsPlayerInAnyVehicle(playerid))
		return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz !");

		GameTextForPlayer(playerid, "~r~TAMIR EDILIYOR...", 5 * 1000, 3);
		TogglePlayerControllable(playerid, 0);
		GiveMoney(playerid, -50);
		SetTimerEx("PaynSprayTamir", 5*1000, false, "dd", playerid, GetPlayerVehicleID(playerid));
    }
	return 1;
}
/*CMD:elegecir(playerid, params[])
{
	new id = Fabrika_ID(playerid, 3);
	new factionid = PlayerData[playerid][pFaction];

	if(factionid == -1) return SendErrorMessage(playerid, "Birlikte deðilsin.");
	if(id == -1) return SendErrorMessage(playerid, "Fabrikaya yakýn deðilsin.");

	if (GetFactionType(playerid) != FACTION_GANG)
	    return SendErrorMessage(playerid, "Bir çete tipi birlikte olman gereklidir.");

	if(Fabrikalar[id][fabrikaBirlik] != -1) return SendErrorMessage(playerid, "Bu fabrika ele geçirilmiþ.");
	if(Fabrika_EleGeciren(id) != -1) return SendErrorMessage(playerid, "Þu anda ele geçiriliyor.");
	PlayerData[playerid][pCaptureFactory] = id;
	Fabrikalar[id][fabrikaCaptureTime] = 120;
    SendClientMessageToAllEx(COLOR_RADIO, "FABRIKA: {FFFFFF}%s adlý oyuncu '%s' adlý fabrikayý '%s' birliði adýna ele geçirmeye çalýþýyor.", ReturnName(playerid, 0), Fabrikalar[id][fabrikaAd], FactionData[factionid][factionName]);
	return 1;
}

CMD:fabrikacalis(playerid, params[])
{
	new id = Fabrika_ID(playerid, 3);
	new factionid = PlayerData[playerid][pFaction];

	if(factionid == -1) return SendErrorMessage(playerid, "Birlikte deðilsin.");
	if(id == -1) return SendErrorMessage(playerid, "Fabrikaya yakýn deðilsin.");


	if (FactionData[factionid][factionID] != Fabrikalar[id][fabrikaBirlik])
	    return SendErrorMessage(playerid, "Fabrika bulunduðun birliðe ait deðil.");

	if (PlayerData[playerid][pFabrikaCalisma] > gettime()) return SendErrorMessage(playerid, "3 saatte bir fabrikada çalýþabilirsiniz.");

	PlayerData[playerid][pFabrikaCalisma] = gettime()+10800;

	Fabrika_Calis(id);
    SendFactionMessage(factionid, COLOR_GREEN, "BÝRLÝK: %s adlý oyuncu birliðe ait olan '%s' adlý fabrikada çalýþtý.", ReturnName(playerid, 0), Fabrikalar[id][fabrikaAd]);
	return 1;
}

CMD:fabrikadepo(playerid, params[]) // fabrika sistemi
{
	new id = Fabrika_ID(playerid, 3);
	new factionid = PlayerData[playerid][pFaction];

	if(factionid == -1) return SendErrorMessage(playerid, "Birlikte deðilsin.");
	if(id == -1) return SendErrorMessage(playerid, "Fabrikaya yakýn deðilsin.");

	if (FactionData[factionid][factionID] != Fabrikalar[id][fabrikaBirlik])
	    return SendErrorMessage(playerid, "Fabrika bulunduðun birliðe ait deðil.");

    if (PlayerData[playerid][pFactionRank] != FactionData[factionid][factionRanks])
	    return SendErrorMessage(playerid, "Fabrikanýn deposuna bakabilmek için birlik lideri olmalýsýn.");

    SetPVarInt(playerid, "FabrikaIDDepo", id);
	Fabrika_Depo(playerid, id);
	return 1;
}*/

CMD:aracyukselt(playerid, params[])
{
	new id = ModifiyeGaraji_ID(playerid, 3);

	if (!IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz !");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(id == -1) return SendErrorMessage(playerid, "Modifiye garajýna yakýn deðilsin.");

    if (ModifiyeEdilemezArac(vehicleid))
		    return SendErrorMessage(playerid, "Bu aracý yükseltemezsin.");

    Dialog_Show( playerid, AracYukselt, DIALOG_STYLE_LIST, "Yükseltme Menüsü", "{FFFFFF} Kilit yükselt.\n Immobiliser yükselt.\n Alarm taktýr. {2ECC71}[ %s ]\n Hurdadan çýkart. {2ECC71}[ %s ]", "Seç", "{FF6347}Iptal", FormatNumber(ALARM_UCRET), FormatNumber(HURDA_UCRET));
	return 1;
}

CMD:createpump(playerid, params[])
{
	static
	    id,
		bizid = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", bizid))
	    return SendSyntaxMessage(playerid, "/createpump [business id]");

	if ((bizid < 0 || bizid >= MAX_BUSINESSES) || !BusinessData[bizid][bizExists])
	    return SendErrorMessage(playerid, "You have specified an invalid business ID.");

	if (BusinessData[bizid][bizType] != 6)
	    return SendErrorMessage(playerid, "This business is not a gas station!");

    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		return SendErrorMessage(playerid, "You can only create gas pumps outside interiors.");

	id = Pump_Create(playerid, bizid);

	if (id == -1)
	    return SendErrorMessage(playerid, "The business has reached the limit for gas pumps.");

	SendServerMessage(playerid, "You have successfully created gas pump ID: %d.", id);
	EditDynamicObject(playerid, PumpData[id][pumpObject]);

	PlayerData[playerid][pEditPump] = id;
	return 1;
}

CMD:destroypump(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroypump [pump id]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendErrorMessage(playerid, "Invalid pump ID.");

	Pump_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed pump ID: %d.", id);
	return 1;
}

CMD:setpump(playerid, params[])
{
	static
	    id = 0,
		amount;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "dd", id, amount))
	    return SendSyntaxMessage(playerid, "/setpump [pump id] [fuel amount]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendErrorMessage(playerid, "Invalid pump ID.");

	PumpData[id][pumpFuel] = amount;

	Pump_Refresh(id);
	Pump_Save(id);

	SendServerMessage(playerid, "You have set the fuel to %d for pump ID: %d.", amount, id);
	return 1;
}

CMD:paintjobsil(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "Bu araç çekilmiþ.");

    if(Arac_VergiGecikmismi(carid))
		return SendErrorMessage(playerid, "Bu aracýn vergi ödemesi gecikmiþ, o yüzden kullanamazsýnýz.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "Þöför deðilsin!");

		SetVehiclePaintjob(GetPlayerVehicleID(playerid), 6);
		SendServerMessage(playerid, "Araçtaki paintjob kaldýrýldý.");
	}
	else SendErrorMessage(playerid, "Bu aracýn sahibi deðilsin.");
	return 1;
}

CMD:modsil(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "Bu araç çekilmiþ.");

    if(Arac_VergiGecikmismi(GetPlayerVehicleID(playerid)))
		return SendErrorMessage(playerid, "Bu aracýn vergi ödemesi gecikmiþ, o yüzden kullanamazsýnýz.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "Þöför deðilsin!");

		new string[1024];
	    strcat(string, "NUM\tAd\n");
		for (new i = 0; i < 14; i ++)
		{
			if (CarData[carid][carMods][i] != 0)  {

				format(string, sizeof(string), "%s%d .\t%s\n", string, CarData[carid][carMods][i], GetComponentName(CarData[carid][carMods][i]));
			}
			else format(string, sizeof(string), "%sBoþ\n", string);
		}
		Dialog_Show(playerid, ModSil, DIALOG_STYLE_TABLIST_HEADERS, "Modifikasyon Kaldýrma", string, "Kaldýr", "{FF6347}Iptal");
	}
	else SendErrorMessage(playerid, "Bu aracýn sahibi deðilsin.");
	return 1;
}

Dialog:LSPDCruiser(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new slotid = listitem, vehicleid = GetPVarInt(playerid, "BBI");
	    if(strfind(inputtext, "Beanbag", true) != -1) {
			if(Beanbag[vehicleid])
			{
			    PlayerData[playerid][pBeanBag] = 1;
			    PlayerData[playerid][pBagajdanAldi] = 1;
			    GetPlayerWeaponData(playerid, 3, PlayerData[playerid][pGuns][3], PlayerData[playerid][pAmmo][3]);
                Beanbag[vehicleid] = false;
				GivePlayerWeaponEx(playerid, 25, 20000);
			    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bagajdan beanbag tüfeðini alýr.", ReturnName(playerid, 0));
			}
			else if(!Beanbag[vehicleid] && PlayerData[playerid][pBeanBag] ){
			    ResetPlayerWeapons(playerid);
			    PlayerData[playerid][pBeanBag] = 0;
				SetWeapons(playerid);
                Beanbag[vehicleid] = true;
				SetPlayerArmedWeapon(playerid, PlayerData[playerid][pGuns][3]);
			    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s beanbag tüfeðini bagaja koyar.", ReturnName(playerid, 0));
			}
			return 1;
		}
		if(strfind(inputtext, "Çelik Yelek", true) != -1) {
			if(CelikYelek[vehicleid])
			{
                ZirhDegistir(playerid, 100.0);
                CelikYelek[vehicleid] = false;
			    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bagajdan çelik yelek alýr ve üzerine geçirir.", ReturnName(playerid, 0));
			}
			else if(!CelikYelek[vehicleid]){
			    if( ReturnArmour(playerid) == 100.0) {
					ZirhDegistir(playerid, 0);
					CelikYelek[vehicleid] = true;
				    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s üzerindeki saðlam çelik yeleði bagaja koyar.", ReturnName(playerid, 0));
				}
			}
			return 1;
		}
		if(strfind(inputtext, "Aðrý Kesici", true) != -1) {
			if(AgriKesici[vehicleid])
			{
                CanDegistir(playerid, 100.0);
                AgriKesici[vehicleid] = false;
			    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s araçtan aðrý kesici alýr ve yutar.", ReturnName(playerid, 0));
			}
			return 1;
		}
	    if(CruiserData[vehicleid][slotid][KalanMermi] <= 0)
		{
	     	if (!GetWeapon(playerid))
	        return SendErrorMessage(playerid, "Elinizde silah yok.");
   			if (GetWeapon(playerid) == 23 && PlayerData[playerid][pTazer])
   			return SendErrorMessage(playerid, "Araca Tazer markalý silahý koyamazsýnýz!");
            if (GetWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag])
  			return SendErrorMessage(playerid, "Araca Shotgun markalý silahý koyamazsýnýz!");
   			CruiserData[vehicleid][slotid][SilahID] = GetWeapon(playerid);
            CruiserData[vehicleid][slotid][KalanMermi] = GetPlayerAmmo(playerid);
            format(CruiserData[vehicleid][slotid][SlotAdi], 24,  "%s", ReturnWeaponName(CruiserData[vehicleid][slotid][SilahID]));
            ResetWeapon(playerid, CruiserData[vehicleid][slotid][SilahID]);
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s '%s' model silahý polis aracýnýn bagajýna koyar.", ReturnName(playerid, 0), ReturnWeaponName(CruiserData[vehicleid][slotid][SilahID]));
		}
		else {
			GiveWeaponToPlayer(playerid,CruiserData[vehicleid][slotid][SilahID], CruiserData[vehicleid][slotid][KalanMermi]);
			PlayerData[playerid][pBagajdanAldi] = 1;
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s polis aracýnýn bagajýndan '%s' model silahý alýr.", ReturnName(playerid, 0), ReturnWeaponName(CruiserData[vehicleid][slotid][SilahID]));
			CruiserData[vehicleid][slotid][KalanMermi] = 0;
			CruiserData[vehicleid][slotid][SilahID] = -1;
		}

 	}
	return 1;
}


CMD:ojail(playerid, params[])
{
if (!PlayerData[playerid][pAdmin]) return SendErrorMessage(playerid, "Yetkin yok!");

		new name[MAX_PLAYER_NAME], minutes;
		if(sscanf(params, "s[24]ds[64]", name, minutes)) return SendClientMessageEx(playerid, COLOR_WHITE, "KULLANIM: /aojail [kullanýcý adý] [dakika]");
		SendClientMessage(playerid, COLOR_RED, "/hesap ile kiþinin giriþ ismine bakarak yapmayý unutma!");

		new tmpName[24], query[512];
		mysql_real_escape_string(name, tmpName);

		SetPVarString(playerid, "OnJailAccount", tmpName);

		format(query,sizeof(query),"UPDATE `characters` SET `JailTime` = %d WHERE `Admin` < %d AND `Username` = '%s'", minutes*60, PlayerData[playerid][pAdmin], tmpName);
		mysql_function_query(g_iHandle, query, false, "OnJailAccount", "i", playerid);
	return 1;
}

CMD:createjob(playerid, params[])
{
	static
	    type,
		id = -1;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/createjob [type]");

	if (type < 1 || type > 21)
	    return SendErrorMessage(playerid, "Geçersiz tip girdiniz. (1-21) arasýda deðer giriniz.");

	id = Job_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for jobs.");

	SendServerMessage(playerid, "You have successfully created job ID: %d.", id);
	return 1;
}

CMD:destroyjob(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyjob [job id]");

	if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
	    return SendErrorMessage(playerid, "You have specified an invalid job ID.");

	Job_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed job ID: %d.", id);
	return 1;
}

CMD:editjob(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editjob [id] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} location, type, point, deliver");
		return 1;
	}
	if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
	    return SendErrorMessage(playerid, "You have specified an invalid job ID.");

	if (!strcmp(type, "location", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobPos][0] = x;
		JobData[id][jobPos][1] = y;
		JobData[id][jobPos][2] = z;

		JobData[id][jobInterior] = GetPlayerInterior(playerid);
		JobData[id][jobWorld] = GetPlayerVirtualWorld(playerid);

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the location of job ID: %d.", ReturnName(playerid, 0), id);
	}
 	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [type] [new type]");

        if (typeint < 1 || typeint > 17)
	    	return SendErrorMessage(playerid, "Geçersiz tip girdiniz. Types range from 1 to 13.");

	    JobData[id][jobType] = typeint;

	    Job_Refresh(id);
	    Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the type of job ID: %d to %s.", ReturnName(playerid, 0), id, Job_GetName(typeint));
	}
	else if (!strcmp(type, "point", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobPoint][0] = x;
		JobData[id][jobPoint][1] = y;
		JobData[id][jobPoint][2] = z;
        JobData[id][jobPointInt] = GetPlayerInterior(playerid);
        JobData[id][jobPointWorld] = GetPlayerVirtualWorld(playerid);

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the point of job ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "deliver", true))
	{
	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "You can't place the deliver point inside interiors.");

	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobDeliver][0] = x;
		JobData[id][jobDeliver][1] = y;
		JobData[id][jobDeliver][2] = z;

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the deliver point of job ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:meslek(playerid, params[])
{
if(!strcmp(params, "katil", true)) // meslek katil
	{
	static
	    id = -1;

	if ((id = Job_Nearest(playerid)) != -1)
	{
	    if (PlayerData[playerid][pJob] == JobData[id][jobType])
	        return SendErrorMessage(playerid, "Zaten bu meslektesin.");

		if( (JobData[id][jobType] == 16 || JobData[id][jobType] == 17 ) && (PlayerData[playerid][pFaction] == -1 || GetFactionType(playerid) != FACTION_GANG))
            return SendErrorMessage(playerid, "Kaçakçýlýk yapabileceðin bir birlikte deðilsin.");

		PlayerData[playerid][pJob] = JobData[id][jobType];

	    return SendServerMessage(playerid, "%s adlý iþe girdin. - Meslek komutlarýný görmek için \"/meslek yardim\" yazýn.", Job_GetName(JobData[id][jobType]));
	}
    SendErrorMessage(playerid, "Herhangi bir iþe girme noktasýna yakýn deðilsin.");
	return 1;
	}
	else if(!strcmp(params, "ayril", true)) // meslek cik
	{
if (PlayerData[playerid][pJob] != 0)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (PlayerData[playerid][pMinedRock])
		{
	    	PlayerData[playerid][pMinedRock] = 0;
			PlayerData[playerid][pMineCount] = 0;

			DisablePlayerCheckpoint(playerid);

			RemovePlayerAttachedObject(playerid, 4);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		if (PlayerData[playerid][pJob] == JOB_COURIER)
		{
			if (PlayerData[playerid][pUnloading] != -1)
			{
	   		 	PlayerData[playerid][pUnloading] = -1;
	    		PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

	    		DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pDeliverShipment])
			{
			    PlayerData[playerid][pShipment] = -1;
			    PlayerData[playerid][pDeliverShipment] = 0;

			    DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pLoading])
			{
	   	 		PlayerData[playerid][pLoading] = 0;
	    		PlayerData[playerid][pLoadType] = 0;

	    		DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pLoadCrate])
 			{
  				PlayerData[playerid][pLoadCrate] = 0;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}
		}
		if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
		{
 			CoreVehicles[vehicleid][vehLoadType] = 0;
   			DestroyObject(CoreVehicles[vehicleid][vehCrate]);

			CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
			DisablePlayerCheckpoint(playerid);
		}
		if ( PlayerData[playerid][pMining] )
		{
		    RemoveAttachedObject(playerid, 4);
		    PlayerData[playerid][pMining] = false;
		}
		if ( PlayerData[playerid][pOdunculuk] )
		{
			cmd_odunculuk(playerid, "\1");
		}
		if ( PlayerData[playerid][pCarryTrash] )
		{
		    RemoveAttachedObject(playerid, 4);
		    PlayerData[playerid][pCarryTrash] = 0;
		}
		SendServerMessage(playerid, "\'%s\' mesleðinden ayrýldýn.", Job_GetName(PlayerData[playerid][pJob]));
		PlayerData[playerid][pJob] = 0;
		tiryapiyor[playerid] = 0;
	}
	else SendErrorMessage(playerid, "Herhangi bir meslekte deðilsin.");
	return 1;
	}
    else if(!strcmp(params, "yardim", true)) // meslek yardim
   {
switch (PlayerData[playerid][pJob])
	{
	    case 1: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /teslimatbasla, /teslimatiptal, /indir, /teslimatlar.");
	    case 2: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /tamiret, /nitro.");
	    case 3: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /taksi, /taksikabul, /taksiiptal.");
	    case 4: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /loadcrate.");
	    case 5: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /madenarac, /kaz");
	    case 6: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /gidasat.");
	    case 7: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /copal, /copbosalt, /copbul.");
	    case 8: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /sorting.");
	    case 9: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /sandikac.");
	    case 10: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /yukal, /tirdevam (Bugda iseniz)");
	    case 11: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /otobus.");
	    case 12: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /pizzabasla, /pisbasi.");
	    case 13: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /ciftci.");
	    case 14: { SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /odunculuk.");
	    SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} Keresteleri 'F' ile alýp 'N' ile araca koyabilirsin."); }
	    case 15: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} Araca binerek mesleðe baþlayabilirsiniz.");
	    case 16: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /eyukle, /eteslim");
	    case 17: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /iyukle, /iteslim.");
		case 18: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /cimentoyukle, /cimentosat.");
		case 19: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /yukal, /yukteslim.");
		case 20: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /kututasi, /kutugeribirak, /kutubirak, /kutunokta");
		case 21: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /kutu al, /kutu birak");
	    default: SendErrorMessage(playerid, "Herhangi bir meslekte bulunmuyorsun.");
	}
	return 1;
	}
	return 1;
}
CMD:indir(playerid, params[])
{
	new
		id = Business_NearestDeliver(playerid),
		vid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Kuryeci deðilsin.");

    if (id == -1)
	    return SendErrorMessage(playerid, "Teslim noktasýna yakýn deðilsin.");

 	if (!IsLoadableVehicle(vid))
  		return SendErrorMessage(playerid, "Bu araç yük aracý deðil..");

	if (!CoreVehicles[vid][vehLoadType] || CoreVehicles[vid][vehLoads] < 1)
	    return SendErrorMessage(playerid, "Bu araçta sandýk yok.");

	if (PlayerData[playerid][pUnloading] != -1)
	    return SendErrorMessage(playerid, "Zaten indirme yapýyorsun.");

	if (PlayerData[playerid][pShipment] != -1 && id != PlayerData[playerid][pShipment])
	    return SendErrorMessage(playerid, "Bu iþyeri teslimat istiyor, teslimat olmadan buraya sandýk býrakamazsýn.");

	switch (CoreVehicles[vid][vehLoadType])
 	{
	 	case 1:
	 	{
	 	    if (BusinessData[id][bizType] != 1 && BusinessData[id][bizType] != 6)
	 	        return SendErrorMessage(playerid, "Araçtaki sandýk tipi bu dükkana uymuyor.");
		}
		case 2..4:
		{
		    if (BusinessData[id][bizType] != CoreVehicles[vid][vehLoadType])
	 	        return SendErrorMessage(playerid, "Araçtaki sandýk tipi bu dükkana uymuyor.");
		}
		case 5:
		{
		    if (BusinessData[id][bizType] != 6)
	 	        return SendErrorMessage(playerid, "Araçtaki sandýk tipi bu dükkana uymuyor.");
		}
		case 6:
		{
		    if (BusinessData[id][bizType] != 7)
	 	        return SendErrorMessage(playerid, "Araçtaki sandýk tipi bu dükkana uymuyor.");
		}
	}
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	DisableWaypoint(playerid);

	GetVehicleBoot(vid, fX, fY, fZ);
	RemovePlayerFromVehicle(playerid);

	PlayerData[playerid][pUnloading] = id;
	PlayerData[playerid][pUnloadVehicle] = vid;

	SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
	SendServerMessage(playerid, "Lütfen sandýklarý aracýn arkasýndan al ve dükkana taþý.");

	return 1;
}

CMD:ttamir(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_GANG || FactionData[PlayerData[playerid][pFaction]][gTip] != GTIP_TAMIRHANE || !FactionData[PlayerData[playerid][pFaction]][factionOnay])
	    return SendErrorMessage(playerid, "Tamirhane tipi onaylý bir birliðin üyesi deðilsin.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Aracýn içinde tamir edemezsin.");

	if (PlayerData[playerid][pRepairTime] > gettime())
	    return SendErrorMessage(playerid, "Tekrar tamir edebilmek için %d saniye beklemen gereklidir.", PlayerData[playerid][pRepairTime] - gettime());

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsEngineVehicle(i))
	        return SendErrorMessage(playerid, "Bu aracý tamir edemezsin.");

	    if (!GetHoodStatus(i))
	        return SendErrorMessage(playerid, "Tamir etmek için aracýn kaputu açýk olmalý.");

        if (CoreVehicles[i][vehRepairing])
            return SendErrorMessage(playerid, "Tamir ediliyor.");

		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

        CoreVehicles[i][vehRepairing] = true;
        SetTimerEx("RepairCar", 5000, false, "dd", playerid, i);

        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s aracý tamir etmeye baþlar.", ReturnName(playerid, 0));
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Tamir ediliyor...~w~ Bekleyiniz...", 5500, 3);
		return 1;
	}
	SendErrorMessage(playerid, "Aracýn kaputuna yakýn deðilsin.");
	return 1;
}

CMD:taksikabul(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "Taksici deðilsin.");

	if (!PlayerData[playerid][pTaxiDuty])
	    return SendErrorMessage(playerid, "Ýlk önce iþbaþý yapman gerek. (/taksi)");

	Taxi_ShowCalls(playerid);
	return 1;
}

CMD:taksiiptal(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "Taksici deðilsin.");

	if (!PlayerData[playerid][pTaxiDuty])
	    return SendErrorMessage(playerid, "Ýlk önce iþbaþý yapman gerek. (/taksi)");

	if(PlayerData[playerid][pTaksiKabul] == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Taksi kabul etmemiþsin.");

	SendServerMessage(PlayerData[playerid][pTaksiKabul], "%s adlý taksi þöförü gelmekten vazgeçti tekrardan taksi çaðýrabilirsin.", ReturnName(PlayerData[playerid][pTaksiKabul], 0));
	PlayerData[playerid][pTaksiKabul] = -1;
	DisablePlayerCheckpoint(playerid);
	return 1;
}

CMD:otobus(playerid, params[])
{
	static
	     type[24];

	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Otobüste deðilsiniz.");
	new vehicleid = GetPlayerVehicleID(playerid);
	new carid = Car_GetID(vehicleid);

    if (PlayerData[playerid][pJob] != JOB_OTOBUSSOFORU)
	    return SendErrorMessage(playerid, "Otobüs þöförü deðilsin.");

	if (sscanf(params, "s[24]", type))
 	{
	 	SendSyntaxMessage(playerid, "/otobus [isim]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[KULLANIM]:{FFFFFF} basla.");
		return 1;
	}
    if (!strcmp(type, "basla", true))
	{
	    if(PlayerData[playerid][pOtobusDuty]) return SendErrorMessage(playerid, "Otobüs seferine baþlamýþsýnýz.");
        if(Car_Meslek(playerid, carid)){ //bus
            SetPVarInt(playerid, "OtobusID", vehicleid);
			Mise[playerid][BusMission] = 999;
			//BusMissions(playerid);
			CPotobus[playerid] = otobus2;
            SetPlayerCheckpoint(playerid, otobus2_CO, 3.0);
			PlayerData[playerid][pOtobusDuty] = true;
			SendServerMessage(playerid, "Sefer baþladý.");
			PlayerData[playerid][pYukAldi] = 1;
		} else SendErrorMessage(playerid, "Otobüste deðilsiniz.");
 	}
  	return 1;
}

CMD:pizzabasla(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_PIZZACILIK)
	    return SendErrorMessage(playerid, "Pizzacý deðilsin.");

    if (PlayerData[playerid][pPizzaIsbasi] == 0)
        return SendErrorMessage(playerid, "Ýþbaþýnda deðilsin.");

    if (PlayerData[playerid][pPizzaBasladimi] == 1)
        return SendErrorMessage(playerid, "Zaten pizza daðýtmaya baþlamýþsýn, ayrýlmak için iþbaþý noktasýna git ve iþbaþýndan çýk.");

   	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Bu komutu sadece aracýn sürücü koltuðundayken kullanabilirsiniz !");

    new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);

	if (!Car_Meslek(playerid, id) && modelid != 448)
	    return SendErrorMessage(playerid, "Pizza daðýtým motorunda deðilsin.");


	SendServerMessage(playerid, "Pizza sipariþlerini evlere teslim et.");
	new r_ev = random(50);
	SetPlayerCheckpoint(playerid,  HouseData[r_ev][housePos][0], HouseData[r_ev][housePos][1], HouseData[r_ev][housePos][2], 5.0);
	PlayerData[playerid][pPizzaBasladimi] = 1;
  	return 1;
}

CMD:pisbasi(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_PIZZACILIK)
	    return SendErrorMessage(playerid, "Pizzacý deðilsin.");

    new jobid = Job_NearestPoint(playerid, 3);

    if ((jobid = Job_NearestPoint(playerid)) == -1 || JobData[jobid][jobType] != JOB_PIZZACILIK)
		return SendErrorMessage(playerid, "Pizza daðýtým mesleði için iþbaþý noktasýnda deðilsin.");

	if(PlayerData[playerid][pPizzaIsbasi] == 0) {
	    PlayerData[playerid][pPizzaIsbasi] = 1;
	    SetPlayerSkin(playerid, 155);
	    SendServerMessage(playerid, "Pizza daðýtým motorlarýna bindikten sonra '/pizzabasla' yazarak pizza daðýtýmýna baþlayabilirsiniz.");
	}
	else {
	    PlayerData[playerid][pPizzaIsbasi] = 0;
		SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		SendServerMessage(playerid, "Ýþbaþýndan çýktýnýz.");
		DisablePlayerCheckpoint(playerid);
		PlayerData[playerid][pPizzaBasladimi] = 0;
 	}
 	return 1;
}


stock Pizza_RastgeleEv(playerid, kazanc)
{
	new r_ev = random(350);
	//Waypoint_Set(playerid, "Pizza Siparisi", HouseData[r_ev][housePos][0], HouseData[r_ev][housePos][1], HouseData[r_ev][housePos][2]);
	GiveMoney(playerid, kazanc);
	SendServerMessage(playerid, "Pizzayý teslim ettin ve %s kazandýn, diðer pizzalarýda teslim et.", FormatNumber(KAZANC_PIZZA));
    SetPlayerCheckpoint(playerid,  HouseData[r_ev][housePos][0], HouseData[r_ev][housePos][1], HouseData[r_ev][housePos][2], 6.0);
    SetTimerEx("PizzaHile", 3000, false, "d", playerid);
    pizzahile[playerid] = 1;
	return 1;
}

forward PizzaHile(playerid);
public PizzaHile(playerid)
{
	pizzahile[playerid] = 0;
}

CMD:tirdevam(playerid, params[])
{
    if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Týrda deðilsin.");

	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
	new trailerid = GetVehicleTrailer(vehicleid);

    if (PlayerData[playerid][pJob] != JOB_TIRCILIK)
	    return SendErrorMessage(playerid, "Týr Þöförü deðilsin.");

	if (!Car_Meslek(playerid, id) && modelid != 403)
	    return SendErrorMessage(playerid, "Týrda deðilsin.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Bu komutu sadece aracýn sürücü koltuðundayken kullanabilirsiniz !");

    if(!IsTrailerAttachedToVehicle(vehicleid))
        return SendErrorMessage(playerid, "Dorsen yok.");

    tiryapiyor[playerid] = 1;
	if(tiryuk[trailerid] >= 1)
	{
	    SetPlayerCheckpoint(playerid, 1728.6511, 2330.1802, 10.8203, 6.0);
	}
  	return 1;
}



CMD:yukalal(playerid, params[])
{

	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Týrda olmalýsýnýz.");
	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
	new trailerid = GetVehicleTrailer(vehicleid);
    new jobid = Job_NearestPoint(playerid, 3);

    if ((jobid = Job_NearestPoint(playerid)) == -1 || JobData[jobid][jobType] != JOB_TIRCILIK)
		return SendErrorMessage(playerid, "Yük alma noktasýnda deðilsin.");

    if (PlayerData[playerid][pJob] != JOB_TIRCILIK)
	    return SendErrorMessage(playerid, "Týr Þöförü deðilsin.");

	if (!Car_Meslek(playerid, id) && modelid != 403)
	    return SendErrorMessage(playerid, "Týrda deðilsin.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Bu komutu sadece aracýn sürücü koltuðundayken kullanabilirsiniz !");

    if(!IsTrailerAttachedToVehicle(vehicleid))
        return SendErrorMessage(playerid, "Dorsen yok.");

	if(tiryuk[trailerid] >= 1)
	    return SendErrorMessage(playerid, "Bu dorse zaten dolu.");

    tiryuk[trailerid] = 1;
    tiryapiyor[playerid] = 1;
    TogglePlayerControllable(playerid, 0);
    PlayerData[playerid][pTirAsama] = 0;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Yuk Aliniyor...", 5 * 1000, 3);
    SetTimerEx("YukAliniyor", 5 * 1000, false, "i", playerid);
    SetPVarInt(playerid, "yuktip", 1);
  	return 1;
}

forward YukAliniyor(playerid); public YukAliniyor(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new trailerid = GetVehicleTrailer(vehicleid);
    tiryuk[trailerid] = GetPVarInt(playerid, "yuktip");
	if( GetPVarInt(playerid, "yuktip") == 2) {
		SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "911 HATTI: Ýllegal yük taþýyan týrlar þehir dýþýna gidiyor!");
        SendFactionMessageEx(FACTION_INTEL, COLOR_RADIO, "911 HATTI: Ýllegal yük taþýyan týrlar þehir dýþýna gidiyor!");
	}
    tiryapiyor[playerid] = 1;
    TogglePlayerControllable(playerid, 1);
    SetPlayerCheckpoint(playerid, 1728.6511, 2330.1802, 10.8203, 3.0);
    return 1;
}

stock TirBitir(playerid, vehicleid)
{
	PlayerData[playerid][pTirAsama] = 0;
	PlayerData[playerid][pTirGelisAsama] = 0;
    new trailerid = GetVehicleTrailer(vehicleid);
	new kazanc = RandomEx(800, 900);
    TirSeviyeKontrol(playerid, kazanc);
    tiryuk[trailerid] = 0;
    tiryapiyor[playerid] = 0;
    RespawnVehicle(trailerid);
    //RespawnVehicle(vehicleid);
	return 1;
}

stock TirSeviyeKontrol(playerid, kazanc)
{
	PlayerData[playerid][pTirEXP]++;
	new ekstrakazanc;
	ekstrakazanc = PlayerData[playerid][pTirSeviye] * 0;
	GiveMoney(playerid, ekstrakazanc+kazanc);
	SendServerMessage(playerid, "Yükü baþarýyla teslim ettin ve %s kazandýn.", FormatNumber(ekstrakazanc+kazanc));
	if(PlayerData[playerid][pTirSeviye] < 5 && PlayerData[playerid][pTirEXP] >= PlayerData[playerid][pTirSeviye]*25)
	{
	    PlayerData[playerid][pTirEXP] = 0;
	    PlayerData[playerid][pTirSeviye]++;
	    SendServerMessage(playerid, "Tir kaçakçýlýðý seviyen arttý!", PlayerData[playerid][pTirSeviye]*100);
	}
	return 1;
}

CMD:taksi(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "Taksici deðilsin.");

	if (!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Taksi aracýnda olmalýsýn.");

	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

	if (modelid != 560 && modelid != 420)
	    return SendErrorMessage(playerid, "Takside deðilsin.");

	if (PlayerData[playerid][pTaxiDuty])
	{
	    foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pTaxiDuty] = false;
        SendServerMessage(playerid, "Ýþbaþýndan çýktýn!");
	}
	else
	{
		SetPlayerColor(playerid, 0xFFFF00FF);

	    PlayerData[playerid][pTaxiDuty] = true;
	    //if(!spamProtect(playerid, "taksi", 120))  return SendErrorMessage(playerid, "Bu komutu 2 dakikada bir kullanabilirsiniz.");
	    SendClientMessageToAllEx(COLOR_GREEN, "[TAKSI]: %s iþbaþý yaptý, \"/ara 1222\" yazarak taksi çaðýrabilirsin!", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Ýþbaþý yaptýktan sonra '/taksi' komutunu spam olarak kullanýrsan cezalandýrýlýrsýn");
	}
	return 1;
}
CMD:telefon(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Telefon"))
	    return SendErrorMessage(playerid, "Telefonun yok!");

	    if(PlayerData[playerid][pJailTime] > 0) return SendErrorMessage(playerid, "Hapisteyken bu iþlemi kullanamazsýnýz.");

	    if (PlayerData[playerid][pCK]) return SendErrorMessage(playerid, "Karakterin öldüðü için bu komutun kullanamazsýn!");

    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pBaygin] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Þuan komut kullanamazsýnýz.");

	static
	    str[160];

	format(str, sizeof(str), "Telefon(#%d)", PlayerData[playerid][pPhone]);

	if (PlayerData[playerid][pPhoneOff]) {
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunu eline alýr.", ReturnName(playerid, 0));
		Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "{00AB00} {FFFFFF}Numara Çevir\n{00AB00} {FFFFFF}Konum Gönder\n{00AB00} {FFFFFF}Telefon Rehberi\n{00AB00} {FFFFFF}Kýsa Mesaj\n{3CFFA4}Telefonu Aç", "Tamam", "Vazgeç");
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonunu eline alýr.", ReturnName(playerid, 0));
	    Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "{00AB00} {FFFFFF}Numara Çevir\n{00AB00} {FFFFFF}Konum Gönder\n{00AB00} {FFFFFF}Telefon Rehberi\n{00AB00} {FFFFFF}Kýsa Mesaj\n{9C0015}Telefonu Kapat", "Tamam", "Vazgeç");
	}
	return 1;
}

CMD:sms(playerid, params[])
	return cmd_text(playerid, params);

CMD:text(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Telefon"))
	    return SendErrorMessage(playerid, "Üzerinizde bir cep telefonu yok.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "Telefonunuz kapalý.");
		
    if (!PlayerData[playerid][pSmsHakki]) return SendErrorMessage(playerid, "SMS hakkýn telefonunda bulunmuyor!");

	static targetid, number, text[128];

	if (sscanf(params, "ds[128]", number, text))
	    return SendSyntaxMessage(playerid, "/sms [telefon numarasý] [mesaj]");

	if (!number)
	    return SendErrorMessage(playerid, "Belirtilen numara bir hizmete ait deðil.");

	if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
	    if (targetid == playerid)
	        return SendErrorMessage(playerid, "Kendine mesaj yollayamassýn.");

		if (PlayerData[targetid][pPhoneOff])
		    return SendErrorMessage(playerid, "Alýcýnýn cep telefonu kapalý.");

        GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "Kisa mesaj ucreti -$1 kesildi");

		SendClientMessageEx(targetid, COLOR_YELLOW, "SMS: %s - (%d)", text, PlayerData[playerid][pPhone]);
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "SMS", "{33AA33}SMS Ýletildi.\n\n{33AA33}Mesaj: {FFFFFF}%s\n{33AA33}Ýletilen Numara: {FFFFFF}%d", "Tamam", "", text, number);
		SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: %s - (%d)", text, PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telefonunu çýkarýr ve bir kýsa mesaj gönderir.", ReturnName(playerid, 0));
	}
	else
	{
	    SendErrorMessage(playerid, "Belirtilen numara bir hizmete ait deðil.");
	}
	return 1;
}

CMD:cevapla(playerid, params[])
{
	if (!PlayerData[playerid][pIncomingCall])
	    return SendErrorMessage(playerid, "Þuanda seni arayan birisi yok.");

	if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "Telefonunu þuan kullanamazsýn.");

    if (PlayerData[playerid][pPhoneOff])
    	return SendErrorMessage(playerid, "Telefonun kapalý.");

	new targetid = PlayerData[playerid][pCallLine];

	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	SendServerMessage(playerid, "Aramaya cevap verdiniz.");
	SendServerMessage(targetid, "Karþýdaki kiþi telefonu açtý!");

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telefonunu çýkarýr ve aramayý cevaplar.", ReturnName(playerid, 0));
	return 1;
}

CMD:tkapat(playerid, params[])
{
	new targetid = PlayerData[playerid][pCallLine];

	if (PlayerData[playerid][pEmergency] || PlayerData[playerid][pPlaceAd])
	{
	    PlayerData[playerid][pEmergency] = 0;
	    PlayerData[playerid][pPlaceAd] = 0;

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telefonunu kapatýr ve cebine koyar.", ReturnName(playerid, 0));
        return 1;
	}
	if (targetid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Þuanda cep telefonunuzu kullanmýyorsunuz.");

	if (PlayerData[playerid][pIncomingCall])
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[TELEFON]:{FFFFFF} Gelen aramayý reddettiniz.");
	    SendClientMessage(targetid, COLOR_YELLOW, "[TELEFON]:{FFFFFF} Aradýðýnýz kiþi çaðrýyý reddetti.");

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s aramayý reddeder.", ReturnName(playerid, 0));
	}
	else
	{
        SendClientMessage(playerid, COLOR_YELLOW, "[TELEFON]:{FFFFFF} Aramayý bitirdiniz.");
	    SendClientMessage(targetid, COLOR_YELLOW, "[TELEFON]:{FFFFFF} Karþýdaki kiþi aramayý bitirdi.");

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telefonunu kapatýr ve cebine koyar.", ReturnName(playerid, 0));
	    SendNearbyMessage(targetid, 30.0, COLOR_PURPLE, "** %s telefonunu kapatýr ve cebine koyar.", ReturnName(targetid, 0));
	}
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

	return 1;
}
CMD:fotografmod(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Telefon"))
	    return SendErrorMessage(playerid, "Cep telefonun yok.");

	if(PlayerData[playerid][pJailTime] > 0)
	{
		SendErrorMessage(playerid, "Hapisteyken bunu yapamazsýn!");
		return 1;
	}

	if(IsPlayerInAnyVehicle(playerid))
		return SendErrorMessage(playerid, "Araçtayken bunu yapamazsýn!");


	switch(GetPVarInt(playerid, "SelfieModu"))
	{
	case 0:
	{
	SetPVarInt(playerid, "SelfieModu", 1);
	new Float: x, Float: y, Float: z, Float: a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
    SetPlayerCameraPos(playerid, x+(2.1 * floatsin(-a, degrees)), y+(2.1 * floatcos(-a, degrees)), z+0.8);
    SetPlayerCameraLookAt(playerid, x, y, z, CAMERA_MOVE);
    TogglePlayerControllable(playerid, 0);
    SetPlayerAttachedObject(playerid, 9, 18865, 6, 0.090000, 0.061999, 0.061000, -15.900002, -95.900039, -121.999885, 1.000000, 1.000000, 1.000000);
	ApplyAnimation(playerid, "SHOP", "ROB_Loop", 4.1, 1, 1, 1, 1, 0, 1);
	}
    case 1:
	{
	SetPVarInt(playerid, "SelfieModu", 0);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	RemovePlayerAttachedObject(playerid, 9);
	ClearAnimations(playerid, 1);
	}
	}
    return 1;
}
CMD:id(playerid, params[])
{
	new
		szMessage[128],
		szName[MAX_PLAYER_NAME],
		iTarget,
		iSuccess;

	if(isnull(params))
		return SendServerMessage(playerid,"/id [oyuncu ismi veya id]");

	foreach(Player, i) {
		GetPlayerName(i, szName, sizeof(szName));
		if(strfind(szName, params, true) != -1) {
			format(szMessage, sizeof(szMessage), "{338833}ID: {FFFFFF}%d | {338833}Isim: {FFFFFF}%s | {338833}Level: {FFFFFF}%d | {338833}Ping: {FFFFFF}%d", i, ReturnName(i),  PlayerData[i][pLevel], GetPlayerPing(i));
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			iSuccess ++;
		}
	}

	if(iSuccess == 0) {
		if(!sscanf(params, "u", iTarget)) {
			if(IsPlayerConnected(iTarget)) {
				format(szMessage, sizeof(szMessage), "{338833}ID: {FFFFFF}%d | {338833}Isim: {FFFFFF}%s | {338833}Level: {FFFFFF}%d | {338833}Ping: {FFFFFF}%d", iTarget, ReturnName(iTarget),  PlayerData[iTarget][pLevel], GetPlayerPing(iTarget));
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
				iSuccess ++;
			}
		}
	}

	if(iSuccess == 0)
		SendErrorMessage(playerid,"Belirttiðiniz kriterlere ait kullanýcý bulunmamaktadýr.");

	return 1;
}

/*CMD:ibilgi(playerid, params[])
{
    new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id)) {
     	SendServerMessage(playerid, "ID: %d | Ýþyeri: %s | Ürünler: %d | Kasa: %s", id, BusinessData[id][bizName], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
	}
	else SendErrorMessage(playerid, "Ýþyeriniz yok.");
	return 1;
}*/
/*
CMD:loadcrate(playerid, params[])
{
	new vehid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pJob] != JOB_UNLOADER)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (!IsPlayerInWarehouse(playerid))
	    return SendErrorMessage(playerid, "You must be inside a warehouse to do this.");

	if (GetVehicleModel(vehid) != 530)
	    return SendErrorMessage(playerid, "You must be inside a forklift.");

	if (CoreVehicles[vehid][vehLoadType] == 7)
	    return SendErrorMessage(playerid, "This forklift has a crate loaded already.");

	if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1260.3976, -20.0215, 1001.0234))
	    return SendErrorMessage(playerid, "You must be closer to the crates.");

	if (PlayerData[playerid][pLoading])
	    return SendErrorMessage(playerid, "You are already loading a crate at the moment.");

	PlayerData[playerid][pLoading] = 1;

	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Loading crate...", 3200, 3);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s moves the forklift towards the crate.", ReturnName(playerid, 0));

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("ForkliftUpdate", 3000, false, "dd", playerid, vehid);
	return 1;
}
*/
CMD:maden(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_MINER)
	    return SendErrorMessage(playerid, "Madenci deðilsin.");

	if (!IsPlayerNearMine(playerid))
	    return SendErrorMessage(playerid, "Madene yakýn deðilsin.");

	if (PlayerData[playerid][pMining])
	{
	    PlayerData[playerid][pMining] = false;
	    PlayerData[playerid][pMineCount] = 0;

		RemovePlayerAttachedObject(playerid, 4);
	    SendServerMessage(playerid, "Madenciliði bitirdin.");
	}
	else
	{
	    PlayerData[playerid][pMining] = true;
        PlayerData[playerid][pMineCount] = 0;

	    SendServerMessage(playerid, "Artýk madencisin! Ateþ tuþu ile kazmaya baþla.");
	    SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
	}
	return 1;
}

CMD:odunculuk(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_ODUNCULUK)
	    return SendErrorMessage(playerid, "Oduncu deðilsin.");

	if (PlayerData[playerid][pOdunculuk])
	{
	    PlayerData[playerid][pOdunculuk] = false;
		SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		RemovePlayerAttachedObject(playerid, 5);
	    SendServerMessage(playerid, "Odunculuðu bitirdin.");
	}
	else
	{
	    PlayerData[playerid][pOdunculuk] = true;
    	if(PlayerData[playerid][pGender] == 1) SetPlayerSkin(playerid, 16);
    	if(PlayerData[playerid][pGender] == 2) SetPlayerSkin(playerid, 157);
	    SendServerMessage(playerid, "Artýk oduncusun! Ateþ tuþu ile odun kesmeye baþla.");
	    SetPlayerAttachedObject(playerid, 5, GetWeaponModel(9), 6);
  		SetPlayerArmedWeapon(playerid, 0);
	}
	return 1;
}

CMD:gidasat(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_FOOD_VENDOR)
	    return SendErrorMessage(playerid, "Gýda satýcýsý deðilsin.");

	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 423 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 588)
 		return SendErrorMessage(playerid, "Gýda aracýnda deðilsin.");

	static
	    userid,
	    food[24],
	    price;

	if (sscanf(params, "us[24]d", userid, food, price))
	{
	    SendSyntaxMessage(playerid, "/gidasat [id] [gýda adý] [fiyat]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} su, soda, burger, pizza, tavuk, dondurma.");
	    return 1;
	}
	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 7.0))
	    return SendErrorMessage(playerid, "Oyuncu oyunda deðil veya sana yakýn deðil.");

	if (price < 1 || price > 100)
	    return SendErrorMessage(playerid, "Fiyat en az $1 en fazla $100 olabilir.");

	if (!strcmp(food, "su", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 1;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s adlý oyuncu sana 'Su' satýyor, fiyat: $%d. (Almak için \"/kabulet gida\".).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "%s adlý oyuncuya $%d'a 'Su' satma teklifi yolladýn.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "soda", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 2;
	    PlayerData[userid][pFoodPrice] = price;

	    SendServerMessage(userid, "%s adlý oyuncu sana 'Soda' satýyor, fiyat: $%d. (Almak için \"/kabulet gida\".).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "%s adlý oyuncuya $%d'a 'Soda' satma teklifi yolladýn.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "burger", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 3;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s adlý oyuncu sana 'Burger' satýyor, fiyat: $%d. (Almak için \"/kabulet gida\".).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "%s adlý oyuncuya $%d'a 'Burger' satma teklifi yolladýn.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "pizza", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 4;
	    PlayerData[userid][pFoodPrice] = price;

        SendServerMessage(userid, "%s adlý oyuncu sana 'Pizza' satýyor, fiyat: $%d. (Almak için \"/kabulet gida\".).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "%s adlý oyuncuya $%d'a 'Pizza' satma teklifi yolladýn.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "tavuk", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 5;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s adlý oyuncu sana 'Tavuk' satýyor, fiyat: $%d. (Almak için \"/kabulet gida\".).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "%s adlý oyuncuya $%d'a 'Tavuk' satma teklifi yolladýn.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "dondurma", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 6;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s adlý oyuncu sana 'Dondurma' satýyor, fiyat: $%d. (Almak için \"/kabulet gida\".).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "%s adlý oyuncuya $%d'a 'Dondurma' satma teklifi yolladýn.", ReturnName(userid, 0), price);
	}
	return 1;
}

CMD:createcrate(playerid, params[])
{
	static
	    id = -1,
		type;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/createcrate [type]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Melee | 2: Pistol Parts | 3: SMG Parts | 4: Shotgun Parts | 5: Rifle Parts | 6: Drugs");
		return 1;
	}
	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Geçersiz tip girdiniz. Types range from 1 to 6.");

	id = Crate_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for crates.");

	SendServerMessage(playerid, "You have successfully created crate ID: %d.", id);
	return 1;
}

CMD:destroycrate(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroycrate [crate id]");

	if ((id < 0 || id >= MAX_CRATES) || !CrateData[id][crateExists])
	    return SendErrorMessage(playerid, "You have specified an invalid crate ID.");

	Crate_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed crate ID: %d.", id);
	return 1;
}

CMD:sandiklar(playerid, params[])
{
	static
	    string[512];

	string[0] = '\0';

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
	{
	    if (GetVehicleCrates(i) < 1)
	        return SendErrorMessage(playerid, "Bu araçta hiç sandýk yok.");

		for (new j = 0; j != MAX_CRATES; j ++) if (CrateData[j][crateExists] && CrateData[j][crateVehicle] == i) {
			format(string, sizeof(string), "%sSandýk #%d: %s Parçalarý\n", string, j, Crate_GetType(CrateData[j][crateType]));
		}
		PlayerData[playerid][pCrateVehicle] = i;
		return Dialog_Show(playerid, Crates, DIALOG_STYLE_LIST, "Araç Kasalarý", string, "Al", "{FF6347}Iptal");
	}
	SendErrorMessage(playerid, "Herhangi bir araca yakýn deðilsin.");
	return 1;
}

CMD:cimentoyukle(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_CIMENTO)
	    return SendErrorMessage(playerid, "Çimento taþýmacýlýðý mesleðinde deðilsin.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2157.1326,-2147.0513,13.5469))
		return SendErrorMessage(playerid, "Çimento yükleme noktasýnda deðilsin.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid))))
        return SendErrorMessage(playerid, "Meslek aracý deðil.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");

    new vehicleid = GetPlayerVehicleID(playerid);

    if (CoreVehicles[vehicleid][vehCimento] == 1) return SendErrorMessage(playerid, "Zaten bu araçta yük var.");

    TogglePlayerControllable(playerid, 0);
    PlayerData[playerid][pYukAldi] = 1;
   	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~CIMENTO YUKLENIYOR...", 5 * 1000, 3);
    SetTimerEx("CimentoYuklendi", 5 * 1000, false, "di", playerid, vehicleid);
	return 1;
}
/*CMD:cimentosat(playerid, params[])
{
new payment;
				new level = PlayerData[playerid][pCimentoSkill];
				if(level >= 0 && level < 50) payment = 850;
				else if(level >= 50 && level < 100) payment = 1400;
				else if(level >= 100 && level < 200) payment = 2100;
				else if(level >= 200 && level < 400) payment = 2800;
				else if(level >= 400) payment = 3500;
new vehicleid = GetPlayerVehicleID(playerid);
if (PlayerData[playerid][pJob] != JOB_CIMENTO)
	    return SendErrorMessage(playerid, "Çimento taþýmacýlýðý mesleðinde deðilsin.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid))))
        return SendErrorMessage(playerid, "Meslek aracý deðil.");

      if (CoreVehicles[vehicleid][vehCimento] == 0) return SendErrorMessage(playerid, "Bu araçta yük yok.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");

new level2 = PlayerData[playerid][pCimentoSkill], string2[128];
if(level2 >= 0 && level2 < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Çimento Taþýmacýlýðý Levelin = 1"); format(string2, sizeof(string2), "Level atlamak için %d yük daha teslim etmelisiniz.",50 - level2); SendClientMessage(playerid, COLOR_YELLOW, string2); }
else if(level2 >= 50 && level2 < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Çimento Taþýmacýlýðý Levelin = 2"); format(string2, sizeof(string2), "Level atlamak için %d yük daha teslim etmelisiniz.", 100 - level2); SendClientMessage(playerid, COLOR_YELLOW, string2); }
else if(level2 >= 100 && level2 < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Çimento Taþýmacýlýðý Levelin = 3"); format(string2, sizeof(string2), "Level atlamak için %d yük daha teslim etmelisiniz.", 200 - level2); SendClientMessage(playerid, COLOR_YELLOW, string2); }
else if(level2 >= 200 && level2 < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Çimento Taþýmacýlýðý Levelin = 4"); format(string2, sizeof(string2), "Level atlamak için %d yük daha teslim etmelisiniz.", 400 - level2); SendClientMessage(playerid, COLOR_YELLOW, string2); }
else if(level2 >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Çimento Taþýmacýlýðý Levelin = 5"); }
PlayerData[playerid][pCimentoSkill]++;
SendServerMessage(playerid, "Çimento sattýn ve %d$ kazandýn!", payment);
DisablePlayerCheckpoint(playerid);
CoreVehicles[vehicleid][vehCimento] = 0;
GiveMoney(playerid, payment);
return 1;
}*/
CMD:yukal(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_TASIMACI)
	    return SendErrorMessage(playerid, "Taþýmacýlýk þirketinde çalýþmýyorsunuz.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2460.9548,-2120.6494,13.5530))
		return SendErrorMessage(playerid, "Yük alma noktasýnda deðilsin!");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid))))
        return SendErrorMessage(playerid, "Meslek aracý deðil.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");

    new vehicleid = GetPlayerVehicleID(playerid);

    if (CoreVehicles[vehicleid][vehTasimaci] == 1) return SendErrorMessage(playerid, "Zaten bu araçta yük var.");

    TogglePlayerControllable(playerid, 0);
   	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~YUK ALINIYOR...", 5 * 1000, 3);
    SetTimerEx("MalYuklendi", 5 * 1000, false, "di", playerid, vehicleid);
    CPtasimacilik[playerid] = tasimacilik1;
    PlayerData[playerid][pYukAldi] = 1;
    SetPlayerCheckpoint(playerid, tasimacilik1_CO, 4.1);
	return 1;
}
/*CMD:yukteslim(playerid, params[])
{
new vehicleid = GetPlayerVehicleID(playerid);
if (PlayerData[playerid][pJob] != JOB_TASIMACI)
	    return SendErrorMessage(playerid, "Taþýmacýlýk þirketinde deðilsin.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid))))
        return SendErrorMessage(playerid, "Meslek aracý deðil.");

      if (CoreVehicles[vehicleid][vehTasimaci] == 0) return SendErrorMessage(playerid, "Bu araçta yük yok.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");

GiveMoney(playerid, 650);
SendServerMessage(playerid, "Yüklerini teslim ettin ve 650$ kazandýn!");
DisablePlayerCheckpoint(playerid);
CoreVehicles[vehicleid][vehTasimaci] = 0;
return 1;
}*/
CMD:iyukle(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_I_KACAKCILIK)
	    return SendErrorMessage(playerid, "Ýçki kaçakçýsý deðilsin");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, I_KACAKCILIK_YUKALMA_X, I_KACAKCILIK_YUKALMA_Y, I_KACAKCILIK_YUKALMA_Z))
		return SendErrorMessage(playerid, "Yük yükleme noktasýnda deðilsin.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid))))
        return SendErrorMessage(playerid, "Meslek aracý deðil.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");

    new vehicleid = GetPlayerVehicleID(playerid);

    if (CoreVehicles[vehicleid][vehIKacakcilik] == 1) return SendErrorMessage(playerid, "Zaten bu araçta yük var.");

    TogglePlayerControllable(playerid, 0);
    PlayerData[playerid][pYukAldi] = 1;
   	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Yuk Aliniyor...", 5 * 1000, 3);
    SetTimerEx("IckiYuklendi", 5 * 1000, false, "di", playerid, vehicleid);
	return 1;
}




CMD:iteslim(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_I_KACAKCILIK)
	    return SendErrorMessage(playerid, "Ýçki kaçakçýsý deðilsin");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, I_KACAKCILIK_YUKTESLIM_X, I_KACAKCILIK_YUKTESLIM_Y, I_KACAKCILIK_YUKTESLIM_Z))
		return SendErrorMessage(playerid, "Yük teslim noktasýnda deðilsin.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid))))
        return SendErrorMessage(playerid, "Meslek aracý deðil.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");

    new vehicleid = GetPlayerVehicleID(playerid);

    if (CoreVehicles[vehicleid][vehIKacakcilik] == 0) return SendErrorMessage(playerid, "Bu araçta yük yok.");

	CoreVehicles[vehicleid][vehIKacakcilik] = 0;
	GiveMoney(playerid, E_KACAKCILIK_VERILEN_PARA);
	FactionData[PlayerData[playerid][pFaction]][factionKasaMiktar] += I_KACAKCILIK_VERILEN_KASA;
	Birlik_EXPVer(PlayerData[playerid][pFaction], I_KACAKCILIK_VERILEN_EXP);
	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_GREEN, "BÝRLÝK: %s adlý oyuncu 'Ýçki Kaçakçýlýðý' yaptý ve birliðe +%d EXP ve +$%d para kazandýrdý.", ReturnName(playerid, 0), I_KACAKCILIK_VERILEN_EXP, I_KACAKCILIK_VERILEN_KASA, I_KACAKCILIK_VERILEN_PARA);
   	SendServerMessage(playerid, "Birliðinize {2ECC71}+%d {FFFFFF}EXP ve kasaya {2ECC71}+$%d {FFFFFF}eklendi. Size ise {2ECC71}$%d {FFFFFF}verildi.", I_KACAKCILIK_VERILEN_EXP, I_KACAKCILIK_VERILEN_KASA, I_KACAKCILIK_VERILEN_PARA);
 	DisablePlayerCheckpoint(playerid);
	return 1;
}


CMD:eteslim(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_E_KACAKCILIK)
	    return SendErrorMessage(playerid, "Týrcý deðilsin.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, E_KACAKCILIK_YUKTESLIM_X, E_KACAKCILIK_YUKTESLIM_Y, E_KACAKCILIK_YUKTESLIM_Z))
		return SendErrorMessage(playerid, "Yük teslim noktasýnda deðilsin.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Araçta deðilsin.");

    if (!Car_Meslek(playerid, Car_GetID(GetPlayerVehicleID(playerid))))
        return SendErrorMessage(playerid, "Meslek aracý deðil.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");

    new vehicleid = GetPlayerVehicleID(playerid);

    if (CoreVehicles[vehicleid][vehEKacakcilik] == 0) return SendErrorMessage(playerid, "Bu araçta yük yok.");

	RespawnVehicle(vehicleid);
	CoreVehicles[vehicleid][vehEKacakcilik] = 0;
	GiveMoney(playerid, E_KACAKCILIK_VERILEN_PARA);
	FactionData[PlayerData[playerid][pFaction]][factionKasaMiktar] += E_KACAKCILIK_VERILEN_KASA;
	Birlik_EXPVer(PlayerData[playerid][pFaction], E_KACAKCILIK_VERILEN_EXP);
	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_GREEN, "BÝRLÝK: %s adlý oyuncu 'Elektronik Ürün Kaçakçýlýðý' yaptý ve birliðe +%d EXP ve +$%d para kazandýrdý.", ReturnName(playerid, 0), E_KACAKCILIK_VERILEN_EXP, E_KACAKCILIK_VERILEN_KASA, E_KACAKCILIK_VERILEN_PARA);
   	SendServerMessage(playerid, "Birliðinize {2ECC71}+%d {FFFFFF}EXP ve kasaya {2ECC71}+$%d {FFFFFF}eklendi. Size ise {2ECC71}$%d {FFFFFF}verildi.", E_KACAKCILIK_VERILEN_EXP, E_KACAKCILIK_VERILEN_KASA, E_KACAKCILIK_VERILEN_PARA);
 	DisablePlayerCheckpoint(playerid);
	return 1;
}

CMD:odunteslim(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_ODUNCULUK)
	    return SendErrorMessage(playerid, "Oduncu deðilsin.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -536.71, -177.71, 78.40))
		return SendErrorMessage(playerid, "Kereste teslim noktasýnda deðilsin.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Herhangi bir araçta deðilsin.");

    new vehicleid = GetPlayerVehicleID(playerid);

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "Þöför koltuðunda olmalýsýnýz.");

    if (GetVehicleModel(vehicleid) != 578) return SendErrorMessage(playerid, "Odun taþýma aracýnda deðilsin.");

	if (CoreVehicles[vehicleid][vehKereste] <= 0) return SendErrorMessage(playerid, "Araçta hiç odun yok.");

	new para;
	para = CoreVehicles[vehicleid][vehKereste] * 60;
	GiveMoney(playerid, para);
	SendServerMessage(playerid, "{2ECC71}%d{FFFFFF} ünite odun parçasý {2ECC71}%s'e{FFFFFF} kereste fabrikasýna satýldý. (Adet Fiyati: $60)", CoreVehicles[vehicleid][vehKereste], FormatNumber(para));
    CoreVehicles[vehicleid][vehKereste] = 0;
    for(new J=0; J < 16; J++)
    {

            DestroyDynamicObject(CoreVehicles[vehicleid][vehKeresteObj][J]);
		}
	 	for(new i=0; i != MAX_KERESTE; i++) if(Keresteler[i][keresteVarmi] && Keresteler[i][keresteVehicle] == vehicleid)
        {
            Kereste_Sil(i);
		}
		DisablePlayerCheckpoint(playerid);

 	return 1;
}

stock SilahSeviyeKontrol(playerid)
{
	PlayerData[playerid][pSilahEXP]++;
	switch (PlayerData[playerid][pSilahSeviye])
	{
	    case 1 : Inventory_Add(playerid, "Metal", 1942, 30);
	    case 2 : Inventory_Add(playerid, "Metal", 1942, 40);
	    case 3 : Inventory_Add(playerid, "Metal", 1942, 50);
	    case 4 : Inventory_Add(playerid, "Metal", 1942, 60);
	    case 5 : Inventory_Add(playerid, "Metal", 1942, 70);
	}
	if(PlayerData[playerid][pSilahSeviye] < 5 && PlayerData[playerid][pSilahEXP] >= PlayerData[playerid][pSilahSeviye]*25)
	{
	    PlayerData[playerid][pSilahEXP] = 0;
	    PlayerData[playerid][pSilahSeviye]++;
	    SendServerMessage(playerid, "Silah kaçakçýlýðý seviyen arttý! (Artýk %d metal alacaksýn)", PlayerData[playerid][pSilahSeviye]*200);
	}
	return 1;
}
CMD:createfaction(playerid, params[])
{
	static
	    id = -1,
		type,
		name[32];

    if (PlayerData[playerid][pAdmin] < 3 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[32]", type, name))
	{
	    SendSyntaxMessage(playerid, "/createfaction [type] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Gang | 6: Intelligence | 7: Akademi");
		return 1;
	}
	if (type < 1 || type > 7)
	    return SendErrorMessage(playerid, "Geçersiz tip girdiniz. Types range from 1 to 6.");

	id = Faction_Create(name, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for factions.");

	SendServerMessage(playerid, "You have successfully created faction ID: %d.", id);
	return 1;
}

CMD:birlikkur(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid != -1)
	    return SendErrorMessage(playerid, "Þu anda zaten bir birliðe üyesin.");
	Dialog_Show(playerid, BirlikKur, DIALOG_STYLE_INPUT, "> Birlik Kurma Menüsü", ">> Birlik Kurma Þartlarý\n\n> En az 3 seviye olmanýz gerekmektedir.\n> 10.000$ dolar gerekmektedir.\nBu gereksinimlere uyuyorsanýz kurmak istediðin birliðin adýný girin:", "Kur", "{FF6347}Iptal");

	return 1;
}

CMD:birlik(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];
	new rutbe = PlayerData[playerid][pFactionRank];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Þu anda hiçbir birliðe üye deðilsin.");

    new string[1024], toplamoyuncu[1024];
	strcat(string, "Ýþlem Adý\tDurum\n");
	new toplamsayi;
    foreach(new i : Player)
	{
	    if(factionid == PlayerData[i][pFaction]) toplamsayi++;
	}
	format(toplamoyuncu, sizeof(toplamoyuncu), "{E42020}Aktif Üyeler\tToplam {59DC1C}%d\n", toplamsayi);
	strcat(string, toplamoyuncu);
	format(toplamoyuncu, sizeof(toplamoyuncu), "{E42020}Birlik Bilgileri\n");
	strcat(string, toplamoyuncu);
	format(toplamoyuncu, sizeof(toplamoyuncu), "{E42020}Birlikten Ayrýl\n");
	strcat(string, toplamoyuncu);
	if (PlayerData[playerid][pFactionRank] == FactionData[PlayerData[playerid][pFaction]][factionRanks] || FactionData[factionid][factionBAS] < rutbe)
	{
    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Birliðe Al\n");
    	strcat(string, toplamoyuncu);
    }
	if (FactionData[factionid][factionBKS] <= rutbe)
	{
    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Birlikten At\n");
    	strcat(string, toplamoyuncu);
    }
    if (PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	{
    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Rütbe Adlarýný Deðiþtir\n");
    	strcat(string, toplamoyuncu);
    }
     if (PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	{
    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Çevrimdýþý Üyeler\n");
    	strcat(string, toplamoyuncu);
    }
    if (PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	{
    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Rütbe Deðiþtir\n");
    	strcat(string, toplamoyuncu);
    }
    if (PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1 &&  GetFactionType(playerid) != FACTION_GANG)
	{
    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Divizyon Deðiþtir\n");
    	strcat(string, toplamoyuncu);
    }
    if (PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	{
    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Rütbe Yetkilendirmesi\n");
    	strcat(string, toplamoyuncu);
    }
    if (PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	{
    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Kasa Yerini Deðiþtir {59DC1C}($10.000)\n");
    	strcat(string, toplamoyuncu);
    }
    if (PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1 && GetFactionType(playerid) != FACTION_GANG)
	{
	   	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Divizyon Ýsimlerini Düzenle\n");
    	strcat(string, toplamoyuncu);
    }
    if (PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	{
    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Birlik Araçlarýný Spawnla\n");
    	strcat(string, toplamoyuncu);
    }
    if (PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	{
    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Birlik Duyurusunu Deðiþtir\n");
    	strcat(string, toplamoyuncu);
    }
    format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Birlik Araçlarý\n");
	strcat(string, toplamoyuncu);
    format(toplamoyuncu, sizeof(toplamoyuncu), "{72C425}» Birlik {FFF5EE} - #%d - %s", factionid, FactionData[factionid][factionName]);
	Dialog_Show(playerid, Birlik, DIALOG_STYLE_TABLIST_HEADERS, toplamoyuncu, string, "Seç", "{FF6347}Iptal");
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
//Dialog_Show(playerid, PMGonder, DIALOG_STYLE_INPUT, "PM Gonderme", "PM mesajýnýzý girin.", "Seç", "Iptal");
	if(GetPVarInt(playerid, "BDM") == 1)
	{
		new userid = clickedplayerid;
		PlayerData[userid][pFactionOffer] = playerid;
		if(userid == playerid) return SendErrorMessage(playerid, "Kendini davet edemezsin.");
		if ( PlayerData[playerid][pFactionRank] != FactionData[PlayerData[playerid][pFaction]][factionRanks] && FactionData[PlayerData[playerid][pFaction]][factionBAS] > PlayerData[playerid][pFactionRank]) return SendErrorMessage(playerid, "Bu iþlemi gerçekleþtirmek için en az %d rütbesinde olman gerekir.", FactionData[PlayerData[playerid][pFaction]][factionBAS]);
		if (PlayerData[userid][pFaction] == PlayerData[playerid][pFaction]) return SendErrorMessage(playerid, "Bu oyuncunun zaten bir birliði var.");
    	if (PlayerData[userid][pFaction] != -1)  return SendErrorMessage(playerid, "Bu oyuncunun zaten bir birliði var.");
    	if (PlayerData[userid][pCharacter] > 2) return SendErrorMessage(playerid, "Bu oyuncu alt karakterinde!");
    	if (PlayerData[userid][pCharacter] > 3) return SendErrorMessage(playerid, "Bu oyuncu alt karakterinde!");
	    PlayerData[userid][pFactionOffered] = PlayerData[playerid][pFaction];
	    new str[1024];
	    format(str, sizeof(str), "%s adlý oyuncu, \"%s\" adlý birliðe katýlman için sana davet yolladý. (\"/kabulet birlik\").", ReturnName(playerid, 0), Faction_GetName(playerid));
	    Dialog_Show(userid, BirlikDaveti, DIALOG_STYLE_MSGBOX, "{72C425}» Birlik Daveti", str, "Onayla", "Reddet");
	    SendServerMessage(playerid, "%s adlý oyuncuya, \"%s\" adlý birliðe katýlmasý için davet yolladýn.", ReturnName(userid, 0), Faction_GetName(playerid));
        SetPVarInt(playerid, "BDM", 0);
        cmd_birlik(playerid, "\1");
	}
	if(GetPVarInt(playerid, "CDM") == 1)
	{
		new userid = clickedplayerid;
		new str[1024];
		PlayerData[userid][pBizJobOffer] = playerid;
		if(userid == playerid) return SendErrorMessage(playerid, "Kendini davet edemezsin.");
    	if (PlayerData[userid][pBizJob] != -1)  return SendErrorMessage(playerid, "Bu oyuncu zaten bir iþyerinde çalýþýyor.");
	    PlayerData[userid][pBizJobOffered] = GetPVarInt(playerid, "KAI");
	    format(str, sizeof(str), "%s adlý oyuncu, \"%s\" adlý iþyerinde çalýþman için sana davet yolladý.", ReturnName(playerid, 0), BusinessData[GetPVarInt(playerid, "KAI")][bizName]);
	    Dialog_Show(userid, CalisanDaveti, DIALOG_STYLE_MSGBOX, "{72C425}» Ýþyeri Çalýþan Daveti", "Onayla", str, "Reddet");
	    SendServerMessage(playerid, "%s adlý oyuncuya, \"%s\" adlý iþyerine katýlmasý için davet yolladýn.", ReturnName(userid, 0), BusinessData[GetPVarInt(playerid, "KAI")][bizName]);
        SetPVarInt(playerid, "CDM", 0);
	}
	if(GetPVarInt(playerid, "ORT") == 1)
	{
		new userid = clickedplayerid;
		new str[1024];
		PlayerData[userid][pBizJobOffer] = playerid;
		if(userid == playerid) return SendErrorMessage(playerid, "Kendini davet edemezsin.");
	    PlayerData[userid][pBizJobOffered] = GetPVarInt(playerid, "KAI");
	    format(str, sizeof(str), "%s adlý oyuncu, \"%s\" adlý iþyerinde ortak olman için sana davet yolladý.", ReturnName(playerid, 0), BusinessData[GetPVarInt(playerid, "KAI")][bizName]);
	    Dialog_Show(userid, OrtakDaveti, DIALOG_STYLE_MSGBOX, "{72C425}» Ýþyeri Ortak Daveti", str, "Onayla", "Reddet");
	    SendServerMessage(playerid, "%s adlý oyuncuya, \"%s\" adlý iþyerine ortak olmasý için davet yolladýn.", ReturnName(userid, 0), BusinessData[GetPVarInt(playerid, "KAI")][bizName]);
        SetPVarInt(playerid, "ORT", 0);
	}
    return 1;
}

Dialog:Birlik(playerid, response, listitem, inputtext[]) {

	if(response)
	{
	    new factionid = PlayerData[playerid][pFaction];
		if(listitem == 0)
		{
			 	if (factionid == -1)
				    return SendErrorMessage(playerid, "Birlik üyesi deðilsin.");

				new str[10024], aktifuyeler[10024], sayi;
				foreach (new i : Player) if (PlayerData[i][pFaction] == factionid) {
					format(str, sizeof(str), "{72C425}[ID: %d] {FFFFFF}%s - %s{A80B0B} [Tel NO: %d] (%d)\n", i, ReturnName(i, 0), Faction_GetRank(i), PlayerData[i][pPhone]);
					strcat(aktifuyeler, str);
					sayi++;
				}
				if(sayi == 0)
				{
				    SendErrorMessage(playerid, "Aktif birlik üyesi yok.");
				    cmd_birlik(playerid, "\1");
				    return 1;
				}
				Dialog_Show(playerid, BirlikGeriTusu, DIALOG_STYLE_MSGBOX, "{72C425}» Aktif Üyeler", aktifuyeler, "Tamam", "<< Geri");
		}
		if (!strcmp(inputtext, "Birlik Bilgileri"))
		{
                new string[1024], toplamoyuncu[1024];
                format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Birlik Adý: {59DC1C}%s\n", FactionData[factionid][factionName]);
                strcat(string, toplamoyuncu);
                new gtip[24];
                new gtip2[24];
                new gtip3[24];
				if(FactionData[factionid][gTip] == 1) format(gtip, 24, "Çete");
				if(FactionData[factionid][gTip] == 2) format(gtip, 24, "Mafya");
				if(FactionData[factionid][gTip] == 3) format(gtip, 24, "Yarýþ");
				if(FactionData[factionid][gTip] == 4) format(gtip, 24, "Legal/Þirket");
				if(FactionData[factionid][gTip] == 5) format(gtip, 24, "Tamirhane");
				if(FactionData[factionid][gTip] == 6) format(gtip, 24, "Serikatil Ajansý");
                if(FactionData[factionid][factionType] == FACTION_GANG) format(toplamoyuncu, sizeof(toplamoyuncu), "{E42020}Birlik Tipi: {59DC1C}%s\n", gtip);
				else format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Birlik Tipi: {59DC1C}Özel Kurum\n");
				strcat(string, toplamoyuncu);
				if(FactionData[factionid][factionOnay]) format(gtip, 24, "Var");
				else format(gtip, 24, "{CC0000}Yok");
				format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Hood Onayý: {59DC1C}%s\n", gtip);
				strcat(string, toplamoyuncu);
				if(FactionData[factionid][factionUOnay]) format(gtip2, 24, "Var");
				else format(gtip2, 24, "{CC0000}Yok");
				format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Uyuþturucu Onayý: {59DC1C}%s\n", gtip2);
				strcat(string, toplamoyuncu);
                if(FactionData[factionid][factionSOnay]) format(gtip3, 24, "Var");
				else format(gtip3, 24, "{CC0000}Yok");
				format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Silah Onayý: {59DC1C}%s\n", gtip3);
				strcat(string, toplamoyuncu);
				format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Birlik Üye Sayýsý: {59DC1C}%d\n", BirlikUyeSayisiCek(factionid));
				strcat(string, toplamoyuncu);
				format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Toplam Rütbe Sayýsý: {59DC1C}%d\n", FactionData[factionid][factionRanks]);
				strcat(string, toplamoyuncu);
				format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Birlikten Atma Seviyesi: {59DC1C}%d\n", FactionData[factionid][factionBKS]);
				strcat(string, toplamoyuncu);
				format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Birliðe Alma Seviyesi: {59DC1C}%d\n", FactionData[factionid][factionBAS]);
				strcat(string, toplamoyuncu);
				format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}OOC Chat Seviyesi: {59DC1C}%d\n", FactionData[factionid][factionBFS]);
				strcat(string, toplamoyuncu);
				format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Birlik Aracý Yapma Seviyesi: {59DC1C}%d\n", FactionData[factionid][factionBCS]);
				strcat(string, toplamoyuncu);
				if(FactionData[factionid][factionType] == FACTION_GANG)
				{
					format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Birlik Seviyesi: {59DC1C}%d\n", FactionData[factionid][factionLevel]);
					strcat(string, toplamoyuncu);
					format(toplamoyuncu, sizeof(toplamoyuncu), "{FFF5EE}Birlik EXP {59DC1C}%d/%d\n", FactionData[factionid][factionEXP], FactionData[factionid][factionLevel]*75);
					strcat(string, toplamoyuncu);
				}
				Dialog_Show(playerid, BirlikGeriTusu, DIALOG_STYLE_MSGBOX, "{72C425}» Birlik Bilgileri", string, "Tamam", "<< Geri");
		}
		if (!strcmp(inputtext, "Birlik Araçlarýný Spawnla"))
		{
					new count;
			if(GetFactionType(playerid) == FACTION_GANG)
			{

			    for (new i = 1; i != MAX_VEHICLES; i ++)
				{
				    new id = Car_GetID(i);
				    if (id != -1 && IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID && CarData[id][carBirlik] == FactionData[PlayerData[playerid][pFaction]][factionID])
				    {
				        RespawnVehicle(i);
				        CarData[id][carDisplay] = true;
      					SetVehicleVirtualWorld(i, 0);
						count++;
					}
				}
			}
			else
			{
			    for (new i = 1; i != MAX_VEHICLES; i ++)
				{
				    new id = Car_GetID(i);
				    if (id != -1 && IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID && CarData[id][carFaction] == GetFactionType(playerid))
				    {
				        RespawnVehicle(i);
						count++;
					}
				}
			}
			if (!count)
			    return SendErrorMessage(playerid, "Hiç araç yok.");

			SendServerMessage(playerid, "%d adet araç respawn edildi.", count);
			cmd_birlik(playerid, "\1");
		}
		if (!strcmp(inputtext, "Birlikten Ayrýl"))
		{
			Dialog_Show(playerid, BirliktenAyril, DIALOG_STYLE_MSGBOX, "{72C425}Birlikten Ayrýlma", "Birlikten ayrýlmak istiyor musun?", "Evet", "Hayýr");
		}
		if (!strcmp(inputtext, "Kasa Yerini Deðiþtir ($10.000)"))
		{
			new str[256];
			format(str, 256, "{FFFFFF}Birliðinizin kasasýný bulunduðunuz yer olarak ayarlamak istiyor musunuz:\nBu iþlemin maliyeti {228B22}$10.000{FFFFFF}'dir.");
		    Dialog_Show(playerid, KYD, DIALOG_STYLE_MSGBOX, "{72C425}» Kasa Yerini Deðiþtir {59DC1C}($10.000)", str, "Deðiþtir", "<< Geri");
		}
		 if(strfind(inputtext, "Divizyon Ýsimlerini", true) != -1)
		{
			Faction_Divizyon(playerid, factionid);
		}
		if (!strcmp(inputtext, "Rütbe Yetkilendirmesi"))
		{
			new toplamoyuncu[256], string[1024];
	    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Birlikten Atma Seviyesi\n");
	    	strcat(string, toplamoyuncu);
	    	format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Birliðe Alma Seviyesi\n");
	    	strcat(string, toplamoyuncu);
            format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}OOC Kanal Seviyesi\n");
    		strcat(string, toplamoyuncu);
		    format(toplamoyuncu, sizeof(toplamoyuncu), "{FFFFFF}Birlik Aracý Yapma Seviyesi\n");
    		strcat(string, toplamoyuncu);
            Dialog_Show(playerid, RutbeYetkilendirmesi, DIALOG_STYLE_LIST, "{72C425}» Rütbe Yetkilendirmesi", string, "Seç", "<< Geri");
		}
		if (!strcmp(inputtext, "Birlik Duyurusunu Deðiþtir"))
		{
			new str[256];
			format(str, 256, "{FFFFFF}Birliðinizin yeni duyurusunu yazýn:\nÞu anki duyuru: {228B22}%s", FactionData[factionid][factionMOTD]);
		    Dialog_Show(playerid, BDD, DIALOG_STYLE_INPUT, "{72C425}» Birlik Duyurusunu Deðiþtir", str, "Ayarla", "<< Geri");
		}
		if (!strcmp(inputtext, "Birliðe Al"))
		{
			    SendServerMessage(playerid, "Davet modu aktif, TAB'dan (skor tablosu) davet etmek istediðin oyuncunun üstüne týkla!");
				SetPVarInt(playerid, "BDM", 1);
		}
    	if (!strcmp(inputtext, "Rütbe Adlarýný Deðiþtir"))
		{
			    Faction_ShowRanks(playerid, factionid);
		}
		if (!strcmp(inputtext, "Birlikten At"))
		{
		        new string[1024], sayi;
			    foreach (new i : Player){ if (PlayerData[i][pFaction] == factionid) format(string, sizeof(string), "%s{59DC1C}%d - ID : {FFFFFF}%s (%s)\n", string, i, ReturnName(i), Faction_GetRank(i)); sayi++; }
                if(sayi == 0)
				{
				    SendErrorMessage(playerid, "Aktif birlik üyesi yok.");
				    cmd_birlik(playerid, "\1");
				    return 1;
				}
				Dialog_Show(playerid, BirliktenAt, DIALOG_STYLE_LIST, "{72C425}» Birlikten At", string, "At", "{FF6347}Iptal");
		}
		if (!strcmp(inputtext, "Çevrimdýþý Üyeler"))
		{
            OfflineUyeler(playerid, factionid);
		}
		if (!strcmp(inputtext, "Rütbe Deðiþtir"))
		{
				PlayerData[playerid][pOffRank] = false;
		        new string[10024], sayi;
			    foreach (new i : Player) { if (PlayerData[i][pFaction] == factionid) format(string, sizeof(string), "%s{59DC1C}%d - ID : {FFFFFF}%s (%s)\n", string, i, ReturnName(i), Faction_GetRank(i)); sayi++; }
				Dialog_Show(playerid, RutbeDegistir, DIALOG_STYLE_LIST, "{72C425}» Rütbe Deðiþtir", string, "Deðiþtir", "{FF6347}Iptal");
				if(sayi == 0)
				{
				    SendErrorMessage(playerid, "Aktif birlik üyesi yok.");
				    cmd_birlik(playerid, "\1");
				    return 1;
				}
		}
		if (!strcmp(inputtext, "Divizyon Deðiþtir"))
		{
		    	PlayerData[playerid][pOffDivizyon] = false;
		        new string[1024], sayi;
			    foreach (new i : Player) { if (PlayerData[i][pFaction] == factionid) format(string, sizeof(string), "%s{59DC1C}%d - ID : {FFFFFF}%s (%s)\n", string, i, ReturnName(i), Faction_GetDivizyon(i)); sayi++; }
				Dialog_Show(playerid, DivizyonDegistir, DIALOG_STYLE_LIST, "{72C425}» Divizyon Deðiþtir", string, "Deðiþtir", "{FF6347}Iptal");
				if(sayi == 0)
				{
				    SendErrorMessage(playerid, "Aktif birlik üyesi yok.");
				    cmd_birlik(playerid, "\1");
				    return 1;
				}
		}
		if (!strcmp(inputtext, "Birlik Araçlarý"))
		{
		        new string[1024], sayi, carid;
			    for (new i = 1; i < MAX_VEHICLES; i++)  if ((carid = Car_GetID(i)) != -1 && GetFactionByID(CarData[carid][carBirlik]) == factionid && CarData[carid][carFaction] == 5)
				{
					format(string, sizeof(string), "%s{59DC1C}%d - ID : {59DC1C}Model: {FFFFFF}%s - {59DC1C}Plaka: {FFFFFF}%s\n", string, i, ReturnVehicleModelName(GetVehicleModel(i)), CarData[carid][carPlaka]); sayi++;
				}
				if(sayi == 0) return SendErrorMessage(playerid, "Bu birliðin hiç aracý yok.");
				Dialog_Show(playerid, BirlikGeriTusu, DIALOG_STYLE_LIST, "{72C425}» Birlik Araçlarý", string, "Tamam", "<< Geri");
		}
    	}
	return 1;
}

Dialog:BirlikGeriTusu(playerid, response, listitem, inputtext[]) {

	if(!response) return cmd_birlik(playerid, "\1");
	return 1;
}

Dialog:BDD(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pFaction];
		if (isnull(inputtext))
		{
		    FactionData[id][factionMOTD][0] = '\0';

			Faction_Save(id);
			SendServerMessage(playerid, "Birlik duyurusu kaldýrýldý.");
		}
		else
		{
			format(FactionData[id][factionMOTD], 128, inputtext);

			Faction_Save(id);
		}
        cmd_birlik(playerid, "\1");
	}
	else cmd_birlik(playerid, "\1");
	return 1;
}

Dialog:BKS(playerid, response, listitem, inputtext[]) {

	if(response)
	{
		new yeniseviye = strval(inputtext);
		new factionid = PlayerData[playerid][pFaction];
		if (yeniseviye < 0 || yeniseviye > FactionData[PlayerData[playerid][pFaction]][factionRanks]) return SendErrorMessage(playerid, "Geçersiz rütbe belirtildi. Rütbe aralýðý 1 ve %d arasýnda olmalýdýr.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);
		if (PlayerData[playerid][pFactionRank] != FactionData[PlayerData[playerid][pFaction]][factionRanks]) return SendErrorMessage(playerid, "Bu iþlemi yapmak için yetkin yok.");
		SendServerMessage(playerid, "%s adlý birliðin minimum birlikten kovma seviyesi (%d) olarak deðiþtirildi.", FactionData[factionid][factionName], yeniseviye);
		FactionData[factionid][factionBKS] = yeniseviye;
		Faction_Save(factionid);
		cmd_birlik(playerid, "\1");
	} else cmd_birlik(playerid, "\1");
	return 1;
}

Dialog:BAS(playerid, response, listitem, inputtext[]) {

	if(response)
	{
		new yeniseviye = strval(inputtext);
		new factionid = PlayerData[playerid][pFaction];
		if (yeniseviye < 0 || yeniseviye > FactionData[PlayerData[playerid][pFaction]][factionRanks]) return SendErrorMessage(playerid, "Geçersiz rütbe belirtildi. Rütbe aralýðý 1 ve %d arasýnda olmalýdýr.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);
		if (PlayerData[playerid][pFactionRank] != FactionData[PlayerData[playerid][pFaction]][factionRanks]) return SendErrorMessage(playerid, "Bu iþlemi yapmak için yetkin yok.");
		SendServerMessage(playerid, "%s adlý birliðin minimum birliðe alma seviyesi (%d) olarak deðiþtirildi.", FactionData[factionid][factionName], yeniseviye);
		FactionData[factionid][factionBAS] = yeniseviye;
		Faction_Save(factionid);
		cmd_birlik(playerid, "\1");
	} else cmd_birlik(playerid, "\1");
	return 1;
}

Dialog:BFS(playerid, response, listitem, inputtext[]) {

	if(response)
	{
		new yeniseviye = strval(inputtext);
		new factionid = PlayerData[playerid][pFaction];
		if (yeniseviye < 0 || yeniseviye > FactionData[PlayerData[playerid][pFaction]][factionRanks]) return SendErrorMessage(playerid, "Geçersiz rütbe belirtildi. Rütbe aralýðý 1 ve %d arasýnda olmalýdýr.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);
		if (PlayerData[playerid][pFactionRank] != FactionData[PlayerData[playerid][pFaction]][factionRanks]) return SendErrorMessage(playerid, "Bu iþlemi yapmak için yetkin yok.");
		SendServerMessage(playerid, "%s adlý birliðin minimum OOC chat kullanma seviyesi (%d) olarak deðiþtirildi.", FactionData[factionid][factionName], yeniseviye);
		FactionData[factionid][factionBFS] = yeniseviye;
		Faction_Save(factionid);
		cmd_birlik(playerid, "\1");
	} else cmd_birlik(playerid, "\1");
	return 1;
}

Dialog:BCS(playerid, response, listitem, inputtext[]) {

	if(response)
	{
		new yeniseviye = strval(inputtext);
		new factionid = PlayerData[playerid][pFaction];
		if (yeniseviye < 0 || yeniseviye > FactionData[PlayerData[playerid][pFaction]][factionRanks]) return SendErrorMessage(playerid, "Geçersiz rütbe belirtildi. Rütbe aralýðý 1 ve %d arasýnda olmalýdýr.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);
		if (PlayerData[playerid][pFactionRank] != FactionData[PlayerData[playerid][pFaction]][factionRanks]) return SendErrorMessage(playerid, "Bu iþlemi yapmak için yetkin yok.");
		SendServerMessage(playerid, "%s adlý birliðin minimum birlik aracý yapma seviyesi (%d) olarak deðiþtirildi.", FactionData[factionid][factionName], yeniseviye);
		FactionData[factionid][factionBCS] = yeniseviye;
		Faction_Save(factionid);
		cmd_birlik(playerid, "\1");
	} else cmd_birlik(playerid, "\1");
	return 1;
}

Dialog:KYD(playerid, response, listitem, inputtext[]) {

	if(response)
	{
		new factionid = PlayerData[playerid][pFaction];
		if (PlayerData[playerid][pFactionRank] != FactionData[PlayerData[playerid][pFaction]][factionRanks]) return SendErrorMessage(playerid, "Bu iþlemi yapmak için yetkin yok.");
		if (GetMoney(playerid) < 10000) return SendErrorMessage(playerid, "Yeterli paran yok.");
		SendServerMessage(playerid, "%s adlý birliðin kasa yeri deðiþtirildi, iþlem maliyeti alýndý.", FactionData[factionid][factionName]);
		GiveMoney(playerid, -10000);
		static
		        Float:x,
		        Float:y,
		        Float:z;

		GetPlayerPos(playerid, x, y, z);
		FactionData[factionid][factionKasaPos][0] = x;
		FactionData[factionid][factionKasaPos][1] = y;
		FactionData[factionid][factionKasaPos][2] = z;
		FactionData[factionid][factionKasaInt] = GetPlayerInterior(playerid);
		FactionData[factionid][factionKasaWorld] = GetPlayerVirtualWorld(playerid);
		Faction_Refresh(factionid);
		Faction_Save(factionid);
		cmd_birlik(playerid, "\1");
	} else cmd_birlik(playerid, "\1");
	return 1;
}

Dialog:DivizyonDegistir(playerid, response, listitem, inputtext[]) {

	if(response)
	{
		new userid, notreal[128], idx;
		notreal = strtok(inputtext, idx);
		userid = strval(notreal);
		SetPVarInt(playerid, "DKI", userid);
		Faction_DivizyonDegistir(playerid, PlayerData[playerid][pFaction]);
 	}
	return 1;
}

Dialog:RutbeDegistir(playerid, response, listitem, inputtext[]) {

	if(response)
	{
		new userid, notreal[128], idx;
		notreal = strtok(inputtext, idx);
		userid = strval(notreal);
		SetPVarInt(playerid, "DKI", userid);
		if(userid == playerid) return SendErrorMessage(playerid, "Kendi rütbeni düzenleyemezsin.");
		Faction_RutbeDegistir(playerid, PlayerData[playerid][pFaction]);
 	}
	return 1;
}
Dialog:BirliktenAt(playerid, response, listitem, inputtext[]) {

	if(response)
	{
		new userid, notreal[128], idx;
		notreal = strtok(inputtext, idx);
		userid = strval(notreal);
		if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] && FactionData[PlayerData[playerid][pFaction]][factionBKS] <= PlayerData[playerid][pFactionRank]) return SendErrorMessage(playerid, "Bu iþlemi gerçekleþtirmek için en az %d rütbesinde olman gerekir.", FactionData[PlayerData[playerid][pFaction]][factionBKS]);
		if (!IsPlayerConnected(userid)) return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil.");
		if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction]) return SendErrorMessage(playerid, "Bu oyuncu bulunduðunuz birlikte deðil.");
	    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RED, "BÝRLÝK: %s, %s adlý oyuncuyu birlikten kovdu.", ReturnName(playerid, 0), ReturnName(userid, 0));
		ResetFaction(userid);
		cmd_birlik(playerid, "\1");
 	}
	return 1;
}

Dialog:CalisanDaveti(playerid, response, listitem, inputtext[]) {

	if(response)
	{
        new
	        targetid = PlayerData[playerid][pBizJobOffer],
	        bizid = PlayerData[playerid][pBizJobOffered];

		IsyeriDegistir(playerid, bizid);
		PlayerData[playerid][pBizRank] = 1;

		SendServerMessage(playerid, "\"%s\" adlý iþyerine katýldýn.", BusinessData[bizid][bizName]);
		SendServerMessage(targetid, "%s adlý oyuncu \"%s\" iþyerine katýldý.", ReturnName(playerid, 0), BusinessData[bizid][bizName]);

        PlayerData[playerid][pBizJobOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pBizJobOffered] = -1;
	}
	return 1;
}
Dialog:OrtakDaveti(playerid, response, listitem, inputtext[]) {

	if(response)
	{
        new
	        targetid = PlayerData[playerid][pBizJobOffer],
	        bizid = PlayerData[playerid][pBizJobOffered];
	        IsyeriDegistir(playerid, bizid);

		SendServerMessage(playerid, "\"%s\" adlý iþyerine ortak olarak katýldýn.", BusinessData[bizid][bizName]);
		SendServerMessage(targetid, "%s adlý oyuncu \"%s\" iþyerine ortak olarak katýldý.", ReturnName(playerid, 0), BusinessData[bizid][bizName]);

        BusinessData[bizid][bizOrtak] = GetPlayerSQLID(playerid);
        format(BusinessData[bizid][bizOrtakName], 24, ReturnName(playerid));
        Business_Refresh(bizid);
        Business_Save(bizid);
        PlayerData[playerid][pBizJobOffered] = -1;
	}
	return 1;
}

Dialog:BirlikDaveti(playerid, response, listitem, inputtext[]) {

	if(response)
	{
        new
	        targetid = PlayerData[playerid][pFactionOffer],
	        factionid = PlayerData[playerid][pFactionOffered];

		SetFaction(playerid, factionid);
		PlayerData[playerid][pFactionRank] = 1;

        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_GREEN, "BÝRLÝK: %s, %s adlý oyuncuyu birliðe aldý.", ReturnName(targetid, 0), ReturnName(playerid, 0));
		//SendServerMessage(playerid, "\"%s\" adlý birliðe katýldýn.", Faction_GetName(targetid));
		//SendServerMessage(targetid, "%s adlý oyuncu \"%s\" birliðine katýldý.", ReturnName(playerid, 0), Faction_GetName(targetid));

        PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFactionOffered] = -1;
	}
	return 1;
}

CMD:destroyfaction(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyfaction [faction id]");

	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

	Faction_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed faction ID: %d.", id);
	return 1;
}

CMD:gate(playerid, params[])
{
	new id = Gate_Nearest(playerid);

	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Þifre Gir", "Aþaðýya bu kapýyý açmak için þifreyi giriniz:", "Tamam", "{FF6347}Iptal");
		}
		else
		{
		    if (GateData[id][gateFaction] != -1 && PlayerData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				return SendErrorMessage(playerid, "Bu kapýyý açamazsýn.");

			Gate_Operate(id);

			switch (GateData[id][gateOpened])
			{
			    case 0:
				    ShowPlayerFooter(playerid, "Gate ~r~kapatildi~w~!");

                case 1:
				    ShowPlayerFooter(playerid, "Gate ~g~acildi~w~!");
			}
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][0]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL)
	        return SendErrorMessage(playerid, "Bu kapýyý açmak için bir resmi hizmet görevlisi olman gereklidir.");

	    if (!PrisonData[prisonDoorOpened][0])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][0], 0.0, 0.0, -90.0);

			PrisonData[prisonDoorOpened][0] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s anahtarý yuvaya sokar ve hapishane kapýsýný açar.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][0], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][0] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s anahtarý yuvaya sokar ve hapishane kapýsýný kapatýr.", ReturnName(playerid, 0));
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][1]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL)
	        return SendErrorMessage(playerid, "Bu kapýyý açmak için bir polis memuru olman gereklidir.");

	    if (!PrisonData[prisonDoorOpened][1])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][1], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][1] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s anahtarý yuvaya sokar ve hapishane kapýsýný açar.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][1], 0.0, 0.0, 90.0);

			PrisonData[prisonDoorOpened][1] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s anahtarý yuvaya sokar ve hapishane kapýsýný kapatýr.", ReturnName(playerid, 0));
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][2]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL)
	        return SendErrorMessage(playerid, "Bu kapýyý açmak için bir polis memuru olman gereklidir.");

	    if (!PrisonData[prisonDoorOpened][2])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][2], 0.0, 0.0, -90.0);

			PrisonData[prisonDoorOpened][2] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s anahtarý yuvaya sokar ve hapishane kapýsýný açar.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][2], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][2] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s anahtarý yuvaya sokar ve hapishane kapýsýný kapatýr.", ReturnName(playerid, 0));
		}
	}
	for (new i = 0; i < 24; i ++) if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonCells][i], 3.0))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL)
	        return SendErrorMessage(playerid, "Bu kapýyý açmak için bir polis memuru olman gereklidir.");


		if (!PrisonData[prisonCellOpened][i])
		{
			MoveDynamicObject(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1] + 1.6, PrisonCells[i][2], 3.0);

		    PrisonData[prisonCellOpened][i] = true;
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s anahtarý eline alýr ve hücre kapýsýný açar.", ReturnName(playerid, 0));
		}
		else
		{
		    MoveDynamicObject(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1], PrisonCells[i][2], 3.0);

		    PrisonData[prisonCellOpened][i] = false;
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s anahtarý eline alýr ve hücre kapýsýný kapatýr.", ReturnName(playerid, 0));
		}
		break;
	}
	return 1;
}

CMD:silahbirak(playerid, params[])
{
	new weaponid = 0;

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawnedEx(playerid))
    	return SendErrorMessage(playerid, "Þu anda herhangi bir silah býrakamazsýnýz.");

	if ((weaponid = GetWeapon(playerid)) == 0)
	    return SendErrorMessage(playerid, "Silahý býrakabilmen için silahýn elinde olmasý gerekli.");

	if (weaponid == 23 && PlayerData[playerid][pTazer])
	    return SendErrorMessage(playerid, "Elektroþok silahýný býrakamasýn.");

	if (PlayerData[playerid][pBaygin] || PlayerData[playerid][pKilled])
	    return SendErrorMessage(playerid, "Baygýnken veya ölüyken bu komutu kullanamazsýn.");

	if (GetFactionType(playerid) == FACTION_GOV || GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL)
		return SendErrorMessage(playerid, "Bu oluþum türü silahý yere atamaz.");

    if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	    return SendErrorMessage(playerid, "Beanbag tüfeðini býrakamazsýn.");

	    if(IsPlayerNearWater(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Suya silah býrakamazsýn.");

	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	x += 1.5 * floatsin(-angle, degrees);
	y += 1.5 * floatcos(-angle, degrees);

    DropItem(ReturnWeaponName(weaponid), ReturnName(playerid, 0), GetWeaponModel(weaponid), 1, x, y, z - 1, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), weaponid, GetPlayerAmmo(playerid));
	ResetWeapon(playerid, weaponid);
	UpdateWeapons(playerid);
    ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s model silahý yere býrakýr.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
 	Log_Write("logs/droppick.txt", "[%s] %s has dropped a %s.", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(weaponid));
	return 1;
}

CMD:editfaction(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editfaction [id] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} name, color, type, models, locker, ranks, maxranks, kasa, uonay, onay, sonay");
	    SendClientMessage(playerid, COLOR_YELLOW, "onay parametresi hood onayý verir, sonay silah onayý verir, uonay ise uyuþturucu onayý verir.");
		return 1;
	}

	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    if (!strcmp(type, "name", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [name] [new name]");

	    format(FactionData[id][factionName], 32, name);

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the name of faction ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "maxranks", true))
	{
	    new ranks;

	    if (sscanf(string, "d", ranks))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [maxranks] [maximum ranks]");

		if (ranks < 1 || ranks > 15)
		    return SendErrorMessage(playerid, "The specified ranks can't be below 1 or above 15.");

	    FactionData[id][factionRanks] = ranks;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the maximum ranks of faction ID: %d to %d.", ReturnName(playerid, 0), id, ranks);
	}
	else if (!strcmp(type, "ranks", true))
	{
	    Faction_ShowRanks(playerid, id);
	}
	else if (!strcmp(type, "color", true))
	{
	    new color;

	    if (sscanf(string, "h", color))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [color] [hex color]");

	    FactionData[id][factionColor] = color;
	    Faction_Update(id);

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the {%06x}color{FF6347} of faction ID: %d.", ReturnName(playerid, 0), color >>> 8, id);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
		 	SendSyntaxMessage(playerid, "/editfaction [id] [type] [faction type]");
            SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Polis | 2: News | 3: Medikal | 4: Hükümet | 5: Gang  | 6: Intelligent | 7: Akademi");
            return 1;
		}
		if (typeint < 1 || typeint > 7)
		    return SendErrorMessage(playerid, "Geçersiz tip girdiniz. Types range from 1 to 6.");

	    FactionData[id][factionType] = typeint;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the type of faction ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
	}
 	else if (!strcmp(type, "seviye", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
		 	SendSyntaxMessage(playerid, "/editfaction [id] [seviye] [yeni seviye]");

            return 1;
		}
		if (typeint < 1 || typeint > 10)
		    return SendErrorMessage(playerid, "Geçersiz seviye girdiniz.");

	    FactionData[id][factionLevel] = typeint;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s  %d nolu birliðin seviyesini %d olarak deðiþtirdi.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "gtip", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
		 	SendSyntaxMessage(playerid, "/editfaction [id] [gtip] [gang type]");
            SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Aile | 2: Çete | 3: Tamirhane");
            return 1;
		}
		if (typeint < 1 || typeint > 10)
		    return SendErrorMessage(playerid, "Geçersiz tip girdiniz. (1-3)");

	    FactionData[id][gTip] = typeint;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s faction ID: %d'ýn gang tipini %d olarak deðiþtirdi.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "models", true))
	{
	    static
	        skins[24];

		for (new i = 0; i < sizeof(skins); i ++)
		    skins[i] = (FactionData[id][factionSkins][i]) ? (FactionData[id][factionSkins][i]) : (19300);

	    PlayerData[playerid][pFactionEdit] = id;

	    new mad[50][5];
       	for (new i = 0; i < sizeof(mad); i ++)
			format(mad[i], 5, "");

		ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_SKINS, DIALOG_STYLE_PREVMODEL, "Uniformalar", skins, mad, "Sec", "Iptal", sizeof (skins));
	}
	else if (!strcmp(type, "locker", true))
	{
        PlayerData[playerid][pFactionEdit] = id;
		Dialog_Show(playerid, FactionLocker, DIALOG_STYLE_LIST, "Faction Locker", "Set Location\nLocker Weapons", "Seç", "{FF6347}Iptal");
	}
	else if (!strcmp(type, "kasa", true))
	{
        static
		        Float:x,
		        Float:y,
		        Float:z;

		GetPlayerPos(playerid, x, y, z);
		FactionData[id][factionKasaPos][0] = x;
		FactionData[id][factionKasaPos][1] = y;
		FactionData[id][factionKasaPos][2] = z;
		FactionData[id][factionKasaInt] = GetPlayerInterior(playerid);
		FactionData[id][factionKasaWorld] = GetPlayerVirtualWorld(playerid);

		Faction_Refresh(id);
		Faction_Save(id);
		SendServerMessage(playerid, "Kasanýn yerini deðiþtirdin. [ Oluþum ID: %d ]", id);
	}
	else if (!strcmp(type, "onay", true))
	{
	    if (FactionData[id][factionOnay])
	    {
	        FactionData[id][factionOnay] = false;
			SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s faction ID: %d'ý hood onaysýz birlik yaptý.", ReturnName(playerid, 0), id);
	    }
		else
		{
		    FactionData[id][factionOnay] = true;
		    SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s faction ID: %d'ý hood onaylý birlik yaptý.", ReturnName(playerid, 0), id);
		}

	    Faction_Save(id);
	}
	else if (!strcmp(type, "uonay", true))
	{
	    if (FactionData[id][factionUOnay])
	    {
	        FactionData[id][factionUOnay] = false;
			SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s faction ID: %d'ý uyuþturucu onaysýz birlik yaptý.", ReturnName(playerid, 0), id);
	    }
		else
		{
		    FactionData[id][factionUOnay] = true;
		    SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s faction ID: %d'ý uyuþturucu onaylý birlik yaptý.", ReturnName(playerid, 0), id);
		}

	    Faction_Save(id);
	}
	else if (!strcmp(type, "sonay", true))
	{
	    if (FactionData[id][factionSOnay])
	    {
	        FactionData[id][factionSOnay] = false;
			SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s faction ID: %d'ý silah onaysýz birlik yaptý.", ReturnName(playerid, 0), id);
	    }
		else
		{
		    FactionData[id][factionSOnay] = true;
		    SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s faction ID: %d'ý silah onaylý birlik yaptý.", ReturnName(playerid, 0), id);
		}

	    Faction_Save(id);
	}
	return 1;
}

CMD:dolap(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Bir birlikte olman gereklidir.");

	if (!IsNearFactionLocker(playerid))
	    return SendErrorMessage(playerid, "Herhangi bir birlik dolabýna yakýn deðilsin.");

 	if (FactionData[factionid][factionType] != FACTION_GANG)
		Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Birlik Dolabý", "Ýþbaþý\nAðrý Kesici\nÇelik Yelek\nÜniformalar\nEkipmanlar\nSilah Sýfýrla", "Seç", "{FF6347}Iptal");

	else Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Birlik Dolabý", "Kýyafetler\nEkipmanlar", "Seç", "{FF6347}Iptal");
	return 1;
}
CMD:pddolap(playerid, params[])
{
if (GetFactionType(playerid) != FACTION_POLICE)  return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1558.7191, -1328.5900, 1135.8818)) return SendErrorMessage(playerid, "LSPD dolabý yakýnýnda deðilsin!");
Dialog_Show(playerid, LSPDDolap, DIALOG_STYLE_LIST, "LSPD Dolabý", "Ýþbaþý\nAðrý Kesici\nÇelik Yelek\nÜniformalar\nEkipmanlar\nSilah Sýfýrla", "Seç", "{FF6347}Iptal");
return 1;
}
CMD:evara(playerid, params[])
{
if (GetFactionType(playerid) != FACTION_POLICE)  return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
if (!PlayerData[playerid][pLspdDuty]) return SendErrorMessage(playerid, "Bu komutu kullanabilmen için /pdduty yapman gerekiyor!");
if (PlayerData[playerid][pFactionRank] < 8) return SendErrorMessage(playerid, "Ev aramak için yeterli rütbeye sahip deðilsin.");
new id = House_Inside(playerid);
if (id == -1) return SendErrorMessage(playerid, "Ev aramak için herhangi bir evin içinde olmalýsýnýz.");
House_OpenStorage(playerid, id);
SendServerMessage(playerid, "Evi gözlemliyorsun.");
return 1;
}

CMD:rozet(playerid, params[])
{
if (GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
	if (PlayerData[playerid][pLspdDuty])
	{
	    SetPlayerColor(playerid, DEFAULT_COLOR);
        DestroyDynamic3DTextLabel(pdrozet[playerid]);
        Delete3DTextLabel(pdrozet[playerid]);
        //SendFactionMessageEx(GetFactionType(playerid), COLOR_RADIO, "** HQ: %s, Off-duty durumuna geçiþ saðladý. **", ReturnName(playerid, 0));
        PlayerData[playerid][pLspdDuty] = false;
        SendServerMessage(playerid, "Rozetini taktýn!");
	}
	else
	{
		SetPlayerColor(playerid, COLOR_RADIO);
		new string[128];
		format(string, sizeof(string), "[%s]", Faction_GetRank(playerid));
	    PlayerData[playerid][pLspdDuty] = true;
	    PlayerData[playerid][pKartusHazir] = true;
	    pdrozet[playerid] = CreateDynamic3DTextLabelEx(string, COLOR_RADIO, 0, 0, -20, 25, playerid);
        Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, pdrozet[playerid], E_STREAMER_ATTACH_OFFSET_Z, 0.37);
	    //SendFactionMessageEx(GetFactionType(playerid), COLOR_RADIO, "** HQ: %s, On-duty durumuna geçiþ saðladý. **", ReturnName(playerid, 0));
        //SendServerMessage(playerid, "Ýþbaþý yaptýktan sonra '/pdduty' komutunu spam olarak kullanýrsan cezalandýrýlýrsýn.");
        SendServerMessage(playerid, "Rozetini çýkardýn!");
	}
	return 1;
}

CMD:t(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/t [PD Telsiz IC]");

	static
	    string[128];


	if (strlen(params) > 64)
	{
	    format(string, sizeof(string),"** [CH: 911, S: 0] %s %s: %.64s **", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
		SendFactionMessageEx(GetFactionType(playerid), 0xE28B2CFF, string);
  		format(string, sizeof(string),"** ...%s **", params[64]);
		SendFactionMessageEx(GetFactionType(playerid), 0xE28B2CFF, string);
		SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "** [CH: 911, S: 0] %s: %.64s", ReturnName(playerid, 0), params);
        SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "**...%s", params[64]);
	}
	else
	{
        format(string, sizeof(string),"** [CH: 911, S: 0] %s %s: %s **", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
		SendFactionMessageEx(GetFactionType(playerid), 0xE28B2CFF, string);
		SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "** [CH: 911, S: 0] %s: %s", ReturnName(playerid, 0), params);

	}
	return 1;
}
CMD:kasaac(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];
 	if (factionid == -1)  return SendErrorMessage(playerid, "Bir birlikte olman gereklidir.");
	if (!KasayaYakinmi(playerid)) return SendErrorMessage(playerid, "Üyesi olduðun bir birliðin birlik kasasýna yakýn deðilsin.");

	new kasastr[256],kasamiktar = FactionData[factionid][factionKasaMiktar];
	format(kasastr, sizeof(kasastr), "{DC143C}Kasadaki Miktar [%s]\n{FFFFFF}Kasadan Çek\nKasaya Koy", FormatNumber(kasamiktar));
 	if (FactionData[factionid][factionType] == FACTION_GANG)
 	{
 	    PlayerData[playerid][pKasa] = factionid;
 		Dialog_Show(playerid, factionKasa, DIALOG_STYLE_LIST, "Birlik Kasasý", kasastr, "Seç", "{FF6347}Iptal");
	}
	return 1;
}

Dialog:factionKasa(playerid, response, listitem, inputtext[])
{
  	switch(listitem)
	{
	    case 1: Dialog_Show(playerid, factionKasaCek, DIALOG_STYLE_INPUT, "Kasadan Çek", "Lütfen kasadan çekmek istediðiniz miktarý giriniz;", "Çek", "{FF6347}Iptal");
	    case 2: Dialog_Show(playerid, factionKasaKoy, DIALOG_STYLE_INPUT, "Kasaya Koy", "Lütfen kasaya koymak istediðiniz miktarý giriniz;", "Koy", "{FF6347}Iptal");
	}
	return 1;
}

Dialog:factionKasaCek(playerid, response, listitem, inputtext[])
{
    if (response)
	{
	    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Bu iþlemi gerçekleþtirmek için en az %d rütbesinde olman gerekir.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

		new para = strval(inputtext), id = PlayerData[playerid][pKasa];
		if(isnull(inputtext)) return 0;
        if(para < 1 || para > FactionData[id][factionKasaMiktar])
        {
			SendErrorMessage(playerid, "Kasada %s yok.", FormatNumber(para));
		}
   		else {
		    FactionData[id][factionKasaMiktar] -= para;
		    GiveMoney(playerid, para);
		    SendServerMessage(playerid, "Kasadan %s çekildi.", FormatNumber(para));
		    Log_Write("logs/birlikkasa.txt", "[%s] %s %s:", ReturnDate(), ReturnName(playerid), FormatNumber(para));
		    SendFactionMessage(id, COLOR_GREEN, "BÝRLÝK: %s adlý oyuncu kasadan %s çekti.", ReturnName(playerid, 0), FormatNumber(para));
		}
	}
	return 1;
}

Dialog:factionKasaKoy(playerid, response, listitem, inputtext[])
{
    if (response)
	{
		new para = strval(inputtext), id = PlayerData[playerid][pKasa];

		if(isnull(inputtext)) return 0;

        if(para < 1 || para > GetMoney(playerid))
        {
			SendErrorMessage(playerid, "Üzerinde %s yok.", FormatNumber(para));
		}
		else
		{
		    FactionData[id][factionKasaMiktar] += para;
		    GiveMoney(playerid, -para);
		    SendServerMessage(playerid, "Kasaya %s koyuldu.", FormatNumber(para));
		    Log_Write("logs/birlikkasakoy.txt", "[%s] %s %s:", ReturnDate(), ReturnName(playerid), FormatNumber(para));
		    SendFactionMessage(id, COLOR_GREEN, "BÝRLÝK: %s adlý oyuncu kasaya %s koydu.", ReturnName(playerid, 0), FormatNumber(para));
		}
	}
	return 1;
}

CMD:lideryap(playerid, params[])
{
	static
		userid,
		id;

	 if (PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Yetkin yok!");
	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/lideryap [id] [Oluþum ID] (-1 Çýkartmak)");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendErrorMessage(playerid, "Geçersiz oluþum ID'si girdiniz.");

	if (id == -1)
	{
	    ResetFaction(userid);
        OlusumAksesuariSil(userid);
        DestroyDynamic3DTextLabel(pdrozet[playerid]);
        Delete3DTextLabel(pdrozet[playerid]);
	    SendServerMessage(playerid, "%s adlý oyuncudan oluþum liderliðini aldýn.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s Adlý yetkili seni oluþumdan çýkarttý!", ReturnName(playerid, 0));
	}
	else
	{
	    ResetFaction(userid);
		SetFaction(userid, id);
		PlayerData[userid][pFactionRank] = FactionData[id][factionRanks];
        OlusumAksesuariSil(userid);
		SendServerMessage(playerid, "%s adlý oyuncuyu %s isimli oluþumun lideri yaptýn.", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s adlý yetkili seni %s adlý oluþumun lideri yaptý.", ReturnName(playerid, 0), FactionData[id][factionName]);
	}
    return 1;
}

public SetPlayerSpeedCap( playerid, Float:value )
{
	if ( 0 <= playerid < sizeof( g_fSpeedCap ) )
		g_fSpeedCap[ playerid ] = value;
}

public DisablePlayerSpeedCap( playerid )
{
	if ( 0 <= playerid < sizeof( g_fSpeedCap ) )
		g_fSpeedCap[ playerid ] = 0.0;
}

CMD:aolusumayarla(playerid, params[])
{
	static
		userid,
		id;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/aolusumayarla [id] [olusum id] (-1 çýkartmak)");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendErrorMessage(playerid, "Böyle bir oluþum yok!");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendServerMessage(playerid, "%s adlý oyuncuyu oluþumdan attý.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s adlý yetkili senin oluþumdan attý.", ReturnName(playerid, 0));
	}
	else
	{
		SetFaction(userid, id);

		if (!PlayerData[userid][pFactionRank])
	    	PlayerData[userid][pFactionRank] = 1;


		SendServerMessage(playerid, "%s adlý oyuncuyu %s adlý oluþuma atadýn.", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s adlý yetkili seni %s oluþumuna atadý.", ReturnName(playerid, 0), FactionData[id][factionName]);
	}
    return 1;
}

CMD:aolusumrutbe(playerid, params[])
{
	static
		userid,
		rank,
		factionid;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ud", userid, rank))
	    return SendSyntaxMessage(playerid, "/aolusumrutbe [id] [rütbe]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if ((factionid = PlayerData[userid][pFaction]) == -1)
	    return SendErrorMessage(playerid, "Bu oyuncu herhangi bir oluþum üyesi deðil.");

    if (rank < 1 || rank > FactionData[factionid][factionRanks])
        return SendErrorMessage(playerid, "0 ve %d rakamlarýný atayabilirsin.", FactionData[factionid][factionRanks]);

	PlayerData[userid][pFactionRank] = rank;

	SendServerMessage(playerid, "%s adlý oyuncunun rütbesini %d olarak deðiþtirdin.", ReturnName(userid, 0), rank);
    SendServerMessage(userid, "%s adlý yetkili rütbeni %d olarak deðiþtirdi.", ReturnName(playerid, 0), rank);

    return 1;
}

ReturnUser(text[], playerid = INVALID_PLAYER_ID)
{
    new pos = 0;
    while (text[pos] < 0x21)
    {
        if (text[pos] == 0) return INVALID_PLAYER_ID;
        pos++;
    }

    new userid = INVALID_PLAYER_ID;
    if (IsNumeric(text[pos]))
    {
        userid = strval(text[pos]);
        if (userid >=0 && userid < MAX_PLAYERS)
        {
            if(!IsPlayerConnected(userid))
            userid = INVALID_PLAYER_ID;
            else return userid;
        }
    }

    new len = strlen(text[pos]);
    new count = 0;
    new pname[MAX_PLAYER_NAME];

    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i))
        {
            GetPlayerName(i, pname, sizeof (pname));
            if (strcmp(pname, text[pos], true, len) == 0)
            {
                if (len == strlen(pname)) return i;
                else
                {
                    count++;
                    userid = i;
                }
            }
        }
    }

    if (count != 1)
    {
        if (playerid != INVALID_PLAYER_ID)
        {
            if (count) SendClientMessage(playerid, -1, "Lütfen tam ad giriniz.");
            else SendClientMessage(playerid, -1, "Hata.");
        }
        userid = INVALID_PLAYER_ID;
    }
    return userid;
}

CMD:fac(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Herhangi bir birlik üyesi deðilsin.");

	new rutbe = PlayerData[playerid][pFactionRank];

	if(FactionData[factionid][factionBFS] > rutbe) return SendErrorMessage(playerid, "Birlik yetkilisi bu komutu kullanmayý engellemiþ.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/f) [mesaj]");

    if (PlayerData[playerid][pDisableFaction])
	    return SendErrorMessage(playerid, "Önce birlik sohbetini etkinleþtirmeniz gerekir.");

	SendFactionMessage(factionid, 0xAAC4E5FF, "(( %s %s: %s ))", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	Log_Write("logs/faction_chat.txt", "[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}


CMD:tazer(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawnedEx(playerid))
	    return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýnýz.");

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL && GetFactionType(playerid) != FACTION_AKADEMI && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir !");

	if (!PlayerData[playerid][pTazer])
	{
	    PlayerData[playerid][pTazer] = 1;
        GetPlayerWeaponData(playerid, 2, PlayerData[playerid][pGuns][2], PlayerData[playerid][pAmmo][2]);

		GivePlayerWeaponEx(playerid, 23, 20000);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kýlýfýný açar þok tabancasýný alýr.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[playerid][pTazer] = 0;
		SetWeapons(playerid);

		SetPlayerArmedWeapon(playerid, PlayerData[playerid][pGuns][2]);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s þok tabancasýný kýlýfýna koyar ve kýlýfý kapatýr.", ReturnName(playerid, 0));
	}
	return 1;
}


CMD:gisekilit(playerid, params[])
{
	new option[11];

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

	if(sscanf(params,"s[11]",option))
	{
		SCM(playerid, COLOR_YELLOW, "Giþe sistemi Los Santos'da bulunan giþeleri kontrol etmek için mevcut durumda.");
		SCM(playerid, COLOR_GRAD2, "acildurum - Bu komutlar tüm giþelerin geçiþini kapatýr.");
		SCM(playerid, COLOR_GRAD2, "normal - Bu komutlar tüm giþelerin geçiþini açar.");
		SCM(playerid, COLOR_GRAD2, "flint - Flint Country giþelerini kapatýr/açar.");
		SCM(playerid, COLOR_GRAD2, "richman - Richman giþelerini kapatýr/açar.");
		SCM(playerid, COLOR_GRAD2, "lv - Las Venturas giþelerini kapatýr/açar.");
		SCM(playerid, COLOR_GRAD2, "blueberry1 - Birinci Blueberry giþelerini kapatýr/açar.");
		SCM(playerid, COLOR_GRAD2, "blueberry2 - Ýkinci Blueberry giþelerini kapatýr/açar.");
		return 1;
	}
	if(!Toll_TimePassedCops(playerid))
		return 1;
	if(CompareStrings(option, "acildurum"))
	{
		aTolls[FlintToll][E_tLocked] = 1;
		aTolls[RichmanToll][E_tLocked] = 1;
		aTolls[LVToll][E_tLocked] = 1;
		aTolls[BlueberryTollR][E_tLocked] = 1;
		aTolls[BlueberryTollL][E_tLocked] = 1;

		Toll_CloseToll(FlintToll);
		Toll_CloseToll(RichmanToll);
		Toll_CloseToll(LVToll);
		Toll_CloseToll(BlueberryTollR);
		Toll_CloseToll(BlueberryTollL);

		format(gisemsg, 256, "** HQ Duyurusu: Bütün giþeler %s %s tarafýndan kilitlendi! **", Faction_GetRank(playerid), ReturnName(playerid));
		SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
		SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
	}
	if(CompareStrings(option, "normal"))
	{
		aTolls[FlintToll][E_tLocked] = 0;
		aTolls[RichmanToll][E_tLocked] = 0;
		aTolls[LVToll][E_tLocked] = 0;
		aTolls[BlueberryTollR][E_tLocked] = 0;
		aTolls[BlueberryTollL][E_tLocked] = 0;
		format(gisemsg, 256, "** HQ Duyurusu: Bütün giþelerin kilidi %s %s tarafýndan açýldý! **",Faction_GetRank(playerid), ReturnName(playerid));
		SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
		SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
	}
	if(CompareStrings(option, "flint"))
	{
		if(aTolls[FlintToll][E_tLocked] == 0)
		{
			aTolls[FlintToll][E_tLocked] = 1;
			Toll_CloseToll(FlintToll);
			format(gisemsg, 256, "** HQ Duyurusu: Flint Country giþeleri %s %s tarafýndan kilitlendi. **",Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
			SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
		}
		else
		{
			aTolls[FlintToll][E_tLocked] = 0;
			format(gisemsg, 256, "** HQ Duyurusu: Flint Country giþelerinin kilidi %s %s tarafýndan açýldý. **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
			SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
		}
	}
	if(CompareStrings(option, "richman"))
	{
		if(aTolls[RichmanToll][E_tLocked] == 0)
		{
			aTolls[RichmanToll][E_tLocked] = 1;
			Toll_CloseToll(RichmanToll);
			format(gisemsg, 256, "** HQ Duyurusu: Richman giþeleri %s %s tarafýndan kilitlendi.**", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
			SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
		}
		else
		{
			aTolls[RichmanToll][E_tLocked] = 0;
			format(gisemsg, 256, "** HQ Duyurusu: Richman giþelerinin kilidi %s %s tarafýndan açýldý.**", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
			SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
		}
	}
	if(CompareStrings(option, "lv"))
	{
		if(aTolls[LVToll][E_tLocked] == 0)
		{
			aTolls[LVToll][E_tLocked] = 1;
			Toll_CloseToll(LVToll);
			format(gisemsg, 256, "** HQ Duyurusu: Las Venturas giþeleri %s %s tarafýndan kilitlendi. **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
			SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
		}
		else
		{
			aTolls[LVToll][E_tLocked] = 0;
			format(gisemsg, 256, "** HQ Duyurusu: Las Venturas giþelerinin kilidi %s %s tarafýndan açýldý. **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
			SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
		}
	}
	if(CompareStrings(option, "blueberry"))
	{
		if(aTolls[BlueberryTollR][E_tLocked] == 0)
		{
			aTolls[BlueberryTollR][E_tLocked] = 1;
			Toll_CloseToll(BlueberryTollR);
			format(gisemsg, 256, "** HQ Duyurusu:: Blueberry-1 giþeleri %s %s tarafýndan kilitlendi. **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
			SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
		}
		else
		{
			aTolls[BlueberryTollR][E_tLocked] = 0;
			format(gisemsg, 256, "** HQ Duyurusu:: Blueberry-1 giþelerinin kilidi %s %s tarafýndan açýldý. **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
			SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
		}
	}
	if(CompareStrings(option, "blueberry2"))
	{
		if(aTolls[BlueberryTollL][E_tLocked] == 0)
		{
			aTolls[BlueberryTollL][E_tLocked] = 1;
			Toll_CloseToll(BlueberryTollL);
			format(gisemsg, 256, "** HQ Duyurusu:: Blueberry-2 giþeleri %s %s tarafýndan kilitlendi. **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_POLICE,COLOR_LSPDNEW, gisemsg);
			SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
		}
		else
		{
			aTolls[BlueberryTollL][E_tLocked] = 0;
			format(gisemsg, 256, "** HQ Duyurusu:: Blueberry-2 giþelerinin kilidi %s %s tarafýndan açýldý. **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, gisemsg);
			SendFactionMessageEx(FACTION_INTEL,COLOR_LSPDNEW, gisemsg);
		}
	}
	return 1;
}

CMD:m1(playerid, params[])
{
if ((GetFactionType(playerid) != FACTION_POLICE)) return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
new Message[250];
format(Message, sizeof(Message), "[LSPD] %s: LSPD, Aracýnýzý kendi þeridinizde, kenara çekin ve motorunu kapatýn!", ReturnName(playerid, 0));
ProxDetector(15.0, playerid, Message, COLOR_YELLOW);
return 1;
}
CMD:m2(playerid, params[])
{
if ((GetFactionType(playerid) != FACTION_POLICE)) return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
new Message[250];
format(Message, sizeof(Message), "[LSPD] %s: LSPD, Ellerinizi baþýnýzýn üstüne koyarak olduðunuz yerde durun!", ReturnName(playerid, 0));
ProxDetector(15.0, playerid, Message, COLOR_YELLOW);
return 1;
}
CMD:m3(playerid, params[])
{
if ((GetFactionType(playerid) != FACTION_POLICE)) return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
new Message[250];
format(Message, sizeof(Message), "[LSPD] %s: LSPD, Silahýný bize doðru at ve teslim ol!", ReturnName(playerid, 0));
ProxDetector(15.0, playerid, Message, COLOR_YELLOW);
return 1;
}
CMD:m4(playerid, params[])
{
if ((GetFactionType(playerid) != FACTION_POLICE)) return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
new Message[250];
format(Message, sizeof(Message), "[LSPD] %s: Herkes uzaklaþsýn, Aksi taktirde uyarý ateþi açýlacak!", ReturnName(playerid, 0));
ProxDetector(15.0, playerid, Message, COLOR_YELLOW);
return 1;
}
CMD:m5(playerid, params[])
{
if ((GetFactionType(playerid) != FACTION_POLICE)) return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
new Message[250];
format(Message, sizeof(Message), "[LSPD] %s: Siviller, Derhal buradan uzaklaþýn!", ReturnName(playerid, 0));
ProxDetector(15.0, playerid, Message, COLOR_YELLOW);
return 1;
}
CMD:megafon(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_INTEL && GetFactionType(playerid) != FACTION_MEDIC)
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir !");

	new Message[250];
    if(!sscanf(params, "s[250]", params))
    {
        format(Message, sizeof(Message), "[MEGAFON] %s: %s", ReturnName(playerid, 0), params);
        ProxDetector(15.0, playerid, Message, COLOR_YELLOW);
        return 1;
    }
    return 1;
}
/*CMD:siparisal(playerid, params[])
{
if (!IsPlayerInRangeOfPoint(playerid, 4.0, 1424.5778,-1356.3044,13.5736)) return SendErrorMessage(playerid, "Sipariþ alma noktasýnda deðilsiniz.");
if (PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Bu komutu kullanmak için level 5 olmalýsýn!");
if (PlayerData[playerid][pSilahZaman] < 24) return SendErrorMessage(playerid, "Sipariþinizi almak için sipariþ sürenizin geçmesi gerek.");
if (PlayerData[playerid][pSiparisVerdi] < 0) return SendErrorMessage(playerid, "Aktif silah sipariþin bulunmakta.");
if (PlayerData[playerid][pSiparisVerilen] > 0) return SendErrorMessage(playerid, "Sipariþiniz bulunmamaktadýr.");

{
    if(PlayerData[playerid][pSiparisVerilen] == 0)
 	GiveWeaponToPlayer(playerid, 22, 130);
 	GiveMoney(playerid, -9000);
 	PlayerData[playerid][pSiparisVerdi] = 0;
	PlayerData[playerid][pSiparisVerilen] = -1;
	SendServerMessage(playerid, "Colt-45 sipariþinizi baþarýyla aldýnýz.");
 }
 {
    if(PlayerData[playerid][pSiparisVerilen] == 1)
    GiveWeaponToPlayer(playerid, 24, 48);
    GiveMoney(playerid, -25000);
 	PlayerData[playerid][pSiparisVerdi] = 0;
	PlayerData[playerid][pSiparisVerilen] = -1;
	SendServerMessage(playerid, "Deagle sipariþinizi baþarýyla aldýnýz.");
 }
 {
    if(PlayerData[playerid][pSiparisVerilen] == 2)
    GiveWeaponToPlayer(playerid, 25, 25);
    GiveMoney(playerid, -15000);
 	PlayerData[playerid][pSiparisVerdi] = 0;
	PlayerData[playerid][pSiparisVerilen] = -1;
	SendServerMessage(playerid, "Shotgun sipariþinizi baþarýyla aldýnýz.");
 }
 {
    if(PlayerData[playerid][pSiparisVerilen] == 3)
    GiveWeaponToPlayer(playerid, 28, 180);
    GiveMoney(playerid, -20000);
 	PlayerData[playerid][pSiparisVerdi] = 0;
	PlayerData[playerid][pSiparisVerilen] = -1;
	SendServerMessage(playerid, "Uzi sipariþiniz baþarýyla aldýnýz.");
 }
 {
    if(PlayerData[playerid][pSiparisVerilen] == 4)
    GiveMoney(playerid, -25000);
    GiveWeaponToPlayer(playerid, 29, 220);
 	PlayerData[playerid][pSiparisVerdi] = 0;
	PlayerData[playerid][pSiparisVerilen] = -1;
	SendServerMessage(playerid, "MP-5 sipariþinizi baþarýyla aldýnýz.");
 }
 {
    if(PlayerData[playerid][pSiparisVerilen] == 5)
    GiveWeaponToPlayer(playerid, 32, 275);
    GiveMoney(playerid, -20000);
 	PlayerData[playerid][pSiparisVerdi] = 0;
	PlayerData[playerid][pSiparisVerilen] = -1;
	SendServerMessage(playerid, "TEC-9 sipariþinizi baþarýyla aldýnýz.");
 }
 {
    if(PlayerData[playerid][pSiparisVerilen] == 6)
    GiveWeaponToPlayer(playerid, 30, 160);
    GiveMoney(playerid, -40000);
 	PlayerData[playerid][pSiparisVerdi] = 0;
	PlayerData[playerid][pSiparisVerilen] = -1;
 	SendServerMessage(playerid, "AK-47 sipariþinizi baþarýyla aldýnýz.");
 }

return 1;
}*/

CMD:silahkalansaat(playerid, params[])
{
SendServerMessage(playerid, "Silah almak için kalan süre: %d saat.",PlayerData[playerid][pSilahZaman]);
return 1;
}

CMD:bagimliliktankurtul(playerid, params[])
{
if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1238.8019,310.6930,-11.7422)) return SendErrorMessage(playerid, "Baðýmlýlýktan kurtulma noktasýnda deðilsiniz.");
if(GetMoney(playerid) < 15000) return SendErrorMessage(playerid, "Baðýmlýlýktan kurtulmak için 15 bin dolar gerekiyor.");
GiveMoney(playerid, -15000);
SendServerMessage(playerid, "Artýk uyuþturucu baðýmlýsý deðilsin!");
PlayerData[playerid][pTotalUsed] = 0;
return 1;
}
CMD:cctvyardim(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    SendServerMessage(playerid, "Kullanýlabilir komutlar:");
    SendClientMessage(playerid, -1, "/createcctv - /deletecctv - /editcctv - /rangecctv");
    SendClientMessage(playerid, -1, "/movecctv - /renamecctv - /factioncctv - /gotocctv");
    return 1;
}
CMD:createcctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new
        name[MAX_CCTV_NAME], factionid;
    if(sscanf(params, "ds[MAX_CCTV_NAME]", factionid, name)) return SendServerMessage(playerid, "/createcctv [factionid] [cctv_name]");
    new id = CreateCCTV(playerid, name, factionid);
    if(id == -1) return SendErrorMessage(playerid, "Daha fazla CCTV yaratamazsýn!");
    SendServerMessage(playerid, "AdmCmd: CCTV created successfully.");
    SendServerMessage(playerid, "[V:RP] Remember to place the CCTV through the command /editcctv");
    return 1;
}
CMD:rangecctv(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "You are not authorized to use this command."); //ADMIN LEVEL HERE
	new
		exist, str[256];
	foreach(new i : CCTVIter)
		if(IsPlayerInRangeOfPoint(playerid, 10.0, CCTVInfo[i][cctv_X], CCTVInfo[i][cctv_Y], CCTVInfo[i][cctv_Z]))
		{
			exist = 1;
			format(str, sizeof(str), "CCTV (#%d) - Name: %s - Faction ID: #%d");
		}
	if(!exist) return SendErrorMessage(playerid, "There are CCTV near you. (RANGE: 10.0)");
	return 1;
}

CMD:deletecctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new id;
    if(sscanf(params, "d", id)) return SendServerMessage(playerid, "/deletecctv [cctv_id]");
    DeleteCCTV(playerid, id);
    return 1;
}
CMD:editcctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new id;
    if(sscanf(params, "d", id)) return SendServerMessage(playerid, "/editcctv [cctv_id]");
    EditCCTV(playerid, id);
    return 1;
}
CMD:movecctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new id;
    if(sscanf(params, "d", id)) return SendServerMessage(playerid, "/movecctv [cctv_id]");
    MoveCCTV(playerid, id);
    return 1;
}
CMD:renamecctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new
        name[MAX_CCTV_NAME], id;
    if(sscanf(params, "ds[MAX_CCTV_NAME]", id, name)) return SendServerMessage(playerid, "/renamecctv [cctv_id] [name]");
    ChangeCCTVName(playerid, id, name);
    return 1;
}
CMD:factioncctv(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Bu komuta yetkin yok!"); //ADMIN LEVEL HERE
    new
        id, factionid;
    if(sscanf(params, "dd", id, factionid)) return SendServerMessage(playerid, "/factioncctv [cctv_id] [factionid]");
    ChangeCCTVFaction(playerid, id, factionid);
    return 1;
}

CMD:cctv(playerid, params[])
{
if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_INTEL) return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir !");
if(!IsPlayerInRangeOfPoint(playerid, 4.0, 1567.2769,-1335.5885,1140.0850)) return SendErrorMessage(playerid, "CCTV kontrol noktasýnda deðilsiniz.");
if(inCCTV[playerid]) return SendErrorMessage(playerid, "Zaten CCTV'desin. (/cctvcik)");
TogglePlayerControllable(playerid,0);
PlayerData[playerid][pCCTV] = 1;
ShowPlayerCCTVMenu(playerid);
return 1;
}
CMD:cctvcik(playerid, params[])
{
if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_INTEL) return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir !");
if(!inCCTV[playerid]) return SendErrorMessage(playerid, "CCTV'de deðilsin!");
ObjeleriYukle(playerid);
SetCameraBehindPlayer(playerid);
SetPlayerVirtualWorld(playerid, 333);
PlayerCancelCCTV(playerid);
PlayerData[playerid][pCCTV] = 0;
return 1;
}
CMD:yereyatir(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_INTEL)
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir !");

	new
		iTarget;

	if(sscanf(params, "u", iTarget))
	    return SendSyntaxMessage(playerid, "/yereyatir [id]");

	if(!IsPlayerConnected(iTarget) || iTarget==playerid)
	    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu/oyunda deðil.");

	if (!IsPlayerConnected(iTarget))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    if (iTarget == playerid)
	    return SendErrorMessage(playerid, "Kendinizi yere yatýramazsýnýz.");

	if (!IsPlayerNearPlayer(playerid, iTarget, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncuya yakýn olmalýsýnýz.");

	new
	    bilgi[144]
	;

	SendServerMessage(iTarget, "%s adlý memur sizi yere yatýrdý.", ReturnName(playerid, 0));
	SendServerMessage(playerid, "%s adlý oyuncuyu yere yatýrdýnýz.", ReturnName(iTarget, 0));
	format(bilgi, sizeof(bilgi), "adlý memur %s'nýn üzerine atlar ve onu yere yatýrýr..", ReturnName(iTarget, 0));
	cmd_me(playerid, bilgi);
	PlayerData[iTarget][pStunned] = 10;
	TogglePlayerControllable(iTarget, 0);
	ApplyAnimation(iTarget,"PED","KO_shot_stom",4.1,0,1,1,1,1,1);
	SetPVarInt(iTarget, "IsFrozen", 1);
	SetTimerEx("fallsonracrack", 1000, false, "ii", iTarget, 0);
	return 1;
}


CMD:telsizkodlari1(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL)
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir!");

	new string[1024];
	strcat(string, "10-01 - Tüm Birimler belirtilen bölgeye yönelin!\n\n");
	strcat(string, "10-04 - Anlaþýldý!\n\n");
	strcat(string, "10-06 - Son Söylenilen Ýptal\n\n");
	strcat(string, "10-07 - Çaðrýlara kapalý göster.\n\n");
	strcat(string, "10-08 - Çaðrýlara açýk göster.\n\n");
	strcat(string, "10-12 - Aktif Staff Sahada.\n\n");
	strcat(string, "10-15 - Suçluyu teslim için PDHQ'ya yöneliyoruz.\n\n");
	strcat(string, "10-18 - Destek gerekli mi?\n");
	strcat(string, "10-20 - Bölge/konum.\n");
	strcat(string, "10-21 - Tüm Birimler Rapor Verin!\n");
	strcat(string, "10-22 - Þuraya git/Buraya gel.\n");
	strcat(string, "10-40 - Kalabalýk Grup(10-41)\n");
	strcat(string, "10-41 - Olasý Ýl-legal durum.\n");
	strcat(string, "10-46 - Þüpheli Durum Üst Arama.\n");
	strcat(string, "10-55 - Trafik Çevirmesi/Kontrol.\n");
	strcat(string, "10-56 - MDC Veritabaný Kontrol.\n");
	strcat(string, "10-57 - VICTOR(Araç Kovalamacasý.)\n");
	strcat(string, "10-57 - FOXTROT(Yayan kovalama)\n");
	strcat(string, "10-60 - Eþgal bilgisi.\n");
	strcat(string, "10-61 - Araç Eþgal Bilgisi.\n");
	strcat(string, "10-66 - Trafik Çevirmesi(Felony)\n");
	strcat(string, "10-70 - Destek Gerekli.(CODE-2 ~ CODE-3)\n");
	strcat(string, "10-71 - Saðlýk ekibi EMT gerekli(10-20).\n");
	strcat(string, "10-99 - Olay Bitti/Sonlandý.");
	Dialog_Show(playerid, TelsizKodlari, DIALOG_STYLE_MSGBOX, "Telsiz Kodlarý", string, "Tamam", "");
	return 1;
}

CMD:telsizkodlari2(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL)
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir!");
	new string[1024];
	strcat(string, "CODE-0 - Memur Vuruldu! Ne yapýyorsan býrak gel!\n");
	strcat(string, "CODE-1 - Memurun hayatý tehlikede!\n");
	strcat(string, "CODE-2 - Sirensiz þekilde yönelme.\n");
	strcat(string, "CODE-3 - Sirenler açýk þekilde yönelme.\n");
	strcat(string, "CODE-4 - Destek gerekmiyor.\n");
	strcat(string, "CODE-5 - Son 911 Çaðrýsý Asýlsýz.\n");
	strcat(string, "CODE-6 - Soruþturma kapsamýnda Araç dýþýndayýz.\n");
	strcat(string, "CODE-7 - Mola Bildiriyoruz.");

	Dialog_Show(playerid, TelsizKodlari, DIALOG_STYLE_MSGBOX, "Telsiz Kodlarý", string, "Tamam", "");
	return 1;
}

CMD:telsizkodlari3(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL)
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir!");
	new string[1024];
	strcat(string, "IC-1 - Siyahi\n");
	strcat(string, "IC-2 - Beyaz\n");
	strcat(string, "IC-3 - Latin\n");
	strcat(string, "IC-4 - Asyalý\n");
	strcat(string, "IC-5 - /Diðer\n");
	strcat(string, "IC-6 - Bilinmiyor.");
	Dialog_Show(playerid, TelsizKodlari, DIALOG_STYLE_MSGBOX, "Telsiz Kodlarý", string, "Tamam", "");
	return 1;
}
forward fallsonracrack(i,anim); public fallsonracrack(i,anim)
{
	if (anim == 0)
	{
		ApplyAnimation(i,"PED","KO_shot_stom",4.1,0,1,1,1,1,1);
		SetTimerEx("fallsonracrack", 9000, false, "ii", i, 1);
	}
	if (anim == 1)
	{
		SetPVarInt(i, "IsFrozen", 0);
		ClearAnimations(i);
		PlayerData[i][pStunned] = 0;
		TogglePlayerControllable(i, 1);
	}
 	return 1;
}
CMD:kelepcekir(playerid, params[])
{
    new
     userid;

    if (!IsPlayerInRangeOfPoint(playerid, 4.0, 2441.4204,-1973.6904,13.5539))
     return SendErrorMessage(playerid, "Kelepme kýrma noktasýnda deðilsin.");

    if (sscanf(params, "u", userid))
     return SendSyntaxMessage(playerid, "/kelepcekir [id]");

    if (!IsPlayerConnected(userid))
     return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil.");


    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
     return SendErrorMessage(playerid, "Bu oyuncuya yakýn olmalýsýn.");

    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "Oyuncu þu anda kelepçeli deðil.");

    if(GetMoney(playerid) < 50) return SendErrorMessage(playerid, "Yeterli paranýz bulunmamaktadýr.");


		GiveMoney(playerid, -50);
    //ShowPlayerFooter(playerid, "~g~Kelepce Kesildi.");



 static
     string[64];

    PlayerData[userid][pCuffed] = 0;
    PlayerData[userid][pDragged] = 0;
 	PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;
    SetPlayerCuffed(userid, false);

 format(string, sizeof(string), "%s bileklerini uzatýr.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "*Tüccar, %s adlý kiþinin bileklerindeki kelepçeyi demir kesme makasý yardýmý ile keser.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:kelepce(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV &&  GetFactionType(playerid) != FACTION_AKADEMI && GetFactionType(playerid) != FACTION_INTEL)
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/kelepce [id]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendinizi kelepçeleyemezsiniz.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncuya yakýn olmalýsýnýz.");

    if (!PlayerData[userid][pStunned] && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP)
	    return SendErrorMessage(playerid, "Oyuncu etkisiz halde veya ellerini kaldýrmýþ olmalýdýr.");



	if (GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
	    return SendErrorMessage(playerid, "Oyuncu duruyorken kelepçeleyemezsin.");

    if (PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "Oyuncu zaten þu anda kelepçeli.");

	static
	    string[64];

	if (PlayerData[userid][pDrinking])
	{
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		DestroyPlayerProgressBar(userid, PlayerData[userid][pDrinkBar]);
		PlayerData[userid][pDrinking] = 0;
	}
	if (PlayerData[userid][pHoldWeapon] > 0)
	{
	    HoldWeapon(userid, 0);
	}
    PlayerData[userid][pCuffed] = 1;
    SetPlayerCuffed(userid, true);

	format(string, sizeof(string), "%s adli kisiyi ~r~kelepceledin~w~.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kelepçelerini kavrar ve %s adlý kiþinin bileklerine geçirip sýkýlaþtýrýr.", ReturnName(playerid, 0), ReturnName(userid, 0));
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
    TogglePlayerControllable(userid, 1);
    return 1;
}

CMD:kelepcecoz(playerid, params[])
{
    new
	    userid;

    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_INTEL && GetFactionType(playerid) != FACTION_INTEL  && GetFactionType(playerid) != FACTION_INTEL)
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/kelepcecoz [id]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendi kelepçeni çözemezsin.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncuya yakýn olmalýsýn.");

    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "Oyuncu þu anda kelepçeli deðil.");

	static
	    string[64];

    PlayerData[userid][pCuffed] = 0;
    PlayerData[userid][pDragged] = 0;
	PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;
    SetPlayerCuffed(userid, false);

	format(string, sizeof(string), "%s adli kisinin kelepcesini ~r~cozdun~w~.", ReturnName(userid, 0));
    ShowPlayerFooter(playerid, string);
    TogglePlayerControllable(userid,1);
    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adlý kiþinin bileklerindeki kelepçeyi çýkartýr.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:surukle(playerid, params[])
{
	new
	    userid;

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/drag [id]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendinizi sürükleyemezsiniz.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Oyuncuya yakýn olmalýsýn.");

    if (!PlayerData[userid][pCuffed] && !PlayerData[userid][pStunned] && !GetPVarInt(userid, "IpDurum"))
        return SendErrorMessage(playerid, "Oyuncu kelepçeli/baðlý ya da þok etkisinde deðildir.");

	if (PlayerData[userid][pDragged])
	{
	    PlayerData[userid][pDragged] = 0;
	    PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerData[userid][pDragTimer]);
	    TogglePlayerControllable(userid,1);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adlý kiþinin kolunu býrakýr.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
	    PlayerData[userid][pDragged] = 1;
	    PlayerData[userid][pDraggedBy] = playerid;

	    PlayerData[userid][pDragTimer] = SetTimerEx("DragUpdate", 200, true, "dd", playerid, userid);
	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adlý kiþinin kolundan tutar ve yürütmeye baþlar.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

CMD:aracaat(playerid, params[])
{
	new
		userid,
		vehicleid = GetNearestVehicle(playerid);
/*
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir !");
*/
	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/aracaat [id]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendinizi  araca koyamazsýnýz.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Oyuncunun yakýnýnda olmalýsýnýz..");

    if (!PlayerData[userid][pCuffed] && !GetPVarInt(userid, "IpDurum"))
        return SendErrorMessage(playerid, "Oyuncu þu anda kelepçeli veya baðlý deðil.");

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Herhangi bir aracýn yakýnýnda deðilsin.");

	if (GetVehicleMaxSeats(vehicleid) < 2)
  	    return SendErrorMessage(playerid, "Bu araç dolu.");

	if (IsPlayerInVehicle(userid, vehicleid))
	{
		TogglePlayerControllable(userid, 1);

		RemoveFromVehicle(userid);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kapýyý açar ve %s'ý araçtan dýþarýya çeker.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
		new seatid = GetAvailableSeat(vehicleid, 2);

		if (seatid == -1)
		    return SendErrorMessage(playerid, "Boþ koltuk yok.");

		new
		    string[64];

		format(string, sizeof(string), "%s adlý oyuncuyu ~r~bindirdin.~w~ by %s.", ReturnName(playerid, 0));
		TogglePlayerControllable(userid, 0);

		StopDragging(userid);
		PutPlayerInVehicle(userid, vehicleid, seatid);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kapýyý açar ve %s'ý koltuða oturtur.", ReturnName(playerid, 0), ReturnName(userid, 0));
		ShowPlayerFooter(userid, string);
	}
	return 1;
}

CMD:createarrest(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	id = Arrest_Create(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for arrest points.");

	SendServerMessage(playerid, "You have successfully created arrest point ID: %d.", id);
	return 1;
}

CMD:destroyarrest(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyarrest [point id]");

	if ((id < 0 || id >= MAX_ARREST_POINTS) || !ArrestData[id][arrestExists])
	    return SendErrorMessage(playerid, "You have specified an invalid arrest point ID.");

	Arrest_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed arrest point ID: %d.", id);
	return 1;
}


CMD:mdc(playerid, params[])
{

    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL)
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

    if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Bir polis kruvazörü içinde olmalýsýn.");

	new vehicleid = GetPlayerVehicleID(playerid), id = Car_GetID(vehicleid);

	if (CarData[id][carFaction] != FACTION_POLICE && CarData[id][carFaction] != FACTION_INTEL)
	    return SendErrorMessage(playerid, "Bir polis kruvazörü içinde olmalýsýn.");

    //<<<<<<<<<<if (!PlayerData[playerid][pMdcSifre]) return Dialog_Show(playerid, MDCGirisi, DIALOG_STYLE_PASSWORD, "MDC Girisi", "Hosgeldiniz {009FFF}%s,\n\n{FFFFFF}Giriþ için veritabaný þifrenizi yazýn.", "Giriþ", "Cikis", ReturnName(playerid, 0));
	Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobil Bilgi Sistemi", "Dashcam Aç/Kapat\nAranmalar\nAranma Ekle\nSicile Bak\nKriminal Veritabaný\nLokasyon Bul", "Seç", "{FF6347}Iptal");
	return 1;
}

CMD:hapseat(playerid, params[])
{
 static
 userid,
 time,
 reason[128];

    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
  return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir!");

 if (sscanf(params, "uds[128]", userid, time, reason))
     return SendSyntaxMessage(playerid, "/hapseat [id] [dakika] [gerekçe]");

 if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
     return SendErrorMessage(playerid, "Oyuncu siz yakýn deðil veya baðlantýsý kesildi.");

 if (time < 1 || time > 900)
     return SendErrorMessage(playerid, "Belirtilen süre 1 altýnda ya da 500 üstünde olamaz.");

 if (!PlayerData[userid][pCuffed])
     return SendErrorMessage(playerid, "Bir tutuklama yapýlmadan önce oyuncunun kelepçeli olmasý gerekir.");

 if (!IsPlayerNearArrest(playerid))
     return SendErrorMessage(playerid, "Bir tutuklama noktasýnýn yakýnýnda olmalýsýn.");

PlayerData[userid][pPrisoned] = 1;
PlayerData[userid][pJailTime] = time * 60;
StopDragging(userid);
SetPlayerInPrison(userid);
Telefon_Kapat(userid);
ResetWeapons(userid);
ResetPlayer(userid);
IC_Sicil_Reset(userid);
PlayerData[userid][pCuffed] = 0;
SetPlayerCuffed(userid, false);
PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);
SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
SendServerMessage(playerid, "%s adlý oyuncuyu %s gerekçesiyle %d dakika hapse attýn.", ReturnName(userid, 0), reason, time);
SendServerMessage(userid, "%s adlý polis seni %s gerekçesiyle %d dakika hapse attý.", ReturnName(playerid, 0), reason, time);
//SendClientMessageToAllEx(0xFF0000FF, "[POLICE]: %s %s %s adlý suçluyu SADoC'a teslim etti.", Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0));
return 1;
}

CMD:uelkoy(playerid, params[])
{
	static
	    plantid;

    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

	if ((plantid = Plant_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "Herhangi bir uyuþturucu tohumunun yanýnda deðilsin.");

	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %d gram aralýðýnda %s ele geçirir.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs], Plant_GetType(PlantData[plantid][plantType]));
	Plant_Delete(plantid);
	return 1;
}

/*CMD:olumkabul(playerid, params[])
{
	if (!PlayerData[playerid][pBaygin])
	    return SendErrorMessage(playerid, "Yaralý deðilsin.");

	CanDegistir(playerid, 0.0);
	SendServerMessage(playerid, "Hastaneye götürülüyorsun.");
	return 1;
}*/


CMD:yaralilar(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "Medikal birlik üyesi deðilsin.");

	new string[1024], yaralisayisi;
 foreach (new i : Player)
	{
	    if(Yarali[i])
		{
		    new bilgiler[256];
		    format(bilgiler, sizeof(bilgiler), "%s\n", ReturnName(i), i);
		    strcat(string, bilgiler);
		    yaralisayisi++;
		}
	}
	new yaralibaslik[256];
	format(yaralibaslik,256, "Yaralýlar (Toplam %d yaralý var)", yaralisayisi);
	if(yaralisayisi >= 1) Dialog_Show(playerid, yaralilar, DIALOG_STYLE_LIST, yaralibaslik, string, "Tamam", "");
	else SendErrorMessage(playerid, "Hiç yaralý yok.");
	return 1;
}


CMD:doktorcagir(playerid, params[])
{
    if(!PlayerData[playerid][pBaygin]) return SendErrorMessage(playerid, "Yaralý deðilsiniz.");
	if(Yarali[playerid]) return SendErrorMessage(playerid, "Zaten doktor çaðýrmýþsýnýz.");
    SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "ÝLKYARDIM ÇAÐRISI: %s (%s)", ReturnName(playerid, 0), GetPlayerLocation(playerid));
    SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "AÇIKLAMA: Yaralanma Vakasý");
    SendClientMessage(playerid, COLOR_HOSPITAL, "[ÇAÐRI]:{FFFFFF} Tüm saðlýk birimleri bilgilendirildi, az sonra burada olurlar.");
    SetFactionMarker(playerid, FACTION_MEDIC, 0x00D700FF);
    Yarali[playerid] = true;
	return 1;
}

CMD:hyukle(playerid, params[])
{
	static
	    userid,
		seatid;

	if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "Medikal birlik üyesi deðilsin.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/hyukle [id]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 10.0))
	    return SendErrorMessage(playerid, "Bu oyuncunun baðlantýsý koptu veya size yakýn deðil.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Ambulansa kendinizi yükleyemezsiniz.");

	if (!PlayerData[userid][pBaygin])
	    return SendErrorMessage(playerid, "Bu oyuncu yaralý deðildir.");

	for (new i = 0; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) && GetVehicleModel(i) == 416)
	{
	    seatid = GetAvailableSeat(i, 2);

	    if (seatid == -1)
	        return SendErrorMessage(playerid, "Araçta boþ yer yok.");

		ClearAnimations(userid);
		PlayerData[userid][pBaygin] = 2;

		PutPlayerInVehicle(userid, i, seatid);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s adlý kiþiyi sedyeye yerleþtirir ve ambulansa koyar.", ReturnName(playerid, 0), ReturnName(userid, 0));

		TogglePlayerControllable(userid, 0);
		CanDegistir(userid, 100.0);
		return 1;
	}
	SendErrorMessage(playerid, "Bir ambulansa yakýn deðilsin.");
	return 1;
}

CMD:hteslim(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "Medikal birlik üyesi deðilsin.");

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/hteslim [id]");

	if (!IsPlayerConnected(userid) || !IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Bu oyuncu size yakýn deðil veya baðlantýsý kesildi.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Hastaneye kendinizi teslim edemezsiniz.");

	if (!PlayerData[userid][pBaygin])
	    return SendErrorMessage(playerid, "That player is not injured.");

	for (new i = 0; i < sizeof(arrHospitalDeliver); i ++) if (IsPlayerInRangeOfPoint(playerid, 5.0, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]))
	{
	    ClearAnimations(userid);

	    SetPlayerInterior(userid, 3);
	    SendServerMessage(playerid, "%s adlý oyuncuyu hastaneye teslim ettin $300 kazandýn.", ReturnName(userid, 0));

	    JBC_SetPlayerPos(userid, -204.5867, -1740.7955, 675.7687);
    	SetPlayerFacingAngle(userid, 0.0000);

		TogglePlayerControllable(userid, 0);
  		SetCameraBehindPlayer(userid);

		SetPlayerVirtualWorld(userid, i + 5000);
  		PlayerData[userid][pHospitalInt] = i;
		GiveMoney(playerid, 300);
		SetWeapons(userid);
	  	PlayerData[userid][pHospital] = -1;
    	PlayerData[userid][pHospitalTime] = 0;
		SetTimerEx("HastaneTimer", 3000, false, "d", userid);
    	SendServerMessage(userid, "En yakýn hastaneye getirilip orada tedavi edildiniz.");

		GameTextForPlayer(userid, " ", 1, 3);
  		//ShowHungerTextdraw(userid, 1);

  		PlayerData[userid][pBaygin] = 0;
		TextDrawHideForPlayer(userid, gServerTextdraws[2]);
		return 1;
	}
	SendErrorMessage(playerid, "Bir hastane teslim noktasýnýn yakýnýnda olmalýsýn.");
	return 1;
}

CMD:bandaj(playerid, params[])
{
    static
	    userid;

	if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "You must be part of a medical faction.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/bandaj [id]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "Oyuncu yanýnýzda deðil veya baðlantýsý kesildi.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendiniz için bu komutu kullanamazsýnýz.");

	if (PlayerData[userid][pFirstAid])
	    return SendErrorMessage(playerid, "Bu oyuncunun yarasý zaten þuan sarýlýyor.");

    if (ReturnHealth(userid) > 99)
	    return SendErrorMessage(playerid, "Bu oyuncuya bandaj kullanmaya gerek yoktur.");

    PlayerData[userid][pFirstAid] = true;
    PlayerData[userid][pAidTimer] = SetTimerEx("FirstAidUpdate", 1000, true, "d", userid);

    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir ilk yardým kiti açar ve %s adlý kiþinin yarasýný bir bandaj ile sarmaya baþlar.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:yayin(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Haberci deðilsin.");

	if (!IsNewsVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Bir haber aracýnda veya helikopterde olmalýsýn.");

	if (!PlayerData[playerid][pBroadcast])
	{
	    PlayerData[playerid][pBroadcast] = true;

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir kaç tuþa bastý ve yayýný baþlattý.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Bir haber yayýný baþlattýn. (Konuþmak için (/bc [yazý]) komutunu kullanýn.");
	}
	else
	{
	    PlayerData[playerid][pBroadcast] = false;

		foreach (new i : Player) if (PlayerData[i][pNewsGuest] == playerid) {
		    PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
		}
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir kaç tuþa bastý ve yayýný durdurdu.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Haber yayýný durduruldu.");
	}
	return 1;
}

CMD:bc(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Haberci deðilsin.");

    if (isnull(params))
	    return SendSyntaxMessage(playerid, "/bc [yazi]");

	if (!IsNewsVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Bir haber aracýnda veya helikopterde olmalýsýn.");

	if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "Bu komutu kullanmak için yayýn aracýnda olmalýsýnýz.");

	if (strlen(params) > 64) {
	    foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
		    SendClientMessageEx(i, COLOR_ORANGE, "[News] Sunucu %s: %.64s", ReturnName(playerid, 0), params);
		    SendClientMessageEx(i, COLOR_ORANGE, "...%s", params[64]);
		}
	}
	else {
        foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "[News] Sunucu %s: %s", ReturnName(playerid, 0), params);
		}
	}
	return 1;
}

stock AltYaziGonder(playerid, string[], time = 12000) {
	if (PlayerData[playerid][pShowAltyazi])
	{
	    TextDrawHideForPlayer(playerid, Altyazi3);
	    KillTimer(PlayerData[playerid][pFooterTimer]);
	}
	TextDrawSetString(Altyazi3, string);
	TextDrawShowForPlayer(playerid, Altyazi3);
    TextDrawShowForPlayer(playerid, Altyazi2);
    TextDrawShowForPlayer(playerid, Altyazi1);
	PlayerData[playerid][pShowAltyazi] = true;
	PlayerData[playerid][pAltyaziTimer] = SetTimerEx("HideAltyazi", time, false, "d", playerid);
}
forward HideAltyazi(playerid);
public HideAltyazi(playerid) {

	if (!PlayerData[playerid][pShowAltyazi])
	    return 0;

	PlayerData[playerid][pShowAltyazi] = false;
	return TextDrawHideForPlayer(playerid, Altyazi3),TextDrawHideForPlayer(playerid, Altyazi2),TextDrawHideForPlayer(playerid, Altyazi1);
}


CMD:altyazi(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Haberci deðilsin.");

    if (isnull(params))
	    return SendSyntaxMessage(playerid, "/altyazi [yazi]");

	if (!IsNewsVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Bir haber aracýnda veya helikopterde olmalýsýn.");

	if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "Bu komutu kullanmak için yayýnda olmalýsýnýz.");


   	if (strlen(params) > 64) {
	    foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
			SendErrorMessage(playerid, "Alt yazý en fazla 64 karakter olabilir");
		}
	}
	else {
        foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
		    AltYaziGonder(i,params);
		}
	}
	return 1;
}

CMD:ydavet(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Haberci deðilsin.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/ydavet [id]");

    if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "Bu komutu kullanmak için yayýnda olmalýsýnýz.");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncu size yakýn deðil veya baðlantýsý kesildi.");

 	if (userid == playerid)
		return SendErrorMessage(playerid, "Bir konuk olarak kendinizi ekleyemezsiniz.");

	if (PlayerData[userid][pNewsGuest] == playerid)
	    return SendErrorMessage(playerid, "Bu oyuncu zaten yayýnýn bir konuðu oluyor.");

	if (PlayerData[userid][pNewsGuest] != INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Oyuncu oyunda deðil.");

	PlayerData[userid][pNewsGuest] = playerid;

	SendServerMessage(playerid, "%s yayýn konuðu olarak eklendi.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s adlý haberci seni yayýna konuk etti.", ReturnName(playerid, 0));
	return 1;
}

CMD:ykov(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Haberci deðilsin.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/ykov [id]");

    if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "Bu komutu kullanmak için yayýnda olmalýsýnýz.");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncu size yakýn deðil veya baðlantýsý kesildi.");

 	if (userid == playerid)
		return SendErrorMessage(playerid, "Bir konuk olarak kendinizi kaldýramazsýnýz.");

	if (PlayerData[userid][pNewsGuest] != playerid)
	    return SendErrorMessage(playerid, "Bu oyuncu yayýn konuðu deðildir.");

	PlayerData[userid][pNewsGuest] = INVALID_PLAYER_ID;

	SendServerMessage(playerid, "%s adlý oyuncuyu yayýndan çýkarttýn. ", ReturnName(userid, 0));
	SendServerMessage(userid, "%s adlý haberci seni yayýndan çýkarttý.", ReturnName(userid, 0));
	return 1;
}

CMD:paraver(playerid, params[])
{
	static
	    userid,
	    amount;

	if (sscanf(params, "ud", userid, amount))
	    return SendSyntaxMessage(playerid, "/paraver [id] [miktar]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Oyuncu oyunda deðil veya sana yakýn deðil.");

    if(GetPlayerState(userid) == PLAYER_STATE_SPECTATING)
	    return SendErrorMessage(playerid, "Oyuncu oyunda deðil veya sana uzak.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "Kendine para veremezsin.");

	if (amount < 1)
	    return SendErrorMessage(playerid, "En az $1 verebilirsin.");

	if (amount > 100 && PlayerData[playerid][pLevel] < 2)
	    return SendErrorMessage(playerid, "Para verebilmek için 2 level olman gereklidir.");

	if (amount > GetMoney(playerid))
	    return SendErrorMessage(playerid, "Bu kadar paran yok.");

	static
	    string[72];

	GiveMoney(playerid, -amount);
	GiveMoney(userid, amount);

	format(string, sizeof(string), "%s sana %s kadar para verdi.", ReturnName(playerid, 0), FormatNumber(amount));
	//ShowPlayerFooter(userid, string);
	SendClientMessage(userid, COLOR_GRAY, string);

	format(string, sizeof(string), "%s'a %s kadar para verdin.", ReturnName(userid, 0), FormatNumber(amount));
//	ShowPlayerFooter(playerid, string);
	SendClientMessage(playerid, COLOR_GRAY, string);

	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cebinden bir miktar para çýkartýr ve %s'a verir.", ReturnName(playerid, 0), ReturnName(userid, 0));
	Log_Write("logs/pay_log.txt", "[%s] %s (%s) has paid %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:factions(playerid, params[])
{
if (PlayerData[playerid][pAdmin] < 2) return SendErrorMessage(playerid, "Artýk birlikler gösterilmeyecek.");
ViewFactions(playerid);
return 1;
}

CMD:dept(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL &&  GetFactionType(playerid) != FACTION_AKADEMI && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Bu kanalý kullanabilmek için resmi hizmet görevlisi olman gereklidir.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/dept [departman radyosu]");

	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_MEDIC || FactionData[i][factionType] == FACTION_INTEL ||  FactionData[i][factionType] == FACTION_GOV) {
		SendFactionMessage(i, COLOR_DEPARTMENT, "[%s] %s %s: %s", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	}
	Log_Write("logs/faction_chat.txt", "[%s] [/dept] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}
CMD:gpskapat(playerid, params[])
{
    if(tiryapiyor[playerid] >= 1 || PlayerData[playerid][pPizzaBasladimi] >= 1)
		return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýn.");

    if(tiryapiyor[playerid] >= 1 || PlayerData[playerid][pPizzaBasladimi] >= 1 || PlayerData[playerid][pDrivingTest])
		return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýn.");

	if (PlayerData[playerid][pBaygin] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0)
	    return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýnýz.");

	DisableWaypoint(playerid);
	return 1;
}

CMD:gps(playerid, params[])
{
    if(tiryapiyor[playerid] >= 1 || PlayerData[playerid][pPizzaBasladimi] >= 1)
		return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýn.");

    if(tiryapiyor[playerid] >= 1 || PlayerData[playerid][pPizzaBasladimi] >= 1 || PlayerData[playerid][pDrivingTest])
		return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýn.");

	if (PlayerData[playerid][pBaygin] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0)
	    return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýnýz.");

	Dialog_Show(playerid, MainGPS, DIALOG_STYLE_LIST, "GPS Cihazý", "Ev Bul\nÝþyeri Bul\nBina Bul\nGlobal Lokasyonlar\nLokasyonlarým", "Seç", "{FF6347}Iptal");
	return 1;
}
CMD:meslekler(playerid, params[])
{
    if(tiryapiyor[playerid] >= 1 || PlayerData[playerid][pPizzaBasladimi] >= 1)
		return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýn.");

    if(tiryapiyor[playerid] >= 1 || PlayerData[playerid][pPizzaBasladimi] >= 1 || PlayerData[playerid][pDrivingTest])
		return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýn.");

	if (PlayerData[playerid][pBaygin] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0)
	    return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýnýz.");

	Dialog_Show(playerid, FindJob, DIALOG_STYLE_LIST, "Meslek Bul", "Taþýmacýlýk {23FF00}(Yeni)\n{FFFFFF}Taksi Þoförlüðü\nÇimento Taþýmacýlýðý{23FF00}(Yeni)\n{FFFFFF}Otobüs Þoförlüðü{FFF000}(Pasif)\nÝçki Kaçakçýlýðý{23FF00}(Yeni, Birlik Mesleði)\nUyuþturucu Kaçakçýlýðý{23FF00}(Yeni, {FF0000}Ýllegal)", "Tamam", "{FF0000}Iptal");
	return 1;
}
Dialog:FindJob(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if(listitem == 0)
		{
        Waypoint_Set(playerid, "Tasimacilik", 2449.3201,-2105.5701,13.5469);
        SendServerMessage(playerid, "Yol noktasý: Taþýmacýlýk (Haritada Ýsaretli) Kapatmak için:/gpskapat.");
		}
		if(listitem == 1)
		{
		Waypoint_Set(playerid, "Taksici Meslegi", 1775.9336,-1934.6713,13.3854);
        SendServerMessage(playerid, "Yol noktasý: Taksici Meslegi (Haritada Ýsaretli) Kapatmak için:/gpskapat.");
		}
		if(listitem == 2)
		{
		Waypoint_Set(playerid, "Cimento Meslegi", 2147.0200,-2155.4299,13.5469);
        SendServerMessage(playerid, "Yol noktasý: Cimento Meslegi (Haritada Ýsaretli) Kapatmak için:/gpskapat.");
		}
		if(listitem == 3)
		{
        SendServerMessage(playerid, "Pasif meslek.");
		}
		if(listitem == 4)
		{
		Waypoint_Set(playerid, "Icki Kacakciligi Meslegi", 2534.8809, -2131.6790, 13.5469);
        SendServerMessage(playerid, "Yol noktasý: Ýçki Kaçakçýlýðý Mesleði (Haritada Ýsaretli) Kapatmak için:/gpskapat.");
		}
		if (listitem == 5)
		{
		Waypoint_Set(playerid, "Uyusturucu Kacakciligi Meslegi", 2213.3701,-2289.8210,14.7647);
		SendServerMessage(playerid, "Yol noktasý: Uyuþturucu Kaçakçýlýðý Mesleði (Haritada Isaretli) Kapatmak için:/Gpskapat.");
		}
	}
	return 1;
}
CMD:benzinkutusu(playerid, params[])
{
	new vehicleid = GetNearestVehicle(playerid);

	if (IsPlayerInAnyVehicle(playerid) || vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Herhangi bir aracýn yanýnda deðilsin.");

	if (!Inventory_HasItem(playerid, "Benzin Kutusu"))
	    return SendErrorMessage(playerid, "Herhangi bir yakýt kutun yok.");

	if (GetEngineStatus(vehicleid))
	    return SendErrorMessage(playerid, "Önce motoru kapatman gereklidir.");

	if (CoreVehicles[vehicleid][vehFuel] > 95)
	    return SendErrorMessage(playerid, "Bu araca yakýt gerekmez.");

	if (PlayerData[playerid][pFuelCan])
	    return SendErrorMessage(playerid, "Zaten yakýt kutusunu kullanýyorsunuz.");

    PlayerData[playerid][pFuelCan] = 1;

	Inventory_Remove(playerid, "Benzin Kutusu");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Benzin Araca Dolduruluyor...", 5200, 3);

	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s yakýt kutusunu açar ve araca doldurur.", ReturnName(playerid, 0));
	SetTimerEx("RefillUpdate", 5000, false, "dd", playerid, vehicleid);

	return 1;
}

CMD:p(playerid, params[])
{
	if(PlayerData[playerid][pLastPM] == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Son PM attýðýnýz kiþiye ulaþýlamadý veya hiç kimseye PM atmadýnýz.");

	new komutyazdir[256];
	format(komutyazdir, 256, "%d %s", PlayerData[playerid][pLastPM], params);
	cmd_pm(playerid, komutyazdir);
	return 1;
}

CMD:pm(playerid, params[])
{
	static
	    userid,
	    text[128];

	if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/pm [id] [mesaj]");

	if (PlayerData[playerid][pDisablePM])
		return SendErrorMessage(playerid, "Önce özel mesajlaþma etkinleþtirmeniz gerekmektedir.");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");


	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendinize mesaj yollayamazsýnýz.");

	if (PlayerData[userid][pDisablePM])
	    return SendErrorMessage(playerid, "Bu oyuncu özel mesaj gönderme iznini iptal etmiþtir.");
	    

	PlayerData[playerid][pLastPM] = userid;
	GameTextForPlayer(userid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Yeni mesaj!", 3000, 3);
	PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);
 	foreach(new i : Player)
	{
	    if(PMSpec[i] && PlayerData[i][pAdmin] >= 1)
	    {
	        SendClientMessageEx(i, COLOR_DEPARTMENT, "((  %s (%d) > %s (%d) : %s ))", ReturnName(playerid, 0), playerid, ReturnName(userid), userid, text);
		}
	}
 SendClientMessageEx(userid, 0xFFFF00FF, "<< %s(%d): %s", ReturnName(playerid, 0), playerid, text); // gelen
	SendClientMessageEx(playerid, 0xFF8000FF, ">> %s(%d): %s", ReturnName(userid, 0), userid, text); // giden
	return 1;
}



CMD:cezayaz(playerid, params[])
{
	static
	    userid,
	    price,
	    reason[64];

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");


	if (sscanf(params, "uds[64]", userid, price, reason))
		return SendSyntaxMessage(playerid, "/cezayaz [id] [bedel] [Gerekçe]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncu size yakýn deðil veya baðlantýsý kesildi.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kendine ceza yazamazsýn.");

	if (price < 1 || price > 5000)
	    return SendErrorMessage(playerid, "Ceza bedeli $1 altýnda ve $5,000 üstünde olamaz.");

	new id = Ticket_Add(userid, price, reason);

	if (id != -1) {
	    SendServerMessage(playerid, "%s adlý oyuncuya %s para cezasý yazdýn, sebep: %s.", ReturnName(userid, 0), FormatNumber(price), reason);
	    SendServerMessage(userid, "%s adlý memur sana %s para cezasý yazdý, sebep: %s.", ReturnName(playerid, 0), FormatNumber(price), reason);

	    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir kaðýt, kalem çýkarýr ve %s'a ceza yazar.", ReturnName(playerid, 0), ReturnName(userid, 0));
	    Log_Write("logs/ticket_log.txt", "[%s] %s has written a %s ticket to %s, reason: %s", ReturnDate(), ReturnName(playerid, 0), FormatNumber(price), ReturnName(userid, 0), reason);
	}
	else {
	    SendErrorMessage(playerid, "Bu oyuncunun zaten ödenmemiþ %s cezasý vardýr.", MAX_PLAYER_TICKETS);
	}
	return 1;
}

/*CMD:arac(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçta deðilsiniz.");
	new id = Car_GetID(GetPlayerVehicleID(playerid));
	if(!Car_IsOwner(playerid, id)) return SendErrorMessage(playerid, "Bu araç sizin deðil.");
 	new baslik[256], string[1024], durum[256], durum2[256];
	strcat(string, "Ýþlem Adý\tDurum\n");

	//format(durum2, 256, "{2ECC71}Kilometre:\t{FFFFFF}%f\n", GetKilometers(GetPlayerVehicleID(playerid)));
 //	strcat(string, durum2);
	format(durum2, 256, "Aracý Parket\n");
	strcat(string, durum2);
	format(durum2, 256, "Far Kontrolü\n");
	strcat(string, durum2);
	format(durum2, 256, "Kaput Kontrolü\n");
	strcat(string, durum2);
	format(durum2, 256, "Bagaj Kontolü\n");
	strcat(string, durum2);
	format(durum2, 256, "Cam Kontrolü\n");
	strcat(string, durum2);
	if (CarData[id][carBirlik] != -1) format(durum, 256, "{2ECC71}[ Birlik Aracý ]");
	else format(durum, 256, "{FF6F3A}[ Birlik Aracý Deðil ]");
	format(durum2, 256, "Birlik aracý yap/çýkart.\t%s\n", durum);
	strcat(string, durum2);
	if (CarData[id][carKiralik]) format(durum, 256, "{2ECC71}[ %s ]", FormatNumber(CarData[id][carKiraUcret]));
	else format(durum, 256, "{FF6F3A}[ Hayýr ]");
	format(durum2, 256, "Araç Kiralama Ücreti / Durumu \t%s\n", durum);
	strcat(string, durum2);
	if (CarData[id][carPrice] > 0) format(durum, 256, "{2ECC71}[ %s ]", FormatNumber(CarData[id][carPrice]));
	else format(durum, 256, "{FF6F3A}[ Satýlýk Deðil ]");
	format(durum2, 256, "Araç Satýþ Fiyatý / Durumu \t%s\n", durum);
	strcat(string, durum2);
	SetPVarInt(playerid, "DAI", id);
	new vehicleid = GetPlayerVehicleID(playerid);
	format(baslik, sizeof(baslik), "{FFF000}Araç Menüsü {FFFFFF}(ID: %d - %s)", id+1, ReturnVehicleModelName(GetVehicleModel(vehicleid)));
	return Dialog_Show(playerid, Arac, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Tamam", "Kapat");
}

Dialog:Arac(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new id = GetPVarInt(playerid, "DAI");

		if(listitem == 0)
	    {
	    //cmd_park(playerid, "\1");
	    cmd_arac(playerid, "\1");
		}
		if(listitem == 1)
	    {
	    //cmd_afar(playerid, "\1");
	    cmd_arac(playerid, "\1");
		}
		if(listitem == 2)
	    {
	    //cmd_kaput(playerid, "\1");
	    cmd_arac(playerid, "\1");
		}
		if(listitem == 3)
	    {
	    //cmd_bagaj(playerid, "\1");
	    cmd_arac(playerid, "\1");
		}
		if(listitem == 4)
	    {
	    //cmd_acam(playerid, "\1");
	    cmd_arac(playerid, "\1");
		}
		if(listitem == 5)
	    {
			 if (CarData[id][carBirlik] == -1)
	         {
	            if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "Birliðiniz yok.");
	            if(GetFactionType(playerid) != 5) return SendErrorMessage(playerid, "Devlet kurumlarýna araç ekleyemezsiniz.");
	            if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionBCS]) SendErrorMessage(playerid, "Bu iþlemi bu birlikte yapabilmek için en az %d seviye rütbeye sahip olmalýsýn.", FactionData[PlayerData[playerid][pFaction]][factionBCS]);
				CarData[id][carFaction] = 5;
				CarData[id][carBirlik] = FactionData[PlayerData[playerid][pFaction]][factionID];
	            SendServerMessage(playerid, "Araç birliðinizle paylaþýldý.");
	            Car_Save(id);
				cmd_arac(playerid, "\1");
			 }
			 else {
			    CarData[id][carFaction] = 0;
				CarData[id][carBirlik] = -1;
			    SendServerMessage(playerid, "Araç artýk birliðinizle paylaþýlmayacak.");
			    Car_Save(id);
			    cmd_arac(playerid, "\1");
			 }
		}
		if(strfind(inputtext, "Kira", true) != -1)
	    {
			Dialog_Show(playerid, AracKiraFiyati, DIALOG_STYLE_INPUT, "{2F4F4F}Araç - Kira Fiyatý Düzenleme", "{FFFFFF}Uyarý: Eðer boþ býrakýrsanýz artýk aracýnýz kiralanmaz.\n\nLütfen istediðiniz fiyatý girin;", "Ayarla", "{FF6347}Iptal");
	    }
	    if(strfind(inputtext, "Satýþ", true) != -1)
	    {
			Dialog_Show(playerid, AracSatisFiyati, DIALOG_STYLE_INPUT, "{2F4F4F}Araç - Satýþ Fiyatý Düzenleme", "{FFFFFF}Uyarý: Eðer boþ býrakýrsanýz artýk aracýnýz kiralanmaz.\n\nLütfen istediðiniz fiyatý girin;", "Ayarla", "{FF6347}Iptal");
	    }
	}
	return 1;
}*/

Dialog:AracAlimOnay(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new id = Car_GetID(GetPlayerVehicleID(playerid));
	    if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS)
			    return SendErrorMessage(playerid, "Zaten %d araca sahipsin. (Sunucu Araç Limiti)", MAX_OWNABLE_CARS);
	    if(CarData[id][carOwner] == PlayerData[playerid][pID]) return SendErrorMessage(playerid, "Araç sahibisin, satamazsýn.");
	    if(CarData[id][carPrice] <= 0) return 1;
	    if(GetMoney(playerid) < CarData[id][carPrice] ) return SendErrorMessage(playerid, "Yeterli paranýz yok. (%s)", FormatNumber(CarData[id][carPrice]));

        Log_Write("logs/aracofflinealim_log.txt", "[%s] %s adli oyuncu %s odeyerek araci satin aldi. (Arac SQL ID: %d)", ReturnDate(), ReturnName(playerid, 0), FormatNumber(CarData[id][carPrice]), id);

        GiveMoney(playerid, -CarData[id][carPrice]);

		new pid = SQLID_Kontrol(CarData[id][carOwner]);
		if(id != -1 && IsPlayerConnected(pid)) GiveMoney(pid, CarData[id][carPrice]);
		else OfflineParaVer(CarData[id][carOwner], CarData[id][carPrice]);
		CarData[id][carOwner] = PlayerData[playerid][pID];
		SendServerMessage(playerid, "%s ödeyerek araç satýn alýndý.", FormatNumber(CarData[id][carPrice]));
		CarData[id][carPrice] = 0;
		AracIlan(CarData[id][carVehicle]);
		Car_Save(id);

	} else RemovePlayerFromVehicle(playerid);
	return 1;
}

Dialog:AracAlimOnayGaleri(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new id = Car_GetID(GetPlayerVehicleID(playerid)), yeniid;
	    if(CarData[id][carPrice] <= 0) return 1;
	    if(GetMoney(playerid) < CarData[id][carPrice] ) return SendErrorMessage(playerid, "Yeterli paranýz yok. (%s)", FormatNumber(CarData[id][carPrice]));

        Log_Write("logs/purchase_log.txt", "[%s] %s adli oyuncu %s odeyerek %s model arac satin aldi. (Arac SQL ID: %d)", ReturnDate(), ReturnName(playerid, 0), FormatNumber(CarData[id][carPrice]), ReturnVehicleModelName(CarData[id][carModel]), id);

        GiveMoney(playerid, -CarData[id][carPrice]);

		yeniid = Car_Create(PlayerData[playerid][pID], CarData[id][carModel], 1240.5269,-1237.1967,13.2279,296.8823, random(127), random(127), 0);

		if (yeniid == -1)
		    return SendErrorMessage(playerid, "Sunucu maksimum araç sayýsýna ulaþmýþ.");

		SendServerMessage(playerid, "Satýn aldýðýnýz araç galerinin arkasýna getirildi. (/agps) ( ID: %d )", CarData[id][carVehicle]);

	} else RemovePlayerFromVehicle(playerid);
	return 1;
}

/*Dialog:AracKiraFiyati(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new id = GetPVarInt(playerid, "DAI");
		new miktar = strval(inputtext);


		if(isnull(inputtext))
		{
			CarData[id][carKiralik] = 0;
			CarData[id][carKiraUcret] = 0;
			CarData[id][carAnahtar] = -1;
			AracIlan(CarData[id][carVehicle]);
	    	SendServerMessage(playerid, "Araç artýk kiralanamayacak.");
	    	return 1;
		}
		if(miktar < 100 || miktar > 500) return SendErrorMessage(playerid, "Miktar en az $100, en fazla $500 olabilir.");
		if(!IsNumeric(inputtext)) return SendErrorMessage(playerid, "Geçersiz miktar girdiniz.");
		CarData[id][carKiralik] = 1;
		CarData[id][carKiraUcret] = miktar;
    	SendServerMessage(playerid, "Araç artýk %s'a 1 saatliðine kiralanabilecek.", FormatNumber(CarData[id][carKiraUcret]));
    	Car_Save(id);
    	cmd_arac(playerid, "\1");
    	AracIlan(CarData[id][carVehicle]);
 	}
	return 1;
}


Dialog:AracSatisFiyati(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new id = GetPVarInt(playerid, "DAI");
		new miktar = strval(inputtext);

		if(isnull(inputtext))
		{
			CarData[id][carPrice] = 0;
			AracIlan(CarData[id][carVehicle]);
	    	SendServerMessage(playerid, "Araç artýk satýþta deðil.");
	    	return 1;
		}
		if(miktar < 1) return SendErrorMessage(playerid, "Miktar en az $1 olmalýdýr.");
		if(!IsNumeric(inputtext)) return SendErrorMessage(playerid, "Geçersiz miktar girdiniz.");
		CarData[id][carPrice] = miktar;
    	SendServerMessage(playerid, "Araç %s'a satýþa çýkartýldý.", FormatNumber(CarData[id][carPrice]));
    	Car_Save(id);
    	cmd_arac(playerid, "\1");
    	AracIlan(CarData[id][carVehicle]);
 	}
	return 1;
}*/

CMD:evlilik(playerid, params[])
{
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, 1963.9792,-369.6778,1093.7289))
	    return SendErrorMessage(playerid, "Evlenmek için kilisede olmalýsýn.");

	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/evlilik [id]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Oyuncu oyunda deðil veya sana yakýn deðil.");

	if(userid == playerid)
	    return SendErrorMessage(playerid, "Kendinle evlenemezsin.");

	if(PlayerData[playerid][pPartner] != 0 || PlayerData[userid][pPartner] != 0 )
	    return SendErrorMessage(playerid, "Evlilik için iki çiftinde partneri olmamasý gereklidir.");

    PlayerData[userid][pPartnerTeklif] = playerid;
    SendServerMessage(playerid, "%s'a evlenme teklifi yolladýn, cevabý bekleniyor.", ReturnName(userid, 0));
    SendServerMessage(userid, "%s sana evlenme teklifi yolladý. (/kabulet evlilik)", ReturnName(playerid, 0));

	return 1;
}


Dialog:Hukumet(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		switch(listitem)
		{
			case 0:
			{
				static
				    string[MAX_PLAYER_TICKETS * 64];

				//if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.2687, 171.5613, 1008.3828))
				  //  return SendErrorMessage(playerid, "Ceza ödemek için þehir salonunda olmalýsýn.");

				string[0] = 0;

				for (new i = 0; i < MAX_PLAYER_TICKETS; i ++)
				{
				    if (TicketData[playerid][i][ticketExists])
				        format(string, sizeof(string), "%s%s (%s - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);

					else format(string, sizeof(string), "%sBoþ\n", string);
				}
				return Dialog_Show(playerid, MyTickets, DIALOG_STYLE_LIST, "Cezalarým", string, "Öde", "{FF6347}Iptal");
			}
			case 1:
			{
			//	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.1653, 175.8127, 1008.3828))
			//	    return SendErrorMessage(playerid, "Ceza ödemek için þehir salonunda olmalýsýn.");

				new
				    string[32 * MAX_OWNABLE_CARS],
					count;

				for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && Car_IsOwner(playerid, i) && (CarData[i][carImpounded] != -1 || CarData[i][carImpoundPrice] > 0))
				{
					format(string, sizeof(string), "%s%d: %s (%s)\n", string, count + 1, ReturnVehicleName(CarData[i][carVehicle]), FormatNumber(CarData[i][carImpoundPrice]));
			        ListedVehicles[playerid][count++] = i;
				}
				if (!count)
				    SendErrorMessage(playerid, "Baðlanmýþ aracýn yok.");

				else Dialog_Show(playerid, ReleaseCar, DIALOG_STYLE_LIST, "Araç Cezasý Ödeme", string, "Seç", "{FF6347}Iptal");
			}
			case 2:
			{
				if(GetMoney(playerid) < 1500) return SendErrorMessage(playerid, "Boþanmak için $1500'e sahip olmalýsýn.");
				Dialog_Show(playerid, Bosandirma, DIALOG_STYLE_MSGBOX, "Boþanma", "{FFFFFF}$1,500 karþýlýðýnda eþinden boþanmayý onaylýyor musun?", "Evet", "{FF6347}Hayýr");
			}
			case 3:
			{
				new count, string[1024];
			    /*	for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(playerid, i)) {
			        format(string, sizeof(string), "%s%d - Ev\t%s\t{2ECC71}%s\n", string, i, HouseData[i][houseAddress]);
				    count++;
				}
				for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i) && BusinessData[i][bizOwner] != 99999999) {
				    format(string, sizeof(string), "%s%d - Ýþyeri\t%s\t{2ECC71}%s\n", string, i, BusinessData[i][bizName]);
				    count++;
				}*/
				for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
				    format(string, sizeof(string), "%s%d - Araç\t%s\t{2ECC71}%s\n", string, i, ReturnVehicleModelName(CarData[i][carModel]), FormatNumber(CarData[i][carVergi]));
				    count++;
				}
				if(count == 0) return SendErrorMessage(playerid, "Ödenmemiþ verginiz yok.");
				Dialog_Show(playerid, VergiOde, DIALOG_STYLE_TABLIST, "Vergi Öde", string, "Hepsini Öde", "{FF6347}Iptal");
			}
			case 4:
			{
				if(GetMoney(playerid) < 5000) return SendErrorMessage(playerid, "Pasaport satýn almak için 5,000 dolara ihtiyacýnýz var.");
				Dialog_Show(playerid, pasaport, DIALOG_STYLE_MSGBOX, "Pasaport Ýþlemleri", "{FFFFFF}$5,000'e Pasaport almayý onaylýyor musunuz?", "Evet", "{FF6347}Hayýr");
			}
		}
	}
	return 1;
}

Dialog:Hastane(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		switch(listitem)
		{
			case 0:
			{
			    if(GetMoney(playerid) < 3500) return SendErrorMessage(playerid, "Yeterli paranýz yok.");
				Dialog_Show(playerid, Market_Cinsiyet, DIALOG_STYLE_LIST, "{2F4F4F}Hastane - {FFFFFF}Cinsiyet Deðiþtirme", "{FFFFFF}Erkek\nKadýn", "Deðiþtir", "{FF6347}Iptal");
			}
		}
	}
	return 1;
}

CMD:govdurum(playerid, params[])
{

	if (GetFactionType(playerid) == FACTION_GANG || GetFactionType(playerid) == FACTION_NEWS )
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir !");

     if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Gereken rütbe; %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	if (!GOV)
	{
		GOV = true;
	    SendClientMessageToAllEx(COLOR_GRAD2, "[ *** *** DEVLET HABERLERÝ *** *** ]");
	}
	else if (GOV)
	{
		GOV = false;
	    SendClientMessageToAllEx(COLOR_GRAD2, "[ *** *** DEVLET HABERLERÝ KAPANIÞ *** *** ]");
	}

    return 1;
}

CMD:gov(playerid, params[])
{

	if (GetFactionType(playerid) == FACTION_GANG || GetFactionType(playerid) == FACTION_NEWS )
		return SendErrorMessage(playerid, "Bu komutu sadece devlet kurumlarý kullanabilir !");

	 if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Gereken rütbe; %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);


    if (!GOV)
		return SendErrorMessage(playerid, "GOV yayýný baþlatýlmamýþ.");

	if (GOV)
	{
	    SendClientMessageToAllEx(GetPlayerColor(playerid), "** %s %s : {FFFFFF}%s ** ", Faction_GetRank(playerid),ReturnName(playerid, 0), params);
	}

    return 1;
}

Dialog:Bosandirma(playerid, response, listitem, inputtext[]) {

	if(response)
 	{
 	    if(PlayerData[playerid][pPartner] == 0)
 	        return SendErrorMessage(playerid, "Kimseyle evli deðilsiniz.");
	    new string[1024];
	    GiveMoney(playerid, -1500);
		Tax_AddMoney(1500);
        PlayerData[playerid][pPartner] = 0;
        format(string, sizeof(string), "UPDATE `characters` SET `Partner` = '0' WHERE `Partner` = '%d'", PlayerData[playerid][pID]);
		mysql_tquery(g_iHandle, string);
		foreach (new i : Player) if (PlayerData[i][pPartner] == PlayerData[playerid][pID]) {
		    PlayerData[i][pPartner] = 0;
		}
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s boþanma evraklarýný imzalar.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:pasaport(playerid, response, listitem, inputtext[]) {

	if(response)
 	{
 	    if(PlayerData[playerid][pPasaport] == 1)
 	        return SendErrorMessage(playerid, "Zaten bir pasaportunuz var.");
		if (PlayerData[playerid][pLevel] < 2)
			return SendErrorMessage(playerid, "2 seviye ve üzeri olmadan bir pasaporta sahip olamazsýnýz.");
	    new string[1024];
	    GiveMoney(playerid, -5000);
		Tax_AddMoney(5000);
        PlayerData[playerid][pPasaport] = 1;
       	format(string, sizeof(string), "UPDATE `characters` SET `Pasaport` = '1' WHERE `Pasaport` = '%d'", PlayerData[playerid][pPasaport]);
		mysql_tquery(g_iHandle, string);
		foreach (new i : Player) if (PlayerData[i][pPasaport] == PlayerData[playerid][pPasaport]) {
		    PlayerData[i][pPasaport] = 1;
		}
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s pasaport satýn alýr.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:twithdraw(playerid, params[])
{
	static
	    amount;

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You are not a government official.");


	if (sscanf(params, "d", amount))
		return SendSyntaxMessage(playerid, "/twithdraw [amount] (%s available)", FormatNumber(g_TaxVault));

	if (!IsPlayerInCityHall(playerid))
	    return SendErrorMessage(playerid, "You must be inside City Hall to do this.");

	if (amount < 1 || amount > g_TaxVault)
	    return SendErrorMessage(playerid, "Invalid amount specified.");

    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	Tax_AddMoney(-amount);

	GiveMoney(playerid, amount);
	SendServerMessage(playerid, "You have withdrawn %s from the treasury (%s available).", FormatNumber(amount), FormatNumber(g_TaxVault));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has withdrawn %s from the treasury.", ReturnName(playerid, 0), FormatNumber(amount));
	Log_Write("logs/tax_vault.txt", "[%s] %s has withdrawn %s from the treasury.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount));
	return 1;
}

CMD:tdeposit(playerid, params[])
{
	static
	    amount;

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You are not a government official.");

	if (sscanf(params, "d", amount))
		return SendSyntaxMessage(playerid, "/tdeposit [amount] (%s available)", FormatNumber(g_TaxVault));

    if (!IsPlayerInCityHall(playerid))
	    return SendErrorMessage(playerid, "You must be inside City Hall to do this.");

	if (amount < 1 || amount > GetMoney(playerid))
	    return SendErrorMessage(playerid, "Invalid amount specified.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	Tax_AddMoney(amount);

	GiveMoney(playerid, -amount);
	SendServerMessage(playerid, "You have deposited %s into the treasury (%s available).", FormatNumber(amount), FormatNumber(g_TaxVault));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has deposited %s into the treasury.", ReturnName(playerid, 0), FormatNumber(amount));
	Log_Write("logs/tax_vault.txt", "[%s] %s has deposited %s into the treasury.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount));
	return 1;
}

CMD:dtel(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/dtel [ayar]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[AYARLAR]:{FFFFFF} koy, kaldir, hepsinikaldir");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "koy", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Önce araçtan inmen gerekir.");

	    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 1;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(2899, fX, fY, fZ - 0.8, 0.0, 0.0, fA + 90.0);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir dikenli tel koyar.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADYO: %s bir dikenli tel koydu. (Bölge: %s)", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		SendErrorMessage(playerid, "Sunucu dikenli tel sýnýrýna ulaþmýþtýr.");
	}
	else if (!strcmp(params, "kaldir", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s dikenli teli kaldýrýr.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADYO: %s dikenli teli kaldýrdý. (Bölge: %s)", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "Herhangi bir dikenli tel yanýnda deðilsin.");
	}
	else if (!strcmp(params, "hepsinikaldir", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1)
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

			DestroyDynamicObject(BarricadeData[i][cadeObject]);
		}
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADYO: %s tüm dikenli telleri kaldýrdý.", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:gozbagla(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Goz Bagi"))
        return SendErrorMessage(playerid, "Göz Baðýn yok.");


    new userid;
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/gozbagla [oyuncu/id]");

	new Float:ppos[3];
	GetPlayerPos(userid, ppos[0], ppos[1], ppos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, ppos[0], ppos[1], ppos[2])) return SendErrorMessage(playerid, "Oyuncu yanýnýzda deðil.");

    if(!GetPVarInt(userid, "GozBagiDurum"))
	{
 	   // if(!spamProtect(playerid, "IpBagProtect", 60))  return SendErrorMessage(playerid, "Baðlama iþlemini 60 saniyede bir kullanabilirsiniz.");
 	    SetPVarInt(userid, "GozBaglayan", playerid);
	    SetPVarInt(userid, "GozBagiDurum", false);
	    Dialog_Show(userid, GozBaglaOnay, DIALOG_STYLE_MSGBOX, "Göz Baðý", "{00FF00}%s {FFFFFF}gözlerini baðlamak istiyor, onaylýyor musun?", "Evet", "Hayýr");
	}
return 1;
}
Dialog:GozBaglaOnay(playerid, response, listitem, inputtext[])
{
 	new userid = GetPVarInt(playerid, "GozBaglayan");
	if(response)
	{
	    new Float:ppos[3];
		GetPlayerPos(userid, ppos[0], ppos[1], ppos[2]);
		if(!IsPlayerInRangeOfPoint(userid, 5.0, ppos[0], ppos[1], ppos[2])) return SendErrorMessage(playerid, "Gözlerinizi baðlayan kiþi yanýnýzda deðil.");
		SetPVarInt(playerid, "GozBagiDurum", false);
	    TogglePlayerControllable(playerid, 0);
	    SendNearbyMessage(userid, 30.0, COLOR_CYAN, "* %s, %s'nýn gözlerini baðlar.", ReturnName(playerid, 0),  ReturnName(userid, 0));
	} else {
		SendServerMessage(userid, "%s göz baðlama isteðini reddetti.", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:ipbagla(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Ip"))
        return SendErrorMessage(playerid, "Ýp yok.");

    new userid;
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/ipbagla [oyuncu/id]");

	new Float:ppos[3];
	GetPlayerPos(userid, ppos[0], ppos[1], ppos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, ppos[0], ppos[1], ppos[2])) return SendErrorMessage(playerid, "Oyuncu yanýnýzda deðil.");

    if(!GetPVarInt(userid, "IpDurum"))
	{
 	  //  if(!spamProtect(playerid, "IpBagProtect", 60))  return SendErrorMessage(playerid, "Baðlama iþlemini 60 saniyede bir kullanabilirsiniz.");
 	    SetPVarInt(userid, "IpBaglayan", playerid);
	    SetPVarInt(userid, "IpDurum", false);
	    Dialog_Show(userid, IpBaglaOnay, DIALOG_STYLE_MSGBOX, "Ýp Baðý", "{00FF00}%s {FFFFFF}seni baðlamak istiyor, onaylýyor musun?", "Evet", "Hayýr", ReturnName(userid, 0));
	}
	else
	{
	    TogglePlayerControllable(userid, 1);
	    SetPVarInt(userid, "IpDurum", true);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s, %s'nýn iplerini çözer.", ReturnName(playerid, 0),  ReturnName(userid, 0));
	}
	SendServerMessage(playerid, "Baðlama isteði %s'a gönderildi.", ReturnName(userid, 0));
	return 1;
}

Dialog:IpBaglaOnay(playerid, response, listitem, inputtext[])
{
    new userid = GetPVarInt(playerid, "IpBaglayan");

	if(response)
	{
	    new Float:ppos[3];
		GetPlayerPos(userid, ppos[0], ppos[1], ppos[2]);
		if(!IsPlayerInRangeOfPoint(userid, 5.0, ppos[0], ppos[1], ppos[2])) return SendErrorMessage(playerid, "Sizi baðlayan yanýnýzda deðil.");
		SetPVarInt(playerid, "IpDurum", false);
	    TogglePlayerControllable(playerid, 0);
	    SendNearbyMessage(userid, 30.0, COLOR_CYAN, "* %s, %s'ý ip ile baðlar.", ReturnName(playerid, 0),  ReturnName(userid, 0));
	} else {
		SendServerMessage(userid, "%s baðlama isteðini reddetti.", ReturnName(playerid, 0));
	}
	return 1;
}
Dialog:SivilSkin(playerid, response, listitem, inputtext[])
{
if(response)
{
if(strval(inputtext) < 1 || strval(inputtext) > 299) return SendErrorMessage(playerid, "1'den 299'a kadar skin bulunmaktadýr!");

SetPlayerSkin(playerid, strval(inputtext));
PlayerData[playerid][pSkin] = strval(inputtext);
SendServerMessage(playerid, "Sivil kýyafetin seçildi!");
SendNearbyMessage(playerid, 45.0, COLOR_CYAN, "** %s dolabý açarak üniformasýný dolaba býraktý.", ReturnName(playerid, 0));
SetPlayerColor(playerid, DEFAULT_COLOR);
}
return 1;
}
CMD:an(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You are not permitted to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/an [id]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!strlen(PlayerData[userid][pNameChange]))
	    return SendErrorMessage(playerid, "Oyuncu isim deðiþikliði isteðinde bulunmamýþ.");


	SendServerMessage(playerid, "%s adlý oyuncunun yeni adý %s olarak deðiþtirildi.", ReturnName(userid, 0), PlayerData[userid][pNameChange]);
    SendServerMessage(userid, "%s adlý yetkili adýný %s olarak deðiþtirdi.", ReturnName(playerid, 0), PlayerData[userid][pNameChange]);

    ChangeName(userid, PlayerData[userid][pNameChange]);
	PlayerData[userid][pNameChange][0] = '\0';
	IC_Sicil_Reset(userid);
	if(PlayerData[userid][pLevel] != 1)
	{
	   	GiveMoney(userid, -5500);
	}
	return 1;
}

stock IC_Sicil_Reset(playerid)
{
	new query[128];
   	format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
  	mysql_tquery(g_iHandle, query);
	PlayerData[playerid][pWarrants] = 0;
	return 1;
}

CMD:dn(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "You are not permitted to use this command.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/dn [id]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (!strlen(PlayerData[userid][pNameChange]))
	    return SendErrorMessage(playerid, "Oyuncu isim deðiþikliði isteðinde bulunmamýþ.");

	SendServerMessage(playerid, "%s adlý oyuncunun %s isim deðiþikliðini ret ettiniz.", ReturnName(userid, 0), PlayerData[userid][pNameChange]);
    SendServerMessage(userid, "%s adlý yetkili %s isim deðiþikliðini ret ettini.", ReturnName(playerid, 0), PlayerData[userid][pNameChange]);

	PlayerData[userid][pNameChange][0] = '\0';
	return 1;
}

CMD:hesapsil(playerid, params[])
{
	static
	    query[64];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/hesapsil [Hesap Adý]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "Böyle bir hesap bulunmamaktadýr!");

	foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], params, true)) {
	    return SendErrorMessage(playerid, "Sileceðin hesap þuan çevrimiçi durumda.");
	}
	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	mysql_function_query(g_iHandle, query, true, "OnDeleteAccount", "ds", playerid, params);

	return 1;
}


CMD:gateolustur(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	id = Gate_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu gate limitini aþmýþ!");

	SendServerMessage(playerid, "Baþarýyla gate oluþturdun! ID: %d.", id);
	return 1;
}

CMD:gatesil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/gatesil [Gate id]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SendErrorMessage(playerid, "Geçersiz gate idsi girdin!");

	Gate_Delete(id);
	SendServerMessage(playerid, "Baþarýyla gateyý sildin! ID: %d.", id);
	return 1;
}
CMD:objeekle(playerid, params[])
{
 	if (GetFactionType(playerid) != FACTION_POLICE)  return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
 	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Araçtayken bu komutu kullanamazsýn!");
 	ShowPlayerDialog(playerid, COPOBJECTS_DIALOG, DIALOG_STYLE_LIST, "Polis Objeleri: Kategoriler", "Barikat\nTabela\nÞerit\nÇivi\nHýz Radarý", "Koy", "Iptal");
	return 1;
}

CMD:objeduzenle(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE)  return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
	if(EditingCopObjectID[playerid] != -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Þu an zaten bir obje düzenliyorsun!");
	if(isnull(params)) return SendClientMessage(playerid, 0xF39C12FF, "KULLANIM: {FFFFFF}/objeduzenle [id]");
	new id = strval(params[0]);
	if(!(0 <= id <= MAX_COP_OBJECTS - 1)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Geçersiz obje ID'si!");
	if(!CopObjectData[id][ObjCreated]) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Böyle bir obje ID'si yok!");
	if(!IsPlayerInRangeOfPoint(playerid, 16.0, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ])) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Herhangi bir objenin yakýnýnda deðilsin.");
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	if(!IsPlayerAdmin(playerid) && strcmp(CopObjectData[id][Owner], name)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu obje sana ait deðil, düzenleyemezsin!");
    EditingCopObjectID[playerid] = id;
	EditDynamicObject(playerid, CopObjectData[id][ObjID]);
	return 1;
}

CMD:objegit(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu komutu sadece RCON'lar kullanabilir!");
	if(isnull(params)) return SendClientMessage(playerid, 0xF39C12FF, "KULLANIM: {FFFFFF}/objegit [id]");
	new id = strval(params[0]);
	if(!(0 <= id <= MAX_COP_OBJECTS - 1)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Obje ID'sý geçerli deðil!");
	if(!CopObjectData[id][ObjCreated]) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Obje ID'sý geçerli deðil!");
	SetPlayerPos(playerid, CopObjectData[id][ObjX], CopObjectData[id][ObjY], CopObjectData[id][ObjZ] + 1.75);
	SetPlayerInterior(playerid, CopObjectData[id][ObjInterior]);
	SetPlayerVirtualWorld(playerid, CopObjectData[id][ObjVirtualWorld]);
	SendClientMessage(playerid, -1, "Objeye teleportlandýn!");
	return 1;
}

CMD:objesil(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE)  return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
	if(isnull(params)) return SendClientMessage(playerid, 0xF39C12FF, "KULLANIM: {FFFFFF}/objesil [id]");
	new id = strval(params[0]);
	if(!(0 <= id <= MAX_COP_OBJECTS - 1)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Geçersiz obje ID'si!");
	if(!CopObjectData[id][ObjCreated]) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Böyle bir obje yok!");
	if(EditingCopObjectID[playerid] == id) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Düzenlediðin objeyi silemezsin!");
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	if(!IsPlayerAdmin(playerid) && strcmp(CopObjectData[id][Owner], name)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu obje sana ait deðil, silemezsin!");
	CopObjectData[id][ObjCreated] = false;
	DestroyDynamicObject(CopObjectData[id][ObjID]);
	DestroyDynamic3DTextLabel(CopObjectData[id][ObjLabel]);
	if(IsValidDynamicArea(CopObjectData[id][ObjArea])) DestroyDynamicArea(CopObjectData[id][ObjArea]);
	CopObjectData[id][ObjID] = -1;
	CopObjectData[id][ObjLabel] = Text3D: -1;
	CopObjectData[id][ObjArea] = -1;
	stmt_bind_value(RemoveObject, 0, DB::TYPE_INTEGER, id);
	stmt_execute(RemoveObject);

	SendClientMessage(playerid, -1, "Obje silindi.");
	return 1;
}
CMD:destroyobject(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/objesil [Obje ID]");

	if ((id < 0 || id >= MAX_OBJECTS) || !ObjectData[id][objectVarmi])
	    return SendErrorMessage(playerid, "Geçersiz obje idsi girdiniz.");

	Object_Delete(id);
	SendServerMessage(playerid, "%d idli objeyi baþarýyla sildin.", id);
	return 1;
}

CMD:gateduzenle(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/gateduzenle [id] [parametre]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETRE]:{FFFFFF} lokasyon, hiz, acilisnoktasi, kapanmahizi, obje, pos, move, pass, linkid, faction");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SendErrorMessage(playerid, "Geçersiz gate id'si girdiniz.");

    if (!strcmp(type, "lokasyon", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý admin %d idli gatenin lokasyonunu deðiþtirdi.", ReturnName(playerid, 0), id);
		return 1;
	}
	else if (!strcmp(type, "hiz", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return SendSyntaxMessage(playerid, "/gateduzenle [ID] [hiz] [hiz miktarý]");

		if (speed < 0.0 || speed > 20.0)
		    return SendErrorMessage(playerid, "Hýz 0'dan aþaðý 20'den yüksek olamaz.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý admin %d idli gatenin hýzýný %.2f olarak ayarladý.", ReturnName(playerid, 0), id, speed);
		return 1;
	}
	else if (!strcmp(type, "acilisnoktasi", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return SendSyntaxMessage(playerid, "/gateduzenle [id] [açýlýþ noktasý] [açýlýþ noktasý parametresi]");

		if (radius < 0.0 || radius > 20.0)
		    return SendErrorMessage(playerid, "0'dan aþaðý, 20'den yüksek olamaz!");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý admin %d idli gatenin açýlýþ noktasýný %.2f olarak ayarladý.", ReturnName(playerid, 0), id, radius);
		return 1;
	}
	else if (!strcmp(type, "kapanmahizi", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return SendSyntaxMessage(playerid, "/gateduzenle [Id] [kapanmahizi] [kapanmahizi] (0 ile devre dýþý)");

		if (time < 0 || time > 60000)
		    return SendErrorMessage(playerid, "0'dan aþaðý, 60.000'dan yüksek olamaz.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý admin %d idli gatenin kapanma hýzýný %d olarak ayarladý.", ReturnName(playerid, 0), id, time);
		return 1;
	}
	else if (!strcmp(type, "obje", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SendSyntaxMessage(playerid, "/gateduzenle [ID] [obje] [obje id]");

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý admin %d idli gatenin objesini %d olarak ayarladý.", ReturnName(playerid, 0), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 1;

		SendServerMessage(playerid, "You are now adjusting the position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "move", true))
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 2;

		SendServerMessage(playerid, "You are now adjusting the moving position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return SendSyntaxMessage(playerid, "/editgate [id] [linkid] [gate link] (-1 for none)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return SendErrorMessage(playerid, "You have specified an invalid gate ID.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		if (id == -1)
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the faction of gate ID: %d to no gate.", ReturnName(playerid, 0), id);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the faction of gate ID: %d to ID: %d.", ReturnName(playerid, 0), id, linkid);

		return 1;
	}
	else if (!strcmp(type, "faction", true))
	{
	    static
	        factionid = -1;

		if (sscanf(string, "d", factionid))
		    return SendSyntaxMessage(playerid, "/editgate [id] [faction] [gate faction] (-1 for none)");

        if ((factionid < -1 || factionid >= MAX_FACTIONS) || (factionid != -1 && !FactionData[factionid][factionExists]))
	    	return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

        GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionData[factionid][factionID]);
		Gate_Save(id);

		if (factionid == -1)
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the faction of gate ID: %d to no faction.", ReturnName(playerid, 0), id);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the faction of gate ID: %d to \"%s\".", ReturnName(playerid, 0), id, FactionData[factionid][factionName]);

		return 1;
	}
	else if (!strcmp(type, "pass", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return SendSyntaxMessage(playerid, "/editgate [id] [pass] [gate password] (Use 'none' to disable)");

		if (!strcmp(params, "none", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the password of gate ID: %d to %s.", ReturnName(playerid, 0), id, pass);
		return 1;
	}
	return 1;
}

CMD:editobject(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editobject [id] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} location, model, pos, owner, removeowner.");
		return 1;
	}
	if ((id < 0 || id >= MAX_OBJECTS) || !ObjectData[id][objectVarmi])
	    return SendErrorMessage(playerid, "You have specified an invalid object ID.");

    if (!strcmp(type, "location", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		ObjectData[id][objectPos][0] = x;
		ObjectData[id][objectPos][1] = y;
		ObjectData[id][objectPos][2] = z;
		ObjectData[id][objectPos][3] = 0.0;
		ObjectData[id][objectPos][4] = 0.0;
		ObjectData[id][objectPos][5] = angle;

		SetDynamicObjectPos(ObjectData[id][objectObject], x, y, z);
		SetDynamicObjectRot(ObjectData[id][objectObject], 0.0, 0.0, angle);

		Object_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the position of object ID: %d.", ReturnName(playerid, 0), id);
		return 1;
	}
	else if (!strcmp(type, "model", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SendSyntaxMessage(playerid, "/editobject [id] [model] [object model]");

	//	if (model < 0 || model > 20000)
	//	    return SendErrorMessage(playerid, "Invalid object model.");

        ObjectData[id][objectModel] = model;

		DestroyDynamicObject(ObjectData[id][objectObject]);
		ObjectData[id][objectObject] = CreateDynamicObject(ObjectData[id][objectModel], ObjectData[id][objectPos][0], ObjectData[id][objectPos][1], ObjectData[id][objectPos][2], ObjectData[id][objectPos][3], ObjectData[id][objectPos][4], ObjectData[id][objectPos][5], ObjectData[id][objectWorld], ObjectData[id][objectInterior]);

		Object_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the model of object ID: %d to %d.", ReturnName(playerid, 0), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, ObjectData[id][objectObject]);

		PlayerData[playerid][pEditObject] = id;
		PlayerData[playerid][pEditType] = 1;

		SendServerMessage(playerid, "You are now adjusting the position of object ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "owner", true))
	{
	    new giveplayerid;

	    if (sscanf(string, "d", giveplayerid))
	        return SendSyntaxMessage(playerid, "/editobject [id] [(remove)owner] [playerid]");

        if (giveplayerid == INVALID_PLAYER_ID)
	    	return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil.");

		ObjectData[id][objectOwner] = GetPlayerSQLID(giveplayerid);

	    Object_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the owner of object ID: %d", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "removeowner", true))
	{
	    if (sscanf(string, "d"))
	        return SendSyntaxMessage(playerid, "/editobject [id] [removeowner]");

		ObjectData[id][objectOwner] = 0;

	    Object_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has removed the owner of object ID: %d", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:aparaver(playerid, params[])
{
	static
		userid,
	    amount;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ud", userid, amount))
		return SendSyntaxMessage(playerid, "/aparaver [ID] [Miktar]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	GiveMoney(userid, amount);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncuya %s miktarýnda para yolladý!", ReturnName(playerid, 0), ReturnName(userid, 0), FormatNumber(amount));
 	Log_Write("logs/admin_log.txt", "[%s] %s has given %s to %s.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));

	return 1;
}
CMD:uyusturucularim(playerid, params[])
{
SendClientMessageEx(playerid, COLOR_DARKGREEN, "_____________________[Uyuþturucularýnýz]____________________");
SendClientMessageEx(playerid, COLOR_WHITE, "Ekstazi: [%d] Kokain: [%d] Marijuana: [%d] Eroin: [%d] Skunk: [%d] LSD: [%d]", Inventory_Count(playerid, "Ekstazi"), Inventory_Count(playerid, "Kokain"), Inventory_Count(playerid, "Marijuana"), Inventory_Count(playerid, "Eroin"), Inventory_Count(playerid, "Skunk"), Inventory_Count(playerid, "LSD"));
return 1;
}
CMD:ukullan(playerid, params[])
{
	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/ukullan [ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} marijuana, skunk, ekstazi, kokain, eroin, lsd");
		return 1;
	}
	if (PlayerData[playerid][pDrugTime] > 0)
	    return SendErrorMessage(playerid, "Uyuþturucu etkilerinin bitmesini bekleyin.");

	if (!strcmp(params, "marijuana", true))
	{
	    if (Inventory_Count(playerid, "Marijuana") < 2)
	        return SendErrorMessage(playerid, "Marijuana içmek için en az 2 gram gerekir.");

        PlayerData[playerid][pDrugTime] = 240;
		PlayerData[playerid][pDrugUsed] = 1;
		SetPlayerArmour(playerid, 15);
		SetPlayerWeather(playerid, -66);
        if(ReturnHealth(playerid) < 85) CanDegistir(playerid, ReturnHealth(playerid)+10);
		Inventory_Remove(playerid, "Marijuana", 2);
		PlayerData[playerid][pDependTime] = gettime()+(30*1);
		SetPlayerDrunkLevel(playerid, 4999);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		PlayerData[playerid][pTotalUsed]++;
        PlayerData[playerid][pUyusturucu] = SetTimerEx("MariEtki", 15000, true, "d", playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendServerMessage(playerid, "Marijuana kullandýðýnýz için kafanýz 4 dakika boyunca güzel olacak.");
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cebinden çarþaf çýkartýr, 2 gram marijuana'ý çarþafýn içine serpiþtirir.", ReturnName(playerid, 0));
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s ve çakmaðý yardýmýyla yakar.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "kokain", true))
	{
	    if (Inventory_Count(playerid, "Kokain") < 2)
	        return SendErrorMessage(playerid, "Kokain içmek için en az 2 gram gerekir.");

        PlayerData[playerid][pDrugTime] = 240;
        SetPlayerArmour(playerid, 15);
		PlayerData[playerid][pDrugUsed] = 2;
		SetPlayerWeather(playerid, -66);
        if(ReturnHealth(playerid) < 85) CanDegistir(playerid, ReturnHealth(playerid)+10);
		Inventory_Remove(playerid, "Kokain", 2);
		SetPlayerDrunkLevel(playerid, 4999);
		PlayerData[playerid][pDependTime] = gettime()+(30*1);
		PlayerData[playerid][pTotalUsed]++;
        PlayerData[playerid][pUyusturucu] = SetTimerEx("KokoEtki", 15000, true, "d", playerid);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendServerMessage(playerid, "Kokain kullandýðýnýz için kafanýz 4 dakika boyunca güzel olacak.");
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir kokain alýr ve onu burnuna çeker.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "ekstazi", true))
	{
	    if (Inventory_Count(playerid, "Ekstazi") < 2)
	        return SendErrorMessage(playerid, "Ekstazi içmek için en az 2 gram gerekir.");

        PlayerData[playerid][pDrugTime] = 300;
        SetPlayerArmour(playerid, 15);
		PlayerData[playerid][pDrugUsed] = 2;
		SetPlayerWeather(playerid, -66);
        if(ReturnHealth(playerid) < 85) CanDegistir(playerid, ReturnHealth(playerid)+10);
		Inventory_Remove(playerid, "Ekstazi", 2);
		SetPlayerDrunkLevel(playerid, 4999);
		//setplayergamespeed(playerid, 2);
		PlayerData[playerid][pDependTime] = gettime()+(30*1);
		PlayerData[playerid][pTotalUsed]++;
        PlayerData[playerid][pUyusturucu] = SetTimerEx("LsdEtki", 15000, true, "d", playerid);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendServerMessage(playerid, "Ekstazi kullandýðýnýz için kafanýz 5 dakika boyunca güzel olacak.");
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s elini cebine atar ekstazi'i alýp aðzýna atar.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "skunk", true))
	{
	    if (Inventory_Count(playerid, "Skunk") < 2)
	        return SendErrorMessage(playerid, "Skunk içmek için en az 2 gram gerekir.");

        PlayerData[playerid][pDrugTime] = 120;
        SetPlayerArmour(playerid, 15);
		PlayerData[playerid][pDrugUsed] = 2;
		SetPlayerWeather(playerid, -66);
        if(ReturnHealth(playerid) < 85) CanDegistir(playerid, ReturnHealth(playerid)+10);
		Inventory_Remove(playerid, "Skunk", 2);
		//setplayergamespeed(playerid, 3);
		SetPlayerDrunkLevel(playerid, 4999);
		PlayerData[playerid][pDependTime] = gettime()+(30*1);
		PlayerData[playerid][pTotalUsed]++;
        PlayerData[playerid][pUyusturucu] = SetTimerEx("SkunkEtki", 5000, true, "d", playerid);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendServerMessage(playerid, "Skunk kullandýðýnýz için kafanýz 2 dakika boyunca güzel olacak.");
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s cebinden çarþaf çýkartýr, 2 gram skunk'u çarþafýn içine serpiþtirir.", ReturnName(playerid, 0));
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s ve çakmaðý yardýmýyla yakar.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "eroin", true))
	{
	    if (Inventory_Count(playerid, "Eroin") < 2)
	        return SendErrorMessage(playerid, "Eroin içmek için en az 2 gram gerekir.");

        PlayerData[playerid][pDrugTime] = 300;
        SetPlayerArmour(playerid, 15);
        SetPlayerDrunkLevel(playerid, 4999);
		PlayerData[playerid][pDrugUsed] = 3;
		PlayerData[playerid][pDependTime] = gettime()+(30*1);
		SetPlayerWeather(playerid, -66);
        if(ReturnHealth(playerid) < 85) CanDegistir(playerid, ReturnHealth(playerid)+10);
		Inventory_Remove(playerid, "Eroin", 2);
		//setplayergamespeed(playerid, 8);
		PlayerData[playerid][pTotalUsed]++;
        PlayerData[playerid][pUyusturucu] = SetTimerEx("LsdEtki", 10000, true, "d", playerid);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendServerMessage(playerid, "Eroin kullandýðýnýz için kafanýz 5 dakika boyunca güzel olacak.");
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir eroin alýr ve onu enjekte eder.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "lsd", true))
	{
	    if (!Inventory_HasItem(playerid, "LSD"))
	        return SendErrorMessage(playerid, "En az bir lsd gerekir.");

        PlayerData[playerid][pDrugTime] = 480;
        SetPlayerArmour(playerid, 15);
        PlayerData[playerid][pDependTime] = gettime()+(30*1);
		PlayerData[playerid][pDrugUsed] = 4;
		SetPlayerWeather(playerid, -66);
		if(ReturnHealth(playerid) < 85) CanDegistir(playerid, ReturnHealth(playerid)+10);
		PlayerData[playerid][pTotalUsed]++;
		Inventory_Remove(playerid, "LSD", 2);
		//setplayergamespeed(playerid, 9);
		SetPlayerDrunkLevel(playerid, 4999);
        PlayerData[playerid][pUyusturucu] = SetTimerEx("LsdEtki", 20000, true, "d", playerid);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendServerMessage(playerid, "LSD kullandýðýnýz için kafanýz 8 dakika boyunca güzel olacak.");
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir parça folyo üzerine LSD'yi damlatýr.", ReturnName(playerid, 0));
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s çakmak yardýmý ile folyonun altýný yakarak pipet yardýmýyla aðzýndan çeker.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:parmakizi(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

	if (PlayerData[playerid][pFingerTime] > 0)
	    return SendErrorMessage(playerid, "Zaten parmak izi tarayýcý kullanýyorsunuz.");

    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2])) {
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s öðenin üzerinde parmak izi taramaya çalýþýr.", ReturnName(playerid, 0));

        PlayerData[playerid][pFingerTime] = 3;
        PlayerData[playerid][pFingerItem] = i;

        return 1;
	}
	SendErrorMessage(playerid, "Yakýnýnda herhangi bir öðe yok.");
	return 1;
}

CMD:createcar(playerid, params[])
{
	static
		model[32],
		color1,
		color2,
		id = -1,
		type = 0,
		faction = -1;

	if (PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "s[32]I(-1)I(-1)I(0)I(-1)", model, color1, color2, type, faction))
 	{
	 	SendSyntaxMessage(playerid, "/createcar [model id/name] [color 1] [color 2] <tip> <faction>");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Birlik Aracý");
	 	return 1;
	}
	if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "Invalid model ID.");

	static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle;

    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Car_Create(0, model[0], x, y, z, angle, color1, color2, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for dynamic vehicles.");

    CarData[id][carDisplay] = true;
    SetVehicleVirtualWorld(CarData[id][carVehicle], GetPlayerVirtualWorld(playerid));
	JBC_SetPlayerPosEx(playerid, x, y, z + 2, 1000);
	SendServerMessage(playerid, "You have successfully created vehicle ID: %d.", CarData[id][carVehicle]);
	return 1;
}

CMD:destroycar(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		 	id = GetPlayerVehicleID(playerid);

		else return SendSyntaxMessage(playerid, "/destroycar [vehicle id]");
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1)
	    return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

	Car_Delete(Car_GetID(id));
	SendServerMessage(playerid, "You have successfully destroyed vehicle ID: %d.", id);
	return 1;
}

CMD:canta(playerid, params[])
{
	//if (!Inventory_HasItem(playerid, "Sirtcantasi"))
	  //  return SendErrorMessage(playerid, "Sýrtçantan yok.");
SendServerMessage(playerid, "Sistem pasif!");
	//Backpack_Open(playerid);
	return 1;
}

CMD:cantabak(playerid, params[])
{
    for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackPlayer] == 0 && IsPlayerInRangeOfPoint(playerid, 2.0, BackpackData[i][backpackPos][0], BackpackData[i][backpackPos][1], BackpackData[i][backpackPos][2])) {
		Backpack_Items(playerid, i);
	}
	return 1;
}

CMD:cantaat(playerid, params[])
{
	new
		id = GetPlayerBackpack(playerid);

	if (!Inventory_HasItem(playerid, "Sirtcantasi") || id == -1)
	    return SendErrorMessage(playerid, "Sýrtçantan yok.");

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawnedEx(playerid))
    	return SendErrorMessage(playerid, "Þu anda çantaný atamazsýn.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	BackpackData[id][backpackPlayer] = 0;
    BackpackData[id][backpackPos][0] = x;
    BackpackData[id][backpackPos][1] = y;
    BackpackData[id][backpackPos][2] = z;
    BackpackData[id][backpackInterior] = GetPlayerInterior(playerid);
    BackpackData[id][backpackWorld] = GetPlayerVirtualWorld(playerid);

	Backpack_Refresh(id);
	Backpack_Save(id);

	Inventory_Remove(playerid, "Sirtcantasi");
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s çantasýný atar.", ReturnName(playerid, 0));

	SetAccessories(playerid);

	return 1;
}
CMD:ekonomifixle(playerid, params[])
{
if (PlayerData[playerid][pAdmin] < 4) return SendErrorMessage(playerid, "Yetkin yok!");
for(new i; i < MAX_VEHICLES; i++) if(!CarData[i][carMeslek])
{
CarData[i][carWeapons] = 0;
CarData[i][carAmmo] = 0;
Car_Save(i);
SendClientMessage(playerid, -1, "Tüm araçlarýn bagajlarýnda ki silahlar silindi.");
}
for (new i = 0; i < MAX_HOUSES; i ++) if (HouseData[i][houseExists]) {
{
HouseData[i][houseWeapons] = 0;
HouseData[i][houseAmmo] = 0;
House_Save(i);
SendClientMessage(playerid, -1, "Tüm evlerin deposunda ki silahlar silindi.");
}
}
return 1;
}
CMD:itemver(playerid, params[])
{
	static
	    userid,
		item[32],
		amount;

if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "uds[32]", userid, amount, item))
	    return SendSyntaxMessage(playerid, "/itemver [ID] [miktar] [item adý]");

    if (IsFurnitureItem(item))
	{
	    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item, true))
		{
	        Inventory_Set(userid, g_aFurnitureData[i][e_FurnitureName], g_aFurnitureData[i][e_FurnitureModel], amount);

			SendServerMessage(playerid, "%s adlý oyuncuya %s adlý itemi %d miktarýnda verdin.", ReturnName(userid, 0), item, amount);
			return 1;
		}
	}
	else for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if (!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true))
	{
	    if (!strcmp(item, "Telefon", true)) {
	        PlayerData[userid][pPhone] = random(90000) + 10000;
	    }
        Inventory_Set(userid, g_aInventoryItems[i][e_InventoryItem], g_aInventoryItems[i][e_InventoryModel], amount);

		return SendServerMessage(playerid, "%s adlý oyuncuya %s adlý itemi %d miktarýnda verdin.", ReturnName(userid, 0), item, amount);
	}
	SendErrorMessage(playerid, "Geçersiz eþya adý. (/itemliste).");
	return 1;
}

CMD:createimpound(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
 		return SendErrorMessage(playerid, "You can only create impound lots outside interiors.");

	GetPlayerPos(playerid, x, y, z);

	id = Impound_Create(x, y, z);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for impound lots.");

	SendServerMessage(playerid, "You have successfully created impound lot ID: %d.", id);
	return 1;
}

CMD:destroyimpound(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyimpound [impound id]");

	if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
	    return SendErrorMessage(playerid, "You have specified an invalid impound lot ID.");

	Impound_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed impound lot ID: %d.", id);
	return 1;
}

CMD:editimpound(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editimpound [id] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} location, release");
		return 1;
	}
	if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
	    return SendErrorMessage(playerid, "You have specified an invalid impound lot ID.");

	if (!strcmp(type, "location", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		ImpoundData[id][impoundLot][0] = x;
		ImpoundData[id][impoundLot][1] = y;
		ImpoundData[id][impoundLot][2] = z;

		Impound_Refresh(id);
		Impound_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the location of impound ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "release", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z,
			Float:angle;

	    GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		ImpoundData[id][impoundRelease][0] = x;
		ImpoundData[id][impoundRelease][1] = y;
		ImpoundData[id][impoundRelease][2] = z;
		ImpoundData[id][impoundRelease][3] = angle;

		Impound_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the release point of impound ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:acek(playerid, params[])
{
if (GetFactionType(playerid) != FACTION_POLICE)  return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	    return SendErrorMessage(playerid, "Bir çekici aracýnda deðilsin.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Sürücü deðilsin.");

	new vehicleid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Herhangi bir araca yakýn deðilsin.");

	if (!IsDoorVehicle(vehicleid) || IsAPlane(vehicleid) || IsABoat(vehicleid) || IsAHelicopter(vehicleid))
	    return SendErrorMessage(playerid, "Bu aracý çekemezsin.");

	AttachTrailerToVehicle(vehicleid, GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s çekici kamyonunun kancasýný %s model araca baðlar.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
	return 1;
}

CMD:abirak(playerid, params[])
{
if (GetFactionType(playerid) != FACTION_POLICE)  return SendErrorMessage(playerid, "Bu komutu sadece LSPD kullanabilir!");
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	    return SendErrorMessage(playerid, "Bir çekici aracýnda deðilsin.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Sürücü deðilsin.");

	new
	    trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));

    if (!trailerid)
	    return SendErrorMessage(playerid, "Kamyon üzerine baðladýðýn hiçbir araç yoktur.");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s , %s model araca baðladýðý kancayý söker.", ReturnName(playerid, 0), ReturnVehicleName(trailerid));

	return 1;
}

CMD:arackirala(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);
	new gereklipara;

	if(CarData[id][carOwner] == 0) gereklipara = 150;
	else gereklipara = CarData[id][carKiraUcret];

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Bu komutu sadece aracýn sürücü koltuðundayken kullanabilirsiniz !");

	if (GetMoney(playerid) < gereklipara) return SendErrorMessage(playerid, "Yeterli paranýz yok. (%s)", FormatNumber(gereklipara));
	if(CarData[id][carKiralik] == 0) return SendErrorMessage(playerid, "Bu araç kiralýk deðil.");
	if(CarData[id][carAnahtar] != -1) return SendErrorMessage(playerid, "Bu araç zaten kiralanmýþ.");

	CarData[id][carAnahtar] = PlayerData[playerid][pID];
	CarData[id][carKiraZaman] = 60;
    Car_Save(id);
	if(CarData[id][carOwner] == 0) GiveMoney(playerid, -50);
	else {
		if(CarData[id][carOwner] == PlayerData[playerid][pID]) return SendErrorMessage(playerid, "Kendi aracýný kiralayamazsýn.");
	    GiveMoney(playerid, -CarData[id][carKiraUcret]);
		new pid = SQLID_Kontrol(CarData[id][carOwner]);
		if(id != -1 && IsPlayerConnected(pid)) GiveMoney(pid, CarData[id][carKiraUcret]);
		else OfflineParaVer(CarData[id][carOwner], CarData[id][carKiraUcret]);
	}
	SendServerMessage(playerid, "Araç 1 saatliðine kiralandý, iyi yolculuklar!");
//	PlayerData[playerid[pAracKiraladi] = 1;
	return 1;
}


CMD:aracibagla(playerid, params[])
{
	new
		price,
		id = Impound_Nearest(playerid),
		vehicleid = GetPlayerVehicleID(playerid);

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Bu komutu sadece [LSPD] kullanabilir !");

    if (sscanf(params, "d", price))
        return SendSyntaxMessage(playerid, "/aracibagla [ücret]");

	if (price < 1 || price > 5000)
	    return SendErrorMessage(playerid, "Fiyat 5000$ üstünde veya 1$ altýnda olamaz.");

	if (GetVehicleModel(vehicleid) != 525)
	    return SendErrorMessage(playerid, "Bir çekici arabasýnda deðilsin.");

	if (id == -1)
	    return SendErrorMessage(playerid, "Herhangi bir haciz noktasý aralýðýnda deðilsin.");

	if (!GetVehicleTrailer(vehicleid))
	    return SendErrorMessage(playerid, "Herhangi bir aracý baðlamamýþsýn.");

 	vehicleid = Car_GetID(GetVehicleTrailer(vehicleid));

	if (CarData[vehicleid][carImpounded] != -1)
	    return SendErrorMessage(playerid, "Bu araç zaten haczedilmiþ.");

	CarData[vehicleid][carImpounded] = ImpoundData[id][impoundID];
	CarData[vehicleid][carImpoundPrice] = price;


	Tax_AddMoney(price);

	GetVehiclePos(CarData[vehicleid][carVehicle], CarData[vehicleid][carPos][0], CarData[vehicleid][carPos][1], CarData[vehicleid][carPos][2]);
	Car_Save(vehicleid);


	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADYO: %s adlý memur %s model araca %s ceza kesti.", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[vehicleid][carModel]), FormatNumber(price));
 	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));

	return 1;
}

CMD:frekans(playerid, params[])
{
	new channel;

	if (!Inventory_HasItem(playerid, "Telsiz"))
	    return SendErrorMessage(playerid, "Telsize sahip deðilsin.");

	if (sscanf(params, "d", channel))
 	{
	 	SendSyntaxMessage(playerid, "/frekans [frekans] (0 ile kapatabilirsin)");

	 	if (PlayerData[playerid][pChannel] > 0)
			SendClientMessageEx(playerid, COLOR_YELLOW, "[NOT]:{FFFFFF} Mevcut telsiz frekansý: %d.", PlayerData[playerid][pChannel]);

		return 1;
	}
	if (channel < 0 || channel > 999999)
	    return SendErrorMessage(playerid, "Frekans 0'ýn altýnda veya 999.999 üstünde olamaz.");

	PlayerData[playerid][pChannel] = channel;

	if (channel == 0)
	    SendServerMessage(playerid, "Telsiz devre dýþý býrakýldý.");

	else SendServerMessage(playerid, "Frekans %d olarak deðiþtirildi. (\"/pr [yazý]\" ile konuþabilirsin).", channel);
	return 1;
}

CMD:pr(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/t [Radyo IC]");

    if (!Inventory_HasItem(playerid, "Telsiz"))
	    return SendErrorMessage(playerid, "Telsizin yok");

	if (!PlayerData[playerid][pChannel])
	    return SendErrorMessage(playerid, "Telsizin devre dýþý. (/frekans).");

	static
	    string[128];
	if(PlayerData[playerid][pChannel] == 911 && GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "Bu frekans özeldir.");
    if(PlayerData[playerid][pChannel] == 666 && GetFactionType(playerid) != FACTION_INTEL) return SendErrorMessage(playerid, "Bu frekans özeldir.");
	format(string, sizeof(string),"** [Telsiz: %d] %s: %s **", PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
	SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);
	SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "** (Telsiz) %s: %.64s", ReturnName(playerid, 0), params);

	return 1;
}

CMD:operator(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE)  return SendErrorMessage(playerid, "Bu kanalý kullanabilmek için resmi hizmet görevlisi olman gereklidir.");
    if (PlayerData[playerid][pFactionRank] < 4) return SendErrorMessage(playerid, "Bu kanalý kullanabilmek için yeterli ranka sahip degilsin.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/operator [Radyo IC]");

    static
	    string[128];

    format(string, sizeof(string),"** [OPERATÖR: ***] %s **",  params);
	SendFactionMessageEx(GetFactionType(playerid), COLOR_RADIO, string);

	return 1;
}

CMD:r(playerid, params[])
{
 if (GetFactionType(playerid) == FACTION_POLICE) return SendErrorMessage(playerid, "LSPD olduðun için sadece '/t' komutunu kullanabilirsin!");
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC &&  GetFactionType(playerid) != FACTION_AKADEMI && GetFactionType(playerid) != FACTION_INTEL && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_NEWS)
	    return SendErrorMessage(playerid, "Bu kanalý kullanabilmek için resmi hizmet görevlisi olman gereklidir.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r [Radyo IC]");

	static
	    string[128];


	if (strlen(params) > 64)
	{
	    format(string, sizeof(string),"** [Telsiz: ***] (%s) %s %s: %.64s **", Faction_GetDivizyon(playerid), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
		SendFactionMessageEx(GetFactionType(playerid), 0xBDB91AFF, string);
  		format(string, sizeof(string),"** ...%s **", params[64]);
		SendFactionMessageEx(GetFactionType(playerid), 0xBDB91AFF, string);
		SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "** [Telsiz: ***] %s: %.64s", ReturnName(playerid, 0), params);
        SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "**...%s", params[64]);
	}
	else
	{
        format(string, sizeof(string),"** [Telsiz: ***] (%s) %s %s: %s **", Faction_GetDivizyon(playerid), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
		SendFactionMessageEx(GetFactionType(playerid), 0xBDB91AFF, string);
		SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "** [Telsiz: ***] %s: %s", ReturnName(playerid, 0), params);

	}
	return 1;
}

CMD:yt(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL && GetFactionType(playerid) != FACTION_AKADEMI)
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/yt [içerik]");

	new Float:ppos[3], string[250];
	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
	foreach(new i: Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 100.0, ppos[0], ppos[1], ppos[2]) && ( GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_INTEL) )
		{
		    format(string, sizeof(string),"** [Yakýn Telsiz: ***] %s %s: %s **", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
        	SendClientMessage(i, 0xBDB91AFF, string);
		}
	}
	return 1;
}
/*CMD:meslekyardim(playerid, params[])
{	switch (PlayerData[playerid][pJob])
	{
	    case 1: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /teslimatbasla, /teslimatiptal, /indir, /teslimatlar.");
	    case 2: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /tamiret, /nitro.");
	    case 3: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /taksi, /taksikabul, /taksiiptal.");
	    case 4: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /loadcrate.");
	    case 5: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /madenarac, /kaz");
	    case 6: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /gidasat.");
	    case 7: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /copal, /copbosalt, /copbul.");
	    case 8: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /sorting.");
	    case 9: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /sandikac.");
	    case 10: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /yukal, /tirdevam (Bugda iseniz)");
	    case 11: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /otobus.");
	    case 12: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /pizzabasla, /pisbasi.");
	    case 13: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /ciftci.");
	    case 14: { SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /odunculuk.");
	    SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} Keresteleri 'F' ile alýp 'N' ile araca koyabilirsin."); }
	    case 15: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} Araca binerek mesleðe baþlayabilirsiniz.");
	    case 16: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /eyukle, /eteslim");
	    case 17: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /iyukle, /iteslim.");
		case 18: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /cimentoyukle, /cimentosat.");
		case 19: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /yukal, /yukteslim.");
		case 20: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /kututasi, /kutugeribirak, /kutubirak, /kutunokta");
		case 21: SendClientMessage(playerid, COLOR_CLIENT, "MESLEK:{FFFFFF} /kutu al, /kutu birak");
	    default: SendErrorMessage(playerid, "Herhangi bir meslekte bulunmuyorsun.");
	}
	return 1;
}*/
CMD:temizlik(playerid, params[])
{
new vehicleid = GetPlayerVehicleID(playerid);
new id = Car_GetID(vehicleid);
new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Temizlikçi aracýnda olmalýsýn!");
if (PlayerData[playerid][pJob] != JOB_TEMIZLIKCI)
	    return SendErrorMessage(playerid, "Temizlik þoförü deðilsin.");

	    if (!Car_Meslek(playerid, id) && modelid != 574)
	    return SendErrorMessage(playerid, "Temizlikçi aracýnda deðilsin.");
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Bu komutu sadece aracýn sürücü koltuðundayken kullanabilirsiniz !");
SweeperJob[playerid] = true;
pCop[playerid] = 1;
SetPlayerCheckpoint(playerid, 657.116760, -1408.814208, 13.109343, 2.0);
SendServerMessage(playerid, "Temizleyeceðiniz noktalar haritada iþaretlendi!");
return 1;
}

CMD:sandikolustur(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	id = Sandik_Olustur(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu maksimum sandýk limitine ulaþtý.");

	SendServerMessage(playerid, "Sandýk oluþturuldu, ID %d.", id);
	return 1;
}


CMD:fabrikaduzenle(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/fabrikaduzenle [id] [ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} ad, lokasyon, tip, birlik, uretimhizi.");
		return 1;
	}
	if ((id < 0 || id >= MAX_FABRIKA) || !Fabrikalar[id][fabrikaVarmi])
	    return SendErrorMessage(playerid, "Geçersiz sandýk ID'sý.");

	if (!strcmp(type, "lokasyon", true))
	{
 		GetPlayerPos(playerid, Fabrikalar[id][fabrikaPos][0], Fabrikalar[id][fabrikaPos][1], Fabrikalar[id][fabrikaPos][2]);
		GetPlayerFacingAngle(playerid, Fabrikalar[id][fabrikaPos][3]);

		Fabrika_Yenile(id);
		Fabrika_Kaydet(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu fabrikanýn lokasyonunu deðiþtirdi.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "ad", true))
	{
	   new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/fabrikaduzenle [id] [icerik] [Yeni içerik]");

	    format(Fabrikalar[id][fabrikaAd], 128, name);

	    Fabrika_Yenile(id);
	    Fabrika_Kaydet(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu fabrikanýn adýný \"%s\" olarak deðiþtirdi.", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "tip", true))
	{
	     new typeint;

	    if (sscanf(string, "d", typeint))
		{
			SendSyntaxMessage(playerid, "/fabrikaduzenle [id] [tip] [Tip ID]");
	  		SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} 1: Atýk Fabrikasý | 2: Uyuþturucu Tohumu Fabrikasý");
	  		return 1;
		}
		if(typeint < 1 || typeint > 2) return SendErrorMessage(playerid, "Geçersiz tip girdiniz.");
  		Fabrikalar[id][fabrikaTip] = typeint;

		Fabrika_Yenile(id);
		Fabrika_Kaydet(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu fabrikanýn tipini %d olarak deðiþtirdi.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "uretimhizi", true))
	{
	     new typeint;

	    if (sscanf(string, "d", typeint))
			return SendSyntaxMessage(playerid, "/fabrikaduzenle [id] [uretimhizi] [hýz]");

		if(typeint < 1 || typeint > 2) return SendErrorMessage(playerid, "Geçersiz tip girdiniz.");
  		Fabrikalar[id][fabrikaTip] = typeint;

		Fabrika_Yenile(id);
		Fabrika_Kaydet(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu fabrikanýn tipini %d olarak deðiþtirdi.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "birlik", true))
	{
	     new typeint;

	    if (sscanf(string, "d", typeint))
			return SendSyntaxMessage(playerid, "/fabrikaduzenle [id] [uretimhizi] [hýz]");

		if ((typeint < 0 || typeint >= MAX_FACTIONS) || !FactionData[typeint][factionExists])
	    	return SendErrorMessage(playerid, "Geçersiz faction ID girdiniz.");

  		Fabrikalar[id][fabrikaBirlik] = FactionData[typeint][factionID];

		Fabrika_Yenile(id);
		Fabrika_Kaydet(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili ID: %d nolu fabrikanýn birlik ID'sýný %d olarak deðiþtirdi.", ReturnName(playerid, 0), id, typeint);
	}
	return 1;
}

CMD:sandiksil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/sandiksil [sandik id]");

	if ((id < 0 || id >= MAX_SANDIK) || !Sandiklar[id][sandikVarmi])
	    return SendErrorMessage(playerid, "Geçersiz sandýk ýd..");

	Sandik_Sil(id);
	SendServerMessage(playerid, "Sandýk baþarýyla silindi, ýd: %d.", id);
	return 1;
}

CMD:mezarsil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/mezarsil [mezar id]");

	if ((id < 0 || id >= MAX_MEZAR) || !Mezarlar[id][mezarVarmi])
	    return SendErrorMessage(playerid, "Geçersiz mezar ID.");

	Mezar_Sil(id);
	SendServerMessage(playerid, "%d nolu mezar baþarýyla silindi.", id);
	return 1;
}
CMD:hoodsil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/hoodsil [hood id]");

	if ((id < 0 || id >= MAX_ONAYLIHOOD) || !OnayliHoodlar[id][hoodVarmi])
	    return SendErrorMessage(playerid, "Geçersiz onaylý hood ID.");

	Hood_Sil(id);
	SendServerMessage(playerid, "%d nolu onaylý hood baþarýyla silindi.", id);
	return 1;
}
CMD:fabrikasil(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/fabrikasil [fabrika id]");

	if ((id < 0 || id >= MAX_FABRIKA) || !Fabrikalar[id][fabrikaVarmi])
	    return SendErrorMessage(playerid, "You have specified an invalid fabrika ID.");

	Fabrika_Sil(id);
	SendServerMessage(playerid, "You have successfully destroyed fabrika ID: %d.", id);
	return 1;
}

CMD:cpsifirla(playerid, params[])
{
	if (PlayerData[playerid][pDrivingTest])
	    return SendErrorMessage(playerid, "Sürüþ testi sýrasýnda bunu yapamazsýn.");

	new
		vehicleid = GetPlayerVehicleID(playerid);

	PlayerData[playerid][pCP] = 0;

	if (PlayerData[playerid][pSorting] != -1)
	{
	    PlayerData[playerid][pSorting] = -1;
		PlayerData[playerid][pSortCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pMinedRock])
	{
	    PlayerData[playerid][pMinedRock] = 0;
		PlayerData[playerid][pMineCount] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pUnloading] != -1)
	{
	    PlayerData[playerid][pUnloading] = -1;
	    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	}
	if (PlayerData[playerid][pLoading])
	{
	    PlayerData[playerid][pLoading] = 0;
	    PlayerData[playerid][pLoadType] = 0;
	}
	if (PlayerData[playerid][pLoadCrate])
 	{
  		PlayerData[playerid][pLoadCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	{
 		CoreVehicles[vehicleid][vehLoadType] = 0;
 		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;

   		DestroyObject(CoreVehicles[vehicleid][vehCrate]);
	}
 	PlayerData[playerid][pWaypoint] = 0;
   	PlayerData[playerid][pWaypointPos][0] = 0;
    PlayerData[playerid][pWaypointPos][1] = 0;
   	PlayerData[playerid][pWaypointPos][2] = 0;
	PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);

    DisablePlayerCheckpoint(playerid);
    SendServerMessage(playerid, "Checkpoint devre dýþý býrakýldý.");
    return 1;
}

CMD:restart(playerid, params[])
{
	new time;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (g_ServerRestart)
	{
	    TextDrawHideForAll(gServerTextdraws[3]);

	    g_ServerRestart = 0;
	    g_RestartTime = 0;

	    return SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s restartý iptal etti.", ReturnName(playerid, 0));
	}
	if (sscanf(params, "d", time))
	    return SendSyntaxMessage(playerid, "/restart [seconds]");

	if (time < 3 || time > 600)
	    return SendErrorMessage(playerid, "The specified seconds can't be below 3 or above 600.");

    TextDrawShowForAll(gServerTextdraws[3]);

	g_ServerRestart = 1;
	g_RestartTime = time;

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili sunucuya %d sonra restart atacak.", ReturnName(playerid, 0), time);
	return 1;
}

CMD:mulklerim(playerid, params[])
{
	new
		userid,
		count;

	if (sscanf(params, "u", userid))
	{
		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

		for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(playerid, i)) {
		    SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "** Ev ID: %d | Adres: %s | Lokasyon: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

		    count++;
		}
		for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i) && BusinessData[i][bizOwner] != 99999999) {
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Ýþyeri ID: %d | Ad: %s | Lokasyon: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

		    count++;
		}
		if (!count)
		    return SendErrorMessage(playerid, "Herhangi bir mülkünüz bulunmuyor!");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	else if (PlayerData[playerid][pAdmin] >= 3)
	{
		if (!IsPlayerConnected(userid))
	    	return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

		for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(userid, i)) {
		    SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "** Ev ID: %d | Adres: %s | Lokasyon: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

		    count++;
		}
		for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(userid, i) && BusinessData[i][bizOwner] != 99999999) {
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Ýþyeri ID: %d | Ad: %s | Lokasyon: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

		    count++;
		}
		if (!count)
		    return SendErrorMessage(playerid, "Herhangi bir mülkünüz bulunmuyor!");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	return 1;
}

CMD:evsifirla(playerid, params[])
{
	new houseid = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", houseid))
	    return SendSyntaxMessage(playerid, "/evsifirla [Ev ID]");

	if ((houseid < 0 || houseid >= MAX_HOUSES) || !HouseData[houseid][houseExists])
	    return SendErrorMessage(playerid, "Böyle bir ev ID'si bulunmamaktadýr!");

	HouseData[houseid][houseOwner] = 0;
    HouseData[houseid][houseMoney] = 0;
    for (new i = 0; i != 10; i++)
	{
	    HouseData[houseid][houseWeapons][i] = 0;
	    HouseData[houseid][houseAmmo][i] = 0;
	}
	House_Refresh(houseid);
	House_Save(houseid);

	SendServerMessage(playerid, "%d ID'li evi satýþa çýkarttýn!", houseid);
	return 1;
}

CMD:isyerisifirla(playerid, params[])
{
	new bizid = -1;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", bizid))
	    return SendSyntaxMessage(playerid, "/isyerisifrla [Ýsyeri ID]");

	if ((bizid < 0 || bizid >= MAX_BUSINESSES) || !BusinessData[bizid][bizExists])
	    return SendErrorMessage(playerid, "Böyle bir iþyeri yok!");

	BusinessData[bizid][bizOwner] = 0;
    BusinessData[bizid][bizVault] = 0;
	Business_Refresh(bizid);
	Business_Save(bizid);

	SendServerMessage(playerid, "%d ID'li iþyerini satýlýða çýkarttýn.", bizid);
	return 1;
}

CMD:araclarim(playerid, params[])
{
	new Float:fX, Float:fY, Float:fZ, userid, count;

	if (sscanf(params, "u", userid))
	{
		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i) || Car_Anahtar(playerid, i)) {
		    GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);
		   	if (IsVehicleImpounded(CarData[i][carVehicle])) SendClientMessageEx(playerid, COLOR_WHITE, "** {B70000}Bu araç baðlanmýþ!{FFFFFF} | Model: %s | Konum: %s | Plaka: %s |", ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ), CarData[i][carPlaka]);
			else SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Model: %s | Konum: %s | Plaka: %s ", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ), CarData[i][carPlaka]);
		    count++;
		}
		if (!count)
		    SendServerMessage(playerid, "Herhangi bir aracýnýz bulunmuyor.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	else if (PlayerData[playerid][pAdmin] >= 3)
	{
		if (userid == INVALID_PLAYER_ID)
	    	return SendErrorMessage(playerid, "Geçersiz kullanýcý.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
  		SendClientMessageEx(playerid, COLOR_YELLOW, "%s(ID: %d) adlý kiþinin araçlarý;", ReturnName(userid, 0), userid);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(userid, i)) {
  			GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

			SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Model: %s | Konum: %s | Plaka: %s |", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ), CarData[i][carPlaka]);
			count++;
		}
		if (!count)
		    SendServerMessage(playerid, "Bu oyuncu herhangi bir araca sahip deðildir.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
 	{
 	    PlayerData[playerid][pJetpack] = 1;
	 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}
	else
	{
		PlayerData[userid][pJetpack] = 1;

		SetPlayerSpecialAction(userid, SPECIAL_ACTION_USEJETPACK);
		SendServerMessage(playerid, "You have spawned a jetpack for %s.", ReturnName(userid, 0));
	}

	return 1;
}

CMD:havayarla(playerid, params[])
{
	new weatherid;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", weatherid))
	    return SendSyntaxMessage(playerid, "/havaayarla [Hava ID]");

	SetWeather(weatherid);
	SendServerMessage(playerid, "Havanýn ID'sini %d olarak deðiþtirdin.", weatherid);
	return 1;
}
CMD:settimemode(playerid, params[]) // sunucu zamaný ayarlamak
{
	new weatherid;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Bu komutu kullanmak için yetkiniz yok !");


	if(k_time)
	{
	    k_time = false;
	    SendServerMessage(playerid, "Zaman otomatikten kaldýrýldý.", weatherid);
	} else
	{
	    k_time = true;
	    SendServerMessage(playerid, "Zaman otomatiðe alýndý.", weatherid);
	}
	return 1;
}

CMD:settime(playerid, params[])
{
	new saat, dakika;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Bu komutu kullanmak için yetkiniz yok !");

	if (sscanf(params, "dd", saat, dakika))
	    return SendSyntaxMessage(playerid, "/settime [saat] [dakika]");

	k_saat = saat;
	k_dakika = dakika;
	SendServerMessage(playerid, "Saat %d:%d olarak deðiþtirildi.", saat, dakika);
	return 1;
}
CMD:benzinleridoldur(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	for(new i; i < MAX_VEHICLES; i++) {
	   CoreVehicles[i][vehFuel] = 100;
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s bütün arabalarýn benzinini doldurdu.", ReturnName(playerid, 0));
	return 1;
}


CMD:repairall(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	for(new i; i < MAX_VEHICLES; i++) {
		RepairVehicle(i);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s bütün arabalarý tamir etti.", ReturnName(playerid, 0));
	return 1;
}

CMD:benzinayarla(playerid, params[])
{
	static
	    id = 0,
		amount;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "dd", id, amount))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		{
		    id = GetPlayerVehicleID(playerid);

		    if (sscanf(params, "d", amount))
		        return SendSyntaxMessage(playerid, "/benzinayarla [Miktar]");

			if (amount < 0)
			    return SendErrorMessage(playerid, "0'dan aþaðý yapýlamaz.");

			CoreVehicles[id][vehFuel] = amount;
			SendServerMessage(playerid, "%d araç idsinin benzinini %dLT olarak ayarladýn.", id, amount);
			return 1;
		}
		else return SendSyntaxMessage(playerid, "/benzinayarla [araç id] [miktar]");
	}
	if (!IsValidVehicle(id))
	    return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

	if (amount < 0)
 		return SendErrorMessage(playerid, "0'dan aþaðý yapýlamaz.");

	CoreVehicles[id][vehFuel] = amount;
	SendServerMessage(playerid, "%d adlý araç idsinin benzinini %dLT olarak ayarladýn.", id, amount);
	return 1;
}

CMD:agps(playerid, params[])
{
	if(tiryapiyor[playerid] >= 1 || PlayerData[playerid][pPizzaBasladimi] >= 1)
		return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýn.");

	if (PlayerData[playerid][pYukAldi]) return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýn.");

    new aid, Float:aracpos[3];

	if(sscanf(params, "d", aid))
		return SendSyntaxMessage(playerid, "/agps [Araç ID]");

	if(aid < 1 || aid > MAX_VEHICLES) return 1;

    for(new x = 0; x < MAX_VEHICLES; x++)
	{
	    if(x == aid)
	    {
			aid = Car_GetID(x);
			if(Car_IsOwner(playerid, aid) || Car_Anahtar(playerid, aid))
			{
				new world = GetVehicleVirtualWorld(x);
				if(IsVehicleImpounded(x)) return SendErrorMessage(playerid, "Aracýnýz baðlandýðý için gösterilemiyor.");
				if(Arac_VergiGecikmismi(x)) return SendErrorMessage(playerid, "Araç vergisi ödenmediði için þu anda kullanamazsýnýz.");
				if(world != 0)
					return SendErrorMessage(playerid, "Aracýnýz farklý bir virtual world içerisinde bu yüzden gps ile bakamazsýnýz.");

                PlayerData[playerid][pCP] = 1;
                GetVehiclePos(x, aracpos[0], aracpos[1], aracpos[2]);
                SetPlayerCheckpoint(playerid, aracpos[0], aracpos[1], aracpos[2], 6.0);
				SendServerMessage(playerid, "Aracýnýz haritada iþaretlendi.");
				break;
	   		}
	  		else
			{ SendErrorMessage(playerid, "Bu aracýn sahibi deðilsiniz."); }
	  	}
	}
	return 1;
}

CMD:acanayarla(playerid, params[])
{
	static
	    id = 0,
		Float:amount;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "df", id, amount))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		{
		    id = GetPlayerVehicleID(playerid);

		    if (sscanf(params, "f", amount))
		        return SendSyntaxMessage(playerid, "/acanayarla [amount]");

			if (amount < 0.0)
			    return SendErrorMessage(playerid, "0'dan düþük giremezsin.");

            SetVehicleHealth(id, amount);
			SendServerMessage(playerid, "%d idli aracýn canýný %.1f olarak ayarladýn.", id, amount);
			return 1;
		}
		else return SendSyntaxMessage(playerid, "/acanayarla [araç id] [amount]");
	}
	if (!IsValidVehicle(id))
	    return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

	if (amount < 0.0)
	    return SendErrorMessage(playerid, "0'dan düþük giremezsin.");

	SetVehicleHealth(id, amount);
	SendServerMessage(playerid, "%d idli aracýn canýný %.1f olarak ayarladýn.", id, amount);
	return 1;
}

CMD:aduzenle(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	 if (PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/aduzenle [id] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ÝSÝMLER]:{FFFFFF} lokasyon, vip, vergi, olusum, meslek, renk1, renk2, kaldirceza");
		return 1;
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1)
	    return SendErrorMessage(playerid, "Geçersiz bir araç ID'sý belirttiniz.");

	id = Car_GetID(id);

	if (!strcmp(type, "lokasyon", true))
	{

		if (!IsPlayerInAnyVehicle(playerid))
		{
 			GetPlayerPos(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2]);
			GetPlayerFacingAngle(playerid, CarData[id][carPos][3]);
		} else {
   			GetPlayerPos(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2]);
			GetVehicleZAngle(CarData[id][carVehicle], CarData[id][carPos][3]);
		}

		Car_Save(id);
		Car_Spawn(id);

		JBC_SetPlayerPosEx(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2] + 2.0, 1000);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the location of vehicle ID: %d.", ReturnName(playerid, 0), CarData[id][carVehicle]);
	}
	else if (!strcmp(type, "olusum", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/aduzenle [id] [olusum] [id]");
		 	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: PD | 2: News | 3: Medical | 4: Government | 5: Birlik Aracý");
		 	return 1;
		}
		if (typeint < 0 || typeint > 7)
		    return SendErrorMessage(playerid, "0 ve 5 arasýnda bir rakam girin.");

		CarData[id][carFaction] = typeint;

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %d ýd'li aracý %d id'li oluþuma atadý.", ReturnName(playerid, 0), CarData[id][carVehicle], typeint);
	}
	else if (!strcmp(type, "birlik", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/aduzenle [id] [birlik] [Birlik ID]");
		 	return 1;
		}

	    if ((typeint < 0 || typeint >= MAX_FACTIONS) || !FactionData[typeint][factionExists])
	    	return SendErrorMessage(playerid, "Böyle bir birlik yok!");

		CarData[id][carBirlik] = FactionData[typeint][factionID];

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %d ýd'li aracý %d id'li birliðe atadý.", ReturnName(playerid, 0), CarData[id][carVehicle], typeint);
	}
	else if (!strcmp(type, "meslek", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/aduzenle [id] [meslek] [meslekid]");
 		 	return 1;
		}
		if (typeint < -1 || typeint > 20)
		    return SendErrorMessage(playerid, "0 ve 19 arasýnda bir rakam girin.");

		CarData[id][carMeslek] = typeint;

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s araç ID: %d'ý %d ID'lý mesleðin aracý yaptý.", ReturnName(playerid, 0), CarData[id][carVehicle], typeint);
	}
	else if (!strcmp(type, "vergi", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/aduzenle [id] [vergi]");
 		 	return 1;
		}

		CarData[id][carVergi] = typeint;

		Car_Save(id);
		SendServerMessage(playerid, "%d araç idsinin vergisini %d olarak ayarladýn.", CarData[id][carVehicle], typeint);
	}
	else if (!strcmp(type, "kiralik", true))
	{
		switch(CarData[id][carKiralik])
		{
		    case 1: { CarData[id][carKiralik] = 0; }
		    case 0: { CarData[id][carKiralik] = 1; }
  		}
		Car_Save(id);
	}
	else if (!strcmp(type, "kaldirceza", true))
	{
 		CarData[id][carImpounded] = -1;
        CarData[id][carImpoundPrice] = 0;

        Car_Save(id);
        SendServerMessage(playerid, "Aracýn cezasý kaldýrýldý.");
	}
	else if (!strcmp(type, "kilit", true))
	{
	     	static
	       	    engine,
	        	lights,
	        	alarm,
	        	doors,
	        	bonnet,
	        	boot,
	        	objective;

	    	GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);

			if (!CarData[id][carLocked])
			{
				CarData[id][carLocked] = true;
				Car_Save(id);

				ShowPlayerFooter(playerid, "Arac ~r~kilitlendi~w~!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			else
			{
                CarData[id][carLocked] = false;
				Car_Save(id);

				ShowPlayerFooter(playerid, "Aracin kilidi~r~acildi~w~!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
			}
    }
    else if (!strcmp(type, "galeri", true))
	{
			if (!CarData[id][carGaleri])
			{
			    SendServerMessage(playerid, "Araç galeri ürünü olarak deðiþtirildi.");
				CarData[id][carGaleri] = true;
				RespawnVehicle(CarData[id][carVehicle]);
				Car_Save(id);
			}
			else
			{
			    SendServerMessage(playerid, "Araç galeri ürünü olmaktan kaldýrýldý.");
                CarData[id][carGaleri] = false;
                RespawnVehicle(CarData[id][carVehicle]);
				Car_Save(id);
			}
    }
    else if (!strcmp(type, "fiyat", true))
	{
	    new typee;

	    if (sscanf(string, "d", typee))
			return SendSyntaxMessage(playerid, "/aduzenle [id] [fiyat] [yeni fiyat]");

		CarData[id][carPrice] = typee;

        RespawnVehicle(CarData[id][carVehicle]);
		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %d NO'lu aracýn fiyatýný %s olarak deðiþtirdi.", ReturnName(playerid, 0), CarData[id][carVehicle], FormatNumber(typee));
	}
    else if (!strcmp(type, "renk1", true))
	{
	    new color1;

	    if (sscanf(string, "d", color1))
			return SendSyntaxMessage(playerid, "/aduzenle [id] [renk1] [renk1]");

		if (color1 < 0 || color1 > 255)
		    return SendErrorMessage(playerid, "0 ile 255 arasýnda bir renk kodu girin.");

		CarData[id][carColor1] = color1;
		ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %d id'li aracýn birincil rengini %d olarak deðiþtirdi.", ReturnName(playerid, 0), CarData[id][carVehicle], color1);
	}
    else if (!strcmp(type, "renk2", true))
	{
	    new color2;

	    if (sscanf(string, "d", color2))
			return SendSyntaxMessage(playerid, "/editca [id] [renk2] [renk2]");

		if (color2 < 0 || color2 > 255)
		    return SendErrorMessage(playerid, "0 ile 255 arasýnda bir renk kodu girin.");

		CarData[id][carColor2] = color2;
		ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %d id'li aracýn ikincil rengini %d olarak deðiþtirdi.", ReturnName(playerid, 0), CarData[id][carVehicle], color2);
	}
	return 1;
}

CMD:creategarbage(playerid, params[])
{
	static
	    id = -1,
		type;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/creategarbage [type]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Dumpster | 2: Trash Can");
		return 1;
	}
	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "The specified type can't be below 1 or above 2.");

	id = Garbage_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for garbage bins.");

	SendServerMessage(playerid, "You have successfully created garbage bin ID: %d.", id);
	return 1;
}

CMD:destroygarbage(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroygarbage [garbage id]");

	if ((id < 0 || id >= MAX_GARBAGE_BINS) || !GarbageData[id][garbageExists])
	    return SendErrorMessage(playerid, "You have specified an invalid garbage ID.");

	Garbage_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed garbage bin ID: %d.", id);
	return 1;
}

CMD:copal(playerid, params[])
{
	new
		id = Garbage_Nearest(playerid),
		string[64];

   // if(!spamProtect(playerid, "CopAl", 3))  return SendErrorMessage(playerid, "Bu komutunu 3 saniyede bir kullanabilirsiniz.");
	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Çöpçü deðilsin.");


    if (IsPlayerInAnyVehicle(playerid))
		return SendErrorMessage(playerid, "Bu komutu sadece araçtayken kullanabilirsiniz !");

    if (IsPlayerInAnyVehicle(playerid))
		return SendErrorMessage(playerid, "Araçtayken bu iþlemi gerçekleþtiremezsiniz.");

	if (id == -1)
	    return SendErrorMessage(playerid, "Herhangi bir çöp kutusuna yakýn deðilsin.");

	if (GarbageData[id][garbageCapacity] < 1)
	    return SendErrorMessage(playerid, "Bu çöp kutusu dolu deðil.");

	if (PlayerData[playerid][pCarryTrash])
	    return SendErrorMessage(playerid, "Zaten bir çöp taþýyorsun.");

    GarbageData[id][garbageCapacity]--;
   	Garbage_Save(id);

	PlayerData[playerid][pCarryTrash] = 1;
	//SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s çöp kutusunu karýþtýrýr ve iþe yarayacak birþeyler bulur.", ReturnName(playerid, 0), string);

	format(string, sizeof(string), "[Çöp Kutusu %d]\n{FFFFFF}Çöp Kapasitesi: %d/100", id, GarbageData[id][garbageCapacity]);
  	UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DARKBLUE, string);

  	SetPlayerAttachedObject(playerid, 4, 1264, 6, 0.000000, 0.000000, 0.000000, 0.000000, 270.000000, 90.000000, 0.500000, 0.500000, 0.500000);
	ShowPlayerFooter(playerid, "Copu araca~y~'N'~w~ ile yukleyebilirsin.");

	return 1;
}

CMD:copbosalt(playerid, params[])
{
	new
		vehicleid = GetPlayerVehicleID(playerid),
		id = Job_NearestPoint(playerid, 5.0);

   // if(!spamProtect(playerid, "CopBosalt", 2)) return SendErrorMessage(playerid, "2 saniyede bir bu komutu kullanabilirsiniz.");

	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Çöpçü deðilsin.");

	if (GetVehicleModel(vehicleid) != 408)
	    return SendErrorMessage(playerid, "Bu bir çöp kamyonu deðil.");

	if (id == -1 || JobData[id][jobType] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Teslim noktasýnda deðilsin.");

	if (CoreVehicles[vehicleid][vehTrash] < 1)
	    return SendErrorMessage(playerid, "Bu araç boþ.");

	GiveMoney(playerid, (CoreVehicles[vehicleid][vehTrash] * 27));
	ShowPlayerFooter(playerid, "Copler basariyla ~g~teslim edildi!");

	SendServerMessage(playerid, "%s kazandýn, getirdiðin çöp sayýsý: %d!", CoreVehicles[vehicleid][vehTrash] * 27, CoreVehicles[vehicleid][vehTrash]);
	CoreVehicles[vehicleid][vehTrash] = 0;
	return 1;
}

CMD:createvendor(playerid, params[])
{
	static
	    id = -1,
		type;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/createvendor [type]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Food | 2: Soda");
		return 1;
	}
	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "The specified type can't be below 1 or above 2.");

	id = Vendor_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for vendors.");

	SendServerMessage(playerid, "You have successfully created vendor ID: %d.", id);
	return 1;
}

CMD:destroyvendor(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyvendor [vendor id]");

	if ((id < 0 || id >= MAX_VENDORS) || !VendorData[id][vendorExists])
	    return SendErrorMessage(playerid, "You have specified an invalid vendor ID.");

	Vendor_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed vendor ID: %d.", id);
	return 1;
}

CMD:walk(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/walk [1-16]");

	if (type < 1 || type > 17)
	    return SendErrorMessage(playerid, "Geçersiz tip girdiniz.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "FAT", "FatWalk", 4.1, 1, 1, 1, 1, 1, 1);
	    case 2: ApplyAnimationEx(playerid, "MUSCULAR", "MuscleWalk", 4.1, 1, 1, 1, 1, 1, 1);
	    case 3: ApplyAnimationEx(playerid, "PED", "WALK_armed", 4.1, 1, 1, 1, 1, 1, 1);
	    case 4: ApplyAnimationEx(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1, 1);
	    case 5: ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1, 1, 1, 1, 1, 1, 1);
	    case 6: ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);
	    case 7: ApplyAnimationEx(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1, 1);
	    case 8: ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1, 1);
	    case 9: ApplyAnimationEx(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1, 1);
	    case 10: ApplyAnimationEx(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1, 1);
	    case 11: ApplyAnimationEx(playerid, "PED", "WALK_wuzi", 4.1, 1, 1, 1, 1, 1, 1);
	    case 12: ApplyAnimationEx(playerid, "PED", "WOMAN_walkbusy", 4.1, 1, 1, 1, 1, 1, 1);
	    case 13: ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1, 1);
	    case 14: ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1, 1, 1, 1, 1, 1, 1);
	    case 15: ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 1, 1, 1);
	    case 16: ApplyAnimationEx(playerid, "PED", "WOMAN_walkshop", 4.1, 1, 1, 1, 1, 1, 1);
	}
	return 1;
}


CMD:arenk(playerid, params[])
{
	static
	    color1,
	    color2;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "You don't have permission to use this command.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "You are not in any vehicle.");

	if (sscanf(params, "dd", color1, color2))
	    return SendSyntaxMessage(playerid, "/acolorcar [color 1] [color 2]");

	if (color1 < 0 || color1 > 255)
	    return SendErrorMessage(playerid, "The first color can't be below 0 or above 255.");

    if (color2 < 0 || color2 > 255)
	    return SendErrorMessage(playerid, "The second color can't be below 0 or above 255.");

	SetVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
	SendServerMessage(playerid, "You have changed the colors of this vehicle to %d, %d.", color1, color2);
	return 1;
}


CMD:panel(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 6 || !IsPlayerAdmin(playerid))
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (g_ServerLocked)
		Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Unlock Server\nSet Hostname\nExecute Query", "Seç", "{FF6347}Iptal");

	else Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Lock Server\nSet Hostname\nExecute Query", "Seç", "{FF6347}Iptal");
	return 1;
}

/*CMD:spawnitem(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4 && !IsPlayerAdmin(playerid))
	    return SendErrorMessage(playerid, "Yetkin yok!");


	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/spawnitem [item name] (/itemlist for a list)");

	static
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if (!strcmp(g_aInventoryItems[i][e_InventoryItem], params, true))
	{
	    new id = DropItem(g_aInventoryItems[i][e_InventoryItem], "Admin", g_aInventoryItems[i][e_InventoryModel], 1, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	    if (id == -1)
	        return SendErrorMessage(playerid, "The server has reached a limit for spawned items.");
        Log_Write("logs/spawnitem.txt", "[%s] %s has spawned %s", ReturnDate(), ReturnName(playerid, 0), g_aInventoryItems[i][e_InventoryItem]);
		SendServerMessage(playerid, "You have spawned a \"%s\" (type /setquantity to set the quantity).", g_aInventoryItems[i][e_InventoryItem]);
		return 1;
	}
    SendErrorMessage(playerid, "Invalid item name (use /itemlist for a list).");
	return 1;
}*/

/*CMD:setquantity(playerid, params[])
{
	static
	    id = -1,
		amount;

    if (PlayerData[playerid][pAdmin] < 4 && !IsPlayerAdmin(playerid))
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if ((id = Item_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "You are not in range of any spawned items.");

	if (sscanf(params, "d", amount))
	    return SendSyntaxMessage(playerid, "/setquantity [amount]");

	if (amount < 1)
	    return SendErrorMessage(playerid, "The specified amount can't be below 1.");

    Item_SetQuantity(id, amount);
    Log_Write("logs/spawnitem.txt", "[%s] %s has set the quantity of %s to %d.", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem], amount);
    SendServerMessage(playerid, "You have set the quantity of \"%s\" to %d.", DroppedItems[id][droppedItem], amount);
    return 1;
}*/

CMD:itemsil(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if ((id = Item_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "Herhangi bir itemin yakýnýnda deðilsin.");

    SendServerMessage(playerid, "Sildin. \"%s\".", DroppedItems[id][droppedItem]);
    Item_Delete(id);
    return 1;
}
CMD:cadirgir(playerid, params[])
{
	new id = Cadir_Nearest(playerid);

	if (id == -1) return SendErrorMessage(playerid, "Herhangi bir çadýra yakýn deðilsin.");
if (PlayerData[playerid][pCadiricinde]) return SendErrorMessage(playerid, "Zaten çadýrýn içindesin!");
ObjeleriYukle(playerid);
Cadir_Gir(playerid);
SetPlayerPos(playerid, 1173.8683,-2046.1031,50.9654);
PlayerData[playerid][pCadiricinde] = 1;
SendServerMessage(playerid, "Baþarýyla çadýrýn içine girdin!");
return 1;
}
CMD:cadircik(playerid, params[])
{
if (!PlayerData[playerid][pCadiricinde]) return SendErrorMessage(playerid, "Çadýrýn içinde deðilsin!");
SetPlayerPos(playerid, CadirData[playerid][cadirPos][0], CadirData[playerid][cadirPos][1], CadirData[playerid][cadirPos][2]);
SetPlayerVirtualWorld(playerid, 0);
PlayerData[playerid][pCadiricinde] = 0;
return 1;
}
CMD:boombox(playerid, params[])
{
	static
	    type[24],
	    string[128];

	//new isyeriid = Business_Inside(playerid);
	if (!Inventory_HasItem(playerid, "Boombox"))
	    return SendErrorMessage(playerid, "Müzik kutun yok.");
	    
	    if (PlayerData[playerid][pLevel] < 2) return SendErrorMessage(playerid, "Boombox kullanmak için en az 2 level olman gerekmektedir.");

	//if (isyeriid != -1 && BusinessData[isyeriid][bizType] == 9) return SendErrorMessage(playerid, "Bar tipi iþyeri içinde boombox koyamazsýn.");
	if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/boombox [ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} koy, al, url");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if (BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "Zaten bir müzik kutusu koymuþsun.");

		if (Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "Yakýnlarda zaten bir müzik kutusu var.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");

		Boombox_Place(playerid);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir müzik kutusu alýr ve yere koyar.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Müzik kutusunu koydun. (Ayarlarý  \"/boombox\" komutu ile yapabilirsin).");
	}
	else if (!strcmp(type, "al", true))
	{
	    if (!BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "Müzik kutusu kaldýrýldý.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return SendErrorMessage(playerid, "Müzik kutusunun yanýnda olmalýsýn.");

		Boombox_Destroy(playerid);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s müzik kutusunu yerden alýr.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "url", true))
	{
	    if (sscanf(string, "s[128]", string))
	        return SendSyntaxMessage(playerid, "/boombox [url] [müzik url]");

        if (!BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "Müzik kutusu koymamýþsýn.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return SendErrorMessage(playerid, "Müzik kutusunun yanýnda olmalýsýn.");

		Boombox_SetURL(playerid, string);
		BoomboxData[playerid][boomboxYoutube] = false;
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s müzik kutusunu baþka bir radyo istasyonuna çevirir.", ReturnName(playerid, 0));
	}

	return 1;
}

CMD:kampatesi(playerid, params[])
{
	static
	    type[24],
	    string[128];

	if (sscanf(params, "s[24]", type, string))
	{
	    SendSyntaxMessage(playerid, "/kampatesi [ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} koy, al");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if (!Inventory_HasItem(playerid, "Kalas"))
	    	return SendErrorMessage(playerid, "Kalasýn yok.");

	    if (KampAtesleri[playerid][atesVarmi])
	        return SendErrorMessage(playerid, "Zaten bir kamp ateþi koymuþsun.");

		if (KampAtesi_ID(playerid) != INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "Yakýnlarda zaten bir kamp ateþi var.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");

		Inventory_Remove(playerid, "Kalas", 1);
		KampAtesi_Koy(playerid);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s birkaç kalas alýr ve yere koyar.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Kalaslarý koydun. (Ayarlarý  \"/kampatesi\" komutu ile yapabilirsin).");
	}
	else if (!strcmp(type, "al", true))
	{
	    if (!KampAtesleri[playerid][atesVarmi])
	        return SendErrorMessage(playerid, "Kamp ateþi kaldýrýldý.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, KampAtesleri[playerid][atesPos][0], KampAtesleri[playerid][atesPos][1], KampAtesleri[playerid][atesPos][2]))
		    return SendErrorMessage(playerid, "Kamp ateþinin yanýnda olmalýsýn.");

		KampAtesi_Sil(playerid);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kamp ateþini kaldýrýr.", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:nargile(playerid, params[])
{
	static
	    type[24],
	    string[128];

	if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/nargile [ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} koy, al, ic");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if (!Inventory_HasItem(playerid, "Nargile"))
	    	return SendErrorMessage(playerid, "Bir nargileye sahip deðilsin.");

	    if (NargileAtesleri[playerid][nargileVarmi])
	        return SendErrorMessage(playerid, "Nargile zaten yerleþtirmiþsin.");

		if (NargileAtesi_ID(playerid) != INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "Yakýnlarda zaten bir nargile var.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");

		NargileAtesi_Koy(playerid);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s nargileyi yerleþtirir.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "al", true))
	{
	    if (!NargileAtesleri[playerid][nargileVarmi])
	        return SendErrorMessage(playerid, "Nargile yok.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, NargileAtesleri[playerid][nargilePos][0], NargileAtesleri[playerid][nargilePos][1], NargileAtesleri[playerid][nargilePos][2]))
		    return SendErrorMessage(playerid, "Nargilenin yanýnda olmalýsýn.");

		NargileAtesi_Sil(playerid);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s nargileyi kaldýrýr.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "ic", true))
	{
	    if (!NargileAtesleri[playerid][nargileVarmi])
	        return SendErrorMessage(playerid, "Nargile yok.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, NargileAtesleri[playerid][nargilePos][0], NargileAtesleri[playerid][nargilePos][1], NargileAtesleri[playerid][nargilePos][2]))
		    return SendErrorMessage(playerid, "Nargilenin yanýnda olmalýsýn.");

		ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0,0);
	//	NargileAtesleri[playerid][dumanObject] = CreateDynamicObject(18716,NargileAtesleri[playerid][nargilePos][0], NargileAtesleri[playerid][nargilePos][1], NargileAtesleri[playerid][nargilePos][2],0.0000000,0.0000000,0.0000000);
	//	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s nargileyi içmeye baþlar.", ReturnName(playerid, 0));
		SetTimerEx("Duman", 1000, 0, "d", playerid);
	}
	return 1;
}

CMD:adestroybox(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
		Boombox_Destroy(i);

		SendServerMessage(playerid, "You have destroyed %s's boombox.", ReturnName(i, 0));
		return SendServerMessage(i, "%s has destroyed your boombox.", ReturnName(playerid, 0));
	}
	SendErrorMessage(playerid, "You are not in range of any boombox.");
	return 1;
}

/*CMD:copbul(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Çöpçü deðilsin.");

	new id = GetClosestGarbage(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Hiç çöp yok.");

	PlayerData[playerid][pCP] = 1;

	SetPlayerCheckpoint(playerid, GarbageData[id][garbagePos][0], GarbageData[id][garbagePos][1], GarbageData[id][garbagePos][2], 2.5);
	SendServerMessage(playerid, "Çöp kutusu haritada iþaretlendi.");
	return 1;
}*/

CMD:elkoy(playerid, params[])
{
	new
	    userid,
		string[128];

    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/elkoy [ID]");

    if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncu size yakýn deðil veya baðlantýsý kesildi.");

	if (GetWeaponCount(userid) > 0)
		strcat(string, "Silah Al\n");

	if (Inventory_HasItem(userid, "Marijuana Tohumu") || Inventory_HasItem(userid, "Skunk Tohumu"))
	    strcat(string, "Tohum Al\n");

	if (Inventory_HasItem(userid, "Marijuana") || Inventory_HasItem(userid, "Kokain") || Inventory_HasItem(userid, "Skunk") || Inventory_HasItem(userid, "Eroin") || Inventory_HasItem(userid, "Steroid"))
	    strcat(string, "Uyusturucu Al\n");

    if (Inventory_HasItem(userid, "Telsiz"))
	    strcat(string, "Telsiz Al\n");

	if (Inventory_HasItem(userid, "Sirtcantasi") && GetPlayerBackpack(userid) != -1)
	    strcat(string, "Canta Al\n");

    if (Inventory_HasItem(userid, "Ruhsat"))
	    strcat(string, "Ruhsat Al\n");

   	if (Inventory_HasItem(userid, "Ehliyet"))
	    strcat(string, "Ehliyet Al\n");

	if (!strlen(string))
	    return SendErrorMessage(playerid, "Bu oyuncudan alabileceðiniz hiçbir yasadýþý ürün yok.");

	PlayerData[playerid][pTakeItems] = userid;
	Dialog_Show(playerid, TakeItems, DIALOG_STYLE_LIST, "Öðeleri Al", string, "Al", "{FF6347}Iptal");
	return 1;
}

CMD:kapiyikir(playerid, params[])
{
	static
	    id = -1;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_INTEL )
		return SendErrorMessage(playerid, "Bu komutu sadece resmi hizmet görevlileri kullanabilir !");


	if ((id = House_Nearest(playerid)) != -1)
	{
	    if (!HouseData[id][houseLocked])
	        return SendErrorMessage(playerid, "Bu ev zaten kilitli deðil.");

	    ShowPlayerFooter(playerid, "Kapi kirilmaya ~r~calisiliyor~w~...");
	    ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s evin kapýsýna vurup kapýyý kýrmaya çalýþýr.", ReturnName(playerid, 0));
	    SetTimerEx("KickHouse", 1500, false, "dd", playerid, id);
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
		if (!BusinessData[id][bizLocked])
		    return SendErrorMessage(playerid, "Bu iþyeri zaten kilitli deðil.");

		ShowPlayerFooter(playerid, "Kapi kirilmaya ~r~calisiliyor~w~.");
        ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s iþyerinin kapýsýna vurup kapýyý kýrmaya çalýþýr.", ReturnName(playerid, 0));
	    SetTimerEx("KickBusiness", 1500, false, "dd", playerid, id);
	}
	else {
		SendErrorMessage(playerid, "Bir ev veya iþyeri yakýnýnda olmalýsýn.");
	}
	return 1;
}


CMD:raf(playerid, params[])
{
	new
		id = Rack_Nearest(playerid),
		houseid = House_Inside(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Herhangi bir rafa yakýn deðilsin.");


	if (GetFactionType(playerid) == FACTION_GOV || GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_INTEL)
		return SendErrorMessage(playerid, "Bu oluþum türü bu iþlemi yapamaz.");

	if(House_IsOwner(playerid, houseid))
	{
	    Rack_ShowGuns(playerid, id);
	}
	else SendErrorMessage(playerid, "Bu ev senin deðil.");

	return 1;
}


CMD:createrack(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	id = Rack_Create(playerid, -1);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for weapon racks.");

    ResetEditing(playerid);
    PlayerData[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendServerMessage(playerid, "You have successfully created rack ID: %d.", id);
	return 1;
}

CMD:editrack(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/editrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendErrorMessage(playerid, "You have specified an invalid rack ID.");

	ResetEditing(playerid);
	PlayerData[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendServerMessage(playerid, "You are now editing weapon rack ID: %d.", id);
	return 1;
}

CMD:destroyrack(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendErrorMessage(playerid, "You have specified an invalid rack ID.");

	Rack_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed weapon rack ID: %d.", id);
	return 1;
}


CMD:numaraogren(playerid, params[])
{
	new number;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", number))
	    return SendSyntaxMessage(playerid, "/numaraogren [Telefon Numarasý]");

	if (number == 0)
	    return SendErrorMessage(playerid, "Böyle bir numara bulunmuyor.");

	if (GetNumberOwner(number) != INVALID_PLAYER_ID)
	    return SendServerMessage(playerid, "%d numarasý %s adlý oyuncuya ait.", number, ReturnName(GetNumberOwner(number), 0));

	SendErrorMessage(playerid, "Bu oyuncu oyunda deðil.");
	return 1;
}

CMD:admins(playerid, params[]) // asla deðiþtirme
{
// if (PlayerData[playerid][pAdmin] < 1) return SendErrorMessage(playerid, "Artýk online yetkililer gözükmeyecek!");
	new count = 0;

    SendClientMessage(playerid, 0xFFDB00CC, "*Online Yönetici:");

    foreach (new i : Player) if (PlayerData[i][pAdmin] > 0 && PlayerData[i][pAdminHide] < 1)
	{
	 new adminstring[256];
     if(PlayerData[i][pAdmin] == 1)adminstring = "Administrator";
     else if(PlayerData[i][pAdmin] == 2)adminstring = "Administrator";
     else if(PlayerData[i][pAdmin] == 3)adminstring = "Lead Administrator";
     else if(PlayerData[i][pAdmin] == 4)adminstring = "Developer";
	SendClientMessageEx(playerid, COLOR_WHITE, "%s (%s) %s", PlayerData[i][pAdminName], adminstring, (PlayerData[i][pAdminDuty]) ? ("{2ECC71}(Müsait)") : ("{FF0000}(AFK/Rol)"));
 	count++;
	}
	if (!count) {

	}
	Dialog_Show(playerid, AdminList, DIALOG_STYLE_MSGBOX, "Detaylar", " -Durumu 'AFK/Rol' olan yetkililerden ýsrarla yardým istemeyiniz. \n -Basit sorularýnýz için /sorusor komutunu kullanabilirsiniz. \n -Büyük sorunlarýnýz için lütfen web sitemizden ticket atýnýz. \n ", "Kapat", "");
	return 1;
}


CMD:ahsayi(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	new count = 0;

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pTester] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "* %s {33CC33}(Level: %d) {33CC33}(Toplam baktýðý rapor sayýsý: %d)", PlayerData[i][pTesterName], PlayerData[i][pTester], PlayerData[i][pSoruSayisi]);
        count++;
 	}
	if (!count) {
	    SendClientMessage(playerid, COLOR_WHITE, "* Aktif helper yok.");
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}




CMD:arsayi(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	new count = 0;

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pAdmin] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "* %s {33CC33}(Level: %d) {33CC33}(Toplam baktýðý rapor sayýsý: %d)", PlayerData[i][pAdminName], PlayerData[i][pAdmin], PlayerData[i][pRaporSayisi]);
        count++;
 	}
	if (!count) {
	    SendClientMessage(playerid, COLOR_WHITE, "* Aktif admin yok.");
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}
CMD:helpers(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pTester] > 0 && PlayerData[i][pTesterHide] < 1)
	{
       SendClientMessageEx(playerid, COLOR_WHITE, "%s ( Lv. %d ) %s", PlayerData[i][pTesterName], PlayerData[i][pTester], (PlayerData[i][pTesterDuty]) ? ("{2ECC71}(Müsait)") : ("{FF0000}(AFK/Rol)"));
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:lisansgoster(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/lisansgoster [ID]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncu size yakýn deðil veya aktif deðil.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");

	if (Inventory_HasItem(playerid, "Ehliyet")) SendClientMessageEx(userid, COLOR_WHITE, "* Ehliyet {33CC33}(Var)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Ehliyet {AA3333}(Yok)");

	if (Inventory_HasItem(playerid, "Ruhsat")) SendClientMessageEx(userid, COLOR_WHITE, "* Silah Ruhsatý {33CC33}(Var)");
	else SendClientMessageEx(userid, COLOR_WHITE, "* Silah Ruhsatý {AA3333}(Yok)");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s lisanslarý alýr ve %s'e gösterir.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:kimlikgoster(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/kimlikgoster [ID]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncu size yakýn deðil veya aktif deðil.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	new kimlik[256],kimliks[256],string[256],origin[64];

	format(kimliks,sizeof(kimliks),"* {FFFFFF}Ad/Soyad: {FFE4C4}%s", ReturnName(playerid));
	format(kimlik,sizeof(kimlik),"* {FFFFFF}Doðum Tarihi: {FFE4C4}%s", PlayerData[playerid][pBirthdate]);
	format(origin, 128, "* {FFFFFF} Köken: {FFE4C4}%s%.16s", PlayerData[playerid][pOrigin]);
	format(string, sizeof(string), "* {FFFFFF}Cinsiyet: {FFE4C4}%s", (PlayerData[playerid][pGender] == 2) ? ("Bayan") : ("Erkek"));
    SendClientMessage(userid, COLOR_GREY, kimliks);
	SendClientMessage(userid, COLOR_GREY, kimlik);
    SendClientMessage(userid, COLOR_GREY, origin);
    SendClientMessage(userid, COLOR_GREY, string);
	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s kimliðini çýkartýr ve %s'e gösterir.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:rozetgoster(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/rozetgoster [ID]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncu size yakýn deðil veya aktif deðil.");

	if (GetFactionType(playerid) == FACTION_GANG)
	    return SendErrorMessage(playerid, "Devlet kurumunda deðilsin.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	new kimlik[256],kimliks[256],string[256],origin[64], fact[128], rank[128];

	format(kimliks,sizeof(kimliks),"* {FFFFFF}Ad / Soyad: {FFE4C4}%s", ReturnName(playerid));
	format(kimlik,sizeof(kimlik),"* {FFFFFF}Doðum Tarihi: {FFE4C4}%s", PlayerData[playerid][pBirthdate]);
	format(origin, 128, "* {FFFFFF}Köken: {FFE4C4}%s%.16s", PlayerData[playerid][pOrigin]);
	format(string, sizeof(string), "* {FFFFFF}Cinsiyet: {FFE4C4}%s", (PlayerData[playerid][pGender] == 2) ? ("Bayan") : ("Erkek"));
	format(fact, sizeof(fact), "* {FFFFFF}Kurum: {FFE4C4}%s", FactionData[PlayerData[playerid][pFaction]][factionName]);
	format(rank, sizeof(rank), "* {FFFFFF}Rütbe: {FFE4C4}%s", Faction_GetRank(playerid));
    SendClientMessage(userid, COLOR_GREY, kimliks);
	SendClientMessage(userid, COLOR_GREY, kimlik);
    SendClientMessage(userid, COLOR_GREY, origin);
    SendClientMessage(userid, COLOR_GREY, string);
    SendClientMessage(userid, COLOR_GREY, fact);
    SendClientMessage(userid, COLOR_GREY, rank);
	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s kimliðini çýkartýr ve %s'e gösterir.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:karaktersil(playerid, params[])
{
	static
	    query[128];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/karaktersil [Karakter Adý]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "Geçersiz isim girdiniz.");

	format(query, sizeof(query), "SELECT `ID`, `Admin` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
	mysql_function_query(g_iHandle, query, true, "OnDeleteCharacter", "ds", playerid, params);

	return 1;
}

CMD:stoploading(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "You don't have the appropriate job.");

	if (!PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadType])
	    return SendErrorMessage(playerid, "You are not loading any crates right now.");

	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pLoadType] = 0;
    PlayerData[playerid][pLoadCrate] = 0;

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	SendServerMessage(playerid, "You are no longer loading crates.");

	return 1;
}

CMD:teslimatbasla(playerid, params[])
{
 	new id = Job_NearestPoint(playerid);

	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Taþýmacý deðilsiniz.");

	if (id == -1 || JobData[id][jobType] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Yükleme noktasýna yakýn deðilsin.");

	if (PlayerData[playerid][pLoadType] > 0)
	    return SendErrorMessage(playerid, "Teslimata zaten baþlamýþsýn.");

    if (IsPlayerInAnyVehicle(playerid))
    	return SendErrorMessage(playerid, "Araçtan inmeniz gerekmektdir.");

	Dialog_Show(playerid, StartDelivery, DIALOG_STYLE_LIST, "Tip seç:", "Market Ürünleri (Market)\nSilah Parçalarý (Silahçý)\nTekstil Ürünleri (Kýyafet Maðazasý)\nYemek Ürünleri (Fast-food)\nYakýt (Benzinlik)\nMobilya (Mobilya Dükkaný)", "Seç", "{FF6347}Iptal");
	return 1;
}

CMD:teslimatiptal(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "YTaþýmacý deðilsin.");

	if (PlayerData[playerid][pShipment] == -1)
	    return SendErrorMessage(playerid, "Herhangi bir teslimat yapmýyorsun.");

	CancelShipment(playerid);
	SendServerMessage(playerid, "Teslimat baþarýyla iptal edildi.");
	return 1;
}

CMD:teslimatlar(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Taþýmacý deðilsin.");

	if (PlayerData[playerid][pShipment] != -1)
	    return SendErrorMessage(playerid, "Zaten þu anda bir teslimat yapýyorsun, /teslimatiptal ile iptal edebilirsin!");

	ShowShipments(playerid);
	return 1;
}

CMD:sarjor(playerid, params[])
{
	new weaponid = PlayerData[playerid][pHoldWeapon];

	if (!weaponid)
	    return SendErrorMessage(playerid, "Elinde þarjörü olmayan silah yok.");

	if (!Inventory_HasItem(playerid, "Sarjor"))
	    return SendErrorMessage(playerid, "Þarjörün yok.");

	if (PlayerData[playerid][pUsedMagazine])
	    return SendErrorMessage(playerid, "Zaten bu silaha bir þarjör takýlý.");

	switch (weaponid)
	{
	    case 22:
	    {
		    PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Sarjor");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elindeki silaha þarjör yerleþtirir.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Sarjoru takmak icin ~y~'H'~w~ bas.");
		}
		case 24:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Sarjor");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elindeki silaha þarjör yerleþtirir.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Sarjoru takmak icin ~y~'H'~w~ bas.");
		}
		case 25:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Sarjor");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elindeki silaha þarjör yerleþtirir.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Sarjoru takmak icin ~y~'H'~w~ bas.");
		}
		case 27:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Sarjor");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elindeki silaha þarjör yerleþtirir.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Sarjoru takmak icin ~y~'H'~w~ bas.");
		}
		case 28:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Sarjor");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elindeki silaha þarjör yerleþtirir.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Sarjoru takmak icin ~y~'H'~w~ bas.");
		}
		case 29:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Sarjor");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elindeki silaha þarjör yerleþtirir.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Sarjoru takmak icin ~y~'H'~w~ bas.");
		}
		case 32:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Sarjor");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elindeki silaha þarjör yerleþtirir.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Sarjoru takmak icin ~y~'H'~w~ bas.");
		}
		case 30:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Sarjor");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elindeki silaha þarjör yerleþtirir.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Sarjoru takmak icin ~y~'H'~w~ bas.");
		}
		case 33:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Sarjor");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elindeki silaha þarjör yerleþtirir.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Sarjoru takmak icin ~y~'H'~w~ bas.");
		}
        case 34:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Sarjor");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s elindeki silaha þarjör yerleþtirir.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Sarjoru takmak icin ~y~'H'~w~ bas.");
		}
		default:
		    return SendErrorMessage(playerid, "Bu silaha þarjör takýlamaz.");
	}
	return 1;
}

CMD:envantersifirla(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/envantersifirla [ID]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	Inventory_Clear(userid);

	SendAdminAction(playerid, "%s adlý oyuncunun envanterini sýfýrladýn.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s adlý yetkili envanterinizi sýfýrladý.", ReturnName(playerid, 0));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s adlý yetkili %s adlý oyuncunun envanterini sýfýrladý.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}


CMD:uyarilarim(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Uyarýlarým (%d/3)", PlayerData[playerid][pWarnings]);

    if (PlayerData[playerid][pWarnings] >= 1 && strlen(PlayerData[playerid][pWarn1]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 1. Uyarý: \"%s\"", PlayerData[playerid][pWarn1]);

    if (PlayerData[playerid][pWarnings] >= 2 && strlen(PlayerData[playerid][pWarn2]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 2. Uyarý: \"%s\"", PlayerData[playerid][pWarn2]);

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:uyarigoster(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/uyarigoster [ID]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s'nin Uyarýlar (%d/3)", ReturnName(userid, 0), PlayerData[userid][pWarnings]);

    if (PlayerData[userid][pWarnings] >= 1 && strlen(PlayerData[userid][pWarn1]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 1st Uyarý: \"%s\"", PlayerData[userid][pWarn1]);

    if (PlayerData[userid][pWarnings] >= 2 && strlen(PlayerData[userid][pWarn2]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 2nd Uyarý: \"%s\"", PlayerData[userid][pWarn2]);

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:uyariver(playerid, params[])
{
	static
	    userid,
		reason[32];

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[32]", userid, reason))
	    return SendSyntaxMessage(playerid, "/uyariver [ID] [Gerekçe]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Belirtilen oyuncu sizden yüksek yetkiye sahiptir.");

	switch (++ PlayerData[userid][pWarnings])
	{
	    case 1:
	    {
	        format(PlayerData[userid][pWarn1], 32, reason);

	        SendAdminAction(userid, "%s has warned you for \"%s\" (first warning).", ReturnName(playerid, 0), reason);
	        SendAdminAction(playerid, "You have warned %s for \"%s\" (first warning).", ReturnName(userid, 0), reason);
		}
		case 2:
	    {
	        format(PlayerData[userid][pWarn2], 32, reason);

	        SendAdminAction(userid, "%s has warned you for \"%s\" (second warning).", ReturnName(playerid, 0), reason);
	        SendAdminAction(playerid, "You have warned %s for \"%s\" (second warning).", ReturnName(userid, 0), reason);
		}
		default:
	    {
	        ResetWarnings(userid);

	        SendAdminAction(userid, "Makisumum warn'a ulaþtýðýn için yasaklandýn. (\"%s\").", reason);
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s was banned for 3 warnings by %s, reason: %s", ReturnName(userid, 0), ReturnName(playerid, 0), reason);

			Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], "", PlayerData[playerid][pUsername], reason);
			KickEx(userid);
		}
	}
	Log_Write("logs/warn_log.txt", "[%s] %s has warned %s for %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), reason);
	return 1;
}

CMD:uyarisifirla(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/uyarisifirla [ID]");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirttiðiniz oyuncu oyunda deðil !");

	ResetWarnings(userid);

	SendAdminAction(playerid, "You have cleared %s's warnings.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s has cleared your warnings.", ReturnName(playerid, 0));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has cleared %s's warnings.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:yukle(playerid, params[])
{
	new id = -1;

	if (PlayerData[playerid][pJob] != JOB_SORTER)
	    return SendErrorMessage(playerid, "Paketleyici deðilsin");

    if ((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_SORTER)
		return SendErrorMessage(playerid, "Paketleme noktasýnda deðilsin.");

 	switch (PlayerData[playerid][pSorting])
 	{
	 	case -1:
 	    {
 	        PlayerData[playerid][pSorting] = id;
 	        PlayerData[playerid][pSortCrate] = 1;

			SendServerMessage(playerid, "Kutuyu paketledin, haritada belirtilen noktaya teslim et.");

 	        SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
			SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 1.0);
		}
		default:
		{
		    PlayerData[playerid][pSorting] = -1;

		    if (PlayerData[playerid][pSortCrate] != 0)
		    {
		        PlayerData[playerid][pSortCrate] = 0;

		        RemovePlayerAttachedObject(playerid, 4);
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
 	        }
 	        DisablePlayerCheckpoint(playerid);
 	        SendServerMessage(playerid, "Paketlemeyi býraktýn.");
 	    }
	}
	return 1;
}

CMD:silahver(playerid, params[])
{
	new
	    weaponid = GetWeapon(playerid),
	    ammo = GetPlayerAmmo(playerid),
		userid;

    if (GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_GOV || GetFactionType(playerid) == FACTION_INTEL)
		return SendErrorMessage(playerid, "Bu komut devlet kurumlarý kullanamaz !");

	if (!weaponid)
	    return SendErrorMessage(playerid, "Silah vermek için silahýn elinde olmasý gereklidir.");

	if (PlayerData[playerid][pBaygin] || PlayerData[playerid][pKilled])
	    return SendErrorMessage(playerid, "Baygýnken veya ölüyken bu komutu kullanamazsýn.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/silahver [ID]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Bu oyuncu size yakýn deðil veya baðlantýsý kesildi.");

    if(GetPlayerState(userid) == PLAYER_STATE_SPECTATING)
	    return SendErrorMessage(playerid, "Oyuncu oyunda deðil veya sana uzak.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "Kendine bir silah veremezsin.");

    if (PlayerData[userid][pLevel] < 3)
		return SendErrorMessage(playerid, "Þahýs 3 level deðil!");

	if (PlayerData[userid][pGuns][g_aWeaponSlots[weaponid]] != 0)
	    return SendErrorMessage(playerid, "Bu oyuncuda boþ slot bulunmamaktadýr.");

    if(PlayerHasWeaponSlot(userid, g_aWeaponSlots[weaponid]) && g_aWeaponSlots[weaponid] != 0 )
		return SendErrorMessage(playerid, "Bu silah türü oyuncuda var.");

	ResetWeapon(playerid, weaponid);
	GiveWeaponToPlayer(userid, weaponid, ammo);
	SetPlayerArmedWeapon(userid, 0);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s, %s model silahý %s'a verir.", ReturnName(playerid, 0), ReturnWeaponName(weaponid), ReturnName(userid, 0));
	Log_Write("logs/give_log.txt", "[%s] %s (%s) has given a %s with %d ammo to %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:vw(playerid, params[]) {
	SendClientMessageEx(playerid, COLOR_CLIENT, "Bulunduðunuz Virtual World: %d", GetPlayerVirtualWorld(playerid));

	return 1;
}
CMD:ssmodac(playerid, params[]) // siyah açar
{
PlayerTextDrawShow(playerid, BlackTD[playerid][0]);
PlayerTextDrawShow(playerid, BlackTD[playerid][1]);
SendErrorMessage(playerid, "Siyah ekran aktif edildi.");
//SendNearbyMessage(playerid, 10.0, COLOR_CYAN, "> %s gözlerini kapatýr.", ReturnName(playerid, 0));
return 1;
}
CMD:ssmodkapa(playerid, params[]) // siyah kapatýr.
{
PlayerTextDrawHide(playerid, BlackTD[playerid][0]);
PlayerTextDrawHide(playerid, BlackTD[playerid][1]);
SendErrorMessage(playerid, "Siyah ekran de-aktif edildi.");
//SendNearbyMessage(playerid, 10.0, COLOR_CYAN, "> %s gözlerini açar.", ReturnName(playerid, 0));
return 1;
}
CMD:taggizle(playerid, params[])
{
for(new i = GetPlayerPoolSize(); i != -1; --i) ShowPlayerNameTagForPlayer(playerid, i, false);
SendServerMessage(playerid, "Tüm taglar gizlendi!");
return 1;
}
CMD:taggoster(playerid, params[])
{
for(new i = GetPlayerPoolSize(); i != -1; --i) ShowPlayerNameTagForPlayer(playerid, i, true);
SendServerMessage(playerid, "Tüm taglar gösterildi!");
return 1;
}
/*CMD:hduty(playerid, params[])
{
	if (!PlayerData[playerid][pTester])
	    return SendErrorMessage(playerid, "Tester deðilsin.");

	if (!PlayerData[playerid][pTesterDuty])
	{
	//	SetPlayerColor(playerid, 0xFF634700);

		PlayerData[playerid][pTesterDuty] = 1;
		SendServerMessage(playerid, "Ýþbaþý yaptýn!");
//		SendClientMessageToAllEx(COLOR_LIGHTRED, "** %s adlý tester iþbaþý yaptý (/sorusor komutu ile soru sorabilirsin).", ReturnName(playerid, 0));
	}
	else
	{
	    //ayarlaColor(playerid, DEFAULT_COLOR);

		PlayerData[playerid][pTesterDuty] = 0;
		SendServerMessage(playerid, "Ýþbaþýndan çýktýn.");
	}
	return 1;
}*/

CMD:ro(playerid, params[])
{
	new userid;
	if (PlayerData[playerid][pTester] < 1 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", userid))
	    return SendSyntaxMessage(playerid, "/ro	[oyuncu id]");

    if (strlen(PlayerData[userid][pAdvertise]) <= 0)
	    return SendErrorMessage(playerid, "Kiþi reklam göndermemiþ.");

	SendAdminAlert(COLOR_CLIENT, "[ADMIN]: %s adlý yetkili %s adlý oyuncunun reklamýný kabul etti.", ReturnName(playerid, 0), ReturnName(userid, 0));

    new
	    text[128];

    GiveMoney(userid, -150);
	strunpack(text, PlayerData[userid][pAdvertise]);

	foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	    SendClientMessageEx(i, COLOR_ORANGE, "<LSTV> [Reklam] %s ", text);
		SendClientMessageEx(i, COLOR_ORANGE, "<LSTV> [Reklam] Iletisim: %s Telefon: %d", ReturnName(userid, 0), PlayerData[userid][pPhone]); // "{1EFF00}[REKLAM]:{FFFFFF} %s {1EFF00}(( {FFFFFF}%s - %d {1EFF00}))

	}
	PlayerData[userid][pAdvertise][0] = 0;


	KillTimer(PlayerData[userid][pReklamTimer]);
    PlayerData[playerid][pSoruSayisi]++;
	return 1;
}

CMD:rr(playerid, params[])
{
	new userid;
if (PlayerData[playerid][pTester] < 1 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", userid))
	    return SendSyntaxMessage(playerid, "/rr	[oyuncu id]");

    if (strlen(PlayerData[userid][pAdvertise]) <= 0)
	    return SendErrorMessage(playerid, "Kiþi reklam göndermemiþ.");

	SendAdminAlert(COLOR_CLIENT, "[ADMIN]: %s adlý yetkili %s adlý oyuncunun reklamýný ret etti.", ReturnName(playerid, 0), ReturnName(userid, 0));


	SendServerMessage(userid, "%s reklamýný uygun olmadýðý için ret etti.", ReturnName(playerid, 0));
	PlayerData[userid][pAdvertise][0] = 0;

	KillTimer(PlayerData[userid][pReklamTimer]);
    PlayerData[playerid][pSoruSayisi]++;
	return 1;
}


/*CMD:dh(playerid, params[])
{
	new soruid;

	if (!PlayerData[playerid][pTester])
	    return SendErrorMessage(playerid, "Sen bir tester deðilsin.");

	if (sscanf(params, "d", soruid))
	    return SendSyntaxMessage(playerid, "/dh [soru id]");

    if ((soruid < 0 || soruid >= MAX_SORU) || !Sorular[soruid][rExists])
	    return SendErrorMessage(playerid, "Geçersiz soru ID'sý. Soru Sayýsý: %d.", MAX_SORU);

	SendServerMessage(Sorular[soruid][rPlayer], "%s soru talebini sildi.", ReturnName(playerid, 0));
	SendTesterMessage(COLOR_CLIENT, "[TESTER]: %s adlý tester %s adlý oyuncunun soru talebini sildi.", ReturnName(playerid, 0), ReturnName(Sorular[soruid][rPlayer], 0));
	Soru_Remove(soruid);
    PlayerData[playerid][pSoruSayisi]++;
	return 1;
}

CMD:rh(playerid, params[])
{
	new soruid;

	if (!PlayerData[playerid][pTester])
	    return SendErrorMessage(playerid, "Sen bir tester deðilsin.");

	if (sscanf(params, "d", soruid))
	    return SendSyntaxMessage(playerid, "/rh [soru id]");

    if ((soruid < 0 || soruid >= MAX_SORU) || !Sorular[soruid][rExists])
	    return SendErrorMessage(playerid, "Geçersiz soru ID'sý. Soru Sayýsý: %d.", MAX_SORU);

	SendServerMessage(Sorular[soruid][rPlayer], "%s soru talebini (/rapor) kanalýna yönlendirdi.", ReturnName(playerid, 0));
	SendTesterMessage(COLOR_CLIENT, "[TESTER]: %s adlý tester %s adlý oyuncunun soru talebini (/rapor) kanalýna yönlendirdi.", ReturnName(playerid, 0), ReturnName(Sorular[soruid][rPlayer], 0));
	Soru_Remove(soruid);
    PlayerData[playerid][pSoruSayisi]++;
	return 1;
}*/



CMD:tcanfulle(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	foreach (new i : Player) {
     CanDegistir(i, 100.0);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s bütün oyuncularýn saðlýk barýný doldurdu.", ReturnName(playerid, 0));
	return 1;
}

CMD:reviveall(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	foreach (new i : Player) {
	    if(PlayerData[i][pBaygin])
	    {
		    SetCameraBehindPlayer(i);
			//ShowHungerTextdraw(i, 1);
			PlayerData[i][pBaygin] = false;

			ClearAnimations(i);
			PlayerData[i][pKilled] = false;
			TextDrawHideForPlayer(i, gServerTextdraws[2]);
			Yarali[i] = false;
		}
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s bütün oyuncularý canlandýrdý.", ReturnName(playerid, 0));
	return 1;
}

CMD:tkaydet(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	foreach(new i : Player) { SQL_SaveCharacter(i);	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s tüm sunucuyu kaydetti.", ReturnName(playerid, 0));
	return 1;
}

CMD:vbetaparaver(playerid, params[])
{
if (PlayerData[playerid][pAdmin] < 4)
	return SendErrorMessage(playerid, "Yetkin yok!");
	foreach (new i : Player) { HerkeseParaVer(i);	}
SendClientMessageToAllEx(COLOR_CLIENT, "ADCMD: vBeta aktif oyunculara $15.000 dolar hediye etti!");
return 1;
}
HerkeseParaVer(playerid)
{
GiveMoney(playerid, 15000);
}

CMD:fisilda(playerid, params[])
{
    if(GetPVarInt(playerid, "TV") == 1) return 1;
	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/(w)hisper [ID] [yazý]");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 3.0))
	    return SendErrorMessage(playerid, "Oyuncu oyunda deðil veya sana uzak.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "Kendine fýsýldayamazsýn.");

	if(GetPlayerState(userid) == PLAYER_STATE_SPECTATING)
	    return SendErrorMessage(playerid, "Oyuncu oyunda deðil veya sana uzak.");

    if (strlen(text) > 64) {
	    SendClientMessageEx(userid, COLOR_YELLOW, "** %s fýsýldadý (%d): %.64s", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(userid, COLOR_YELLOW, "...%s **", text[64]);

	    SendClientMessageEx(playerid, COLOR_YELLOW, "** %s'a fýsýldadýn (%d): %.64s", ReturnName(userid, 0), userid, text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
	}
	else {
	    SendClientMessageEx(userid, COLOR_YELLOW, "** %s fýsýldadý (%d): %s **", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "** %s'a fýsýldadýn (%d): %s **", ReturnName(userid, 0), userid, text);
	}
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s, %s'ýn kulaðýna yaklaþýr ve fýsýldar.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:maske(playerid, params[])
{

    if (!PlayerData[playerid][pMask])
        return SendErrorMessage(playerid, "OOC Market'ten maske kullanýmý satýn almalýsýn!");

	if (!Inventory_HasItem(playerid, "Maske"))
		return SendErrorMessage(playerid, "Masken yok.");

	switch (PlayerData[playerid][pMaskOn])
	{
		case 0:
		{
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s maskeyi yüzüne takar.", ReturnName(playerid, 0));
		    PlayerData[playerid][pMaskOn] = 1;
		    foreach(new i : Player) ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
		case 1:
		{
		    PlayerData[playerid][pMaskOn] = 0;
		    SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s yüzündeki maskeyi çýkartýr.", ReturnName(playerid, 0));
		    foreach(new i : Player) ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
	}
	return 1;
}

CMD:maskeliler(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	static
	    name[24];

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pMaskOn]) {
        GetPlayerName(i, name, sizeof(name));

        SendClientMessageEx(playerid, COLOR_WHITE, "* %s (#%d)", name, PlayerData[i][pMaskID]);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:silahlistele(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/silahlistele [ID]");

	if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Bu oyuncu oyunda deðil.");

	new
	    weaponid,
	    ammo;

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s's Silahlarý:", ReturnName(userid, 0));

	for (new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(userid, i, weaponid, ammo);

		if (weaponid > 0)
		    SendClientMessageEx(playerid, COLOR_WHITE, "* %s (%d mermi)", ReturnWeaponName(weaponid), ammo);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:flasor(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_INTEL)
	    return SendErrorMessage(playerid, "Polis memuru veya devlet memuru deðilsin.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Bir aracýn içinde olmalýsýn.");

	switch (Flasher[vehicleid])
	{
	    case 0:
	    {
		    Flasher[vehicleid] = 1;
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s aracýn flaþörünü açar.", ReturnName(playerid, 0));
		}
		case 1:
		{
            Flasher[vehicleid] = 0;
            SetLightStatus(vehicleid, false);
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s aracýn flaþörünü kapatýr.", ReturnName(playerid, 0));
		}
	}
	return 1;
}


CMD:siren(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_INTEL)
	    return SendErrorMessage(playerid, "Polis memuru veya devlet memuru deðilsin.");


	new vehicleid = GetPlayerVehicleID(playerid);

	if (!ModifiyeEdilemezArac(vehicleid))
		    return SendErrorMessage(playerid, "Bu kuruma ait deðil!");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Bir aracýn içinde olmalýsýn.");

	switch (CoreVehicles[vehicleid][vehSirenOn])
	{
	    case 0:
	    {
	    new Float: player_pos[3];
        GetPlayerPos(playerid, player_pos[0], player_pos[1], player_pos[2]);
            CoreVehicles[vehicleid][vehSirenOn] = 1;
			CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(18646, player_pos[0], player_pos[1], player_pos[2], 0.0, 0.0, 0.0);
			SetPVarInt(playerid, "SIREN", 1);
			EditDynamicObject(playerid, CoreVehicles[vehicleid][vehSirenObject]);
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s araca bir taþýnabilir siren takar.", ReturnName(playerid, 0));
		}
		case 1:
		{
		    CoreVehicles[vehicleid][vehSirenOn] = 0;
            DeletePVar(playerid, "SIREN");
			DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
			SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s araçtan takýlý olan taþýnabilir sireni içeri alýr.", ReturnName(playerid, 0));
		}
	}
	return 1;
}



/*
CMD:breakcuffs(playerid, params[])
{
	static
		userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/breakcuffs [ID]");

	if (!Inventory_HasItem(playerid, "Levye"))
	    return SendErrorMessage(playerid, "You don't have a crowbar.");

	if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");

	if (!PlayerData[userid][pCuffed])
	    return SendErrorMessage(playerid, "The specified player is not cuffed.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "You can't pick your own handcuffs.");

	SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s attempts to pick the cuffs with a crowbar.", ReturnName(playerid, 0));
	return 1;
}
*/


CMD:tokalas(playerid, params[])
{
	static
	    userid,
	    type;

	if (sscanf(params, "ud", userid, type))
	    return SendSyntaxMessage(playerid, "/tokalas [ID] [tip]");

    if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "Belirtilen oyuncu oyunda deðil veya size yakýn deðil.");

    if (userid == playerid)
		return SendErrorMessage(playerid, "Kendi elinle tokalaþamazsýn.");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tür 1-6 arasýnda olmasý gerekir.");

	PlayerData[userid][pShakeOffer] = playerid;
	PlayerData[userid][pShakeType] = type;

	SendServerMessage(userid, "%s seninle tokalaþmak istiyor. (\"/kabulet tokalasma\").", ReturnName(playerid, 0));
	SendServerMessage(playerid, "%s adlý oyuncuya tokalaþma isteði yolladýn.", ReturnName(userid, 0));
	return 1;
}

CMD:ustunuara(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/uara [ID]");

    if (!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "Belirtilen oyuncu aktif deðil ya da size yakýn deðil.");

    if (userid == playerid)
		return SendErrorMessage(playerid, "Kendi üstünü arayamazsýn.");

	PlayerData[userid][pFriskOffer] = playerid;

	SendServerMessage(userid, "%s üstünü aramak istiyor. (\"/kabulet arama\").", ReturnName(playerid, 0));
	SendServerMessage(playerid, "%s adlý oyuncuya üstünü arama isteði gönderildi.", ReturnName(userid, 0));
	return 1;
}

CMD:odaklan(playerid, params[])
{
static userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/odaklan [ID]");

    if (strlen(PlayerData[userid][pGorunus]) <= 0)
	    return SendErrorMessage(playerid, "Belirtilen kiþi dýþ görünüþ belirlememiþ.");

    if (!IsPlayerConnected(userid))
	    return SendErrorMessage(playerid, "Belirtilen oyuncu aktif deðil.");

	GorunusIncele(playerid, userid);
return 1;
}

CMD:creategraffiti(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
 		return SendErrorMessage(playerid, "You can only create graffiti points outside interiors.");

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for graffiti points.");

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerData[playerid][pEditGraffiti] = id;
	SendServerMessage(playerid, "You have successfully created graffiti ID: %d.", id);
	return 1;
}

CMD:destroygraffiti(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroygraffiti [graffiti id]");

	if ((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	    return SendErrorMessage(playerid, "You have specified an invalid graffiti ID.");

	Graffiti_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed graffiti ID: %d.", id);
	return 1;
}

CMD:kontraktlar(playerid, params[])
{
	new string[2500], sayi = 0;
	if (GetFactionType(playerid) != FACTION_GANG || FactionData[PlayerData[playerid][pFaction]][gTip] != GTIP_HITMAN )
	    return SendErrorMessage(playerid, "Seri katil tipi bir birliðin üyesi deðilsin.");

	strcat(string, "Kurban\tSahip\tTarih\tMiktar\n");
  foreach (new i : Player)
	{
	    for (new j = 0; j < MAX_KONTRAKT; j ++)
		{
	 		if (Kontraktlar[i][j][kontraktVarmi])  {
				format(string, sizeof(string), "%s%d ID | %s\t%s\t%s\t%d\t%s\n", string, i, ReturnName(i, 0), Kontraktlar[i][j][kontraktImzalayan], Kontraktlar[i][j][kontraktTarih], Kontraktlar[i][j][kontraktMiktar]);
				sayi++;
			 }
	 	}
	}
	if(sayi == 0) return SendErrorMessage(playerid, "Hiç Kontrakt yok.");
	Dialog_Show(playerid, Kontraktlar, DIALOG_STYLE_TABLIST_HEADERS, "Kontraktlar", string, "Seç", "{FF6347}Iptal");
	return 1;
}

/*CMD:katilsms(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Telefon"))
	    return SendErrorMessage(playerid, "Cep telefonun yok.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "Telefonun kapalý.");

	static
		text[128];

	if (sscanf(params, "s[128]", text))
	    return SendSyntaxMessage(playerid, "/katilsms [mesaj]");

 foreach(new i : Player)
	{
	    if (IsPlayerConnected(i) && IsPlayerSpawnedEx(i))
	    {
			SendClientMessageEx(i, COLOR_YELLOW, "[SMS]: %s (Bilinmeyen Numara)", text);
   			PlayerPlaySoundEx(i, 21001);
   		}
	}
	return 1;
}

CMD:okatilsms(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Telefon"))
	    return SendErrorMessage(playerid, "Cep telefonun yok.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "Telefonun kapalý.");

	static
	    targetid,
		text[128],
		num;

	if (sscanf(params, "ds[128]", num, text))
	    return SendSyntaxMessage(playerid, "/katilsms [numara] [mesaj]");

	if ((targetid = GetNumberOwner(num)) != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(targetid, COLOR_YELLOW, "[SMS]: %s (Bilinmeyen Numara)", text);
   		PlayerPlaySoundEx(targetid, 21001);
    }
	return 1;
}


CMD:c4(playerid, params[])
{
	static
	    type[24], string[256];
	if (GetFactionType(playerid) != FACTION_GANG || FactionData[PlayerData[playerid][pFaction]][gTip] != GTIP_HITMAN )
	    return SendErrorMessage(playerid, "Seri katil tipi bir birliðin üyesi deðilsin.");

    if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/c4 [ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} koy, al, patlat.");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if (Bombalar[playerid][bombaPlaced])
	        return SendErrorMessage(playerid, "Zaten bir C4 koymuþsun.");

		if (Bomba_Nearest(playerid) != INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "Yakýnlarda<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< zaten bir C4 var.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");

		Bomba_Koy(playerid);

		SendServerMessage(playerid, "C4 koyuldu.");
	}
	else if (!strcmp(type, "al", true))
	{
	    if (!Bombalar[playerid][bombaPlaced])
	        return SendErrorMessage(playerid, "C4 kaldýrýldý.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, Bombalar[playerid][bombaPos][0], Bombalar[playerid][bombaPos][1], Bombalar[playerid][bombaPos][2]))
		    return SendErrorMessage(playerid, "C4'ün yanýnda olmalýsýn.");

		Bomba_Sil(playerid);

	}
	else if (!strcmp(type, "patlat", true))
	{
	    Bomba_Patlat(playerid);
	    SendServerMessage(playerid, "C4 patlatýldý.");
	}
	return 1;
}*/


Dialog:Kontraktlar(playerid, response, listitem, inputtext[]) {
	if (response)
	{

	    new notreal[128], idx, baslik[256];
		notreal = strtok(inputtext, idx);
		SetPVarInt(playerid, "KurbanID", strval(notreal));
		new kurbanid = strval(notreal);
		if(!IsPlayerConnected(kurbanid) || !IsPlayerSpawnedEx(kurbanid)) return SendErrorMessage(playerid, "Kiþi oyundan ayrýlmýþ/spawnlanmamýþ.");
		if(!KontraktVarmi(kurbanid)) return SendErrorMessage(playerid, "Kurban adýna hiç kontrakt yok.");
  		format(baslik, sizeof(baslik), "{ED4D18}#ID: %d - Kurban Bilgileri", strval(notreal));
		Dialog_Show(playerid, KontraktMenu, DIALOG_STYLE_LIST, baslik, "Kimlik Bilgileri\nKontrakt Sebepleri\nKontraktlarý Üstlen\nYer Öðren", "Seç", "<< Geri");
	}
	return 1;
}

Dialog:KontraktMenu(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new kurbanid = GetPVarInt(playerid, "KurbanID");
		if(!IsPlayerConnected(kurbanid) || !IsPlayerSpawnedEx(kurbanid)) return SendErrorMessage(playerid, "Kiþi oyundan ayrýlmýþ/spawnlanmamýþ.");
		if(!KontraktVarmi(kurbanid)) return SendErrorMessage(playerid, "Kurban adýna hiç kontrakt yok.");
		if(listitem == 0)
		{
			new kimlik[256],kimliks[256],string[256],origin[64], profil[1024];
			format(kimliks,sizeof(kimliks),"* {FFFFFF}Ad / Soyad: {FFE4C4}%s\n", ReturnName(kurbanid));
			format(kimlik,sizeof(kimlik),"* {FFFFFF}Doðum Tarihi: {FFE4C4}%s\n", PlayerData[kurbanid][pBirthdate]);
			format(origin, 128, "* {FFFFFF}Uyruk / Köken: {FFE4C4}%s%.16s\n", PlayerData[kurbanid][pOrigin]);
			format(string, sizeof(string), "* {FFFFFF}Cinsiyet: {FFE4C4}%s", (PlayerData[kurbanid][pGender] == 2) ? ("Bayan") : ("Erkek"));
		    strcat(profil, kimliks);
			strcat(profil, kimlik);
		    strcat(profil, origin);
		    strcat(profil, string);
		    format(string, sizeof(string), "* {FFFFFF}Telefon: {FFE4C4}%d\n", PlayerData[kurbanid][pPhone]);
		    strcat(profil, string);
		    format(string, sizeof(string), "* {FFFFFF}Oluþum: {FFE4C4}%s\n", FactionData[PlayerData[kurbanid][pFaction]][factionName]);
		    strcat(profil, string);
            format(string, sizeof(string), "* {FFFFFF}Rütbe: {FFE4C4}%s\n", Faction_GetRank(kurbanid));
            strcat(profil, string);
            Dialog_Show(playerid, Kontrakt_KimlikBilgi, DIALOG_STYLE_MSGBOX, ReturnName(kurbanid, 0), profil, "Tamam", "");
		}
		if(listitem == 1)
		{
		    new string[1024];
		    for (new j = 0; j < MAX_KONTRAKT; j ++)
			{
		 		if (Kontraktlar[kurbanid][j][kontraktVarmi])  {
					format(string, sizeof(string), "%s[Kontrakt Detayý]\n%s\n\n\n\n", string, Kontraktlar[kurbanid][j][kontraktSebep]);
		 		}
		 	}
			Dialog_Show(playerid, Kontrakt_KontraktSebebi, DIALOG_STYLE_MSGBOX, ReturnName(kurbanid, 0), string, "Tamam", "");
		}
		if(listitem == 2)
		{
			for (new j = 0; j < MAX_KONTRAKT; j ++)
			{
		 		if (Kontraktlar[kurbanid][j][kontraktVarmi])  {
					Kontraktlar[kurbanid][j][kontraktKatil] = playerid;
				 }
		 	}
		 	SendServerMessage(playerid, "Kurbanýn tüm kontraktlarýný üslendiniz, onu þimdi avlayabilirsiniz.");
		}
		if(listitem == 3)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(kurbanid, x, y, z);
			SendServerMessage(playerid, "Kiþinin son görüldüðü lokasyon: %s", GetLocation(x, y, z));
		}
	}
	return 1;
}
CMD:fspray(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);


	if (id == -1)
	    return SendErrorMessage(playerid, "Herhangi bir graffitiye yakýn deðilsin.");

	if (PlayerData[playerid][pLevel] < 5) return SendErrorMessage(playerid, "Graffiti yapabilmek için en az 5 seviye olmalýsýn.");
	if (GetFactionType(playerid) != FACTION_GANG || FactionData[PlayerData[playerid][pFaction]][gTip] != GTIP_CETE || !FactionData[PlayerData[playerid][pFaction]][factionOnay])
	    return SendErrorMessage(playerid, "Çete tipi onaylý bir birliðin üyesi deðilsin.");

	if(!FactionData[PlayerData[playerid][pFaction]][factionOnay]) return SendErrorMessage(playerid, "Bulunduðunuz birlik onaylý deðil.");
	Dialog_Show(playerid, GraffitiColor, DIALOG_STYLE_LIST, "Renk Seçin", "{FFFFFF}Beyaz\n{FF0000}Kýrmýzý\n{FFFF00}Sarý\n{33CC33}Yeþil\n{33CCFF}Açýk Mavi\n{FFA500}Turuncu\n{1394BF}Koyu Mavi", "Seç", "{FF6347}Iptal");
	return 1;
}

CMD:yanginolustur(playerid, params[])
{

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;
	    
	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");
	    
	RandomFire();

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);
	SendServerMessage(playerid, " %s adlý yere baþarýyla yangýn oluþturuldu.", GetLocation(fX, fY, fZ));
	return 1;
}

CMD:ahide(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	switch (PlayerData[playerid][pAdminHide])
	{
	    case 0:
	    {
	        PlayerData[playerid][pAdminHide] = 1;
	        SendServerMessage(playerid, "Admin listesinde görünmezsin!");
		}
		case 1:
	    {
	        PlayerData[playerid][pAdminHide] = 0;
	        SendServerMessage(playerid, "Admin listesinde görünürsün!");
		}
	}
	return 1;
}
CMD:hhide(playerid, params[])
{
    if (PlayerData[playerid][pTester] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	switch (PlayerData[playerid][pTesterHide])
	{
	    case 0:
	    {
	        PlayerData[playerid][pTesterHide] = 1;
	        SendServerMessage(playerid, "Helper listesinde görünmezsin!");
		}
		case 1:
	    {
	        PlayerData[playerid][pTesterHide] = 0;
	        SendServerMessage(playerid, "Helper listesinde görünürsün!");
		}
	}
	return 1;
}

CMD:createdetector(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	static
	    query[255];

	for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (!MetalDetectors[i][detectorExists])
	{
	    MetalDetectors[i][detectorExists] = 1;
	    MetalDetectors[i][detectorInterior] = GetPlayerInterior(playerid);
	    MetalDetectors[i][detectorWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]);
	    GetPlayerFacingAngle(playerid, MetalDetectors[i][detectorPos][3]);

		format(query, sizeof(query), "INSERT INTO `detectors` (`detectorX`, `detectorY`, `detectorZ`, `detectorAngle`, `detectorInterior`, `detectorWorld`) VALUES('%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d')", MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2], MetalDetectors[i][detectorPos][3], MetalDetectors[i][detectorInterior], MetalDetectors[i][detectorWorld]);
		mysql_function_query(g_iHandle, query, false, "OnDetectorCreated", "d", i);

	    Detector_Refresh(i);
	    SendServerMessage(playerid, "You have created metal detector ID: %d.", i);
	    return 1;
	}
	SendErrorMessage(playerid, "The server has reached a limit for metal detectors.");
	return 1;
}

CMD:destroydetector(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroydetector [detector id]");

	if ((id < 0 || id >= MAX_METAL_DETECTORS) || !MetalDetectors[id][detectorExists])
	    return SendErrorMessage(playerid, "You have specified an invalid detector ID.");

	Detector_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed detector ID: %d.", id);
	return 1;
}

/*CMD:levye(playerid, params[])
{
	new id = Car_Nearest(playerid);

	if (!Inventory_HasItem(playerid, "Levye"))
	    return SendErrorMessage(playerid, "Levyen yok.");

	if (id == -1)
	    return SendErrorMessage(playerid, "Herhangi bir aracýn yakýnýnda deðilsin.");

	if (!CarData[id][carLocked])
	    return SendErrorMessage(playerid, "Bu araç kilitli deðil.");

	PlayerData[playerid][pPicking] = 1;
	PlayerData[playerid][pPickCar] = id;

	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s bir levye alýr ve kilidi kýrar.", ReturnName(playerid, 0));
	SendServerMessage(playerid, "60 saniye bekleyin.");
	return 1;
}*/

CMD:aracver(playerid, params[])
{
	static
		userid,
	    model[32];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "us[32]", userid, model))
	    return SendSyntaxMessage(playerid, "/aracver [ID] [Arac ID]");

	if (Car_GetCount(userid) >= MAX_OWNABLE_CARS)
	    return SendErrorMessage(playerid, "This player already owns the maximum amount of cars.");

    if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "Invalid model ID.");

	static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle,
		id = -1;

    GetPlayerPos(userid, x, y, z);
	GetPlayerFacingAngle(userid, angle);

	id = Car_Create(PlayerData[userid][pID], model[0], x, y + 2, z + 1, angle, random(127), random(127), 0);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for dynamic vehicles.");

    CarData[id][carDisplay] = true;
    SetVehicleVirtualWorld(CarData[id][carVehicle], GetPlayerVirtualWorld(userid));
	SendServerMessage(playerid, "You have created vehicle ID: %d for %s.", CarData[id][carVehicle], ReturnName(userid, 0));
	return 1;
}


CMD:vwduzelt(playerid, params[])
{
if(PlayerData[playerid][pJailTime] > 0) return SendErrorMessage(playerid, "Hapisteyken bu iþlemi kullanamazsýnýz.");
if (PlayerData[playerid][pCK]) return SendErrorMessage(playerid, "Karakterin öldüðü için bu komutun kullanamazsýn!");
	if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) > 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SendServerMessage(playerid, "Virtual World düzeltildi.");
	}
	else SendErrorMessage(playerid, "Virtual World'de bir sorun saptanmadýðý için düzeltilmedi.");
	return 1;
}


CMD:animdurdur(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda bu komutu kullanmanýz gerekmez.");

	ClearAnimations(playerid);
    HidePlayerFooter(playerid);

	PlayerData[playerid][pLoopAnim] = 0;
	SendServerMessage(playerid, "Animasyon durduruldu.");
	return 1;
}

CMD:ara(playerid, params[])
{
	if(!AnkesorluTelefonaYakinMi(playerid))
	{
	    if (!BazIstasyonunaYakinMi(playerid) && Business_Inside(playerid) == -1 && (GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0))
		    return SendErrorMessage(playerid, "Sinyal yok.");

	    if (!Inventory_HasItem(playerid, "Telefon"))
		    return SendErrorMessage(playerid, "Telefonun yok.");

	    if (PlayerData[playerid][pPhoneOff])
			return SendErrorMessage(playerid, "Telefon kapalý.");
	}

    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || !IsPlayerSpawnedEx(playerid))
	    return SendErrorMessage(playerid, "Þu anda bu komutu kullanamazsýnýz.");

	static
	    targetid,
		number;

	if (sscanf(params, "d", number))
 	   return SendSyntaxMessage(playerid, "/ara [telefon numarasý] (1222 Taksi, 911 Acil Durum, 222 Reklam Þirketi)");

	if (number == 911)
	{
	    if(AnkesorluTelefonaYakinMi(playerid)) return SendErrorMessage(playerid, "Ankesörlü telefondan kurumlarý arayamazsýnýz.");
		PlayerData[playerid][pEmergency] = 1;
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kendi cep telefonunu alýr ve birkaç numara tuþlar.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[OPERATÖR]:{FFFFFF} Hizmet seçin: \"polis\" yada \"hastane\"?");
	}
	else if (number == 1222)
	{
	    if(AnkesorluTelefonaYakinMi(playerid)) return SendErrorMessage(playerid, "Ankesörlü telefondan kurumlarý arayamazsýnýz.");
	    PlayerData[playerid][pTaxiCalled] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kendi cep telefonunu alýr ve birkaç numara tuþlar.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_YELLOW, "[OPERATÖR]:{FFFFFF} Taksi departmanýna çaðrý teblið edilmiþtir.");

        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s telefonu kilitler ve cebine koyar.", ReturnName(playerid, 0));
		SendJobMessage(3, COLOR_YELLOW, "** %s adlý vatandaþýn taksiye ihtiyacý var. Lokasyon: %s (Kabul etmek için '/taksikabul').", ReturnName(playerid, 0), GetPlayerLocation(playerid));
	}
	else if (number == 222)
	{
	    if (PlayerData[playerid][pLevel] <= 1)
	    return SendErrorMessage(playerid, "Reklam verebilmek için en az 2 level olmalýsýn!");

	    if(AnkesorluTelefonaYakinMi(playerid)) return SendErrorMessage(playerid, "Ankesörlü telefondan kurumlarý arayamazsýnýz.");
	    PlayerData[playerid][pPlaceAd] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kendi cep telefonunu alýr ve birkaç numara tuþlar.", ReturnName(playerid, 0));

		if (PlayerData[playerid][pPlayingHours] < 4) {
            SendClientMessage(playerid, COLOR_CYAN, "[OPERATÖR]:{FFFFFF} Maalesef, bir reklam vermek için 4 saat oynaman gereklidir.");
		    cmd_tkapat(playerid, "\1");
		}
		else if (PlayerData[playerid][pAdTime] < 1) {
			SendClientMessage(playerid, COLOR_CYAN, "[OPERATÖR]:{FFFFFF} $100'a reklam vermek için, onaylýyorsanýz \"evet\" yazýn.");
		}
		else {
		    SendClientMessage(playerid, COLOR_CYAN, "[OPERATÖR]:{FFFFFF} Zaten son 2 dakika içinde ilan verdin. Daha sonra tekrar deneyiniz.");
		    cmd_tkapat(playerid, "\1");
		}
	}
	else if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
	    if (targetid == playerid)
	        return SendErrorMessage(playerid, "Kendinizi arayamam!");

		if (PlayerData[targetid][pPhoneOff])
		    return SendErrorMessage(playerid, "Bu numaranýn cep telefonu kapalý.");

        if (IsPlayerOnPhone(targetid))
		    return SendErrorMessage(playerid, "Aradýðýnýz kiþi þu anda baþkasýyla görüþüyor.");

		PlayerData[targetid][pIncomingCall] = 1;
		PlayerData[playerid][pIncomingCall] = 1;

		SetPVarInt(playerid, "Arayanmi", 1);

		PlayerData[targetid][pCallLine] = playerid;
		PlayerData[playerid][pCallLine] = targetid;

		  if(AnkesorluTelefonaYakinMi(playerid))
        {
            new ankesorid = Ankesor_ID(playerid);
            SendClientMessageEx(playerid, COLOR_YELLOW, "[ANKESÖRLÜ TELEFON]:{FFFFFF} #%d numarasýna ulaþýlmaya çalýþýlýyor, cevap vermesini bekleyin lütfen.", number);
			SendClientMessageEx(targetid, COLOR_YELLOW, "[TELEFON]:{FFFFFF} Gelen Arama: BÝLÝNMEYEN (Açmak için \"/cevapla\" -  \"/tkapat\").");
            SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s ankesörlü telefondan birkaç numara tuþlar.", ReturnName(playerid, 0));
			SetPVarInt(playerid, "AnkesorludenmiAriyor", 1);
			SetPVarInt(playerid, "AnkesorID", ankesorid);
	    }
        else
        {

            SendNearbyMessage(targetid, 30.0, COLOR_CYAN, "** Telefon çalýyor. (( %s ))", ReturnName(targetid, 0));
            SendClientMessageEx(playerid, COLOR_YELLOW, "[TELEFON]:{FFFFFF} #%d numarasýna ulaþýlmaya çalýþýlýyor, cevap vermesini bekleyin lütfen.", number);
			SendClientMessageEx(targetid, COLOR_YELLOW, "[TELEFON]:{FFFFFF} Gelen Arama: %s (Açmak için \"/cevapla\" -  \"/tkapat\").", TelNo(playerid, targetid));
        	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s kendi cep telefonunu alýr ve birkaç numara tuþlar.", ReturnName(playerid, 0));
        }
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        PlayerPlaySoundEx(targetid, 23000);
	}
	else
	{
	    SendErrorMessage(playerid, "Belirtilen telefon numarasý hizmete baðlý deðil.");
	}
	return 1;
}

CMD:e(playerid, params[])
{
	if(PlayerData[playerid][pEkstraDil] == 0)
		return SendErrorMessage(playerid, "Dil seçmemiþsin, /dilsec ile kendine ekstra bir dil seçebilirsin.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/e [Ýkincil Dil]");

	new Float:ppos[3], string[250];
	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
	foreach(new i: Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 15.0, ppos[0], ppos[1], ppos[2]) && PlayerData[i][pEkstraDil] == PlayerData[playerid][pEkstraDil])
		{
		    format(string, sizeof(string), "[%s] %s: %.64s", EkstraDilCek(playerid), ReturnName(playerid, 0), params);
        	SendClientMessage(i, -1, string);
		}
		else if(IsPlayerInRangeOfPoint(i, 15.0, ppos[0], ppos[1], ppos[2]) && PlayerData[i][pEkstraDil] != PlayerData[playerid][pEkstraDil])
		{
		    format(string, sizeof(string), "[%s] %s: ??? ??? ??? ??? ???", EkstraDilCek(playerid), ReturnName(playerid, 0));
        	SendClientMessage(i, -1, string);
		}
	}
	return 1;
}
/*CMD:dilsec(playerid, params[])
{
    if(PlayerData[playerid][pEkstraDil] != 0)
		return SendErrorMessage(playerid, "Zaten bir dil seçmiþsin.");

    Dialog_Show(playerid, dilsec, DIALOG_STYLE_LIST, "Dil Seç", "Rusça\nJaponca\nÝtalyanca\nFransýzca\nÝspanyolca\nÝbranice\nAlmanca\nHintçe\nÇince\nYunanca\nKorece\nÝtalyanca", "Seç", "{FF6347}Iptal");
	return 1;
}*/

CMD:zartek(playerid, params[])
{
   

	new gelensayi = RandomEx(1, 7);


	SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "* %s zar attý (( %d ))",ReturnName(playerid, 0), gelensayi);
	return 1;
}

CMD:zarcift(playerid, params[])
{
   

	new gelensayi = RandomEx(1, 7);
	new gelensayi2 = RandomEx(1, 7);

	SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "* %s zar attý (( %d,%d ))", ReturnName(playerid, 0), gelensayi,gelensayi2 );
	//SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> 2. zarý attý ve '%d' geldi. (( %s ))", gelensayi2, ReturnName(playerid, 0));
	return 1;
}

CMD:dene(playerid, params[])
{
	new gelensayi = RandomEx(1, 3), str[24];

	if(gelensayi == 1) format(str, sizeof(str), "{2E8B57}Baþarýlý");
	else if(gelensayi == 2) format(str, sizeof(str), "{8B0000} Baþarýsýz");
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s. {FFFF00}(( %s ))", str, ReturnName(playerid, 0));
	return 1;
}

CMD:sigara(playerid,params[])
{

	if (!Inventory_HasItem(playerid, "Sigara"))
        return SendErrorMessage(playerid, "Sigaran yok.");

	if(!SigaraDurum[playerid])
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s sigarayý dudaklarýnýn arasýna yerleþtirir ve ateþler. ", ReturnName(playerid, 0));
        SigaraDurum[playerid] = true;
        Inventory_Remove(playerid, "Sigara", 1);
	}
	else if(SigaraDurum[playerid])
	{
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "* %s sigarayý dudaklarýnýn arasýndan alýr ve yere atar. ", ReturnName(playerid, 0));
        SigaraDurum[playerid] = false;
	}
	return 1;
}

CMD:penis(playerid,params[])
{
switch (PlayerData[playerid][pGender])
{
                        case 1:
						{
      					 if(!PenisDurum[playerid])
						 {
    					 SetPlayerAttachedObject(playerid, 9, 322, 1, -0.311000, 0.243000, 0.000000, -92.899993, 19.900001, 0.299999);
        				 PenisDurum[playerid] = true;

						 }
						 else if(PenisDurum[playerid])
						 {
						 RemovePlayerAttachedObject(playerid, 9);

        				 PenisDurum[playerid] = false;
						 }
						}

						case 2:
	  					 {
                         SendErrorMessage(playerid, "Bayanlar bu komutu kullanamaz.");
							}
                    }
return 1;
}
CMD:soyun(playerid,params[])
{
	if(!KiyafetDurum[playerid])
	{
	    new skinad[20200][24];
                    for (new i = 0; i < 20200; i ++)
							format(skinad[i], 24, "");

					switch (PlayerData[playerid][pGender])
					{

                        case 1:
                        	ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_MAYOLAR, DIALOG_STYLE_PREVMODEL, "Kiyafetler", g_aMaleSkins3, skinad, "Sec", "Iptal", sizeof(g_aMaleSkins3));

						case 2:
							ShowPlayerPreviewModelDialog(playerid, MODEL_SELECTION_MAYOLAR, DIALOG_STYLE_PREVMODEL, "Kiyafetler", g_aFemaleSkins3, skinad, "Sec", "Iptal", sizeof(g_aFemaleSkins3));
                    }


	}
	else if(KiyafetDurum[playerid])
	{
	    new skincek;
		skincek = PlayerData[playerid][pSkin];
		SetPlayerSkin(playerid, skincek);
        SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> %s kýyafetlerini toplayarak giyinir. ", ReturnName(playerid, 0));
        KiyafetDurum[playerid] = false;
	}
	return 1;
}

stock ProxDetector(Float:radi, playerid, string[], color)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    foreach(new i: Player)
    {
        if(IsPlayerInRangeOfPoint(i,radi,x,y,z))
        {
            SCM(i,color,string);
        }
    }
}


stock PlaySoundEx(soundid, Float:x, Float:y, Float:z, range)
{
        foreach(new i : Player)
        {
                if(!IsPlayerConnected(i)) continue;
                if(!IsPlayerInRangeOfPoint(i, range, x, y, z)) continue;
                PlayerPlaySound(i, soundid, 0, 0, 0);
        }
}

stock ModifyVehicleSpeed(vehicleid, Float:speed)
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:a;
	GetVehicleVelocity(vehicleid, x1, y1, z1);
	GetVehiclePos(vehicleid, x2, y2, z2);
	GetVehicleZAngle(vehicleid, a); a = 360 - a;
	x1 = (floatsin(a, degrees) * (speed/100) + floatcos(a, degrees) * 0 + x2) - x2;
	y1 = (floatcos(a, degrees) * (speed/100) + floatsin(a, degrees) * 0 + y2) - y2;
	SetVehicleVelocity(vehicleid, x1, y1, z1);
}

Toll_CloseToll(TollID)
{
	if(TollID == RichmanToll)
	{
		SetDynamicObjectRot(L_a_TollObject[0], 0.000000, -90.000000, 23.81982421875);
		SetDynamicObjectRot(L_a_TollObject[1], 0.000000, -90.000000, 214.37744140625);
	}
	else if(TollID == FlintToll)
	{
		SetDynamicObjectRot(L_a_TollObject[2], 0.000000, -90.000000, 270.67565917969);
		SetDynamicObjectRot(L_a_TollObject[3], 0.000000, -90.000000, 87.337799072266);
	}
	else if(TollID == LVToll)
	{
		SetDynamicObjectRot(L_a_TollObject[4], 0.000000, -90.000000, 348.10229492188);
		SetDynamicObjectRot(L_a_TollObject[5], 0.000000, -90.000000, 169.43664550781);
	}
	else if(TollID == BlueberryTollR)
	{
		SetDynamicObjectRot(L_a_TollObject[6], 0.00000, -90.00000, 35.00000);
		SetDynamicObjectRot(L_a_TollObject[7], 0.00000, -90.00000, 215.92000);
	}
	else if(TollID == BlueberryTollL)
	{
		SetDynamicObjectRot(L_a_TollObject[8], 0.00000, -90.00000, -14.94000);
		SetDynamicObjectRot(L_a_TollObject[9], 0.00000, -90.00000, -195.00000);
	}
	return 1;
}

Toll_OpenToll(TollID)
{
	if(TollID == RichmanToll)
	{
		aTolls[RichmanToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[0], 0.000000, 0.000000, 23.81982421875);
		SetDynamicObjectRot(L_a_TollObject[1], 0.000000, 0.000000, 214.37744140625);
	}
	else if(TollID == FlintToll)
	{
		aTolls[FlintToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[2], 0.000000, 0.000000, 270.67565917969);
		SetDynamicObjectRot(L_a_TollObject[3], 0.000000, 0.000000, 87.337799072266);
	}
	else if(TollID == LVToll)
	{
		aTolls[LVToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[4], 0.000000, 0.000000, 348.10229492188);
		SetDynamicObjectRot(L_a_TollObject[5], 0.000000, 0.000000, 169.43664550781);
	}
	else if(TollID == BlueberryTollR)
	{
		aTolls[BlueberryTollR][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[6], 0.000000, 0.000000, 35.00000);
		SetDynamicObjectRot(L_a_TollObject[7], 0.000000, 0.000000, 215.92000);
	}
	else if(TollID == BlueberryTollL)
	{
		aTolls[BlueberryTollL][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[8], 0.000000, 0.000000, -14.94000);
		SetDynamicObjectRot(L_a_TollObject[9], 0.000000, 0.000000, -195.00000);
	}
}

Toll_TimePassedCivil(TollID, playerid) // People have to wait <TollDelayCivilian> seconds between every /opentoll on the same toll
{
	if(aTolls[TollID][E_tOpenTime] > 0)
	{
		SCM(playerid, COLOR_LIGHTRED, "Bariyer zaten açýk ödeme yapmadan önce kapanmasýný bekleyin.");
		return 0;
	}
	return 1;
}

Toll_TimePassedCops(playerid) // Cops have to wait for <TollDelayCop> seconds between every /toll (Global)
{
	new L_i_tick = GetUnixTime();
	if(L_a_RequestAllowedCop > L_i_tick && L_a_RequestAllowedCop != 0)
	{
		new TollString[63];
		format(TollString, 63, "Bariyerler arasýnda geçiþte %d saniye beklemelisiniz.", TollDelayCop);
		SCM(playerid, COLOR_LIGHTRED, TollString);
		return 0;
	}
	L_a_RequestAllowedCop = (L_i_tick + TollDelayCop);
	return 1;
}

forward GetUnixTime();
public GetUnixTime()
{
	new Year, Month, Day,Hour,Minute,Second;
	getdate(Year, Month, Day);
	gettime(Hour,Minute,Second);
	return mktime(Hour,Minute,Second,Day,Month,Year);
}
stock mktime(hour,minute,second,day,month,year)
{
	new timestamp2;

	timestamp2 = second + (minute * 60) + (hour * 3600);

	new days_of_month[12];

	if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) {
		days_of_month = {                         // Schaltjahr
			31,29,31,30,31,30,31,31,30,31,30,31
		};
	}
	else {
		days_of_month = {                         // keins
			31,28,31,30,31,30,31,31,30,31,30,31
		};
	}
	new days_this_year = 0;
	days_this_year = day;
	if(month > 1) {                               // No January Calculation, because its always the 0 past months
		for(new i=0; i<month-1;i++) {
			days_this_year += days_of_month[i];
		}
	}
	timestamp2 += days_this_year * 86400;

	for(new j=1970;j<year;j++) {
		timestamp2 += 31536000;
// Schaltjahr + 1 Tag
		if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )  timestamp2 += 86400;
	}

	return timestamp2;
}
forward AddTolls();
public AddTolls() // Needs to be called in the OnGameModeInit function!
{ // Thanks to Nexus for mapping!
	/* Richman */
	CreateDynamicObject( 8168, 612.73895263672, -1191.4602050781, 20.294105529785, 0.000000, 5, 318.31237792969, -1 );
	CreateDynamicObject( 8168, 620.47265625, -1188.49609375, 20.044105529785, 0.000000, 352.99621582031, 138.94409179688, -1 );
	CreateDynamicObject( 966, 613.97229003906, -1197.7174072266, 17.475030899048, 0.000000, 0.000000, 23.81982421875, -1 );
	CreateDynamicObject( 997, 614.33209228516, -1194.3870849609, 17.709369659424, 0.000000, 0.000000, 266.70568847656, -1 );
	CreateDynamicObject( 973, 602.98425292969, -1202.1643066406, 18.000516891479, 0.000000, 0.000000, 19.849853515625, -1 );
	L_a_TollObject[0] = CreateDynamicObject( 968, 613.8935546875, -1197.7329101563, 18.109180450439, 0.000000, -90.000000, 23.81982421875, -1 );
	CreateDynamicObject( 966, 619.42913818359, -1181.6597900391, 18.725030899048, 0.000000, 0.000000, 214.37744140625, -1 );
	CreateDynamicObject( 973, 629.68823242188, -1176.0551757813, 19.500516891479, 0.000000, 0.000000, 21.831787109375, -1 );
	CreateDynamicObject( 997, 619.26574707031, -1181.6518554688, 18.709369659424, 0.000000, 0.000000, 268.68908691406, -1 );
	L_a_TollObject[1] = CreateDynamicObject( 968, 619.44201660156, -1181.6903076172, 19.525806427002, 0.000000, -90.000000, 214.37744140625, -1 );
	/* End of Richman */

	/* Flint */
	CreateDynamicObject( 8168, 61.256042480469, -1533.3946533203, 6.1042537689209, 0.000000, 0.000000, 9.9252624511719, -1 );
	CreateDynamicObject( 8168, 40.966598510742, -1529.5725097656, 6.1042537689209, 0.000000, 0.000000, 188.5712890625, -1 );
	L_a_TollObject[2] = CreateDynamicObject( 968, 35.838928222656, -1525.9034423828, 5.0012145042419, 0.000000, -90.000000, 270.67565917969, -1 );
	CreateDynamicObject( 966, 35.889751434326, -1526.0096435547, 4.2410612106323, 0.000000, 0.000000, 270.67565917969, -1 );
	CreateDynamicObject( 966, 67.093727111816, -1536.8275146484, 3.9910612106323, 0.000000, 0.000000, 87.337799072266, -1 );
	L_a_TollObject[3] = CreateDynamicObject( 968, 67.116600036621, -1536.8218994141, 4.7504549026489, 0.000000, -90.000000, 87.337799072266, -1 );
	CreateDynamicObject( 973, 52.9794921875, -1531.9252929688, 5.090488910675, 0.000000, 0.000000, 352.06005859375, -1 );
	CreateDynamicObject( 973, 49.042072296143, -1531.5065917969, 5.1758694648743, 0.000000, 0.000000, 352.05688476563, -1 );
	CreateDynamicObject( 997, 68.289916992188, -1546.6020507813, 4.0626411437988, 0.000000, 0.000000, 119.09942626953, -1 );
	CreateDynamicObject( 997, 34.5198097229, -1516.1402587891, 4.0626411437988, 0.000000, 0.000000, 292.50622558594, -1 );
	CreateDynamicObject( 997, 35.903915405273, -1525.8717041016, 4.0626411437988, 0.000000, 0.000000, 342.13012695313, -1 );
	CreateDynamicObject( 997, 63.914081573486, -1535.7126464844, 4.0626411437988, 0.000000, 0.000000, 342.130859375, -1 );
	/* End of Flint */

	/* LV */
	CreateDynamicObject( 8168, 1789.83203125, 703.189453125, 15.846367835999, 0.000000, 3, 99.24951171875, -1 );
	CreateDynamicObject( 8168, 1784.8334960938, 703.94799804688, 16.070636749268, 0.000000, 357, 278.61096191406, -1 );
	CreateDynamicObject( 966, 1781.4122314453, 697.32531738281, 14.636913299561, 0.000000, 0.000000, 348.09008789063, -1 );
	CreateDynamicObject( 996, 1767.3087158203, 700.50506591797, 15.281567573547, 0.000000, 0.000000, 346.10510253906, -1 );
	CreateDynamicObject( 997, 1781.6832275391, 697.34796142578, 14.698781013489, 0.000000, 3, 77.41455078125, -1 );
	CreateDynamicObject( 997, 1792.7745361328, 706.38543701172, 13.948781013489, 0.000000, 2.999267578125, 81.379638671875, -1 );
	CreateDynamicObject( 966, 1793.4289550781, 709.87982177734, 13.636913299561, 0.000000, 0.000000, 169.43664550781, -1 );
	CreateDynamicObject( 996, 1800.8060302734, 708.38299560547, 14.281567573547, 0.000000, 0.000000, 346.10229492188, -1 );
	L_a_TollObject[4] = CreateDynamicObject( 968, 1781.4133300781, 697.31750488281, 15.420023918152, 0.000000, -90.000000, 348.10229492188, -1 );
	L_a_TollObject[5] = CreateDynamicObject( 968, 1793.6700439453, 709.84631347656, 14.405718803406, 0.000000, -90.000000, 169.43664550781, -1 );
	/* End of LV */

	/* Blueberry right */
	CreateDynamicObject(966, 614.42188, 350.81711, 17.92480,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(966, 602.91162, 342.59781, 17.92480,   0.00000, 0.00000, 215.92000);
	L_a_TollObject[6] = CreateDynamicObject(968, 614.42188, 350.81711, 18.66520,   0.00000, -90.00000, 35.00000);
	L_a_TollObject[7] = CreateDynamicObject(968, 602.91162, 342.59781, 18.66520,   0.00000, -90.00000, 215.92000);
	/* Blueberry right */

	/* Blueberry left */
	CreateDynamicObject(966, -190.35580, 254.64290, 11.07090,   0.00000, 0.00000, 345.00000);
	CreateDynamicObject(966, -204.00880, 258.30411, 11.07090,   0.00000, 0.00000, -195.00000);
	L_a_TollObject[8] = CreateDynamicObject(968, -190.24850, 254.62019, 11.89360,   0.00000, -90.00000, -14.94000);
	L_a_TollObject[9] = CreateDynamicObject(968, -204.10410, 258.34149, 11.89360,   0.00000, -90.00000, -195.00000);
	/* Blueberry right */
}
forward TollUpdate();
public TollUpdate()
{
	for(new i = 0; i < MAX_TOLLS; i++)
	{
		if(aTolls[i][E_tOpenTime] > 0)
		{
			aTolls[i][E_tOpenTime]--;
			if(aTolls[i][E_tOpenTime] == 1)
			{
				Toll_CloseToll(i);
			}
		}
	}
}
stock CompareStrings(string[], string2[])
{
	if(!strcmp(string, string2, true))
		return true;
	else
		return false;
}
stock IsWeaponWithAmmo(weaponid)
{
	switch(weaponid)
	{

		case 16..18, 22..39, 41..42: return 1;
		default: return 0;
	}
	return 0;

}

stock GetPlayerWeaponAmmo(playerid,weaponid)
{
	new wd[2][13];
	for(new i; i<13; i++) GetPlayerWeaponData(playerid,i,wd[0][i],wd[1][i]);
	for(new i; i<13; i++)
	{

		if(weaponid == wd[0][i]) return wd[1][i];
	}
	return 0;
}


stock EkstraDilCek(playerid)
{
	new ad[24];
	switch(PlayerData[playerid][pEkstraDil])
	{
	    case 1: ad = "Rusça";
	    case 2: ad = "Japonca";
	    case 3: ad = "Ýtalyanca";
	    case 4: ad = "Fransýzca";
	    case 5: ad = "Ýspanyolca";
		case 6: ad = "Ýbranice";
		case 7: ad = "Almanca";
		case 8: ad = "Hintçe";
		case 9: ad = "Çince";
		case 10: ad = "Yunanca";
		case 11: ad = "Korece";
		case 12: ad = "Ýtalyanca";
 	}
	return ad;
}

forward GYM(playerid);
public GYM(playerid)
{
    if(GymLoop[playerid] > 30) { FinishGym(playerid); return 1; }
    new tus = random(4)+1; while(tus == GymButton[playerid]) { tus = random(4)+1; }
    GameTextForPlayer(playerid, GameTextArrow(tus), 2000, 3); SendtoEquipment(playerid, MyEquipment[playerid], 0);
        new Keys,ud,lr;
    GetPlayerKeys(playerid,Keys,ud,lr);
        switch(MyEquipment[playerid])
        {
        case 7: { if(IsValidObject(lsbarbell)) { DestroyObject(lsbarbell); SetPlayerAttachedObject(playerid, 0, 2913, 6); } }
        case 8: { if(IsValidObject(sfbarbell)) { DestroyObject(sfbarbell); SetPlayerAttachedObject(playerid, 0, 2913, 6); } }
        case 9: { if(IsValidObject(lvbarbell)) { DestroyObject(lvbarbell); SetPlayerAttachedObject(playerid, 0, 2913, 6); } }
        case 10:{ if(IsValidObject(lvbarbell2)){ DestroyObject(lvbarbell2); SetPlayerAttachedObject(playerid, 0, 2913, 6);} }
    }
        if((ud < 0 && GymButton[playerid] == 1 && lr == 0) || (ud > 0 && GymButton[playerid] == 2 && lr == 0) || (ud == 0 && GymButton[playerid] == 3 && lr < 0) || (ud == 0 && GymButton[playerid] == 4 && lr > 0))
        {
            GymPointvariable[playerid] += 10; GymPointX[playerid] += 1;
            switch(MyEquipment[playerid])
            {
                        case 1 .. 3: { if(GymPointX[playerid] < 10) { ApplyAnimation(playerid,"GYMNASIUM","gym_bike_slow",4.0,1,0,0,1,0,1); } else { ApplyAnimation(playerid,"GYMNASIUM","gym_bike_fast",4.0,1,0,0,1,0,1); } }
                        case 4 .. 6: { if(GymPointX[playerid] < 10) { ApplyAnimation(playerid,"GYMNASIUM","gym_tread_sprint",4.0,1,0,0,1,0,1); } else { ApplyAnimation(playerid,"GYMNASIUM","gym_tread_sprint",4.0,1,0,0,1,0,1); } }
                        case 7 .. 10:{ if(GymPointX[playerid] < 10) { ApplyAnimation(playerid,"benchpress","gym_bp_up_A",2.0,1,0,0,1,2000,1); } else { ApplyAnimation(playerid,"benchpress","gym_bp_up_smooth",4.0,1,0,0,1,2000,1); } }
            }
        }
        else
        {
            GymPointvariable[playerid] -= 5; GymPointX[playerid] = 0;
            switch(MyEquipment[playerid])
            {
                        case 1 .. 3: { ApplyAnimation(playerid,"GYMNASIUM","gym_bike_still",4.0,1,0,0,1,0,1); }
                        case 4 .. 6: { ApplyAnimation(playerid,"GYMNASIUM","gym_tread_walk",4.0,1,0,0,1,0,1); }
                        case 7 .. 10: { ApplyAnimation(playerid,"benchpress","gym_bp_up_B",2.0,1,0,0,1,2000,1);}
            }
        }
        GymLoop[playerid] += 1; GymButton[playerid] = tus; return 1;
}
// ============================================================= //
//==================== [ zcmd ] =========================//
//==================== [ stock ] =========================//
stock FinishGym(playerid)
{
    TogglePlayerControllable(playerid, 1);
    new string[36];
    if(GymPointvariable[playerid] == 0) { format(string, sizeof(string), "Puan kazanamadýn.", GymPointvariable[playerid]); }
        else if(GymPointvariable[playerid] > 0) { format(string, sizeof(string), "+%d EXP kazandýn.", GymPointvariable[playerid]); }
        else { format(string, sizeof(string), "%d EXP kaybettin.", GymPointvariable[playerid]); }
    SendClientMessage(playerid, 0x9EC73DAA,string); KillTimer(GymTimer[playerid]);
    switch(MyEquipment[playerid])
    {
                case 1 .. 3: { ApplyAnimation(playerid,"GYMNASIUM","gym_bike_getoff",4.0,0,0,0,0,0,0); }
                case 4 .. 6: { ApplyAnimation(playerid,"GYMNASIUM","gym_tread_getoff",4.0,0,0,0,0,0,0); }
                case 7 .. 10:
                {
                        ApplyAnimation(playerid,"benchpress","gym_bp_getoff",4.0,0,0,0,0,0,0);
                        RemovePlayerAttachedObject(playerid, 0); SetCameraBehindPlayer(playerid);
                }
        }
        switch(MyEquipment[playerid])
        {
                case 7:
{
                if(IsValidObject(lsbarbell))
{
                DestroyObject(lsbarbell);
}
                lsbarbell = CreateObject(2913, 774.4290, 1.883098, 1000.4883, 0, 270.0, 88.000,150);
}
                case 8:
{
                if(IsValidObject(sfbarbell))
{
                DestroyObject(sfbarbell);
}
                sfbarbell = CreateObject(2913, 765.8552, -48.8685, 1000.6409, 0, 89.50, 0.0000,150);
}
                case 9:
{
                if(IsValidObject(lvbarbell))
{
                DestroyObject(lvbarbell);
}
                lvbarbell = CreateObject(2913, 765.3403, -59.1827, 1000.6379, 0, 89.50, 181.25,150);
}
                case 10:
{
                if(IsValidObject(lvbarbell2))
{
                DestroyObject(lvbarbell2);
}
                lvbarbell2 = CreateObject(2913, 768.080, -59.0295, 1000.6379, 0, 90.0, 0, 150);
				}
}
        		GymExp(playerid, GymPointvariable[playerid]); return 1;
}

stock GameTextArrow(no)
{
        new oktext[4];
    switch(no)
        {
                case 1: { oktext = "~u~"; }
                case 2: { oktext = "~d~"; }
                case 3: { oktext = "~<~"; }
                case 4: { oktext = "~>~"; }
        }
        return oktext;
}

stock Equipments(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1.5, 772.5529, 9.423600, 1000.7247) && GetPlayerInterior(playerid) == 5) { return 1; }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, 769.6011, -47.9109, 1000.5859) && GetPlayerInterior(playerid) == 6) { return 2; }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, 775.0284, -68.6539, 1000.6563) && GetPlayerInterior(playerid) == 7) { return 3; }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, 773.4804, -2.36510, 1000.7247) && GetPlayerInterior(playerid) == 5) { return 4; }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, 759.5977, -47.8843, 1000.5859) && GetPlayerInterior(playerid) == 6) { return 5; }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, 758.3638, -65.3969, 1000.6563) && GetPlayerInterior(playerid) == 7) { return 6; }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, 773.8289, 1.403700, 1000.7247) && GetPlayerInterior(playerid) == 5) { return 7; }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, 766.2886, -48.1480, 1000.5859) && GetPlayerInterior(playerid) == 6) { return 8; }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, 764.8702, -59.6601, 1000.6563) && GetPlayerInterior(playerid) == 7) { return 9; }
        else if(IsPlayerInRangeOfPoint(playerid, 1.5, 768.5298, -59.6601, 1000.6563) && GetPlayerInterior(playerid) == 7) { return 10; }
        return 0;
}

stock SendtoEquipment(playerid, alet, mod) // Set Anims pos.
{
        new Float:aX, Float:aY, Float:aZ, Float:aA, Float:pA;
    switch(alet)
    {
        case 1: { aX = 772.6419; aY = 8.891200; aZ = 1000.7067; aA = 90; }
        case 2: { aX = 769.6946; aY = -48.4113; aZ = 1000.6559; aA = 90; }
        case 3: { aX = 775.1604; aY = -69.1313; aZ = 1000.6539; aA = 90; }
        case 4: { aX = 773.4711; aY = -1.19060; aZ = 1000.7262; aA = 180; }//
                case 5: { aX = 759.6171; aY = -46.7707; aZ = 1000.5859; aA = 180; }
        case 6: { aX = 758.3710; aY = -64.0923; aZ = 1000.6528; aA = 180; }
                case 7: { aX = 772.9553; aY = 1.461400; aZ = 1000.7209; aA = 270; }//
        case 8: { aX = 766.3169; aY = -47.3577; aZ = 1000.5859; aA = 180; }
        case 9: { aX = 764.8354; aY = -60.5658; aZ = 1000.6563; aA = 0; }
        case 10:{ aX = 768.5437; aY = -60.4008; aZ = 1000.6563; aA = 0; }
        }
        if(mod == 1) { JBC_SetPlayerPos(playerid, aX, aY, aZ); SetPlayerFacingAngle(playerid, aA); }
        else
        {
                if(!IsPlayerInRangeOfPoint(playerid, 1.5, aX, aY, aZ)) { JBC_SetPlayerPos(playerid, aX, aY, aZ); }
                GetPlayerFacingAngle(playerid, pA); if(pA != aA) { SetPlayerFacingAngle(playerid, aA); }
        }
}


stock GetPlayerNamee(playerid)
{
      new name[MAX_PLAYER_NAME];
      GetPlayerName(playerid, name, MAX_PLAYER_NAME);
      return name;
}

function EmptyFireworkSlot()
{
        for(new i=1; i < MAX_FIREWORK; i++)if(FireworkInfo[i][FW_Owner]==NON) return i;
        return 0;
}

CMD:placefirework(playerid,params[])
{
        if (PlayerData[playerid][pAdmin] < 4)
	    	return SendErrorMessage(playerid, "Yetkin yok!");

        new Float:height,Float:radius,amount,string[60];
        if(sscanf(params,"ffd",height,radius,amount))return SCM(playerid,-1,"USAGE: /placefirework [Height] [Radius] [Amount]");
        new eid=EmptyFireworkSlot();
        if(!eid)return SendServerMessage(playerid, "There are no more free firework slots!");
        GetPlayerPos(playerid,FireworkInfo[eid][FW_Pos][0],FireworkInfo[eid][FW_Pos][1],FireworkInfo[eid][FW_Pos][2]);
        GetPlayerFacingAngle(playerid,FireworkInfo[eid][FW_Pos][3]);
        //Enum info settimine
        FireworkInfo[eid][FW_RocketDirection]=1;
        FireworkInfo[eid][FW_RocketsReleased]=1;
        FireworkInfo[eid][FW_Radius]=radius;
        FireworkInfo[eid][FW_Height]=height;
        FireworkInfo[eid][FW_Owner]=playerid;
        FireworkInfo[eid][FW_Amount]=amount;
        FireworkInfo[eid][FW_Pos][0]+= (2.0 * floatsin(-FireworkInfo[eid][FW_Pos][3],degrees));
        FireworkInfo[eid][FW_Pos][1]+= (2.0 * floatcos(-FireworkInfo[eid][FW_Pos][3],degrees));
        FireworkInfo[eid][FW_Pos][2]-=0.9;
        FireworkInfo[eid][FW_Box]=CreateDynamicObject(3016,FireworkInfo[eid][FW_Pos][0],FireworkInfo[eid][FW_Pos][1],FireworkInfo[eid][FW_Pos][2], 0,0,0);
        format(string,sizeof(string),"Firework box ID: %d",eid);
        SCM(playerid,-1,string);
        return 1;
}
CMD:startfirework(playerid,params[])
{
	    if (PlayerData[playerid][pAdmin] < 4)
	   		return SendErrorMessage(playerid, "Yetkin yok!");

        new eid;
        if(sscanf(params,"d",eid))return SCM(playerid,-1,"USAGE: /startfirwork [ID]");
        if(FireworkInfo[eid][FW_Owner]!=playerid)return SendServerMessage(playerid, "You can't light up this firework!");
        FireworkInfo[eid][FW_Timer]=SetTimerEx("StartFirework",600,true,"d",eid);
        return 1;
}

function StartFirework(eid)
{
        FireworkInfo[eid][FW_Amount]--;
        new Float:distance,Float:Ax,Float:Ay,Float:Az,time,object;

        if(!FireworkInfo[eid][FW_Amount]){
                if(IsPlayerConnected(FireworkInfo[eid][FW_Owner]))
				SendServerMessage(FireworkInfo[eid][FW_Owner], "Firework stopped shootingrockets.");
                FireworkInfo[eid][FW_Owner]=NON;
                DestroyDynamicObject(FireworkInfo[eid][FW_Box]);
                KillTimer(FireworkInfo[eid][FW_Timer]);
                return 1;
        }
        switch(FireworkInfo[eid][FW_RocketsReleased]){
                case 1:distance=20.0;
                case 2:distance=10.0;
                case 3:distance=0.0;
                case 4:distance=(-10.0);
                case 5:distance=(-20.0);
        }
        switch(FireworkInfo[eid][FW_RocketDirection]){
                case 1:{//Right
                        FireworkInfo[eid][FW_RocketsReleased]++;
                        if(FireworkInfo[eid][FW_RocketsReleased]==6){FireworkInfo[eid][FW_RocketDirection]=0;FireworkInfo[eid][FW_RocketsReleased]=4;}
                }
                case 0:{//Left
                        FireworkInfo[eid][FW_RocketsReleased]--;
                        if(FireworkInfo[eid][FW_RocketsReleased]==0){FireworkInfo[eid][FW_RocketDirection]=1;FireworkInfo[eid][FW_RocketsReleased]=2;}
                }
        }
        //Counting
        Ax=FireworkInfo[eid][FW_Pos][0]+(distance * floatsin(-FireworkInfo[eid][FW_Pos][3],degrees));
        Ay=FireworkInfo[eid][FW_Pos][1]+(distance * floatsin(-FireworkInfo[eid][FW_Pos][3],degrees));
        Az=FireworkInfo[eid][FW_Pos][2]+FireworkInfo[eid][FW_Height];
        //Rocket body moving
        object=CreateDynamicObject(3000,FireworkInfo[eid][FW_Pos][0],FireworkInfo[eid][FW_Pos][1],FireworkInfo[eid][FW_Pos][2],0,0,0);
        time=MoveDynamicObject(object, Ax,Ay,Az, 20.0);
        SetTimerEx("MakeSphere",time,false,"dffff",object,Ax,Ay,Az,FireworkInfo[eid][FW_Radius]);
        return 1;
}

function MakeSphere(nobject,Float:x,Float:y,Float:z,Float:radius)
{
        DestroyDynamicObject(nobject);
        new object,type[3]={19282,19283,19284};
        new Float:phi=0.0,Float:theta=0.0,time;
        new Float:Ax=0.0,Float:Ay=0.0,Float:Az=0.0;
        CreateExplosion(x,y,z, 12,10.0);
        for(new i; i < 26; i++){ // 1 8 8 8 1
                Ax=x+(radius*floatsin(-phi,degrees)*floatcos(-theta,degrees));
                Ay=y+(radius*floatsin(-phi,degrees)*floatsin(-theta,degrees));
                Az=z+(radius*floatcos(-phi,degrees));
                //Object moveing
                object=CreateDynamicObject(type[random(3)],x,y,z,0.0,0.0,theta+45);//Start
                time=MoveDynamicObject(object, Ax,Ay,Az, 5.0);
                SetTimerEx("FireworkRocketEnd",time,false,"d",object);//End
                //Reset
                theta+=45.0; if(theta==360.0){ Ax=0.0; Ax=0.0; Ay=0.0;}
                if((1+i)%8==1)phi+=45;
        }
        return 1;
}
function FireworkRocketEnd(object)return DestroyDynamicObject(object);

stock PlayerToVehicle(playerid, vehicleid, Float:dist)
{
	new Float:pos[3];
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	return IsPlayerInRangeOfPoint(playerid, dist, pos[0], pos[1], pos[2]);
}

stock GetClosestVehicle(playerid)
{
	new Float:x, Float:y, Float:z;
	new Float:dist, Float:closedist=9999, closeveh;
	for(new i=1; i < MAX_VEHICLES; i++)
	{
		if(GetVehiclePos(i, x, y, z))
		{
			dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
				if(dist < closedist)
			{
				closedist = dist;
				closeveh = i;
			}
		}
	}
	return closeveh;
}

public AntiFakekillTimer(playerid)
{
    AntiFakekill[playerid]--;
    if(AntiFakekill[playerid] > 2)
    {
		BanEx(playerid, "Fake-kill");
    }
    return 1;
}

stock PlayerTextDrawOlustur(playerid)
{
AracGostergesi[0][playerid] = CreatePlayerTextDraw(playerid, 499.801086, 106.483154, "~b~hiz: ~g~0~w~km/h");
PlayerTextDrawLetterSize(playerid, AracGostergesi[0][playerid], 0.320999, 1.133334);
PlayerTextDrawAlignment(playerid, AracGostergesi[0][playerid], 1);
PlayerTextDrawColor(playerid, AracGostergesi[0][playerid], -2139062017);
PlayerTextDrawSetShadow(playerid, AracGostergesi[0][playerid], 0);
PlayerTextDrawSetOutline(playerid, AracGostergesi[0][playerid], 1);
PlayerTextDrawBackgroundColor(playerid, AracGostergesi[0][playerid], 255);
PlayerTextDrawFont(playerid, AracGostergesi[0][playerid], 3);
PlayerTextDrawSetProportional(playerid, AracGostergesi[0][playerid], 1);
PlayerTextDrawSetShadow(playerid, AracGostergesi[0][playerid], 0);

AracGostergesi[1][playerid] = CreatePlayerTextDraw(playerid, 499.801086, 115.883010, "~b~yakit: ~g~90~w~lt");
PlayerTextDrawLetterSize(playerid, AracGostergesi[1][playerid], 0.320999, 1.133334);
PlayerTextDrawAlignment(playerid, AracGostergesi[1][playerid], 1);
PlayerTextDrawColor(playerid, AracGostergesi[1][playerid], -2139062017);
PlayerTextDrawSetShadow(playerid, AracGostergesi[1][playerid], 0);
PlayerTextDrawSetOutline(playerid, AracGostergesi[1][playerid], 1);
PlayerTextDrawBackgroundColor(playerid, AracGostergesi[1][playerid], 255);
PlayerTextDrawFont(playerid, AracGostergesi[1][playerid], 3);
PlayerTextDrawSetProportional(playerid, AracGostergesi[1][playerid], 1);
PlayerTextDrawSetShadow(playerid, AracGostergesi[1][playerid], 0);

AracGostergesi[2][playerid] = CreatePlayerTextDraw(playerid, 499.801086, 125.482864, "~b~motor: ~g~124~w~km");
PlayerTextDrawLetterSize(playerid, AracGostergesi[2][playerid], 0.320999, 1.133334);
PlayerTextDrawAlignment(playerid, AracGostergesi[2][playerid], 1);
PlayerTextDrawColor(playerid, AracGostergesi[2][playerid], -2139062017);
PlayerTextDrawSetShadow(playerid, AracGostergesi[2][playerid], 0);
PlayerTextDrawSetOutline(playerid, AracGostergesi[2][playerid], 1);
PlayerTextDrawBackgroundColor(playerid, AracGostergesi[2][playerid], 255);
PlayerTextDrawFont(playerid, AracGostergesi[2][playerid], 3);
PlayerTextDrawSetProportional(playerid, AracGostergesi[2][playerid], 1);
PlayerTextDrawSetShadow(playerid, AracGostergesi[2][playerid], 0);

    TuningBuy[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 425.125000, 338.666687, "usebox");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 0 ], 0.000000, 8.627778);
    PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 0 ], 216.125000, 0.000000);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 0 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 0 ], 0);
    PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 0 ], true);
    PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 0 ], 102);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 0 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 0 ], 0);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 0 ], 0);

    TuningBuy[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 319.375000, 337.749847, "Modifiye Menusu");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 1 ], 0.386249, 1.156664);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 1 ], 2);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 1 ], -1);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 1 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 1 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 1 ], 51 );
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 1 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 1 ], 1 );
    PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 1 ], false );

    TuningBuy[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 198.375000, 361.583282, "-");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 2 ], 18.981874, 0.514999);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 2 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 2 ], -10092289);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 2 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 2 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 2 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 2 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 2 ], 1);

    TuningBuy[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 222.500000, 352.916656, "Left `Chrome Flames` Sideskirt");
    PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 3 ], 0.244999, 1.092499);
    PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 3 ], 1);
    PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 3 ], -1);
    PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 3 ], 0);
    PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 3 ], 1);
    PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 3 ], 51);
    PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 3 ], 2);
    PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 3 ], 1);

    TuningBuy[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 222.500000, 365.000000, "Ucret: ~w~10000$");
	 PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 4 ], 0.244999, 1.092499);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 4 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 4 ], -1);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 4 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 4 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 4 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 4 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 4 ], 1);

        TuningBuy[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 215.125000, 372.999877, "-");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 5 ], 6.743125, 0.444999);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 5 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 5 ], -10092289);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 5 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 5 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 5 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 5 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 5 ], 1);

        TuningBuy[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 206.750000, 347.166564, "-");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 6 ], 18.981874, 0.514999);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 6 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 6 ], -10092289);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 6 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 6 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 6 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 6 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 6 ], 1);

        TuningBuy[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 385.000000, 381.500000, "ld_beat:right");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 7 ], 0.449999, 1.600000);
        PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 7 ], 27.500000, 13.416657);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 7 ], 2);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 7 ], -1);
        PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 7 ], true);
        PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 7 ], 255);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 7 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 7 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 7 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 7 ], 4);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 7 ], 1);
        PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 7 ], true);

        TuningBuy[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 230.375000, 381.916473, "ld_beat:left");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 8 ], 0.449999, 1.600000);
        PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 8 ], 27.500000, 13.416657);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 8 ], 2);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 8 ], -1);
        PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 8 ], true);
        PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 8 ], 255);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 8 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 8 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 8 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 8 ], 4);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 8 ], 1);
        PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 8 ], true);

        TuningBuy[ playerid ][ 9 ] = CreatePlayerTextDraw(playerid, 320.000000, 381.499938, "EKLE");
        PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 9 ], 23.000000, 13.000000 );
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 9 ], 0.421249, 1.360832 );
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 9 ], 2);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 9 ], -1);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 9 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 9 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 9 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 9 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 9 ], 1);
        PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 9 ], true);

        TuningBuy[ playerid ][ 10 ] = CreatePlayerTextDraw(playerid, 200.000000, 396.416656, "-");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 10 ], 18.981874, 0.514999);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 10 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 10 ], -10092289);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 10 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 10 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 10 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 10 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 10 ], 1);

        TuningBuy[ playerid ][ 11 ] = CreatePlayerTextDraw(playerid, 225.000000, 401.916595, "~r~N~w~ovelty  ~r~RPG");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 11 ], 0.258749, 0.987497);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 11 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 11 ], -1);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 11 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 11 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 11 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 11 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 11 ], 1);

        TuningBuy[ playerid ][ 12 ] = CreatePlayerTextDraw(playerid, 203.500000, 411.416839, "-");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 12 ], 18.981874, 0.514998);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 12 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 12 ], -10092289);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 12 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 12 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 12 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 12 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 12 ], 1);

        TuningBuy[ playerid ][ 13 ] = CreatePlayerTextDraw(playerid, 404.500000, 337.999877, "ld_beat:cross");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 13 ], 0.449999, 1.600000);
        PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 13 ], 17.500000, 8.749991);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 13 ], 2);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 13 ], -1);
        PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 13 ], true);
        PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 13 ], 255);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 13 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 13 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 13 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 13 ], 4);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 13 ], 1);
        PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 13 ], true);
	return 1;
}

stock SetTune( vehicleid ) {
    if( VehicleInfo[ vehicleid ][ vTuned ] ) {
            if( VehicleInfo[ vehicleid ][ vPaintJob ] != 255 ) ChangeVehiclePaintjob( vehicleid, VehicleInfo[ vehicleid ][ vPaintJob ] );
                if( VehicleInfo[ vehicleid ][ vSpoiler ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vSpoiler ] );
                if( VehicleInfo[ vehicleid ][ vHood ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vHood ] );
                if( VehicleInfo[ vehicleid ][ vRoof ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vRoof ] );
                if( VehicleInfo[ vehicleid ][ vSkirt ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vSkirt ] );
                if( VehicleInfo[ vehicleid ][ vLamps ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vLamps ] );
                if( VehicleInfo[ vehicleid ][ vNitro ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vNitro ] );
                if( VehicleInfo[ vehicleid ][ vExhaust ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vWheels ] );
                if( VehicleInfo[ vehicleid ][ vWheels ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vWheels ] );
                if( VehicleInfo[ vehicleid ][ vStereo ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vStereo ] );
                if( VehicleInfo[ vehicleid ][ vHydraulics ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vHydraulics ] );
                if( VehicleInfo[ vehicleid ][ vFrontBumper ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vFrontBumper ] );
                if( VehicleInfo[ vehicleid ][ vRearBumper ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vRearBumper ] );
                if( VehicleInfo[ vehicleid ][ vRightVent ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vRightVent ] );
                if( VehicleInfo[ vehicleid ][ vLeftVent ] != -1 ) AddComponent( vehicleid, VehicleInfo[ vehicleid ][ vLeftVent ] );
	}
}
//==============================================================================
stock AddComponentToVehicle( vehicleid, componentid ) {
        if( VehicleInfo[ vehicleid ][ vTuned ] ) {
                if( GetVehicleComponentType( componentid ) == CARMODTYPE_SPOILER ) {
                    VehicleInfo[ vehicleid ][ vSpoiler ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vSpoiler ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_HOOD ) {
                    VehicleInfo[ vehicleid ][ vHood ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vHood ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_ROOF ) {
                    VehicleInfo[ vehicleid ][ vRoof ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vRoof ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_SIDESKIRT ) {
                    VehicleInfo[ vehicleid ][ vSkirt ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vSkirt ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_LAMPS ) {
                    VehicleInfo[ vehicleid ][ vLamps ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vLamps ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_NITRO ) {
                    VehicleInfo[ vehicleid ][ vNitro ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vNitro ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_EXHAUST ) {
                    VehicleInfo[ vehicleid ][ vExhaust ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vExhaust ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_WHEELS ) {
                    VehicleInfo[ vehicleid ][ vWheels ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vWheels ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_STEREO ) {
                    VehicleInfo[ vehicleid ][ vStereo ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vStereo ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_HYDRAULICS ) {
                    VehicleInfo[ vehicleid ][ vHydraulics ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vHydraulics ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_FRONT_BUMPER ) {
                    VehicleInfo[ vehicleid ][ vFrontBumper ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vFrontBumper ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_REAR_BUMPER ) {
                    VehicleInfo[ vehicleid ][ vRearBumper ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vRearBumper ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_VENT_RIGHT ) {
                    VehicleInfo[ vehicleid ][ vRightVent ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vRightVent ] != -1 ) AddComponent( vehicleid, componentid );
                }
            else if( GetVehicleComponentType( componentid ) == CARMODTYPE_VENT_LEFT ) {
                    VehicleInfo[ vehicleid ][ vLeftVent ] = componentid;
                        if( VehicleInfo[ vehicleid ][ vLeftVent ] != -1 ) AddComponent( vehicleid, componentid );
                }
        }
}


stock IsComponentidCompatible( modelid, componentid ) {
    if( componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
                componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
        componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
        componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086 ) {
        return componentid;
        }

    switch( modelid ) {
        case 400: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 ) return componentid;
        case 401: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 402: if( componentid == 1009 || componentid == 1009 || componentid == 1010 ) return componentid;
        case 404: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 405: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000) return componentid;
        case 409: if( componentid == 1009 ) return componentid;
        case 410: if( componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 411: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 412: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 415: if( componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 418: if( componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016) return componentid;
        case 419: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 420: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003) return componentid;
        case 421: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000) return componentid;
        case 422: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007) return componentid;
        case 426: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003) return componentid;
        case 429: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 436: if( componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 438: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 439: if( componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013) return componentid;
        case 442: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 445: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 451: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 458: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 466: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 467: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 474: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 475: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 477: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
        case 478: if( componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 479: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 480: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 489: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000) return componentid;
        case 491: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 492: if( componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000) return componentid;
        case 496: if( componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020) return componentid;
        case 500: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 506: if( componentid == 1009) return componentid;
        case 507: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 516: if( componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 517: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 518: if( componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 526: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 527: if( componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007) return componentid;
        case 529: if( componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 533: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 534: if( componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106) return componentid;
        case 535: if( componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119) return componentid;
        case 536: if( componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108) return componentid;
        case 540: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 541: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 542: if( componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015) return componentid;
        case 545: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 546: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 547: if( componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000) return componentid;
        case 549: if( componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 550: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003) return componentid;
        case 551: if( componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003) return componentid;
        case 555: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 558: if( componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093) return componentid;
        case 559: if( componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009) return componentid;
        case 560: if( componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031) return componentid;
        case 561: if( componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057) return componentid;
        case 562: if( componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039) return componentid;
        case 565: if( componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048) return componentid;
        case 566: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 567: if( componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133) return componentid;
        case 575: if( componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042) return componentid;
        case 576: if( componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134) return componentid;
        case 579: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 580: if( componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
        case 585: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
        case 587: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 589: if( componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
        case 600: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
        case 602: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
        case 603: if( componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
    }
    return false;
}
//==============================================================================
stock GetVehicleCameraPos( vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0 ) { // credits Pasha
    new Float:rot;
    GetVehicleZAngle( vehicleid, rot );
    rot = 360 - rot;
    GetVehiclePos( vehicleid, x, y, z );
    x = floatsin( rot, degrees ) * yoff + floatcos( rot, degrees ) * xoff + x;
    y = floatcos( rot, degrees ) * yoff - floatsin( rot, degrees ) * xoff + y;
    z = zoff + z;
}
//==============================================================================
stock TuningTDControl( playerid, bool:show ) {
        if( show == true ) {
        for( new i = 0; i < 14; i ++ ) {
                        PlayerTextDrawShow( playerid, TuningBuy[ playerid ][ i ] );
                }

        }
        else if( show == false ) {
                for( new i = 0; i < 14; i ++ ) {
                        PlayerTextDrawHide( playerid, TuningBuy[ playerid ][ i ]);
                }
        }
}

IsPlayerNearWater(playerid)
{
	new Float:x, Float:y, Float:z, Float:checkx, Float:checky, Float:checkz, Float:angle;

	GetPlayerPos(playerid, x, y, z);

	// Make sure player is at correct Z-Height (Will not work near the dam)
	if(z > 0.0 && z < MAX_Z_FISH_THRESHOLD)
	{
		// Check North/East/South/West for water
		for(new i = 0; i < 4; i++)
		{
	        checkx = x + (WATER_CHECK_RADIUS * floatsin(-angle, degrees));
		    checky = y + (WATER_CHECK_RADIUS * floatcos(-angle, degrees));
			angle += 90.0;

			// Find the Z
            MapAndreas_FindZ_For2DCoord(checkx, checky, checkz);

			// Doesn't work under bridges
			if(checkz == 0.0) return 1;
		}
	}
	return 0;
}


CMD:animlist(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "--------------------------------------------------------");
	SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /handsup /facepalm /sarhos /bomb /rob /laugh /lookout /robman /crossarms /sit /siteat /hide /vomit /eat");
	SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /wave /slapass /deal /taichi /crack /smoke /chat /dance /fucku /drinkwater /pedmove /bat");
	SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /checktime /sleep /blob /opendoor /wavedown /tokalas /reload /cpr /dive /showoff /boxyap /tag");
	SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /goggles /cry /dj /chant /throw /robbed /hurt /nobreath /bar /getjiggy /fallover /rap /piss");
	SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /salute /crabs /washhands /signal /stop /gesture /jerkoff /idles /lowrider /carchat");
	SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /blowjob /spank /sunbathe /kiss /snatch /sneak /copa /sexy /holdup /misc /bodypush /walk");
	SendClientMessage(playerid, COLOR_CLIENT, "ANÝMASYON:{FFFFFF} /lowbodypush /headbutt /airkick /doorkick /leftslap /elbow /coprun /lean /leanback /wank");
	SendClientMessage(playerid, COLOR_CLIENT, "--------------------------------------------------------");
	return 1;
}


CMD:bodypush(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
	return 1;
}

CMD:lowbodypush(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
	return 1;
}

CMD:headbutt(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
	return 1;
}

CMD:air_Kick(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
	return 1;
}

CMD:door_Kick(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
	return 1;
}

CMD:leftslap(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
	return 1;
}

CMD:elbow(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
	return 1;
}

CMD:coprun(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
	return 1;
}

CMD:handsup(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:piss(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
   	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:sneak(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	PlayAnimEx(playerid, "PED", "Player_Sneak", 4.1, 1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:sarhos(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
   	PlayAnimEx(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1, 1);
    return 1;
}

CMD:bomb(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
   	PlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:rob(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	PlayAnimEx(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
	return 1;
}

CMD:laugh(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
	PlayAnimEx(playerid, "RAPPING", "Laugh_01", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:lookout(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
   	PlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:robman(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:hide(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:vomit(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "FOOD", "EAT_Vomit_P", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:eat(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:slapass(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:crack(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:fucku(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnim(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:taichi(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:drinkwater(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:checktime(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");

	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnim(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:sleep(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:blob(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "CRACK", "crckidle1", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:opendoor(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnim(playerid, "AIRPORT", "thrw_barl_thrw", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:wavedown(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnim(playerid, "BD_FIRE", "BD_Panic_01", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cpr(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnim(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:dive(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "DODGE", "Crush_Jump", 4.0, 0, 1, 1, 1, 0, 1);
    return 1;
}

CMD:showoff(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "Freeweights", "gym_free_celebrate", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:goggles(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnim(playerid, "goggles", "goggles_put_on", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cry(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:throw(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnim(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:robbed(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "SHOP", "SHP_Rob_GiveCash", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:hurt(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:box(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:washhands(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "BD_FIRE", "wash_up", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:crabs(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "MISC", "Scratchballs_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:salute(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:jerkoff(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:stop(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
    PlayAnimEx(playerid, "PED", "endchat_01", 4.0, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:rap(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
		case 1: PlayAnimEx(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: PlayAnimEx(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: PlayAnimEx(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendSyntaxMessage(playerid, "/rap [1-3]");
	}
	return 1;
}

CMD:wank(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
		case 1: PlayAnimEx(playerid, "PAULNMAC", "wank_in", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: PlayAnimEx(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: PlayAnimEx(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendSyntaxMessage(playerid, "/wank [1-3]");
	}
	return 1;
}

CMD:chat(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
		case 1: PlayAnimEx(playerid, "PED", "IDLE_CHAT", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkA", 4.0, 1, 0, 0, 0, 0, 1);
		case 3:	PlayAnimEx(playerid, "GANGS", "prtial_gngtlkB", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkE", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkF", 4.0, 1, 0, 0, 0, 0, 1);
		case 6: PlayAnimEx(playerid, "GANGS", "prtial_gngtlkG", 4.0, 1, 0, 0, 0, 0, 1);
		case 7:	PlayAnimEx(playerid, "GANGS", "prtial_gngtlkH", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendSyntaxMessage(playerid, "/chat [1-7]");
	}
	return 1;
}

CMD:sit(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
		case 1: PlayAnimEx(playerid, "Attractors", "Stepsit_in", 4.0, 0, 0, 0, 1, 0, 1);
		case 2: PlayAnimEx(playerid, "CRIB", "PED_Console_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: PlayAnimEx(playerid, "INT_HOUSE", "LOU_In", 4.0, 0, 0, 0, 1, 1, 1);
		case 4: PlayAnimEx(playerid, "MISC", "SEAT_LR", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: PlayAnimEx(playerid, "MISC", "Seat_talk_01", 4.0, 1, 0, 0, 0, 0, 1);
		case 6: PlayAnimEx(playerid, "MISC", "Seat_talk_02", 4.0, 1, 0, 0, 0, 0, 1);
		case 7: PlayAnimEx(playerid, "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 1, 1);
		default: SendSyntaxMessage(playerid, "/sit [1-7]");
	}
	return 1;
}

CMD:bat(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
		case 1: PlayAnimEx(playerid,"BASEBALL","Bat_IDLE",4.1, 0, 1, 1, 1, 1, 1);
		case 2: PlayAnimEx(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: PlayAnimEx(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendSyntaxMessage(playerid, "/bat [1-3]");
	}
	return 1;
}

CMD:lean(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
		case 1: PlayAnimEx(playerid, "GANGS", "leanIDLE", 4.0, 0, 0, 0, 1, 0, 1);
		case 2: PlayAnimEx(playerid, "MISC", "Plyrlean_loop", 4.0, 0, 0, 0, 1, 0, 1);
		default: SendSyntaxMessage(playerid, "/lean [1-2]");
	}
	return 1;
}
CMD:leanback(playerid, params[])
{
if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Araçta deðilsiniz.");
ApplyAnimation(playerid, "PED", "CAR_GETIN_RHS", 4.1, 0, 0, 0, 0, 1, 1);
SetPlayerArmedWeapon(playerid, 0);
return 1;
}

CMD:gesture(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnim(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0, 1);
	case 2: PlayAnim(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0, 1);
	case 3: PlayAnim(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0, 1);
	case 4: PlayAnim(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0, 1);
	case 5: PlayAnim(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0, 1);
	case 6: PlayAnim(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0, 1);
	case 7: PlayAnim(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0, 1);
	case 8: PlayAnim(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0, 1);
	case 9: PlayAnim(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
	case 10: PlayAnim(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
	case 11: PlayAnim(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0, 1);
	case 12: PlayAnim(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0, 1);
	case 13: PlayAnim(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0, 1);
	case 14: PlayAnim(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0, 1);
	case 15: PlayAnim(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/gesture [1-15]");
	}
	return 1;
}
CMD:facepalm(playerid, params[])
{
if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
if(!IsAblePedAnimation(playerid)) return 1;
PlayAnimEx(playerid, "MISC", "plyr_shkhead", 4.0, 1, 0, 0, 0, 0, 1);
return 1;
}
CMD:lay(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
	case 3: PlayAnimEx(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
	case 4: PlayAnimEx(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
	case 5: PlayAnimEx(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
	case 6: PlayAnimEx(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0, 1);
	case 7: PlayAnimEx(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
	case 8: PlayAnimEx(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/lay [1-8]");
	}
	return 1;
}

CMD:wave(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0, 1);
	case 3: PlayAnimEx(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/wave [1-3]");
	}
	return 1;
}

CMD:signal(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "POLICE", "CopTraf_Come", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "POLICE", "CopTraf_Stop", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/signal [1-2]");
	}
	return 1;
}

CMD:nobreath(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
	case 3: PlayAnimEx(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/nobreath [1-3]");
	}
	return 1;
}

CMD:fallover(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
	case 2: PlayAnimEx(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0, 1);
	case 3: PlayAnimEx(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
	case 4: PlayAnimEx(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 1, 0, 1);
	case 5: PlayAnimEx(playerid, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
	default: SendSyntaxMessage(playerid, "/fallover [1-5]");
	}
	return 1;
}

CMD:myskin(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: SetPlayerSkin(playerid,101);
	case 2: PlayAnimEx(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1, 1);
	case 3: PlayAnimEx(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
	case 4: PlayAnimEx(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1, 1);
	case 5: PlayAnimEx(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1, 1);
	case 6: PlayAnimEx(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1, 1);
	case 7: PlayAnimEx(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1, 1);
	case 8: PlayAnimEx(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1, 1);
	case 9: PlayAnimEx(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1, 1);
	case 10: PlayAnimEx(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1, 1);
	case 11: PlayAnimEx(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1, 1);
	case 12: PlayAnimEx(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1, 1);
	case 13: PlayAnimEx(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1, 1);
	case 14: PlayAnimEx(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1, 1);
	case 15: PlayAnimEx(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1, 1);
	case 16: PlayAnimEx(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1, 1);
	case 17: PlayAnimEx(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1, 1);
	case 18: PlayAnimEx(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1, 1);
	case 19: PlayAnimEx(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1, 1);
	case 20: PlayAnimEx(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1, 1);
	case 21: PlayAnimEx(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
	case 22: PlayAnimEx(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1, 1);
	case 23: PlayAnimEx(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1, 1);
	case 24: PlayAnimEx(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1, 1);
	case 25: PlayAnimEx(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1, 1);
	case 26: PlayAnimEx(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1, 1);
	default: SendSyntaxMessage(playerid, "/pedmove [1-26]");
	}
	return 1;
}

CMD:getjiggy(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0, 1);
	case 3: PlayAnimEx(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0, 1);
	case 4: PlayAnimEx(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0, 1);
	case 5: PlayAnimEx(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0, 1);
	case 6: PlayAnimEx(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0, 1);
	case 7: PlayAnimEx(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0, 1);
	case 8: PlayAnimEx(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
	case 9: PlayAnimEx(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
	case 10: PlayAnimEx(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/getjiggy [1-10]");
	}
	return 1;
}

CMD:stripclub(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "STRIP", "PLY_CASH", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "STRIP", "PUN_CASH", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/stripclub [1-2]");
	}
	return 1;
}
CMD:smoke(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnim(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/smoke [1-2]");
	}
	return 1;
}

CMD:dj(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
		case 1: PlayAnimEx(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0, 1);
		case 2: PlayAnimEx(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: PlayAnimEx(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: PlayAnimEx(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendSyntaxMessage(playerid, "/dj [1-4]");
	}
	return 1;
}

CMD:reload(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnim(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0, 1);
	case 2: PlayAnim(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/reload [1-2]");
	}
	return 1;
}

CMD:tag(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/tag [1-2]");
	}
	return 1;
}

CMD:deal(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "DEALER", "DEALER_DEAL", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "DEALER", "shop_pay", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/deal [1-2]");
	}
	return 1;
}
CMD:blowjob(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	PlayerData[playerid][pSexAnim] = 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/blowjob [1-2]");
	}
	return 1;
}
CMD:spank(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	PlayerData[playerid][pSexAnim] = 1;
	switch(strval(params))
	{
		case 1: PlayAnimEx(playerid, "SNM", "SPANKINGW", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: PlayAnimEx(playerid, "SNM", "SPANKINGP", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: PlayAnimEx(playerid, "SNM", "SPANKEDW", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: PlayAnimEx(playerid, "SNM", "SPANKEDP", 4.1, 1, 0, 0, 0, 0, 1);
		default: SendSyntaxMessage(playerid, "/spank [1-4]");
	}
	return 1;
}
CMD:crossarms(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
		case 1: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1, 1);
		case 2: PlayAnimEx(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0, 1);
		case 3: PlayAnimEx(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0, 1);
		case 4: PlayAnimEx(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0, 1);
		case 5: PlayAnimEx(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 0, 0, 0, 1);
		default: SendSyntaxMessage(playerid, "/crossarms [1-5]");
	}
	return 1;
}

CMD:cheer(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "ON_LOOKERS", "shout_01", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "ON_LOOKERS", "shout_02", 4.0, 1, 0, 0, 0, 0, 1);
	case 3: PlayAnimEx(playerid, "ON_LOOKERS", "shout_in", 4.0, 1, 0, 0, 0, 0, 1);
	case 4: PlayAnimEx(playerid, "RIOT", "RIOT_ANGRY_B", 4.0, 1, 0, 0, 0, 0, 1);
	case 5: PlayAnimEx(playerid, "RIOT", "RIOT_CHANT", 4.0, 1, 0, 0, 0, 0, 1);
	case 6: PlayAnimEx(playerid, "RIOT", "RIOT_shout", 4.0, 1, 0, 0, 0, 0, 1);
	case 7: PlayAnimEx(playerid, "STRIP", "PUN_HOLLER", 4.0, 1, 0, 0, 0, 0, 1);
	case 8: PlayAnimEx(playerid, "OTB", "wtchrace_win", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/cheer [1-8]");
	}
	return 1;
}

CMD:siteat(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "FOOD", "FF_Sit_Eat3", 4.0, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "FOOD", "FF_Sit_Eat2", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/siteat [1-2]");
	}
	return 1;
}

CMD:bar(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnim(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0, 1);
	case 2: PlayAnim(playerid, "BAR", "Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
	case 3: PlayAnim(playerid, "BAR", "Barserve_give", 4.0, 0, 0, 0, 0, 0, 1);
	case 4: PlayAnim(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 0, 0, 0, 0, 1);
	case 5: PlayAnimEx(playerid, "BAR", "BARman_idle", 4.0, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/bar [1-5]");
	}
	return 1;
}

CMD:dance(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);

	switch(strval(params))
	{
		case 1: SetPlayerSpecialAction(playerid, 5);
		case 2: SetPlayerSpecialAction(playerid, 6);
		case 3: SetPlayerSpecialAction(playerid, 7);
		case 4: SetPlayerSpecialAction(playerid, 8);
		default: SendSyntaxMessage(playerid, "/dance [1-4]");
	}
	return 1;
}

/*CMD:spank(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
		case 1: PlayAnimEx(playerid, "SNM", "SPANKINGW", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: PlayAnimEx(playerid, "SNM", "SPANKINGP", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: PlayAnimEx(playerid, "SNM", "SPANKEDW", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: PlayAnimEx(playerid, "SNM", "SPANKEDP", 4.1, 1, 0, 0, 0, 0, 1);
		default: SendSyntaxMessage(playerid, "/spank [1-4]");
	}
	return 1;
}*/

CMD:sexy(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
	case 3: PlayAnim(playerid, "STRIP", "STR_A2B", 4.1, 0, 0, 0, 0, 0, 1);
	case 4: PlayAnimEx(playerid, "STRIP", "STR_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
	case 5: PlayAnimEx(playerid, "STRIP", "STR_Loop_B", 4.1, 1, 0, 0, 0, 0, 1);
	case 6: PlayAnimEx(playerid, "STRIP", "STR_Loop_C", 4.1, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/sexy [1-6]");
	}
	return 1;
}

CMD:holdup(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "POOL", "POOL_ChalkCue", 4.1, 0, 1, 1, 1, 1, 1);
	case 2: PlayAnimEx(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1, 1);
	default: SendSyntaxMessage(playerid, "/holdup [1-2]");
	}
	return 1;
}

CMD:stickjup(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
    PlayAnimEx(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:copa(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnim(playerid, "POLICE", "CopTraf_Away", 4.1, 0, 0, 0, 0, 0, 1);
	case 2: PlayAnim(playerid, "POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0, 1);
	case 3: PlayAnim(playerid, "POLICE", "CopTraf_Left", 4.1, 0, 0, 0, 0, 0, 1);
	case 4: PlayAnim(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0, 1);
	case 5: PlayAnimEx(playerid, "POLICE", "Cop_move_FWD", 4.1, 1, 1, 1, 1, 1, 1);
	case 6: PlayAnimEx(playerid, "POLICE", "crm_drgbst_01", 4.1, 0, 0, 0, 1, 5000, 1);
	case 7: PlayAnim(playerid, "POLICE", "Door_Kick", 4.1, 0, 1, 1, 1, 1, 1);
	case 8: PlayAnim(playerid, "POLICE", "plc_drgbst_01", 4.1, 0, 0, 0, 0, 5000, 1);
	case 9: PlayAnim(playerid, "POLICE", "plc_drgbst_02", 4.1, 0, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/copa [1-9]");
	}
	return 1;
}

CMD:misc(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnim(playerid, "CAR", "flag_drop", 4.1, 0, 0, 0, 0, 0, 1);
	case 3: PlayAnim(playerid, "PED", "bomber", 4.1, 0, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/misc [1-3]");
	}
	return 1;
}

CMD:snatch(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnim(playerid, "PED", "BIKE_elbowL", 4.1, 0, 0, 0, 0, 0, 1);
	case 2: PlayAnim(playerid, "PED", "BIKE_elbowR", 4.1, 0, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/snatch [1-2]");
	}
	return 1;
}

/*CMD:blowjob(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	case 2: PlayAnimEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/blowjob [1-2]");
	}
	return 1;
}*/

CMD:kiss(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnim(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
	case 2: PlayAnim(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
	case 3: PlayAnim(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
	case 4: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
	case 5: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
	case 6: PlayAnim(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/kiss [1-6]");
	}
	return 1;
}


CMD:idles(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "PLAYIDLES", "shift", 4.1, 1, 1, 1, 1, 1, 1);
	case 2: PlayAnimEx(playerid, "PLAYIDLES", "shldr", 4.1, 1, 1, 1, 1, 1, 1);
	case 3: PlayAnimEx(playerid, "PLAYIDLES", "stretch", 4.1, 1, 1, 1, 1, 1, 1);
	case 4: PlayAnimEx(playerid, "PLAYIDLES", "strleg", 4.1, 1, 1, 1, 1, 1, 1);
	case 5: PlayAnimEx(playerid, "PLAYIDLES", "time", 4.1, 1, 1, 1, 1, 1, 1);
	case 6: PlayAnimEx(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
	case 7: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0, 1);
	case 8: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_shake", 4.1, 1, 0, 0, 0, 0, 1);
	case 9: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 1, 0, 0, 0, 0, 1);
	case 10: PlayAnimEx(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 1, 0, 0, 0, 0, 1);
	case 11: PlayAnimEx(playerid, "PED", "roadcross", 4.1, 1, 0, 0, 0, 0, 1);
	case 12: PlayAnimEx(playerid, "PED", "roadcross_female", 4.1, 1, 0, 0, 0, 0, 1);
	case 13: PlayAnimEx(playerid, "PED", "roadcross_gang", 4.1, 1, 0, 0, 0, 0, 1);
	case 14: PlayAnimEx(playerid, "PED", "roadcross_old", 4.1, 1, 0, 0, 0, 0, 1);
	case 15: PlayAnimEx(playerid, "PED", "woman_idlestance", 4.1, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/idles [1-15]");
	}
	return 1;
}

CMD:sunbathe(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAblePedAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnimEx(playerid, "SUNBATHE", "batherdown", 4.1, 0, 1, 1, 1, 1, 1);
	case 2: PlayAnimEx(playerid, "SUNBATHE", "batherup", 4.1, 0, 1, 1, 1, 1, 1);
	case 3: PlayAnimEx(playerid, "SUNBATHE", "Lay_Bac_in", 4.1, 0, 1, 1, 1, 1, 1);
	case 4: PlayAnimEx(playerid, "SUNBATHE", "Lay_Bac_out", 4.1, 0, 1, 1, 1, 1, 1);
	case 5: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_IdleA", 4.1, 0, 1, 1, 1, 1, 1);
	case 6: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_IdleB", 4.1, 0, 1, 1, 1, 1, 1);
	case 7: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1, 1);
	case 8: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_in", 4.1, 0, 1, 1, 1, 1, 1);
	case 9: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_M_out", 4.1, 0, 1, 1, 1, 1, 1);
	case 10: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.1, 0, 1, 1, 1, 1, 1);
	case 11: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_idleB", 4.1, 0, 1, 1, 1, 1, 1);
	case 12: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_idleC", 4.1, 0, 1, 1, 1, 1, 1);
	case 13: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_in", 4.1, 0, 1, 1, 1, 1, 1);
	case 14: PlayAnimEx(playerid, "SUNBATHE", "ParkSit_W_out", 4.1, 0, 1, 1, 1, 1, 1);
	case 15: PlayAnimEx(playerid, "SUNBATHE", "SBATHE_F_LieB2Sit", 4.1, 0, 1, 1, 1, 1, 1);
	case 16: PlayAnimEx(playerid, "SUNBATHE", "SBATHE_F_Out", 4.1, 0, 1, 1, 1, 1, 1);
	case 17: PlayAnimEx(playerid, "SUNBATHE", "SitnWait_in_W", 4.1, 0, 1, 1, 1, 1, 1);
	case 18: PlayAnimEx(playerid, "SUNBATHE", "SitnWait_out_W", 4.1, 0, 1, 1, 1, 1, 1);
	default: SendSyntaxMessage(playerid, "/sunbathe [1-18]");
	}
	return 1;
}

CMD:lowrider(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAbleVehicleAnimation(playerid)) return 1;
	if(IsCLowrider(GetPlayerVehicleID(playerid)))
	{
		switch(strval(params))
		{
		case 1: PlayAnim(playerid, "LOWRIDER", "lrgirl_bdbnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 2: PlayAnim(playerid, "LOWRIDER", "lrgirl_hair", 4.1, 0, 1, 1, 1, 1, 1);
		case 3: PlayAnim(playerid, "LOWRIDER", "lrgirl_hurry", 4.1, 0, 1, 1, 1, 1, 1);
		case 4: PlayAnim(playerid, "LOWRIDER", "lrgirl_idleloop", 4.1, 0, 1, 1, 1, 1, 1);
		case 5: PlayAnim(playerid, "LOWRIDER", "lrgirl_idle_to_l0", 4.1, 0, 1, 1, 1, 1, 1);
		case 6: PlayAnim(playerid, "LOWRIDER", "lrgirl_l0_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 7: PlayAnim(playerid, "LOWRIDER", "lrgirl_l0_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 8: PlayAnim(playerid, "LOWRIDER", "lrgirl_l0_to_l1", 4.1, 0, 1, 1, 1, 1, 1);
		case 9: PlayAnim(playerid, "LOWRIDER", "lrgirl_l12_to_l0", 4.1, 0, 1, 1, 1, 1, 1);
		case 10: PlayAnim(playerid, "LOWRIDER", "lrgirl_l1_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 11: PlayAnim(playerid, "LOWRIDER", "lrgirl_l1_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 12: PlayAnim(playerid, "LOWRIDER", "lrgirl_l1_to_l2", 4.1, 0, 1, 1, 1, 1, 1);
		case 13: PlayAnim(playerid, "LOWRIDER", "lrgirl_l2_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 14: PlayAnim(playerid, "LOWRIDER", "lrgirl_l2_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 15: PlayAnim(playerid, "LOWRIDER", "lrgirl_l2_to_l3", 4.1, 0, 1, 1, 1, 1, 1);
		case 16: PlayAnim(playerid, "LOWRIDER", "lrgirl_l345_to_l1", 4.1, 0, 1, 1, 1, 1, 1);
		case 17: PlayAnim(playerid, "LOWRIDER", "lrgirl_l3_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 18: PlayAnim(playerid, "LOWRIDER", "lrgirl_l3_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 19: PlayAnim(playerid, "LOWRIDER", "lrgirl_l3_to_l4", 4.1, 0, 1, 1, 1, 1, 1);
		case 20: PlayAnim(playerid, "LOWRIDER", "lrgirl_l4_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 21: PlayAnim(playerid, "LOWRIDER", "lrgirl_l4_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 22: PlayAnim(playerid, "LOWRIDER", "lrgirl_l4_to_l5", 4.1, 0, 1, 1, 1, 1, 1);
		case 23: PlayAnim(playerid, "LOWRIDER", "lrgirl_l5_bnce", 4.1, 0, 1, 1, 1, 1, 1);
		case 24: PlayAnim(playerid, "LOWRIDER", "lrgirl_l5_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 25: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkB", 4.1, 0, 1, 1, 1, 1, 1);
		case 26: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkC", 4.1, 0, 1, 1, 1, 1, 1);
		case 27: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkD", 4.1, 0, 1, 1, 1, 1, 1);
		case 28: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkE", 4.1, 0, 1, 1, 1, 1, 1);
		case 29: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkF", 4.1, 0, 1, 1, 1, 1, 1);
		case 30: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkG", 4.1, 0, 1, 1, 1, 1, 1);
		case 31: PlayAnim(playerid, "LOWRIDER", "prtial_gngtlkH", 4.1, 0, 1, 1, 1, 1, 1);
		default: SendSyntaxMessage(playerid, "/lowrider [1-31]");
		}
	}
	else
	{
		SendErrorMessage(playerid, "Bu animasyonu kullanabilmek için lowrider aracýnda olmanýz gerekmektedir.");
	}
	return 1;
}

CMD:carchat(playerid, params[])
{
    if (!AnimationCheck(playerid)) return SendErrorMessage(playerid, "Þu anda animasyon gerçekleþtirilemiyor.");
	if(!IsAbleVehicleAnimation(playerid)) return 1;
	switch(strval(params))
	{
	case 1: PlayAnim(playerid, "CAR_CHAT", "carfone_in", 4.1, 0, 1, 1, 1, 1, 1);
	case 2: PlayAnim(playerid, "CAR_CHAT", "carfone_loopA", 4.1, 0, 1, 1, 1, 1, 1);
	case 3: PlayAnim(playerid, "CAR_CHAT", "carfone_loopA_to_B", 4.1, 0, 1, 1, 1, 1, 1);
	case 4: PlayAnim(playerid, "CAR_CHAT", "carfone_loopB", 4.1, 0, 1, 1, 1, 1, 1);
	case 5: PlayAnim(playerid, "CAR_CHAT", "carfone_loopB_to_A", 4.1, 0, 1, 1, 1, 1, 1);
	case 6: PlayAnim(playerid, "CAR_CHAT", "carfone_out", 4.1, 0, 1, 1, 1, 1, 1);
	case 7: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_BL", 4.1, 0, 1, 1, 1, 1, 1);
	case 8: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_BR", 4.1, 0, 1, 1, 1, 1, 1);
	case 9: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_FL", 4.1, 0, 1, 1, 1, 1, 1);
	case 10: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc1_FR", 4.1, 0, 1, 1, 1, 1, 1);
	case 11: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc2_FL", 4.1, 0, 1, 1, 1, 1, 1);
	case 12: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc3_BR", 4.1, 0, 1, 1, 1, 1, 1);
	case 13: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc3_FL", 4.1, 0, 1, 1, 1, 1, 1);
	case 14: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc3_FR", 4.1, 0, 1, 1, 1, 1, 1);
	case 15: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_BL", 4.1, 0, 1, 1, 1, 1, 1);
	case 16: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_BR", 4.1, 0, 1, 1, 1, 1, 1);
	case 17: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_FL", 4.1, 0, 1, 1, 1, 1, 1);
	case 18: PlayAnim(playerid, "CAR_CHAT", "CAR_Sc4_FR", 4.1, 0, 1, 1, 1, 1, 1);
	case 19: PlayAnim(playerid, "CAR", "Sit_relaxed", 4.1, 0, 1, 1, 1, 1, 1);
	//case 20: PlayAnim(playerid, "CAR", "Tap_hand", 4.1, 1, 0, 0, 0, 0, 1);
	default: SendSyntaxMessage(playerid, "/carchat [1-19]");
	}
	return 1;
}


PlayAnim(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
	PlayerData[playerid][pLoopAnim] = true;
	ShowPlayerFooter(playerid, "Animasyonu durdurmak icin ~y~SPACE~w~ tusuna basin.");
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

PlayAnimEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
	if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
	PlayerData[playerid][pLoopAnim] = true;
	ShowPlayerFooter(playerid, "Animasyonu durdurmak icin ~y~SPACE~w~ tusuna basin.");
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

StopLoopingAnim(playerid)
{
	HidePlayerFooter(playerid);
	PlayerData[playerid][pLoopAnim] = false;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    PlayerData[playerid][pSexAnim] = 1;
    SetTimerEx("SexAnimBoz", 1000, false, "d", playerid);
}
forward SexAnimBoz(playerid);
public SexAnimBoz(playerid)
{
PlayerData[playerid][pSexAnim] = 0;
}
PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0,1);
}

IsAblePedAnimation(playerid)
{
    if(GetPVarInt(playerid, "PlayerCuffed") != 0 || GetPVarInt(playerid, "Injured") == 1 || GetPVarInt(playerid, "IsFrozen") == 1 || GetPVarInt(playerid, "EventAnims") == 1)
	{
   		SendErrorMessage(playerid, "Þu anda bunu kullanamazsýn!");
   		return 0;
	}
    if(IsPlayerInAnyVehicle(playerid) == 1)
    {
		SendErrorMessage(playerid, "Arabadayken bunu kullanamazsýn.");
		return 0;
	}
	return 1;
}

IsAbleVehicleAnimation(playerid)
{
    if(GetPVarInt(playerid, "PlayerCuffed") != 0 || GetPVarInt(playerid, "Injured") == 1 || GetPVarInt(playerid, "IsFrozen") == 1)
	{
   		SendErrorMessage(playerid, "Þu anda bunu kullanamazsýn!");
   		return 0;
	}
	if(IsPlayerInAnyVehicle(playerid) == 0)
    {
		SendErrorMessage(playerid, "Arabadayken bunu kullanamazsýn.");
		return 0;
	}
	return 1;
}

IsCLowrider(carid)
{
	new Cars[] = { 536, 575, 567};
	for(new i = 0; i < sizeof(Cars); i++)
	{
		if(GetVehicleModel(carid) == Cars[i]) return 1;
	}
	return 0;
}


stock SoruEkle(soru[], siklar[], cevap)
{
	format(Quiz[SonSoruID], 1024, "%s", soru);
	Cevaplar[SonSoruID] = cevap;
	format(Siklar[SonSoruID], 1024, "%s", siklar);
	SonSoruID++;
	return 1;
}

stock SoruSor(playerid)
{
	soru_al:
	new id = random(SonSoruID);

	if(SoruSoruldu[playerid][id]) goto soru_al;
	Dialog_Show(playerid, SoruCevapla, DIALOG_STYLE_LIST, Quiz[id], Siklar[id], "Seç", "");
	SoruID[playerid] = id;
	SoruSoruldu[playerid][id] = 1;
	return 1;
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

stock PlakaOlustur(i)
{
	new carid = Car_GetID(i);
	if(carid != -1)
	{
		format(CarData[carid][carPlaka], 24, "%s%s %d", Harfler[random(sizeof(Harfler))], Harfler[random(sizeof(Harfler))], RandomEx(1000, 9999));
		SetVehicleNumberPlate(i, CarData[carid][carPlaka]);
	}
}

stock BazIstasyonunaYakinMi(playerid)
{
	for(new i; i < sizeof(BazIstasyonu); ++i)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2000.0, BazIstasyonu[i][bazX], BazIstasyonu[i][bazY], BazIstasyonu[i][bazZ])) return 1;
	}
	return 0;
}


stock AnkesorluTelefonaYakinMi(playerid)
{
	for(new i; i < sizeof(Ankesorlu); ++i)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, Ankesorlu[i][ankesorX], Ankesorlu[i][ankesorY], Ankesorlu[i][ankesorZ])) return 1;
	}
	return 0;
}

GetActorID(playerid)
{
    for (new i = 0; i != MAX_DYNAMIC_ACTORS; i ++) if (Actors[i][actorVarmi] && IsPlayerInRangeOfPoint(playerid, 2.5, Actors[i][actorPos][0], Actors[i][actorPos][1], Actors[i][actorPos][2]))
	{
		return i;
	}
	return -1;
}

stock HaberKutusunaYakinMi(playerid)
{
    for(new i; i < sizeof(HaberKutulari); ++i)
	{
	    if (IsPlayerInRangeOfPoint(playerid, 2.0, HaberKutulari[i][0], HaberKutulari[i][1], HaberKutulari[i][2])) return 1;
	}
	return 0;
}

stock AgacaYakinMi(playerid)
{
	for(new i; i < sizeof(Agaclar); ++i)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, Agaclar[i][agacX], Agaclar[i][agacY], Agaclar[i][agacZ])) return 1;
	}
	return 0;
}

Agac_ID(playerid)
{
    for (new i = 0; i != sizeof(Agaclar); i ++) if ( IsPlayerInRangeOfPoint(playerid, 4.0, Agaclar[i][agacX], Agaclar[i][agacY], Agaclar[i][agacZ]))
	{
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
			return i;
	}
	return -1;
}

stock GuvenliBolgedeyse(playerid)
{
	for(new i; i < sizeof(GuvenliBolge); ++i)
	{
		if(IsPlayerInDynamicArea(playerid, GuvenliBolge[i][Rectangle])) return 1;
	}
	return 0;
}

Ankesor_ID(playerid)
{
    for (new i = 0; i != sizeof(Ankesorlu); i ++) if ( IsPlayerInRangeOfPoint(playerid, 1.0, Ankesorlu[i][ankesorX], Ankesorlu[i][ankesorY], Ankesorlu[i][ankesorZ]))
	{
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
			return i;
	}
	return -1;
}

stock KeresteyeYakinMi(playerid)
{
	for (new i = 0; i != MAX_KERESTE; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5,  Keresteler[i][keresteX], Keresteler[i][keresteY], Keresteler[i][keresteZ])) return 1;
	}
	return 0;
}

ModifiyeGaraji_ID(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != sizeof(ModifiyeGarajlari); i ++) if (IsPlayerInRangeOfPoint(playerid, radius,  ModifiyeGarajlari[i][modifiyeX], ModifiyeGarajlari[i][modifiyeY], ModifiyeGarajlari[i][modifiyeZ]))
	{
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
			return i;
	}
	return -1;
}

Kereste_ID(playerid, Float:radius = 2.5)
{
	if (PlayerData[playerid][pKereste] != -1 && Keresteler[PlayerData[playerid][pKereste]][keresteVarmi])
	    return PlayerData[playerid][pKereste];

    for (new i = 0; i != MAX_KERESTE; i ++) if (Keresteler[i][keresteVarmi] && IsPlayerInRangeOfPoint(playerid, radius, Keresteler[i][keresteX], Keresteler[i][keresteY] , Keresteler[i][keresteZ]))
	{
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
			return i;
	}
	return -1;
}

stock SQLName(id, underscore = 1)
{
	new owner[MAX_PLAYER_NAME], query[512], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT `Character` FROM `characters` WHERE `ID` = '%d'", id);
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows()) cache_get_field_content(0, "Character", owner);
	cache_delete(owner_query);
	if (!underscore) {
	    for (new i = 0, len = strlen(owner); i < len; i ++) {
	        if (owner[i] == '_') owner[i] = ' ';
		}
	}
	return owner;
}

stock AccountName(charname[])
{
	new owner[MAX_PLAYER_NAME], query[512], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", charname);
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows()) cache_get_field_content(0, "Username", owner);
	cache_delete(owner_query);
	return owner;
}

stock GetVehicleOwner(id)
{
	new owner[MAX_PLAYER_NAME], query[512], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT characters.Character as sahip FROM characters INNER JOIN cars ON characters.ID = cars.carOwner WHERE cars.carID = %d", CarData[id][carID]);
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows()) cache_get_field_content(0, "sahip", owner);
	cache_delete(owner_query);
	return owner;
}

stock GetVehicleOwnerPhone(id)
{
	new owner, query[512], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT characters.Phone as telno FROM characters INNER JOIN cars ON characters.ID = cars.carOwner WHERE cars.carID = %d", CarData[id][carID]);
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows()) owner = cache_get_field_int(0, "telno");
	cache_delete(owner_query);
	return owner;
}
stock GetVehicleOwnerID(id)
{
	new owner = -1, query[512], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT characters.ID as sahipid FROM characters INNER JOIN cars ON characters.ID = cars.carOwner WHERE cars.carID = %d", CarData[id][carID]);
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows()) owner = cache_get_field_content_int(0, "sahipid");
	cache_delete(owner_query);
	return owner;
}

stock GetNameForID(id)
{
	new owner[MAX_PLAYER_NAME], query[512], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT Character as sahip FROM characters WHERE ID = %d", id);
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows()) cache_get_field_content(0, "sahip", owner);
	cache_delete(owner_query);
	return owner;
}

stock GetHouseOwner(id)
{
	new owner[MAX_PLAYER_NAME], query[512], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT characters.Character as sahip FROM characters INNER JOIN houses ON characters.ID = houses.houseOwner WHERE houses.houseID = %d", HouseData[id][houseID]);
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows()) cache_get_field_content(0, "sahip", owner);
	cache_delete(owner_query);
	return owner;
}

stock GetHouseOwnerID(id)
{
	new owner = -1, query[512], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT characters.ID as sahipid FROM characters INNER JOIN houses ON characters.ID = houses.houseOwner WHERE houses.houseID = %d", HouseData[id][houseID]);
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows()) owner = cache_get_field_content_int(0, "sahipid");
	cache_delete(owner_query);
	return owner;
}

stock GetBusinessOwner(id)
{
	new owner[MAX_PLAYER_NAME], query[512], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT characters.Character as sahip FROM characters INNER JOIN businesses ON characters.ID = businesses.bizOwner WHERE businesses.bizID = %d", BusinessData[id][bizID]);
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows()) cache_get_field_content(0, "sahip", owner);
	cache_delete(owner_query);
	return owner;
}

stock GetBusinessOwnerID(id)
{
	new owner = -1, query[128], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT characters.ID as sahipid FROM characters INNER JOIN businesses ON characters.ID = businesses.bizOwner WHERE businesses.bizID = %d", BusinessData[id][bizID]);
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows()) owner = cache_get_field_content_int(0, "sahipid");
	cache_delete(owner_query);
	return owner;
}

stock GarajOlustur(id, Float:x, Float:y, Float:z, Float:angle)
{
    HouseData[id][garajTip] = 1;
    HouseData[id][garajKilit] = false;
    HouseData[id][garajPos][0] = x;
    HouseData[id][garajPos][1] = y;
    HouseData[id][garajPos][2] = z;
    HouseData[id][garajPos][3] = angle;
    House_Refresh(id);
}

stock GarajSil(id)
{
    HouseData[id][garajTip] = 0;
    HouseData[id][garajPos][0] = 0.0;
    HouseData[id][garajPos][1] = 0.0;
    HouseData[id][garajPos][2] = 0.0;
    HouseData[id][garajPos][3] = 0.0;
    House_Refresh(id);
    if(IsValidDynamic3DTextLabel(HouseData[id][garajText3D]))DestroyDynamic3DTextLabel(HouseData[id][garajText3D]);
    if(IsValidDynamicPickup(HouseData[id][garajPickup])) DestroyDynamicPickup(HouseData[id][garajPickup]);
}

TimestampToDate(time, &year, &month, &day, &hour, &minute, &second) {

        new remain = time, leapYear = 1, sub, yearCounter;

        for(new i = 0; i < time - sub;) {
                sub = (leapYear > 0 && leapYear < 4) ? 31622400 : 31536000;
                if(i == 0) {
                        i += 31536000;
                        remain -= 31536000;
                } else {
                        if(leapYear > 0 && leapYear < 4) {
                                i += 31536000;
                                leapYear++;
                                remain -= 31536000;
                        } else {
                                i += 31622400;
                                leapYear = 1;
                                remain -= 31622400;
                        }
                }
                if(time > 31536000) yearCounter++;
        }
        year = 1970 + yearCounter;

        sub = (leapYear > 0 && leapYear < 4) ? 86400 : 0;
        if(remain <= 2678400) { month = 1; remain -= 0; }
        else if(remain <= 5097600 + sub) { month = 2; remain -= 2678400; }
        else if(remain <= 7776000 + sub) { month = 3; remain -= 5097600; }
        else if(remain <= 10368000 + sub) { month = 4; remain -= 7776000; }
        else if(remain <= 13046400 + sub) { month = 5; remain -= 10368000; }
        else if(remain <= 15638400 + sub) { month = 6; remain -= 13046400; }
        else if(remain <= 18316800 + sub) { month = 7; remain -= 15638400; }
        else if(remain <= 20995200 + sub) { month = 8; remain -= 18316800; }
        else if(remain <= 23587200 + sub) { month = 9; remain -= 20995200; }
        else if(remain <= 26265600 + sub) { month = 10; remain -= 23587200; }
        else if(remain <= 28857600 + sub) { month = 11; remain -= 26265600; }
        else if(remain <= 31536000 + sub) { month = 12; remain -= 28857600; }

        day = floatround( floatdiv(float(remain), float(86400)), floatround_floor );
        remain -= (day * 86400);

        hour = floatround( floatdiv(float(remain), float(3600)), floatround_floor );
        remain -= (hour * 3600);

        minute = floatround( floatdiv(float(remain), float(60)), floatround_floor );
        remain -= (minute * 60);

		hour += 2;
        second = remain;
        day++;
        return 1;
}

stock ConvertToMinutes(time)
{
    // http://forum.sa-mp.com/showpost.php?p=3223897&postcount=11
    new string[15];//-2000000000:00 could happen, so make the string 15 chars to avoid any errors
    format(string, sizeof(string), "%02d:%02d", time / 60, time % 60);
    return string;
}



GetVehicleInfrontID (vehid)
{
    new Float: temp = 7.0;
        new j = 0;
        for (new i = 1; i <= MAX_VEHICLES; i++)
        {
            new Float: a, Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2;
        GetVehiclePos (vehid, x1, y1, z1);
        GetVehicleZAngle (vehid, a);
                if (i != vehid)
                {
                        if (GetVehiclePos (i, x2, y2, z2))
                        {
                                new Float: distance = floatsqroot (floatpower ((x1 - x2), 2) + floatpower ((y1 - y2), 2) + floatpower ((z1 - z2), 2));
                                GetVehicleZAngle (vehid, a);

                                if (distance < 300.0)
                                {
                                x1 = x1 + (distance * floatsin(-a, degrees));
                                        y1 = y1 + (distance * floatcos(-a, degrees));

                                        distance = floatsqroot ((floatpower ((x1 - x2), 2)) + (floatpower ((y1 - y2), 2)));

                                        if (temp > distance)
                                        {
                                                temp = distance;
                                                j = i;
                                        }
                                }
                        }
                }
        }
        if (temp < 7.0) return j;
        return -1;
}

stock GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0)
{
	// http://forum.sa-mp.com/showpost.php?p=1302838&postcount=8
    new Float: rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot, degrees) * yoff + floatcos(rot, degrees) * xoff + x;
    y = floatcos(rot, degrees) * yoff - floatsin(rot, degrees) * xoff + y;
    z = zoff + z;
}

stock GetVehicleSpeed(vehicleid,UseMPH = 0)
{
	new Float:speed_x,Float:speed_y,Float:speed_z,Float:temp_speed;
	GetVehicleVelocity(vehicleid,speed_x,speed_y,speed_z);
	if(UseMPH == 0)
	{
	    temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*136.666667;
	} else {
	    temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*85.4166672;
	}
	new hiz = floatround(temp_speed,floatround_round);return hiz;
}

forward RadarGuncelle (vehid);
public RadarGuncelle (vehid)
{
    	new id = GetVehicleInfrontID (vehid);
        if (id < 0)
        {
      	 			TextDrawSetString(carMDC[vehid][2], "PLAKA: ~y~N/A");
	                TextDrawSetString(carMDC[vehid][3], "MODEL: ~y~N/A");
	                TextDrawSetString(carMDC[vehid][4], "HIZ: ~y~N/A");
        }
        else
        {
				new str[256];
                new ids = Car_GetID(id);
                format(str, sizeof(str), "PLAKA: ~y~%s", CarData[ids][carPlaka]);
	            TextDrawSetString(carMDC[vehid][2], str);
	            format(str, sizeof(str), "MODEL: ~y~%s", ReturnVehicleModelName(GetVehicleModel(id)));
	            TextDrawSetString(carMDC[vehid][3], str);
				format(str, sizeof(str), "HIZ: ~y~%d KMH", GetVehicleSpeed(id));
	            TextDrawSetString(carMDC[vehid][4], str);
	            for (new i = 0; i < MAX_PLAYERS; i++)
		        {
		                if (IsPlayerInVehicle (i, vehid))
		            	{
							if(GetVehicleSpeed(id) > CoreVehicles[vehid][vehRadarLimit])
							    SendServerMessage(i, "DÝKKAT! %s plakalý %s model araç hýz limitini aþtý! (Aracýn hýzý: %d KMH)", CarData[ids][carPlaka], ReturnVehicleModelName(GetVehicleModel(id)), GetVehicleSpeed(id));
		                }
		        }
        }
        for (new i = 0; i < MAX_PLAYERS; i++)
        {
                if (IsPlayerInVehicle (i, vehid))
            	{
                    for(new ia; ia < 5; ia++) TextDrawShowForPlayer(i, carMDC[vehid][ia]);
                }
        }
        return 1;
}

MenuMDC(playerid)
{
    new tarihm[6], strs[128];
	getdate(tarihm[0], tarihm[1], tarihm[2]);
	gettime(tarihm[3], tarihm[4], tarihm[5]);
	format(strs, sizeof(strs), "%02d/%02d/%02d %02d:%02d", tarihm[0], tarihm[1], tarihm[2], tarihm[3], tarihm[4]);
	PlayerTextDrawSetString(playerid, MainMDC[playerid][14], strs);
	format(strs, sizeof(strs), "Hosgeldin, ~y~%s ~w~%s!", Faction_GetRank(playerid), ReturnName(playerid, 0));
	PlayerTextDrawSetString(playerid, MainMDC[playerid][13], strs);
	SelectTextDraw(playerid, COLOR_GREEN);
    for(new ia; ia < 20; ia++) PlayerTextDrawShow(playerid, MainMDC[playerid][ia]);
    PlayerTextDrawShow(playerid, MainMDC[playerid][27]);
	PlayerTextDrawShow(playerid, MainMDC[playerid][28]);
    SetPVarInt(playerid, "MDC", 1);
}

/*MenuMDC_TelefonSorgulama(playerid, telno)
{
    new ownerid = GetNumberOwner(telno), strs[128];
    format(strs, sizeof(strs), "Ad/Soyad: ~y~%s", ReturnName(ownerid, 0));
	PlayerTextDrawSetString(playerid, MainMDC[playerid][20], strs);
	format(strs, sizeof(strs), "Dogum Yeri: ~y~%s", PlayerData[ownerid][pOrigin]);
	PlayerTextDrawSetString(playerid, MainMDC[playerid][21], strs);
 	format(strs, sizeof(strs), "D.Tarihi: ~y~%s", PlayerData[ownerid][pBirthdate]);
	PlayerTextDrawSetString(playerid, MainMDC[playerid][22], strs);
	format(strs, sizeof(strs), "Meslek: ~y~%s",  Job_GetName(PlayerData[ownerid][pJob]));
	PlayerTextDrawSetString(playerid, MainMDC[playerid][23], strs);
	format(strs, sizeof(strs), "Sahip Oldugu Arac Sayisi: ~y~%d", Car_GetCount(ownerid));
	PlayerTextDrawSetString(playerid, MainMDC[playerid][24], strs);
	new aranma[24];
	if (PlayerData[ownerid][pWarrants] > 0) format(aranma, sizeof(aranma), "~r~Araniyor!");
	else format(aranma, sizeof(aranma), "~g~Aranmiyor");
	format(strs, sizeof(strs), "Aranma Durumu: ~y~%s", aranma);
	PlayerTextDrawSetString(playerid, MainMDC[playerid][25], strs);
	PlayerTextDrawSetPreviewModel(playerid, MainMDC[playerid][26], PlayerData[ownerid][pSkin]);
    for (new i = 20; i < 29; i ++) PlayerTextDrawShow(playerid, MainMDC[playerid][i]);
}*/

MenuMDC_AracSorgulama(playerid, vehid, userid)
{

    new id = Car_GetID(vehid), Float:fX, Float:fY, Float:fZ;
	GetVehiclePos(vehid, fX, fY, fZ);
	SendServerMessage(playerid, "Sahip Ad/Soyad: %s", GetVehicleOwner(id));
	SendServerMessage(playerid, "Plaka: %s", CarData[id][carPlaka]);
	SendServerMessage(playerid, "Arac Model: %s", ReturnVehicleModelName(GetVehicleModel(vehid)));
	SendServerMessage(playerid, "Lokasyon: %s", GetLocation(fX, fY, fZ));
	SendServerMessage(playerid, "Telefon: %d", PlayerData[userid][pPhone]);
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(userid, i) && BusinessData[i][bizOwner] != 99999999) {
	SendServerMessage(playerid, "Ýþyeri ID: %d", i);
	}
	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && House_IsOwner(userid, i)) {
	SendServerMessage(playerid, "Ev ID: %d", i);
	}
}

MenuMDC_Kapat(playerid)
{
	CancelSelectTextDraw(playerid);
	SetPVarInt(playerid, "MDC", 0);
    for(new ia; ia < 29; ia++) PlayerTextDrawHide(playerid, MainMDC[playerid][ia]);
}
forward LsdEtki(playerid);
public LsdEtki(playerid)
{
SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "** Kullandýðý maddeden dolayý Halüsinasyonlar görmektedir. ( %s )", ReturnName(playerid, 0));
EffectTimer[playerid] = SetTimerEx("RemoveEffects", 45 * 1000, false, "i", playerid);
//setplayergamespeed(playerid, 1);
KillTimer(PlayerData[playerid][pUyusturucu]);
return 1;
}
forward HideTextdraws(playerid);
public HideTextdraws(playerid)
{
PlayerTextDrawHide(playerid, Statement[playerid]);
return 1;
}
/*forward KrizEtki(playerid); // PASÝF
public KrizEtki(playerid)
{
ClearAnimations(playerid);
TogglePlayerControllable(playerid,1);
EffectTimer[playerid] = SetTimerEx("RemoveEffects", 45 * 1000, false, "i", playerid);
KillTimer(PlayerData[playerid][pKriz]);
return 1;
}*/
forward KokoEtki(playerid);
public KokoEtki(playerid)
{
SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "** Kullandýðý maddeden dolayý Halüsinasyonlar görmektedir. ( %s )", ReturnName(playerid, 0));
EffectTimer[playerid] = SetTimerEx("RemoveEffects", 45 * 1000, false, "i", playerid);
//setplayergamespeed(playerid, 6.5);
KillTimer(PlayerData[playerid][pUyusturucu]);
return 1;
}
forward SkunkEtki(playerid);
public SkunkEtki(playerid)
{
SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "** Kullandýðý maddeden dolayý gözlerinde ki kýzarýklýk belli olmaktadýr. ( %s )", ReturnName(playerid, 0));
EffectTimer[playerid] = SetTimerEx("RemoveEffects", 45 * 1000, false, "i", playerid);
KillTimer(PlayerData[playerid][pUyusturucu]);
//setplayergamespeed(playerid, 1);
return 1;
}
forward MariEtki(playerid);
public MariEtki(playerid)
{
SendNearbyMessage(playerid, 30.0, 0x80CAADFF, "** Kullandýðý maddeden dolayý gözlerinde ki kýzarýklýk belli olmaktadýr. ( %s )", ReturnName(playerid, 0));
EffectTimer[playerid] = SetTimerEx("RemoveEffects", 45 * 1000, false, "i", playerid);
//setplayergamespeed(playerid, 3);
KillTimer(PlayerData[playerid][pUyusturucu]);
return 1;
}
forward TanitimKontrol(playerid);
public TanitimKontrol(playerid)
{


    	if (PlayerData[playerid][pTutorial] > 0)
		{
		    PlayerData[playerid][pTutorialTime]--;

		    if (PlayerData[playerid][pTutorialTime] < 1)
		    {
		        switch (PlayerData[playerid][pTutorial])
		        {
		            case 1:
		            {
		                PlayerData[playerid][pTutorial] = 2;
		                PlayerData[playerid][pTutorialTime] = 10;

		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][59], "Tanitim: Ehliyet Merkezi");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][60], "Burasi bir ~g~~h~Ehliyet Merkezi~w~. Burada surus testine~n~tabi tutulursunuz. Testi gecerek bir ehliyete~n~ sahip olabilirsiniz.");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][61], "Yasal olarak arac surmek icin ehliyete ihtiyaciniz~n~vardir. Ehliyetiniz yokken arac kullanirsaniz~n~polisler sizi tutuklayabilir!");

						#if SERVER_CITY == 1
                            JBC_SetPlayerPos(playerid, 1967.677978, -1991.190795, -3.260505);
							InterpolateCameraPos(playerid, 1642.303344, -2327.007568, 15.672925, 1967.677978, -1991.190795, 16.739494, 2000);
							InterpolateCameraLookAt(playerid, 1642.292968, -2327.523193, 15.546875, 1968.177246, -1991.205078, 16.651542, 2000);
                        #elseif SERVER_CITY == 2
			                JBC_SetPlayerPos(playerid, -2026.765991, -84.237663, 21.766628);
							InterpolateCameraPos(playerid, -2399.519287, 321.964355, 37.035743, -2026.765991, -84.237663, 41.766628, 2000);
							InterpolateCameraLookAt(playerid, -2399.951416, 322.215942, 37.015625, -2026.787597, -84.917533, 41.520622, 2000);
						#elseif SERVER_CITY == 3
			                JBC_SetPlayerPos(playerid, 1168.088500, 1381.582641, -3.185750);
							InterpolateCameraPos(playerid, 1711.642089, 1448.227294, 13.340233, 1168.088500, 1381.582641, 16.814249, 2000);
							InterpolateCameraLookAt(playerid, 1711.144897, 1448.224365, 13.289665, 1168.084472, 1381.082641, 16.674325, 2000);
						#endif
			        }
                    case 2:
		            {
		                PlayerData[playerid][pTutorial] = 3;
		                PlayerData[playerid][pTutorialTime] = 10;

		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][59], "Tanitim: Araclar");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][60], "Burasi bir ~g~~h~galeridir. Burada kendinize ait bir~n~arac sahibi olabilirsiniz.");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][61], "~b~~h~/park~w~ ile park edebilirsiniz! Eger hatali park~n~yaparsaniz araciniz polisler tarafindan cekilebilir.");

						#if SERVER_CITY == 1
						    JBC_SetPlayerPos(playerid, 546.784729, -1256.438354, 15.406070);
							InterpolateCameraPos(playerid, 1967.677978, -1991.190795, 16.739494, 546.784729, -1256.438354, 35.406070, 2000);
							InterpolateCameraLookAt(playerid, 1968.177246, -1991.205078, 16.651542, 546.749816, -1256.937133, 35.216030, 2000);
						#elseif SERVER_CITY == 2
			                JBC_SetPlayerPos(playerid, -2006.275146, 287.903869, 28.095851);
							InterpolateCameraPos(playerid, -2026.765991, -84.237663, 41.766628, -2006.275146, 287.903869, 48.095851, 2000);
							InterpolateCameraLookAt(playerid, -2026.787597, -84.917533, 41.520622, -2005.739257, 287.892669, 47.936939, 2000);
						#elseif SERVER_CITY == 3
                   			JBC_SetPlayerPos(playerid, 1635.780761, 1828.321289, 5.649860);
							InterpolateCameraPos(playerid, 1168.088500, 1381.582641, 16.814249, 1635.780761, 1828.321289, 25.649860, 2000);
							InterpolateCameraLookAt(playerid, 1168.084472, 1381.082641, 16.674325, 1636.280517, 1828.325683, 25.5048842, 2000);
						#endif
				    }
		            case 3:
		            {
		                PlayerData[playerid][pTutorial] = 4;
		                PlayerData[playerid][pTutorialTime] = 10;

		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][59], "Tanitim: Meslekler");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][60], "Sehrin belirli yerlerinde meslekler vardir.~n~Su anda gordugunuz yer ~r~~h~tirclik~w~ meslegi.");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][61], "Baska mesleklerde bulunmaktadir, onlara~n~ ulasmak icin ~g~~h~/gps~w~ yazabilirsiniz!");

						#if SERVER_CITY == 1
						    JBC_SetPlayerPos(playerid, 2420.203857, -2089.423095, -1.058326);
							InterpolateCameraPos(playerid, 556.450866, -1260.044677, 20.433259, 2420.203857, -2089.423095, 18.941673, 2000);
							InterpolateCameraLookAt(playerid, 556.276916, -1260.619628, 20.427263, 2420.703613, -2089.426269, 18.879707, 2000);
						#elseif SERVER_CITY == 2
			                JBC_SetPlayerPos(playerid, -1683.220336, -7.236631, -4.830643);
							InterpolateCameraPos(playerid, -2006.275146, 287.903869, 48.095851, -1683.220336, -7.236631, 15.169356, 2000);
							InterpolateCameraLookAt(playerid, -2005.739257, 287.892669, 47.936939, -1682.866577, -6.893327, 15.087323, 2000);
						#elseif SERVER_CITY == 3
			                JBC_SetPlayerPos(playerid, 1012.894348, 2137.586425, -4.546604);
							InterpolateCameraPos(playerid, 1635.780761, 1828.321289, 25.649860, 1012.894348, 2137.586425, 15.453395, 2000);
							InterpolateCameraLookAt(playerid, 1636.280517, 1828.325683, 25.504884, 1013.393859, 2137.540283, 15.364944, 2000);
						#endif
			        }
		            case 4:
		            {
		                PlayerData[playerid][pTutorial] = 5;
		                PlayerData[playerid][pTutorialTime] = 10;

		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][59], "Tanitim: Evler");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][60], "San Andreas'ta ev sahibi olabilirsiniz. ~n~Evleri satin almak icin paraniz varsa ~g~~h~/satinal~n~~w~komutu ile alabilirsiniz.");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][61], "Evinizi mobilya alarak dekore edebilirsiniz.~n~Hayal gucunuz ile mucizeler yaratin! Ev ile ilgili~n~ yardim almak icin ~g~~h~/evyardim~w~komutunu kullanin.");

						#if SERVER_CITY == 1
						    JBC_SetPlayerPos(playerid, 1149.126586, -744.422912, 84.984420);
							InterpolateCameraPos(playerid, 2420.203857, -2089.423095, 18.941673, 1149.126586, -744.422912, 104.984420, 2000);
							InterpolateCameraLookAt(playerid, 2420.703613, -2089.426269, 18.879707, 1148.626708, -744.411132, 104.823509, 2000);
						#elseif SERVER_CITY == 2
			                JBC_SetPlayerPos(playerid, -2507.954101, 1125.971801, 44.563232);
							InterpolateCameraPos(playerid, 1683.220336, -7.236631, 15.169356, -2507.954101, 1125.971801, 64.563232, 2000);
							InterpolateCameraLookAt(playerid, -1682.866577, -6.893327, 15.087323, -2507.928710, 1126.796386, 64.145462, 2000);
						#elseif SERVER_CITY == 3
			                JBC_SetPlayerPos(playerid, 1380.143676, 2532.807373, -2.440540);
							InterpolateCameraPos(playerid, 1012.894348, 2137.586425, 15.453395, 1380.143676, 2532.807373, 17.559459, 2000);
							InterpolateCameraLookAt(playerid, 1013.393859, 2137.540283, 15.364944, 1380.643676, 2532.810302, 17.450519, 2000);
						#endif
			        }
		            case 5:
		            {
		                PlayerData[playerid][pTutorial] = 6;
		                PlayerData[playerid][pTutorialTime] = 10;

		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][59], "Tanitim: Isyerleri");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][60], "Sehrin bazi yerlerinde isyerleri bulunmaktadir.~n~Bir miktar para ile kendinize dukkan alabilirsiniz~n~ve dukkaninizi kendinize gore duzenleyebilirsiniz.");//and even~n~hire employees to work for you!");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][61], "Her dukkanin tipi farklidir. Mobilya, fastfood,~n~market, elektronik esya vb.~n~Isyeri ile ilgili yardim almak icin ~g~~h~/isyeriyardim~w~ komutunu kullanin.");

						#if SERVER_CITY == 1
                            JBC_SetPlayerPos(playerid, 1315.212036, -916.465942, 24.322559);
							InterpolateCameraPos(playerid, 1149.126586, -744.422912, 104.984420, 1315.212036, -916.465942, 44.322559, 2000);
							InterpolateCameraLookAt(playerid, 1148.626708, -744.411132, 104.82350, 1315.211059, -915.965942, 44.212619, 2000);
						#elseif SERVER_CITY == 2
			                JBC_SetPlayerPos(playerid, -2442.177734, 726.758605, 21.054706);
							InterpolateCameraPos(playerid, -2507.954101, 1125.971801, 64.563232, -2442.177734, 726.758605, 41.054706, 2000);
							InterpolateCameraLookAt(playerid, -2507.928710, 1126.796386, 64.145462, -2442.179931, 727.221496, 40.933773, 2000);
						#elseif SERVER_CITY == 3
                   			JBC_SetPlayerPos(playerid, 2160.811035, 1992.461425, -1.797470);
							InterpolateCameraPos(playerid, 1380.143676, 2532.807373, 17.559459, 2160.811035, 1992.461425, 18.202529, 2000);
							InterpolateCameraLookAt(playerid, 1380.643676, 2532.810302, 17.450519, 2161.310546, 1992.449707, 18.108432, 2000);
						#endif
			        }
			        case 6:
		            {
		                PlayerData[playerid][pTutorial] = 7;
		                PlayerData[playerid][pTutorialTime] = 10;

						SetPlayerInterior(playerid, 10);
						JBC_SetPlayerPos(playerid, 365.013977, -73.615165, 983.073730);
						SetPlayerCameraPos(playerid, 365.013977, -73.615165, 1003.073730);
						SetPlayerCameraLookAt(playerid, 365.426818, -73.318977, 1003.007812);
			        }
		            case 7:
		            {
		                PlayerData[playerid][pTutorial] = 8;
		                PlayerData[playerid][pTutorialTime] = 10;

						SetPlayerInterior(playerid, 0);
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][59], "Tanitim: Az Kaldi!");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][60], "Tanitim bitti! Eger~n~yardima ihtiyacýn olursa, ~g~~h~/sorusor~w~ komutunu~n~ kullanabilirsin.");
		                PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][61], "Hera ~r~Roleplay~w~'i tercih ettiginiz icin tesekkurler!~n~~n~Azsonra role baslayacaksin!");

						#if SERVER_CITY == 1
                            JBC_SetPlayerPos(playerid, 4300.4253, 2688.5061, 160.8172);
							SetPlayerCameraPos(playerid, 4300.4253, 2688.5061, 119.8172);
							SetPlayerCameraLookAt(playerid, 4300.4180, 2689.5076, 110.2672);
						#elseif SERVER_CITY == 2
			                JBC_SetPlayerPos(playerid, -2016.094970, -306.215942, 55.449806);
							InterpolateCameraPos(playerid, -2336.783935, -187.118865, 44.045051, -2016.094970, -306.215942, 75.449806, 2000);
							InterpolateCameraLookAt(playerid, -2336.785400, -186.618865, 43.885139, -2016.088867, -305.735107, 75.390838, 2000);
						#elseif SERVER_CITY == 3
			                JBC_SetPlayerPos(playerid, 2115.572753, 2113.175292, 6.203048);
							InterpolateCameraPos(playerid, 1871.407104, 2052.714599, 20.308364, 2115.572753, 2113.175292, 26.203048, 2000);
							InterpolateCameraLookAt(playerid, 1871.404663, 2053.214599, 20.169441, 2115.072753, 2113.184326, 26.153575, 2000);
						#endif
			        }
		            case 8:
		            {
		                for (new j = 58; j < 62; j ++) {
		                    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][j]);
						}
						SetDefaultSpawn(playerid);
		                //ShowHungerTextdraw(playerid, 1);

		                PlayerData[playerid][pCreated] = 1;
		                PlayerData[playerid][pTask] = 1;
                        new sqlid = RandomEx(1000, 5000);
                        PlayerData[playerid][pSQLID] = sqlid;
		                PlayerData[playerid][pTutorial] = 0;
		                PlayerData[playerid][pTutorialTime] = 0;
                         SendClientMessage(playerid,  COLOR_LIGHTRED, "[*]:{FFFFFF} Varna Roleplay ekibini tercih ettiðiniz için teþekkürler.");
                         SendClientMessage(playerid,  COLOR_LIGHTRED, "[*]:{FFFFFF} Oyun içinde yardýma ihtiyacýn olursa '/sorusor' komutunu kullanabilirsin.");
                         SendServerMessage(playerid,  "GPS Cihazý envanterinize ekledi.");
						Inventory_Add(playerid, "GPS Cihazi", 18875);
		            }
		        }
		    }
		}
	return 1;
}


Car_LSPDTrunkReset(vehicleid)
{
    Beanbag[vehicleid] = true;
    AgriKesici[vehicleid] = true;
    CelikYelek[vehicleid] = true;
	format(CruiserData[vehicleid][0][SlotAdi], 24, "M4A1 Carbine");
	format(CruiserData[vehicleid][1][SlotAdi], 24, "MP5");
	format(CruiserData[vehicleid][2][SlotAdi], 24, "Shotgun");
	format(CruiserData[vehicleid][3][SlotAdi], 24, "Glock");
	format(CruiserData[vehicleid][4][SlotAdi], 24, "Nightstick");
	CruiserData[vehicleid][0][SilahID] = 31; CruiserData[vehicleid][0][KalanMermi] = 250;
	CruiserData[vehicleid][1][SilahID] = 29; CruiserData[vehicleid][1][KalanMermi] = 250;
	CruiserData[vehicleid][2][SilahID] = 25; CruiserData[vehicleid][2][KalanMermi] = 100;
	CruiserData[vehicleid][3][SilahID] = 22; CruiserData[vehicleid][3][KalanMermi] = 50;
	CruiserData[vehicleid][4][SilahID] = 3; CruiserData[vehicleid][4][KalanMermi] = 1;
	return 1;
}

forward GBWarnReset(playerid);
public GBWarnReset(playerid)
{
	PlayerData[playerid][pGBWarn] = 0;
	return 1;
}


Haber_Olustur(playerid, baslik[], icerik[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HABER; i ++)
		{
	    	if (!Haberler[i][haberVarmi])
		    {
    	        Haberler[i][haberVarmi] = true;
    	        format(Haberler[i][haberBaslik], 128, baslik);
    	       	format(Haberler[i][haberIcerik], 512, icerik);
    	       	format(Haberler[i][haberYazan], 24, ReturnName(playerid, 0));
				Haberler[i][haberTip] = PlayerData[playerid][pFaction];
				Haberler[i][haberOkunma] = 0;
    			mysql_tquery(g_iHandle, "INSERT INTO `haberler` (`haberOkunma`) VALUES(0)", "OnHaberCreated", "d", i);

				return i;
			}
		}
	}
	return -1;
}
stock AgacKes(playerid, id)
{
    Agaclar[id][agacKesildimi] = true;
    DestroyDynamicObject(Agaclar[id][agacObject]);
    Agaclar[id][agacSap] = CreateDynamicObject(848, Agaclar[id][agacX], Agaclar[id][agacY], Agaclar[id][agacZ]+2, 0.0, 0.0, 0.0);

	Kereste_Olustur(playerid); Kereste_Olustur(playerid);
	return 1;
}

Kereste_Olustur(playerid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_KERESTE; i ++) if (!Keresteler[i][keresteVarmi])
	    {
         	if (Kereste_ID(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            Keresteler[i][keresteVarmi] = true;
			Keresteler[i][keresteX] = x;
   			Keresteler[i][keresteY] = y;
            Keresteler[i][keresteZ] = z-0.4;
            Keresteler[i][keresteA] = angle;
			Keresteler[i][keresteVehicle] = INVALID_VEHICLE_ID;
            Kereste_Yenile(i);
            return i;
		}
	}
	return -1;
}


Kereste_Yenile(keresteid)
{
	if (keresteid != -1 && Keresteler[keresteid][keresteVarmi])
	{

		if (IsValidDynamicObject(Keresteler[keresteid][keresteObject]))
		    DestroyDynamicObject(Keresteler[keresteid][keresteObject]);

		Keresteler[keresteid][keresteObject] = CreateDynamicObject(1463, Keresteler[keresteid][keresteX], Keresteler[keresteid][keresteY], Keresteler[keresteid][keresteZ], 0.0, 0.0, Keresteler[keresteid][keresteA], 0, 0);
	}
	return 1;
}

forward OdunVurmaTimer(playerid);
public OdunVurmaTimer(playerid)
{
	PlayerData[playerid][pOdunTimer] = false;
	return 1;
}

Kereste_Sil(keresteid)
{
	if (keresteid != -1 && Keresteler[keresteid][keresteVarmi])
	{
		if (IsValidDynamicObject(Keresteler[keresteid][keresteObject]))
		    DestroyDynamicObject(Keresteler[keresteid][keresteObject]);

		foreach (new i : Player) if (PlayerData[i][pKereste] == keresteid) {
		    PlayerData[i][pKereste] = -1;

		    RemovePlayerAttachedObject(i, 4);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
		}
	    Keresteler[keresteid][keresteVarmi] = false;
	    Keresteler[keresteid][keresteVehicle] = INVALID_VEHICLE_ID;
	}
	return 1;
}

stock Telefon_TD(playerid)
{
    for(new i=0; i < sizeof(TelefonGiris); i++) TextDrawHideForPlayer(playerid, TelefonGiris[i]);
    for(new i=0; i < sizeof(TelefonMenu); i++) TextDrawHideForPlayer(playerid, TelefonMenu[i]);
    for(new i=0; i < sizeof(TelefonArama); i++) TextDrawHideForPlayer(playerid, TelefonArama[i]);
    for(new i=0; i < sizeof(TelefonCevirme); i++) TextDrawHideForPlayer(playerid, TelefonCevirme[i]);
    for(new i=0; i < sizeof(TelefonYazi[]); i++) PlayerTextDrawHide(playerid, TelefonYazi[playerid][i]);
    for(new i=0; i < 4; i++) PlayerTextDrawHide(playerid, TelefonPlayer[playerid][i]);
    for(new i=0; i < sizeof(TelefonTD[]); i++) TextDrawShowForPlayer(playerid, TelefonTD[i]);
	SelectTextDraw(playerid, COLOR_GREEN);
    SetPVarInt(playerid, "Telefon", 1);
	Telefon_Giris(playerid);
}

stock Telefon_Giris(playerid)
{
    for(new i=0; i < sizeof(TelefonGiris); i++) TextDrawShowForPlayer(playerid, TelefonGiris[i]);
    for(new i=0; i < sizeof(TelefonMenu); i++) TextDrawHideForPlayer(playerid, TelefonMenu[i]);
    for(new i=0; i < sizeof(TelefonArama); i++) TextDrawHideForPlayer(playerid, TelefonArama[i]);
    for(new i=0; i < sizeof(TelefonCevirme); i++) TextDrawHideForPlayer(playerid, TelefonCevirme[i]);
    for(new i=0; i < sizeof(TelefonYazi[]); i++) PlayerTextDrawHide(playerid, TelefonYazi[playerid][i]);
    for(new i=0; i < sizeof(TelefonTD); i++) TextDrawShowForPlayer(playerid, TelefonTD[i]);
    for(new i=1; i < 4; i++) PlayerTextDrawHide(playerid, TelefonPlayer[playerid][i]);
	new str[24];
	format(str, sizeof(str), "Telefon Numaraniz: %d", PlayerData[playerid][pPhone]);
	PlayerTextDrawSetString(playerid, TelefonPlayer[playerid][0], str);
	SelectTextDraw(playerid, COLOR_GREEN);
}

stock Telefon_Harita(playerid)
{
    for(new i=0; i < sizeof(TelefonGiris); i++) TextDrawHideForPlayer(playerid, TelefonGiris[i]);
    for(new i=0; i < sizeof(TelefonMenu); i++) TextDrawHideForPlayer(playerid, TelefonMenu[i]);
    for(new i=0; i < sizeof(TelefonArama); i++) TextDrawHideForPlayer(playerid, TelefonArama[i]);
    for(new i=0; i < sizeof(TelefonCevirme); i++) TextDrawHideForPlayer(playerid, TelefonCevirme[i]);
    for(new i=0; i < sizeof(TelefonTD); i++) TextDrawShowForPlayer(playerid, TelefonTD[i]);
    for(new i=0; i < 4; i++) PlayerTextDrawHide(playerid, TelefonPlayer[playerid][i]);
    for(new i=1; i < 4; i++) PlayerTextDrawShow(playerid, TelefonYazi[playerid][i]);
    TextDrawShowForPlayer(playerid, TelefonCevirme[0]);
    new str[256], Float:pos[3];
    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    format(str, sizeof(str), "Bulundugunuz Yer: ~n~~r~%s", GetLocation(pos[0], pos[1], pos[2]));
	PlayerTextDrawSetString(playerid, TelefonYazi[playerid][1], str);
	PlayerTextDrawSetString(playerid, TelefonYazi[playerid][3], "Harita");
	SelectTextDraw(playerid, COLOR_GREEN);
}

stock Telefon_Hava(playerid)
{
    for(new i=0; i < sizeof(TelefonGiris); i++) TextDrawHideForPlayer(playerid, TelefonGiris[i]);
    for(new i=0; i < sizeof(TelefonMenu); i++) TextDrawHideForPlayer(playerid, TelefonMenu[i]);
    for(new i=0; i < sizeof(TelefonArama); i++) TextDrawHideForPlayer(playerid, TelefonArama[i]);
    for(new i=0; i < sizeof(TelefonCevirme); i++) TextDrawHideForPlayer(playerid, TelefonCevirme[i]);
    for(new i=0; i < sizeof(TelefonTD); i++) TextDrawShowForPlayer(playerid, TelefonTD[i]);
    for(new i=0; i < 4; i++) PlayerTextDrawHide(playerid, TelefonPlayer[playerid][i]);
    TextDrawShowForPlayer(playerid, TelefonCevirme[0]);
    for(new i=1; i < 4; i++) PlayerTextDrawShow(playerid, TelefonYazi[playerid][i]);
	PlayerTextDrawSetString(playerid, TelefonYazi[playerid][1], "Veri alinamiyor.");
	PlayerTextDrawSetString(playerid, TelefonYazi[playerid][3], "Hava");
	SelectTextDraw(playerid, COLOR_GREEN);
}

stock Telefon_Menu(playerid, menu = 1)
{
	if(menu == 1) {
	for(new i=0; i < sizeof(TelefonCevirme); i++) TextDrawHideForPlayer(playerid, TelefonCevirme[i]);
    for(new i=0; i < sizeof(TelefonGiris); i++) TextDrawHideForPlayer(playerid, TelefonGiris[i]);
    for(new i=0; i < sizeof(TelefonMenu); i++) TextDrawShowForPlayer(playerid, TelefonMenu[i]);
    for(new i=0; i < 4; i++) PlayerTextDrawHide(playerid, TelefonPlayer[playerid][i]);
    for(new i=0; i < sizeof(TelefonYazi[]); i++) PlayerTextDrawHide(playerid, TelefonYazi[playerid][i]);
    for(new i=0; i < sizeof(TelefonArama); i++) TextDrawHideForPlayer(playerid, TelefonArama[i]);
    for(new i=0; i < sizeof(TelefonTD); i++) TextDrawShowForPlayer(playerid, TelefonTD[i]);
    SelectTextDraw(playerid, COLOR_GREEN);
    SetPVarInt(playerid, "TelefonMenu", 1);
    }
	else {
	    Telefon_Giris(playerid);
	    SetPVarInt(playerid, "TelefonMenu", 0);
	}
}

stock Telefon_Arama(playerid)
{
    for(new i=0; i < sizeof(TelefonGiris); i++) TextDrawHideForPlayer(playerid, TelefonGiris[i]);
    for(new i=0; i < sizeof(TelefonMenu); i++) TextDrawHideForPlayer(playerid, TelefonMenu[i]);
    for(new i=0; i < sizeof(TelefonCevirme); i++) TextDrawHideForPlayer(playerid, TelefonCevirme[i]);
    for(new i=0; i < 3; i++) PlayerTextDrawHide(playerid, TelefonPlayer[playerid][i]);
    for(new i=2; i < 4; i++) PlayerTextDrawShow(playerid, TelefonPlayer[playerid][i]);
    for(new i=0; i < sizeof(TelefonYazi[]); i++) PlayerTextDrawHide(playerid, TelefonYazi[playerid][i]);
    for(new i=0; i < sizeof(TelefonTD); i++) TextDrawShowForPlayer(playerid, TelefonTD[i]);
    for(new i=0; i < sizeof(TelefonArama); i++) TextDrawHideForPlayer(playerid, TelefonArama[i]);
	if(GetPVarInt(playerid, "Arayanmi") == 1) {
	    TextDrawShowForPlayer(playerid, TelefonArama[0]);
	    TextDrawShowForPlayer(playerid, TelefonArama[1]);
	    PlayerTextDrawShow(playerid, TelefonPlayer[playerid][2]);
	    TextDrawShowForPlayer(playerid, TelefonArama[4]);
	    PlayerTextDrawSetString(playerid, TelefonPlayer[playerid][3], "");
	} else {
	    TextDrawShowForPlayer(playerid, TelefonArama[0]);
	    TextDrawShowForPlayer(playerid, TelefonArama[1]);
	    TextDrawShowForPlayer(playerid, TelefonArama[2]);
	    TextDrawShowForPlayer(playerid, TelefonArama[3]);
	}

    new num[24];
	new numara = PlayerData[PlayerData[playerid][pCallLine]][pPhone], ad[24];

	for (new i = 0; i != MAX_CONTACTS; i ++) if( ContactData[playerid][i][contactNumber] == numara && ContactData[playerid][i][contactExists]) {
        format(ad, sizeof(ad), ContactData[playerid][i][contactName]);
		break;
	}

	format(num, sizeof(num), "%d", numara);
	if(strlen(ad) > 0) PlayerTextDrawSetString(playerid, TelefonPlayer[playerid][2], ad);
	else PlayerTextDrawSetString(playerid, TelefonPlayer[playerid][2], num);

	if( GetPVarInt(PlayerData[playerid][pCallLine], "AnkesorludenmiAriyor") == 1 ) PlayerTextDrawSetString(playerid, TelefonPlayer[playerid][2], "Bilinmiyor");
    SelectTextDraw(playerid, COLOR_GREEN);
}

stock Telefon_Cevirme(playerid)
{
	for(new i=0; i < sizeof(TelefonTD); i++) TextDrawShowForPlayer(playerid, TelefonTD[i]);
    for(new i=0; i < sizeof(TelefonGiris); i++) TextDrawHideForPlayer(playerid, TelefonGiris[i]);
    for(new i=0; i < sizeof(TelefonMenu); i++) TextDrawHideForPlayer(playerid, TelefonMenu[i]);
    for(new i=0; i < sizeof(TelefonCevirme); i++) TextDrawShowForPlayer(playerid, TelefonCevirme[i]);
    for(new i=1; i < 2; i++) PlayerTextDrawShow(playerid, TelefonPlayer[playerid][i]);
    for(new i=0; i < sizeof(TelefonYazi[]); i++) PlayerTextDrawHide(playerid, TelefonYazi[playerid][i]);
    for(new i=0; i < sizeof(TelefonArama); i++) TextDrawHideForPlayer(playerid, TelefonArama[i]);
    SelectTextDraw(playerid, COLOR_GREEN);
}

stock Telefon_Rehber(playerid)
{
    for(new i=0; i < sizeof(TelefonGiris); i++) TextDrawHideForPlayer(playerid, TelefonGiris[i]);
    for(new i=0; i < sizeof(TelefonMenu); i++) TextDrawHideForPlayer(playerid, TelefonMenu[i]);
    for(new i=0; i < sizeof(TelefonCevirme); i++) TextDrawHideForPlayer(playerid, TelefonCevirme[i]);
    for(new i=0; i < sizeof(TelefonTD); i++) TextDrawHideForPlayer(playerid, TelefonTD[i]);
	for(new i=0; i < sizeof(TelefonArama); i++) TextDrawHideForPlayer(playerid, TelefonArama[i]);
    for(new i=0; i < 4; i++) PlayerTextDrawHide(playerid, TelefonPlayer[playerid][i]);
    ShowContacts(playerid);
	return 1;
}
stock Telefon_Kapat(playerid)
{
	for(new i=0; i < sizeof(TelefonTD); i++) TextDrawHideForPlayer(playerid, TelefonTD[i]);
    for(new i=0; i < sizeof(TelefonGiris); i++) TextDrawHideForPlayer(playerid, TelefonGiris[i]);
    for(new i=0; i < sizeof(TelefonMenu); i++) TextDrawHideForPlayer(playerid, TelefonMenu[i]);
    for(new i=0; i < sizeof(TelefonCevirme); i++) TextDrawHideForPlayer(playerid, TelefonCevirme[i]);
    for(new i=0; i < sizeof(TelefonArama); i++) TextDrawHideForPlayer(playerid, TelefonArama[i]);
    for(new i=0; i < 4; i++) PlayerTextDrawHide(playerid, TelefonPlayer[playerid][i]);
    for(new i=0; i < sizeof(TelefonYazi[]); i++) PlayerTextDrawHide(playerid, TelefonYazi[playerid][i]);
    CancelSelectTextDraw(playerid);
    SetPVarInt(playerid, "TelefonMenu", 0);
    SetPVarInt(playerid, "Telefon", 0);
}

stock BirlikUyeSayisiCek(birlikid)
{
	new query[128], sonuc, Cache: sayi_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT null FROM characters WHERE Faction=%d", FactionData[birlikid][factionID]);
	sayi_query = mysql_query(g_iHandle, query);
	sonuc = cache_num_rows();
	cache_delete(sayi_query);
	return sonuc;
}

forward IckiYuklendi(playerid, vehicleid); public IckiYuklendi(playerid, vehicleid)
{
	CoreVehicles[vehicleid][vehIKacakcilik] = 1;
   	SendServerMessage(playerid, "Kaçak içki sandýklarý araca yüklendi teslim noktasýna götürebilirsin.");
    SetPlayerCheckpoint(playerid, I_KACAKCILIK_YUKTESLIM_X, I_KACAKCILIK_YUKTESLIM_Y, I_KACAKCILIK_YUKTESLIM_Z, 9.0);
    TogglePlayerControllable(playerid, 1);
}
forward CimentoYuklendi(playerid, vehicleid); public CimentoYuklendi(playerid, vehicleid)
{
	CoreVehicles[vehicleid][vehCimento] = 1;
   	SendServerMessage(playerid, "Çimentoyu teslim etmek için çizelgeyi takip et.");
   	CPcimento[playerid] = cimento1;
    SetPlayerCheckpoint(playerid, cimento1_CO, 4.1);
    TogglePlayerControllable(playerid, 1);
}
forward MalYuklendi(playerid, vehicleid); public MalYuklendi(playerid, vehicleid)
{
	CoreVehicles[vehicleid][vehTasimaci] = 1;
   	SendServerMessage(playerid, "Yükünüz hazýr, çizelgeyi takip edin.");
    TogglePlayerControllable(playerid, 1);
}

forward ElektronikYuklendi(playerid, vehicleid); public ElektronikYuklendi(playerid, vehicleid)
{
	CoreVehicles[vehicleid][vehEKacakcilik] = 1;
   	SendServerMessage(playerid, "Kaçak elektronik ürün sandýklarý araca yüklendi teslim noktasýna götürebilirsin.");
	SetPlayerCheckpoint(playerid, E_KACAKCILIK_YUKTESLIM_X, E_KACAKCILIK_YUKTESLIM_Y, E_KACAKCILIK_YUKTESLIM_Z, 9.0);
    TogglePlayerControllable(playerid, 1);
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    if(enterexit == 1)
	{
        _Kick(playerid);
    }
    return 0;
}


stock ModMenu(playerid, const str[])
{

    SendErrorMessage( playerid, "%s", str);
	ShowPlayerDialog( playerid, dialog_TUNING, DIALOG_STYLE_LIST, "Modifiye Menüsü", D_TEXT, "Seç", "{FF6347}Iptal");

	return 1;
}

ModifiyeCik(playerid)
{
    new gid = GetPVarInt(playerid, "ModifiyeGarajID");
	new vehicleid = GetPVarInt(playerid, "ModifiyeAracID");
	SetVehiclePos(vehicleid, ModifiyeGarajlari[gid][modifiyeX], ModifiyeGarajlari[gid][modifiyeY] , ModifiyeGarajlari[gid][modifiyeZ] );
	SetVehicleZAngle(vehicleid, ModifiyeGarajlari[gid][modifiyeA]);
	TogglePlayerControllable(playerid, 1);
	SetCameraBehindPlayer(playerid);
	LinkVehicleToInterior(vehicleid, 0);
	SetPlayerInterior(playerid, 0);
	SetVehicleVirtualWorld(vehicleid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetPVarInt(playerid, "ModifiyeYapiyormu", 0); 	SetPVarInt(playerid, "ModifiyeGarajID", -1); SetPVarInt(playerid, "ModifiyeAracID", -1);
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new carid = Car_GetID(vehicleid);
	  	for (new i = 0; i < 14; i ++)
		{
		    if (!CarData[carid][carMods][i]) RemoveVehicleComponent(vehicleid, CarData[carid][carMods][i]);
		}
	}
	return 1;
}


Birlik_EXPVer(birlikid, exp)
{
	FactionData[birlikid][factionEXP] += exp;

	if(FactionData[birlikid][factionLevel] < 10 && FactionData[birlikid][factionEXP] >= FactionData[birlikid][factionLevel]*75)
	{
	    FactionData[birlikid][factionEXP] = 0;
	    FactionData[birlikid][factionLevel]++;
     	SendFactionMessage(birlikid, COLOR_GREEN, "BÝRLÝK: Birlik seviyesi %d'e yükseldi!", FactionData[birlikid][factionLevel]);
	}
	Faction_Save(birlikid);
}

forward AgacReset(); public AgacReset()
{
   for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if(GarbageData[i][garbageCapacity] < 50)
    {
		GarbageData[i][garbageCapacity] += 20;
		Garbage_Refresh(i);
 	}
    for(new i=0; i != sizeof(Agaclar); i++) if(Agaclar[i][agacKesildimi])
    {
        if (!IsValidDynamicObject(Agaclar[i][agacObject]))
	        Agaclar[i][agacObject] = CreateDynamicObject(Agaclar[i][agacModel], Agaclar[i][agacX], Agaclar[i][agacY], Agaclar[i][agacZ], 0.0, 0.0, 0.0);

         if (IsValidDynamicObject(Agaclar[i][agacSap]))
	        DestroyDynamicObject(Agaclar[i][agacSap]);

	    if (IsValidDynamic3DTextLabel(Agaclar[i][agacLabel]))
	        DestroyDynamic3DTextLabel(Agaclar[i][agacLabel]);

    	Agaclar[i][agacLabel] = CreateDynamic3DTextLabel("Hasar: 15/15", COLOR_RED, Agaclar[i][agacX], Agaclar[i][agacY], Agaclar[i][agacZ]+3, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		Agaclar[i][agacKesildimi] = false;
		Agaclar[i][agacHasar] = 15;

	}
	return 1;
}



stock IsPlayerFacingPoint(playerid, Float:dOffset, Float:pX, Float:pY, Float:pZ)
{
	#pragma unused pZ
	new
		Float:X,
		Float:Y,
		Float:Z,
		Float:pA,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;

}

stock IsPlayerFacingPlayer(playerid, targetid, Float:dOffset)
{

	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:pA,
		Float:X,
		Float:Y,
		Float:Z,
		Float:ang;

	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;

	GetPlayerPos(targetid, pX, pY, pZ);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;

}

stock AngleInRangeOfAngle(Float:a1, Float:a2, Float:range)
{

	a1 -= a2;
	if((a1 < range) && (a1 > -range)) return true;

	return false;

}

forward ClearAnim(playerid);
public ClearAnim(playerid)
{
	ClearAnimations(playerid);
	return 1;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

Paintball_DMSpawn(playerid)
{
    ResetPlayerWeapons(playerid);
    new Random = random(sizeof(DMRandomSpawn));
	JBC_SetPlayerPos(playerid, DMRandomSpawn[Random][0], DMRandomSpawn[Random][1], DMRandomSpawn[Random][2]);
	SetPlayerFacingAngle(playerid, DMRandomSpawn[Random][3]);
	CanDegistir(playerid, 100); ZirhDegistir(playerid, 100);
	GivePlayerWeaponEx(playerid, 24, 15000);
	GivePlayerWeaponEx(playerid, 31, 15000);
	GivePlayerWeaponEx(playerid, 34, 15000);
	GivePlayerWeaponEx(playerid, 27, 15000);
	SetPlayerVirtualWorld(playerid, PlayerData[playerid][pPaintball]+2000); SetPlayerInterior(playerid, 18);
	PlayerData[playerid][pHospital] = -1; PlayerData[playerid][pKilled] = 0;
	return 1;
}

Paintball_TDMSpawn(playerid)
{
    ResetPlayerWeapons(playerid);
    if(PlayerData[playerid][pPaintballTeam] == 0)
    {
        JBC_SetPlayerPos(playerid, -977.1769,1061.0682,1345.6719);
		SetPlayerFacingAngle(playerid, 88.7916);
		SetPlayerSkin(playerid, 221);
    }
	else {
	    JBC_SetPlayerPos(playerid, -1127.9049,1057.7969,1346.4141);
		SetPlayerFacingAngle(playerid, 270.5266);
		SetPlayerSkin(playerid, 222);
	}
	CanDegistir(playerid, 100); ZirhDegistir(playerid, 100);
	GivePlayerWeaponEx(playerid, 24, 15000);
	GivePlayerWeaponEx(playerid, 31, 15000);
	GivePlayerWeaponEx(playerid, 34, 15000);
	GivePlayerWeaponEx(playerid, 27, 15000);
	SetPlayerVirtualWorld(playerid, PlayerData[playerid][pPaintball]+4000); SetPlayerInterior(playerid, 10);
	PlayerData[playerid][pHospital] = -1; PlayerData[playerid][pKilled] = 0;
	return 1;
}
Paintball_Baslat(id)
{
	if(Paintball[id][odaTur] == 1)
	{
		foreach(new i : Player) if(PlayerData[i][pPaintball] == id ) { UpdateWeapons(i); Paintball_DMSpawn(i); }
	}
    if(Paintball[id][odaTur] == 2)
	{
	    foreach(new i : Player) if(PlayerData[i][pPaintball] == id)
		{
			Dialog_Show(i, PaintballTeam, DIALOG_STYLE_MSGBOX, "Takým Seçimi", "{FFFFFF}Hangi takýmý seçmek istiyorsun?\n\n {FF6347}A Takýmý\n{007FFF} B Takýmý", "A", "B");
		}
	}
	foreach(new i : Player) if(PlayerData[i][pPaintball] == id )
	{
	    GetPlayerHealth(i, PlayerData[i][pPaintballLast][0]);
	    GetPlayerArmour(i, PlayerData[i][pPaintballLast][1]);
	}
 	Paintball[id][odaDurum] = 2;
	return 1;
}

PaintballOdasiVarmi(playerid)
{
    for(new i=0; i != MAX_PAINTBALL_ODA; i++) if(Paintball[i][odaVarmi] && Paintball[i][odaSahip] == playerid) {
	    return i;
	}
	return -1;
}

Paintball_Team_A(id)
{
	new count;
    foreach(new i : Player) if(PlayerData[i][pPaintball] == id && PlayerData[i][pPaintballTeam] == 0) {
		count++;
	}
	return count;
}

Paintball_Team_B(id)
{
	new count;
    foreach(new i : Player) if(PlayerData[i][pPaintball] == id && PlayerData[i][pPaintballTeam] == 1) {
		count++;
	}
	return count;
}

Paintball_Katilimci(id)
{
	new count;
    foreach(new i : Player) if(PlayerData[i][pPaintball] == id) {
		count++;
	}
	return count;
}

stock Paintball_MesajYolla(odaid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach(new i : Player) if(PlayerData[i][pPaintball] == odaid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach(new i : Player) if(PlayerData[i][pPaintball] == odaid) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

PaintballOyunundami(playerid)
{
    if(PlayerData[playerid][pPaintball] != -1 && Paintball[PlayerData[playerid][pPaintball]][odaDurum] == 2)
		 return 1;
    return 0;
}

Paintball_Ayril(playerid)
{
	Paintball_MesajYolla(PlayerData[playerid][pPaintball], COLOR_HOSPITAL, "PAINTBALL: {FFFFFF}%s adlý kiþi oyundan ayrýldý.", ReturnName(playerid, 0));
	if(PaintballOyunundami(playerid)) {
	    JBC_SetPlayerPos(playerid, PB_X, PB_Y, PB_Z);
	    SetPlayerFacingAngle(playerid, PB_A);
	}
	PlayerData[playerid][pPaintball] = -1;
	SendServerMessage(playerid, "Oyun boyunca %d adam öldürdün ve %d kere öldün.", PlayerData[playerid][pPaintballKill], PlayerData[playerid][pPaintballDeath]);
	PlayerData[playerid][pPaintballKill] = 0;
	PlayerData[playerid][pPaintballDeath] = 0;
	ResetPlayerWeapons(playerid);
	SetPlayerTeam(playerid, 0);
	SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
   	SetWeapons(playerid);
   	SetPlayerVirtualWorld(playerid, 0); SetPlayerInterior(playerid, 0);
	return 1;
}

function PaintballCheck()
{

    for (new i = 0; i != MAX_DYNAMIC_ACTORS; i ++)
	{
	    SetActorPos(Actors[i][actorReal], Actors[i][actorPos][0], Actors[i][actorPos][1], Actors[i][actorPos][2]);
        SetActorFacingAngle(Actors[i][actorReal], Actors[i][actorPos][3]);
        SetActorVirtualWorld(Actors[i][actorReal], Actors[i][actorWorld]);
	}
    for(new i=0; i != MAX_PAINTBALL_ODA; i++) if(Paintball[i][odaVarmi])
	{
	    if(Paintball_Katilimci(i) <= 0) Paintball_Reset(i);
	    if( Paintball[i][odaDurum] == 2) {
			new kill = Paintball[i][odaTakimPuan][0] + Paintball[i][odaTakimPuan][1];
		    Paintball[i][odaSure]++;
		    if(Paintball_Katilimci(i) < 2)
			{
				Paintball_MesajYolla(i, COLOR_HOSPITAL, "PAINTBALL: Yetersiz katýlýmdan dolayý oyun iptal oldu.");
				Paintball_Reset(i);
			}
		    if(Paintball[i][odaSure] > 600)
		    {
		        Paintball_MesajYolla(i, COLOR_HOSPITAL, "PAINTBALL: Oyun süresi (10dk) dolduðu için oyun kapandý.");
		        Paintball_Reset(i);
		    }
		    if(kill >= 50)
		    {
		        Paintball_Reset(i);
	    	}
	    }
	}
	return 1;
}

Paintball_Reset(id)
{
	foreach(new i : Player) if(PlayerData[i][pPaintball] == id) { Paintball_Ayril(i); }
    if(	Paintball[id][odaTakimPuan][0] > Paintball[id][odaTakimPuan][1]) Paintball_MesajYolla(id, COLOR_HOSPITAL, "PAINTBALL: 'B' takýmý oyunu kazandý.");
    if(	Paintball[id][odaTakimPuan][0] < Paintball[id][odaTakimPuan][1]) Paintball_MesajYolla(id, COLOR_HOSPITAL, "PAINTBALL: 'A' takýmý oyunu kazandý.");
	format(Paintball[id][odaAdi], 24, "Adsýz Oda");
	format(Paintball[id][odaSifre], 24, "");
	Paintball[id][odaVarmi] = false;
	Paintball[id][odaSahip] = -1;
	Paintball[id][odaTur] = 0;
	Paintball[id][odaSure] = 0;
	Paintball[id][odaDurum] = 0;
	Paintball[id][odaTakimPuan][0] = 0; Paintball[id][odaTakimPuan][1] = 0;
	return 1;
}


/*Fabrika_ID(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != MAX_FABRIKA; i ++) if (IsPlayerInRangeOfPoint(playerid, radius,  Fabrikalar[i][fabrikaPos][0], Fabrikalar[i][fabrikaPos][1], Fabrikalar[i][fabrikaPos][2]))
	{
		if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
			return i;
	}
	return -1;
}*/


stock ResetRobbery(playerid, destroy = 0)
{
        if(RobberyTimer[playerid] != -1) KillTimer(RobberyTimer[playerid]);
    RobberyTimer[playerid] = -1;
    RobberyCounter[playerid] = 0;
    RobberyType[playerid] = 0;
    if(destroy)
    {
                if(IsValidDynamicCP(RobberyEscape[playerid])) DestroyDynamicCP(RobberyEscape[playerid]);
                RobberyEscape[playerid] = -1;
                RobberyCash[playerid] = 0;
        }

        return 1;
}

stock GetClosestDeposit(playerid, Float: range = 2.0)
{
        new id = -1, Float: dist = range, Float: tempdist;
        for(new i; i < sizeof(DepositCoords); ++i)
        {
            tempdist = GetPlayerDistanceFromPoint(playerid, DepositCoords[i][0], DepositCoords[i][1], DepositCoords[i][2]);
                if(tempdist > range) continue;
                if(tempdist <= dist)
                {
                        dist = tempdist;
                        id = i;
                        break;
                }
        }

        return id;
}

stock TriggerAlarm(reason = 0)
{
        if(BankControls[Alarm]) return 1;
    for(new i; i < GetMaxPlayers(); ++i)
        {
                if(!IsPlayerConnected(i)) continue;
                if(RobberyType[i] == 1)
                {
                        ResetRobbery(i);
                        ClearAnimations(i, 1);
                }

                if(!GetPVarInt(i, "InsideBank")) continue;
                SetPVarInt(i, "Alarm", 1);
        PlayerPlaySound(i, 3401, 0.0, 0.0, 0.0);
        }

        SetTimer("DisableAlarm", 120000, false);
        BankControls[Alarm] = true;
        SendClientMessageToAll(-1, (reason == 1) ? ("{33CC33}BANKA: {FFFFFF}Bankanýn kasasýnda büyük bir patlama yaþandý, þüpheli olaylar var.") : ("{33CC33}BANKA: {FFFFFF}Soyguncular bankanýn kasasýnda, alarm çalýyor."));
        return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{

        return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i; i < MAX_COP_OBJECTS; i++)
		{
		    if(!CopObjectData[i][ObjCreated]) continue;
		    if(areaid == CopObjectData[i][ObjArea])
		    {
				switch(CopObjectData[i][Type])
				{
				    case OBJECT_TYPE_SPIKE:
				    {
						new panels, doors, lights, tires;
			        	GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
			        	UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, encode_tires(1, 1, 1, 1));
			        	PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
					}

					case OBJECT_TYPE_SPEEDCAM:
					{
					    new speed = GetPlayerSpeed(playerid);
					    if(speed > CopObjectData[i][ObjData])
					    {
					        // detected by a speed camera
					        PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
					        SendClientMessage(playerid, -1, "Hýz limitinden dolayý CCTV fotoðrafýný çekti, dikkat et!");
					    }
					}
				}

				break;
		    }
		}
	}
        if(areaid == AlarmArea && BankControls[LasersOn] && !BankControls[Alarm]) TriggerAlarm();
        new npcname[MAX_PLAYER_NAME], string[1024];
        GetPlayerName(playerid, npcname, sizeof(npcname));
       	if( areaid == ShamalArea[0] &&  !strcmp(npcname, "Pilot", true))
       	{
       	    format(string, sizeof(string), "PÝLOT: Þu anda 'Desert Airport' bölgesine giriþ yapmýþ bulunuyoruz, kapýlara yönelin ve bekleyin!");
       	    SendShamalMessage(string);
       	}
		if( areaid == ShamalArea[1] &&  !strcmp(npcname, "Pilot", true))
       	{
       	    format(string, sizeof(string), "PÝLOT: Þu anda 'Las Venturas Airport' bölgesine giriþ yapmýþ bulunuyoruz, kapýlara yönelin ve bekleyin!");
       	    SendShamalMessage(string);
       	}
		if( areaid == ShamalArea[2] &&  !strcmp(npcname, "Pilot", true))
       	{
       	    format(string, sizeof(string), "PÝLOT: Þu anda 'Los Santos Airport' bölgesine giriþ yapmýþ bulunuyoruz, kapýlara yönelin ve bekleyin!");
       	    SendShamalMessage(string);
       	}
		if( areaid == ShamalArea[3] &&  !strcmp(npcname, "Pilot", true))
       	{
       	    format(string, sizeof(string), "PÝLOT: Þu anda 'San Fierro Airport' bölgesine giriþ yapmýþ bulunuyoruz, kapýlara yönelin ve bekleyin!");
       	    SendShamalMessage(string);
       	}
       	if( areaid == TrenArea[0] &&  !strcmp(npcname, "Makinist", true))
       	{
       	    format(string, sizeof(string), "MAKÝNÝST: Þu anda 'Las Venturas Station' bölgesine giriþ yapmýþ bulunuyoruz, kapýlara yönelin ve bekleyin!");
       	    SendTrainMessage(string);
       	}
		if( areaid == TrenArea[1] &&  !strcmp(npcname, "Makinist", true))
       	{
       	    format(string, sizeof(string), "MAKÝNÝST: Þu anda 'Linden Station' bölgesine giriþ yapmýþ bulunuyoruz, kapýlara yönelin ve bekleyin!");
       	    SendTrainMessage(string);
       	}
		if( areaid == TrenArea[2] &&  !strcmp(npcname, "Makinist", true))
       	{
       	    format(string, sizeof(string), "MAKÝNÝST: Þu anda 'Los Santos Station' bölgesine giriþ yapmýþ bulunuyoruz, kapýlara yönelin ve bekleyin!");
       	    SendTrainMessage(string);
       	}
		if( areaid == TrenArea[3] &&  !strcmp(npcname, "Makinist", true))
       	{
       	    format(string, sizeof(string), "MAKÝNÝST: Þu anda 'San Fierro Station' bölgesine giriþ yapmýþ bulunuyoruz, kapýlara yönelin ve bekleyin!");
       	    SendTrainMessage(string);
       	}
       	if( areaid == TrenArea[4] &&  !strcmp(npcname, "Makinist", true))
       	{
       	    format(string, sizeof(string), "MAKÝNÝST: Þu anda 'Linden Station' bölgesine giriþ yapmýþ bulunuyoruz, kapýlara yönelin ve bekleyin!");
       	    SendTrainMessage(string);
       	}
        return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
        if(checkpointid == RobberyEscape[playerid])
        {

                SendServerMessage(playerid, "Soygun baþarýlý! Soygundan {2ECC71}$%d {FFFFFF}elde ettin!", RobberyCash[playerid]);

                GiveMoney(playerid, RobberyCash[playerid]);
                RobberyCash[playerid] = 0;
                DestroyDynamicCP(RobberyEscape[playerid]);
                RobberyEscape[playerid] = -1;
        }

        return 1;
}

public RobberyUpdate(playerid)
{
        if(RobberyCounter[playerid] > 1) {
            RobberyCounter[playerid]--;

        new string[32];
                switch(RobberyType[playerid])
                {
                        case 1: format(string, sizeof(string), "~w~Hackleniyor: %s%d", (RobberyCounter[playerid] <= 5) ? ("~r~~h~") : ("~y~"), RobberyCounter[playerid]);
                        case 2: format(string, sizeof(string), "~w~Bosaltiliyor: %s%d", (RobberyCounter[playerid] <= 3) ? ("~r~~h~") : ("~y~"), RobberyCounter[playerid]);
                }

                GameTextForPlayer(playerid, string, 1000, 4);
        }else if(RobberyCounter[playerid] == 1) {
        switch(RobberyType[playerid])
                {
                        case 1:
                        {
								g_soygunZamani = gettime()+86400;
                                BankControls[LasersOn] = false;
                                SetDynamicObjectPos(VaultObjects[TYPE_LASER1], 2142.983, 1606.679, 990.0);
                                SetDynamicObjectPos(VaultObjects[TYPE_LASER2], 2142.983, 1606.679, 990.0);
                                SetDynamicObjectPos(VaultObjects[TYPE_LASER3], 2142.983, 1606.679, 990.0);
                                SetTimer("ResetLasers", 240000, false);
                                SendServerMessage(playerid,  "Lazerler devre dýþý býrakýldý, alarm çalmadan diðer kapýlara gidebilirsiniz.");
                                SendServerMessage(playerid,  "Lazerler 4 dakika sonra eski haline dönecek.");
                        }

                        case 2:
                        {
                            new cash = RandomEx(DEPOSIT_MIN, DEPOSIT_MAX);
                            if(BankControls[VaultDoorState] == 2) cash -= floatround(cash * 0.1, floatround_floor); // explosion damaged deposit boxes, 10% damage penalty
                                RobberyCash[playerid] += cash;
                                SendServerMessage(playerid, "Bazý kasalar boþaltýldý ve {2ECC71}$%d {FFFFFF}elde ettik.", cash);
                                SendServerMessage(playerid, "Paraný almak veya soygunu baþarmak için bankadan çýkmalýsýn.");
                        }
                }

                ClearAnimations(playerid, 1);
                ResetRobbery(playerid);
        }

        return 1;
}

public ResetLasers()
{
    BankControls[LasersOn] = true;
    SetDynamicObjectPos(VaultObjects[TYPE_LASER1], 2142.983, 1606.679, 993.188);
        SetDynamicObjectPos(VaultObjects[TYPE_LASER2], 2142.983, 1606.679, 993.938);
        SetDynamicObjectPos(VaultObjects[TYPE_LASER3], 2142.983, 1606.679, 994.688);

        if(IsAnyPlayerInDynamicArea(AlarmArea, 1)) TriggerAlarm();
        return 1;
}

public OpenVaultDoor(type, seconds)
{
        if(seconds > 1) {
            seconds--;

            new string[128];
        switch(type)
                {
                        case 2: format(string, sizeof(string), "Kasa Kapýsý - Opsiyon 1\n{FFFFFF}/bombakur (hýzlý & sesli)\n{2ECC71}%s", ConvertToMinutes(seconds));
                        case 3: format(string, sizeof(string), "Kasa Kapýsý - Opsiyon 2\n{FFFFFF}/zamanlayici (yavaþ & sessiz)\n{2ECC71}%s", ConvertToMinutes(seconds));
                }

                UpdateDynamic3DTextLabelText((type == 2) ? VaultLabels[TYPE_EXPLOSIVE] : VaultLabels[TYPE_TIMELOCK], 0xF39C12FF, string);
        SetTimerEx("OpenVaultDoor", 1000, false, "ii", type, seconds);
        }else if(seconds == 1) {
        BankControls[VaultDoorState] = type;
                SetTimer("ResetVaultDoor", 120000, false);

                switch(type)
                {
                        case 2:
                        {
                            // explosive
                            CreateExplosion(2144.1624, 1626.25, 993.6882, 11, 5.0);
                                SendClientMessageToAll(-1,"{33CC33}BANKA: {FFFFFF}Bankanýn kasasýnda büyük bir patlama yaþandý, þüpheli olaylar var.");
                                SetDynamicObjectPos(VaultObjects[TYPE_VAULTDOOR], 2143.185, 1626.965, 985.298);
                UpdateDynamic3DTextLabelText(VaultLabels[TYPE_EXPLOSIVE], 0xF39C12FF, "Kasa Kapýsý - Opsiyon 1\n{FFFFFF}/bombakur (hýzlý & sesli)");
                                TriggerAlarm(1);
                        }

                        case 3:
                        {
                            // timelock
                                SendClientMessageToAll(-1, "{33CC33}BANKA: {FFFFFF}Soyguncular bankanýn kasasýnda, alarm çalýyor.");
                                MoveDynamicObject(VaultObjects[TYPE_VAULTDOOR], 2143.185, 1626.965, 994.35, 0.01, 0.000, -0.400, -270.0);
                UpdateDynamic3DTextLabelText(VaultLabels[TYPE_TIMELOCK], 0xF39C12FF, "Kasa Kapýsý - Opsiyon 2\n{FFFFFF}/zamanlayici (yavaþ & sessiz)");
                        }
                }
        }

        return 1;
}

public ResetVaultDoor()
{
        switch(BankControls[VaultDoorState])
        {
                case 2: SetDynamicObjectPos(VaultObjects[TYPE_VAULTDOOR], 2143.185, 1626.965, 994.298);
                case 3: MoveDynamicObject(VaultObjects[TYPE_VAULTDOOR], 2143.185, 1626.965, 994.298, 0.01, 0.000, -0.400, -180.0);
        }

        for(new i; i < sizeof(DepositCoords); ++i)
        {
                DepositRobbed[i] = false;
                Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, InsideVaultLabels[i], E_STREAMER_COLOR, 0x2ECC71FF);
        }

        BankControls[VaultDoorState] = 0; // closed
        return 1;
}

public DisableAlarm()
{
        BankControls[Alarm] = false;
        for(new i; i < GetMaxPlayers(); ++i)
        {
                if(!IsPlayerConnected(i)) continue;
                if(!GetPVarInt(i, "Alarm")) continue;
                SetPVarInt(i, "Alarm", 0);
        PlayerPlaySound(i, 3402, 0.0, 0.0, 0.0);
        }

        return 1;
}

/*CMD:hackle(playerid, params[])
{
        if(!IsPlayerInRangeOfPoint(playerid, 1.5, 2145.85, 1604.9456, 993.5684)) return SendErrorMessage(playerid, "Keypad'a yakýn deðilsin.");
		new polis;
		    if (PlayerData[playerid][pLevel] <= 4)
	    return SendErrorMessage(playerid, "Bu komutu kullanabilmek için 4 seviyeden yüksek olmanýz gerekmektedir.");

		if(g_soygunZamani > gettime()) return SendErrorMessage(playerid, "Banka 24 saatte bir soyulabilir.");
		foreach(new i : Player) if(GetFactionType(playerid) == FACTION_POLICE)
		{
		    polis++;
		}
		if(polis < 7) return SendErrorMessage(playerid, "En az aktif 8 polis gereklidir.");
		if(BankControls[Alarm]) return SendErrorMessage(playerid, "Alarm açýkken keypad'i hackleyemezsin..");
        if(!BankControls[LasersOn]) return SendErrorMessage(playerid, "Zaten hackliyorsun.");
        if(BankControls[KeypadHackTime] > gettime())
        {

                SendErrorMessage(playerid, "Hacký bitirmek için %s saniyen var.", ConvertToMinutes(BankControls[KeypadHackTime] - gettime()));
                return 1;
        }

        ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_LOOP", 4.1, 1, 0, 0, 0, 0, 1);
        BankControls[KeypadHackTime] = gettime() + 600;
        RobberyType[playerid] = 1;
        RobberyCounter[playerid] = 20;
        RobberyTimer[playerid] = SetTimerEx("RobberyUpdate", 1000, true, "i", playerid);
        return 1;
}

CMD:bombakur(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 1.5, 2144.1624, 1626.25, 993.6882)) return  SendErrorMessage(playerid, "Kasa kapýsýna yakýn deðilsin.");
        if(BankControls[VaultDoorState] != 0) return SendErrorMessage(playerid, "Kasa kapýsý açýk/açýlýyor.");
        if(BankControls[DoorInteractionTime] > gettime())
		{
                SendErrorMessage(playerid, "Kasayý açmak için %s saniyen var.", ConvertToMinutes(BankControls[DoorInteractionTime] - gettime()));
                return 1;
        }

        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 0, 0, 1);
        BankControls[DoorInteractionTime] = gettime() + 600;
        BankControls[VaultDoorState] = 1; // opening
        SetTimerEx("OpenVaultDoor", 1000, false, "ii", 2, 6);
        SendServerMessage(playerid, "Bomba kuruldu, 6 saniye sonra patlayacak!");
        return 1;
}

CMD:zamanlayici(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 1.5, 2140.2610, 1626.25, 993.6882)) return  SendErrorMessage(playerid, "Hackleyebileceðin birþeye yakýn deðilsin.");
        if(BankControls[Alarm]) return  SendErrorMessage(playerid, "Alarm açýkken hackleyemezsin.");
        if(BankControls[VaultDoorState] != 0) return SendErrorMessage(playerid, "Kasa kapýsý açýk/açýlýyor.");
        if(BankControls[DoorInteractionTime] > gettime())
        {
                SendErrorMessage(playerid, "Kasayý açmak için %s saniyen var.", ConvertToMinutes(BankControls[DoorInteractionTime] - gettime()));
                return 1;
        }
       // ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_LOOP", 4.1, 1, 0, 0, 0, 0, 1);
        BankControls[DoorInteractionTime] = gettime() + 600;
        BankControls[VaultDoorState] = 1; // opening
        SetTimerEx("OpenVaultDoor", 1000, false, "ii", 3, 30);
        SendServerMessage(playerid, "Hacklemeye baþladýnýz, 30 saniye sonra kapý açýlacak.");

        return 1;
}

CMD:kasabosalt(playerid, params[])
{
    if(BankControls[VaultDoorState] < 2) return SendErrorMessage(playerid, "Kasa kapýsý açýlmadan para kasalarýný boþaltamazsýn.");
        new id = GetClosestDeposit(playerid);
        if(id == -1) return SendErrorMessage(playerid,"Kasaya yakýn deðilsin.");
        if(DepositRobbed[id]) return SendErrorMessage(playerid, "Zaten kasa boþaltýyorsun.");
        DepositRobbed[id] = true;
        Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, InsideVaultLabels[id], E_STREAMER_COLOR, 0xE74C3CFF);
        ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 0, 0, 1);
        RobberyType[playerid] = 2;
        RobberyCounter[playerid] = 30;
        RobberyTimer[playerid] = SetTimerEx("RobberyUpdate", 1000, true, "i", playerid);
        return 1;
}*/

Mac_Kontrol(macid)
{
	if(!Maclar[macid][macOynandimi]) return -1;
	if(Maclar[macid][macTakim1Skor] > Maclar[macid][macTakim2Skor]) return 1;
	if(Maclar[macid][macTakim1Skor] == Maclar[macid][macTakim2Skor]) return 2;
	if(Maclar[macid][macTakim2Skor] > Maclar[macid][macTakim1Skor]) return 3;
	return -1;
}

Mac_Sonuclat(macid)
{
	if (!Maclar[macid][macVarmi] || Maclar[macid][macOynandimi])
	    return -1;

    new takim1skor = random(5);  new takim2skor = random(5);
	Maclar[macid][macOynandimi] = true;
	Maclar[macid][macTakim1Skor] = takim1skor;
	Maclar[macid][macTakim2Skor] = takim2skor;
	Takimlar[Maclar[macid][macTakim1]][takimKullanildimi] = false;
	Takimlar[Maclar[macid][macTakim2]][takimKullanildimi] = false;
 foreach(new i : Player)
	{
	    for (new kuponid = 0; kuponid < MAX_KUPON; kuponid ++)
		{
		    if (Kuponlar[i][kuponid][kuponVarmi] && Kuponlar[i][kuponid][kuponMacID] == Maclar[macid][macID])  {
				SendServerMessage(i, "#%d Maç'a oynadýðýnýz #%d NO'lu kuponunuz sonuçlanmýþ, hemen bayimize gelin ve kontrol edin!", Maclar[macid][macID], Kuponlar[i][kuponid][kuponID]);
			}
		}
	}
	Mac_Kaydet(macid);
	new ors = random(5);
	new Float:or;
	switch(ors)
	{
	    case 0: or = 1.5;
	    case 1: or = 2.0;
	    case 2: or = 2.5;
	   	case 3: or = 2.0;
	    case 4: or = 2.5;
	}
	Mac_Olustur(or);
	return -1;
}


public PHY_OnObjectUpdate(objectid)
{
    if(objectid != Ball)
	    return 1;

	new
	    Float:x, Float:y, Float:z,
		goal;

	GetBallPos(x, y, z);

	if(!(2669.03 < x < 2745.12 && -1864.08 < y < -1740.54))
	{
	    RecreateBall();
	    //SendClientMessageToAll(-1, "The ball has been respawned.");
	}
	else if((2701.92 < x < 2711.87 && -1862.75 < y < -1857.30 && (goal = 1)) || (2701.92 < x < 2711.89 && -1747.10 < y < -1741.60 && (goal = 2)))
	{
	    PHY_SetObjectZBound(Ball, _, 425.6 , 0.5);

	    if(z > 425.6)
	    {
	        RecreateBall();
	        //SendClientMessageToAll(-1, "The ball has been respawned.");
	        new
	            Float:mindist = FLOAT_INFINITY,
	            Float:dist,
	            closest;
	        for(new i; i < sizeof Corners; i++)
	        {
	            dist = (x - Corners[i][0]) * (x - Corners[i][0]) + (y - Corners[i][1]) * (y - Corners[i][1]);
				if(dist < mindist)
				{
				    mindist = dist;
				    closest = i;
				}
	        }
	        SetObjectPos(Ball, Corners[closest][0], Corners[closest][1], Corners[closest][2]);
	    }
	    else if(!Goal)
	    {
	        new
				name[MAX_PLAYER_NAME];

	        Goal = 1;

	        GetPlayerName(LastTouch, name, sizeof name);
         foreach (new i : Player)
	        {
	            if(IsPlayerInRangeOfPoint(i, 100, BallSpawn[0] , BallSpawn[1], BallSpawn[2]))
	            {
	                SendServerMessage(i, "{FFFFFF}%s adlý futbolcu gol attý.", ReturnName(LastTouch, 0));
	            }
	        }
	        #pragma unused goal
	    }
	}
	else if(Goal)
	{
	    Goal = 0;
	    PHY_SetObjectZBound(Ball, _, FLOAT_INFINITY, 0.5);
	}

	if(PoolStarted)
	{
		for(new i; i < sizeof PoolBall; i++)
		{
		    if(objectid == PoolBall[i][bObject] && PHY_IsObjectMoving(PoolBall[i][bObject]))
		    {
		        new
					hole = IsBallInHole(i);
				if(hole)
				{
				    new
			            Float:speed,
			            Float:vx, Float:vy, Float:vz;
				    PHY_GetObjectVelocity(PoolBall[i][bObject], vx, vy, vz);
				    speed = floatsqroot(vx * vx + vy * vy) + 0.2;

		            PoolBall[i][bExisting] = 0;
					PHY_DeleteObject(PoolBall[i][bObject]);

					PlayPoolSound(31803 + random(3));

		            switch(hole)
					{
						case 1: MoveObject(PoolBall[i][bObject], 509.61123657,-85.79737091,998.86785889-0.25, speed);
						case 2: MoveObject(PoolBall[i][bObject], 510.67373657,-84.84423065,998.86785889-0.25, speed);
						case 3: MoveObject(PoolBall[i][bObject], 510.61914062,-83.88769531,998.86785889-0.25, speed);
						case 4: MoveObject(PoolBall[i][bObject], 509.61077881,-83.89227295,998.86785889-0.25, speed);
						case 5: MoveObject(PoolBall[i][bObject], 510.61825562,-85.80107880,998.86785889-0.25, speed);
						case 6: MoveObject(PoolBall[i][bObject], 509.55642700,-84.84602356,998.86785889-0.25, speed);
					}
					if(i)
					{
					    PoolScore[PoolLastShooter] ++;
						PoolLastScore ++;
					    new string[128];
						if(PoolLastScore > 0) format(string, 128, "~g~~h~+%d", PoolLastScore);
						else format(string, 128, "~r~~h~%d", PoolLastScore);
						GameTextForPlayer(PoolLastShooter, string, 100000, 4);
						PlayerPlaySound(PoolLastShooter, 1250, 0.0, 0.0, 0.0);
					}
					else
					{
		                PoolScore[PoolLastShooter] --;
		                PoolLastScore --;
						new string[128];
						if(PoolLastScore > 0) format(string, 128, "~g~~h~+~r~~h~%d", PoolLastScore);
						else format(string, 128, "~r~~h~%d", PoolLastScore);
						GameTextForPlayer(PoolLastShooter, string, 100000, 4);
						PlayerPlaySound(PoolLastShooter, 1250, 0.0, 0.0, 0.0);
					}
					if(GetPoolBallsCount() <= 1)
					{
						PoolStarted = 0;
						PoolAimer = -1;
						new
						    winscore = GetMaxPoolScore(),
							name[MAX_PLAYER_NAME];
						RespawnPoolBalls();
						RestoreCamera(PoolLastShooter);
						PoolLastShooter = -1;
						foreach (new p : Player)
						{
							if(PlayingPool[p] && PoolScore[p] == winscore)
							{
								new
									string[128];
								GetPlayerName(p, name, sizeof name);
								format(string, 128, "{FFFF45}Kazanan: {EBEBEB}%s {FFFF45}oyunu kazandý. [{EBEBEB}%d {FFFF45}puan]", name, winscore);
								SendPoolPlayersMessage(string);
							}
						}
						foreach (new p : Player)
						{
							if(PlayingPool[p])
							{
								PlayingPool[p] = 0;
							}
						}
					}
					else if(AreAllBallsStopped())
					{
						SetTimerEx("RestoreCamera", 800, 0, "d", PoolLastShooter);
						PoolLastShooter = -1;
					}
		        }
		        return 1;
		    }
		}
	}
	return 1;
}

public PHY_OnObjectCollideWithObject(object1, object2)
{
	if(PoolStarted)
	{
		for(new i; i < sizeof PoolBall; i++)
		{
		    if(object1 == PoolBall[i][bObject])
		    {
		        PlayPoolSound(31800 + random(3));
		        return 1;
		    }
		}
	}
	return 1;
}

public PHY_OnObjectCollideWithWall(objectid, wallid)
{
	if(PoolStarted)
	{
		for(new i; i < sizeof PoolBall; i++)
		{
		    if(objectid == PoolBall[i][bObject])
		    {
		        PlayPoolSound(31808);
		        return 1;
		    }
		}
	}
	return 1;
}

Float:GetPointDistanceToPoint(Float:x1,Float:y1,Float:x2,Float:y2)
{
    new Float:x, Float:y;
    x = x1-x2;
    y = y1-y2;
    return floatsqroot(x*x+y*y);
}


stock GetAngleToXY(Float:X, Float:Y, Float:CurrX, Float:CurrY, &Float:angle)
{
    angle = atan2(Y-CurrY, X-CurrX);
    angle = floatsub(angle, 90.0);
    if(angle < 0.0) angle = floatadd(angle, 360.0);
}


stock GetXYInFrontOfPos(Float:xx,Float:yy,Float:a, &Float:x2, &Float:y2, Float:distance)
{
    if(a>360)
	{
        a=a-360;
    }
    xx += (distance * floatsin(-a, degrees));
    yy += (distance * floatcos(-a, degrees));
    x2=xx;
    y2=yy;
}

stock IsPointFacingPoint(Float:dOffset, Float:X, Float:Y, Float:pA, Float:pX, Float:pY)
{
    new
        Float:ang;

    if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
    else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
    else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

    if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

    return false;

}

stock Is2DPointInRangeOfPoint(Float:x, Float:y, Float:x2, Float:y2, Float:range)
{
    x2 -= x;
    y2 -= y;
    return ((x2 * x2) + (y2 * y2)) < (range * range);
}
IsPlayerInSphere(playerid,Float:x,Float:y,Float:z,radius)
{
	if(GetPlayerDistanceToPointEx(playerid,x,y,z) < radius){
		return 1;
	}
	return 0;
}
GetPlayerDistanceToPointEx(playerid,Float:x,Float:y,Float:z)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+floatpower(floatabs(floatsub(y,y1)),2)+floatpower(floatabs(floatsub(z,z1)),2));
	return floatround(tmpdis);
}
stock IsObjectInSphere(objectid,Float:x,Float:y,Float:z,Float:radius2)
{
    new Float:x1,Float:y1,Float:z1,Float:tmpdis;
    GetObjectPos(objectid,x1,y1,z1);
    tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+ floatpower(floatabs(floatsub(y,y1)),2)+ floatpower(floatabs(floatsub(z,z1)),2));
    if(tmpdis < radius2) return 1;
    return 0;
}

GetBallModel(i)
{
	switch(i)
	{
		case 0: return 3003;
		case 1: return 3002;
		case 2: return 3001;
		case 3: return 2995;
		case 4: return 2996;
		case 5: return 3106;
		case 6: return 3105;
		case 7: return 3103;
		case 8: return 3001;
		case 9: return 3100;
		case 10: return 2997;
		case 11: return 3000;
		case 12: return 3102;
		case 13: return 2999;
		case 14: return 2998;
		case 15: return 3104;
	}
	return 0;
}

stock GetPoolBallsCount()
{
	new
		count;
	for(new i; i < 16; i++)
	{
		if(PoolBall[i][bExisting] || i == 0) count++;
	}
	return count;
}


stock GetMaxPoolScore()
{
	new
		scoremax = -1;
 foreach (new i : Player)
	{
		if(PlayingPool[i])
		{
			if(PoolScore[i] > scoremax)
			{
				scoremax = PoolScore[i];
			}
		}
	}
	return scoremax;
}

stock SendPoolPlayersMessage(string[])
{
    foreach (new i : Player)
	{
		if(PlayingPool[i])
		{
			SendClientMessage(i, -1, string);
		}
	}
}

stock AreAllBallsStopped()
{
	new
	    Float:x, Float:y, Float:z;
	for(new i; i < 16; i++)
	{
		if(PoolBall[i][bExisting])
		{
			PHY_GetObjectVelocity(PoolBall[i][bObject], x, y, z);
			if(x != 0.0 || y != 0.0)
			    return 0;
		}
	}
	return 1;
}

stock RespawnPoolBalls(init = 0)
{
    for(new i; i < 16; i++)
	{
        /*PoolBall[i][bMoving] = 0;
        PoolBall[i][bSpeed] = 0;*/
        //StopObject(PoolBall[i][bObject]);
        DestroyObject(PoolBall[i][bObject]);
		if(PoolBall[i][bExisting])
		{
        	PHY_DeleteObject(PoolBall[i][bObject]);
        	PoolBall[i][bExisting] = 0;
		}
    }

    if(PoolAimer != -1)
    {
        TogglePlayerControllable(PoolAimer, 1);
        ClearAnimations(PoolAimer);
		ApplyAnimation(PoolAimer, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
        SetCameraBehindPlayer(PoolAimer);
        PoolAimer = -1;
        DestroyObject(AimObject);
        TextDrawHideForPlayer(PoolAimer, PoolTD[0]);
        TextDrawHideForPlayer(PoolAimer, PoolTD[1]);
        TextDrawHideForPlayer(PoolAimer, PoolTD[2]);
        TextDrawHideForPlayer(PoolAimer, PoolTD[3]);
    }

    CreateBalls();
    if(init)
    {
	    for(new i; i < sizeof PoolBall; i++)
		    InitBall(i);
	}
}

stock CreateBalls()
{
	PoolBall[0][bObject] = CreateObject(3003, 510.11218261719, -84.40771484375, 998.86785888672, 0, 0, 0);
    PoolBall[1][bObject] = CreateObject(3002, 510.10882568359, -85.166389465332, 998.86749267578, 0, 0, 0);
    PoolBall[2][bObject] = CreateObject(3101, 510.14270019531, -85.232612609863, 998.86749267578, 0, 0, 0);
    PoolBall[3][bObject] = CreateObject(2995, 510.0676574707, -85.232200622559, 998.86749267578, 0, 0, 0);
    PoolBall[4][bObject] = CreateObject(2996, 510.18600463867, -85.295257568359, 998.86749267578, 0, 0, 0);
    PoolBall[5][bObject] = CreateObject(3106, 510.11242675781, -85.297294616699, 998.86749267578, 0, 0, 0);
    PoolBall[6][bObject] = CreateObject(3105, 510.03665161133, -85.299163818359, 998.86749267578, 0, 0, 0);
    PoolBall[7][bObject] = CreateObject(3103, 510.22308349609, -85.362342834473, 998.86749267578, 0, 0, 0);
    PoolBall[8][bObject] = CreateObject(3001, 510.14828491211, -85.365989685059, 998.86749267578, 0, 0, 0);
    PoolBall[9][bObject] = CreateObject(3100, 510.07455444336, -85.365234375, 998.86749267578, 0, 0, 0);
    PoolBall[10][bObject] = CreateObject(2997, 510.00054931641, -85.363563537598, 998.86749267578, 0, 0, 0);
    PoolBall[11][bObject] = CreateObject(3000, 510.25915527344, -85.431137084961, 998.86749267578, 0, 0, 0);
    PoolBall[12][bObject] = CreateObject(3102, 510.18399047852, -85.430549621582, 998.86749267578, 0, 0, 0);
    PoolBall[13][bObject] = CreateObject(2999, 510.10900878906, -85.43196105957, 998.86749267578, 0, 0, 0);
    PoolBall[14][bObject] = CreateObject(2998, 510.03570556641, -85.432624816895, 998.86749267578, 0, 0, 0);
    PoolBall[15][bObject] = CreateObject(3104, 509.96197509766, -85.427406311035, 998.86749267578, 0, 0, 0);
}

stock InitBall(i)
{
    PHY_InitObject(PoolBall[i][bObject], 3003, _, _, PHY_MODE_2D);
    PHY_SetObjectFriction(PoolBall[i][bObject], 0.40);
    PHY_RollObject(PoolBall[i][bObject]);
    PHY_SetObjectWorld(PoolBall[i][bObject], 3);
    PoolBall[i][bExisting] = 1;
}

stock LoadPool()
{
    CreateBalls();

    SetTimer("PoolTimer", 21, 1);

    PHY_SetWallWorld(PHY_CreateWall(509.627 - 0.038, -85.780 - 0.038, 510.598 + 0.038, -85.780 - 0.038), 3);
	PHY_SetWallWorld(PHY_CreateWall(510.598 + 0.038, -85.780 - 0.038, 510.598 + 0.038, -83.907 + 0.038), 3);
	PHY_SetWallWorld(PHY_CreateWall(510.598 + 0.038, -83.907 + 0.038, 509.627 - 0.038, -83.907 + 0.038), 3);
	PHY_SetWallWorld(PHY_CreateWall(509.627 - 0.038, -83.907 + 0.038, 509.627 - 0.038, -85.780 - 0.038), 3);


    PoolTD[0] = TextDrawCreate(505.000000, 260.000000, "~n~~n~");
	TextDrawBackgroundColor(PoolTD[0], 255);
	TextDrawFont(PoolTD[0], 1);
	TextDrawLetterSize(PoolTD[0], 0.500000, 0.439999);
	TextDrawColor(PoolTD[0], -1);
	TextDrawSetOutline(PoolTD[0], 0);
	TextDrawSetProportional(PoolTD[0], 1);
	TextDrawSetShadow(PoolTD[0], 1);
	TextDrawUseBox(PoolTD[0], 1);
	TextDrawBoxColor(PoolTD[0], 255);
	TextDrawTextSize(PoolTD[0], 569.000000, -10.000000);

	PoolTD[1] = TextDrawCreate(506.000000, 261.000000, "~n~~n~");
	TextDrawBackgroundColor(PoolTD[1], 255);
	TextDrawFont(PoolTD[1], 1);
	TextDrawLetterSize(PoolTD[1], 0.500000, 0.300000);
	TextDrawColor(PoolTD[1], -1);
	TextDrawSetOutline(PoolTD[1], 0);
	TextDrawSetProportional(PoolTD[1], 1);
	TextDrawSetShadow(PoolTD[1], 1);
	TextDrawUseBox(PoolTD[1], 1);
	TextDrawBoxColor(PoolTD[1], 911303167);
	TextDrawTextSize(PoolTD[1], 568.000000, 0.000000);

	PoolTD[2] = TextDrawCreate(506.000000, 261.000000, "~n~~n~");
	TextDrawBackgroundColor(PoolTD[2], 255);
	TextDrawFont(PoolTD[2], 1);
	TextDrawLetterSize(PoolTD[2], 0.500000, 0.300000);
	TextDrawColor(PoolTD[2], -1);
	TextDrawSetOutline(PoolTD[2], 0);
	TextDrawSetProportional(PoolTD[2], 1);
	TextDrawSetShadow(PoolTD[2], 1);
	TextDrawUseBox(PoolTD[2], 1);
	TextDrawBoxColor(PoolTD[2], -1949699841);
	TextDrawTextSize(PoolTD[2], 501.000000, 0.000000);

	PoolTD[3] = TextDrawCreate(503.000000, 240.000000, "Atis Gucu");
	TextDrawBackgroundColor(PoolTD[3], 255);
	TextDrawFont(PoolTD[3], 2);
	TextDrawLetterSize(PoolTD[3], 0.280000, 1.699999);
	TextDrawColor(PoolTD[3], -1);
	TextDrawSetOutline(PoolTD[3], 1);
	TextDrawSetProportional(PoolTD[3], 1);
}

stock GetPoolPlayersCount()
{
	new
		count;
	if(PoolStarted)
	{
  foreach (new i : Player)
		{
			if(PlayingPool[i])
			{
				count++;
			}
		}
	}
	return count;
}

forward PoolTimer();
public PoolTimer()
{
	if(!PoolStarted) return 0;
    if(PoolAimer != -1)
	{
	    new
			playerid = PoolAimer,
			keys,
			ud,
			lr;
		GetPlayerKeys(playerid, keys, ud, lr);
	    if(!(keys & KEY_FIRE))
	    {
			if(lr)
			{
	            new
					Float:X,
					Float:Y,
					Float:Z,
					Float:Xa,
					Float:Ya,
					Float:Za,
					Float:x,
					Float:y,
					Float:newrot,
					Float:dist;
	            GetPlayerPos(playerid, X, Y ,Z);
	            GetObjectPos(PoolBall[0][bObject], Xa, Ya, Za);
	            newrot = AimAngle[playerid][0] + (lr > 0 ? 0.9 : -0.9);
	            dist = GetPointDistanceToPoint(X, Y, Xa, Ya);
	            if(AngleInRangeOfAngle(AimAngle[playerid][1], newrot, 30.0))
	            {
	                AimAngle[playerid][0] = newrot;
	                switch(PoolCamera[playerid])
					{
						case 0:
						{
	                        GetXYBehindObjectInAngle(PoolBall[0][bObject], newrot, x, y, 0.675);
	                        SetPlayerCameraPos(playerid, x, y, 998.86785888672+0.28);
	                        SetPlayerCameraLookAt(playerid, Xa, Ya, Za+0.170);
						}
	                    case 1:
						{
						    SetPlayerCameraPos(playerid, 511.84469604492, -84.831642150879, 1001.4904174805);
						    SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
						}
	                    case 2:
						{
						    SetPlayerCameraPos(playerid, 508.7971496582, -84.831642150879, 1001.4904174805);
						    SetPlayerCameraLookAt(playerid,510.11267089844, -84.831642150879, 998.86785888672);
						}
					}
	                GetXYInFrontOfPos(Xa, Ya, newrot+180, x, y, 0.085);
	                SetObjectPos(AimObject, x, y, Za);
	              	SetObjectRot(AimObject, 7.0, 0, AimAngle[playerid][0]+180);
	              	GetXYInFrontOfPos(Xa, Ya, newrot+180, X, Y, dist);
	                JBC_SetPlayerPos(playerid, X, Y, Z);
	                SetPlayerFacingAngle(playerid, newrot);
	            }
			}
		}
		else
		{
		    if(PoolDir)
		        PoolPower -= 2.0;
			else
			    PoolPower += 2.0;
			if(PoolPower <= 0)
			{
			    PoolDir = 0;
			    PoolPower = 2.0;
			}
			else if(PoolPower > 100.0)
			{
			    PoolDir = 1;
			    PoolPower = 98.0;
			}
			TextDrawTextSize(PoolTD[2], 501.0 + ((67.0 * PoolPower)/100.0), 0.0);
			TextDrawShowForPlayer(playerid, PoolTD[2]);
		}
	}

	if(PoolLastShooter != -1 && AreAllBallsStopped())
	{
    	SetTimerEx("RestoreCamera", 800, 0, "d", PoolLastShooter);
    	PoolLastShooter = -1;
	}
    return 1;
}

forward RestoreCamera(playerid);
public RestoreCamera(playerid)
{
	if(!PoolBall[0][bExisting])
	{
        DestroyObject(PoolBall[0][bObject]);
        PoolBall[0][bObject] = CreateObject(GetBallModel(0) ,510.11218261719, -84.40771484375, 998.86785888672, 0, 0, 0);
        InitBall(0);
	}
    GameTextForPlayer(playerid, " ", 100000, 4);
	if(PoolAimer == playerid) return 0;
	TogglePlayerControllable(playerid, 1);
	return SetCameraBehindPlayer(playerid);
}

forward RestoreWeapon(playerid);
public RestoreWeapon(playerid)
{
    RemovePlayerAttachedObject(playerid, OBJ_SLOT_POOL);
	UsingChalk[playerid] = 0;
	GiveWeaponToPlayer(playerid, 7, 1);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

stock IsBallInHole(i)
{
    if(IsObjectInSphere(PoolBall[i][bObject],509.61123657,-85.79737091,998.86785889,0.0825)) return 1;
	else if(IsObjectInSphere(PoolBall[i][bObject],510.67373657,-84.84423065,998.86785889,0.0825)) return 2;
	else if(IsObjectInSphere(PoolBall[i][bObject],510.61914062,-83.88769531,998.86785889,0.0825)) return 3;
    else if(IsObjectInSphere(PoolBall[i][bObject],509.61077881,-83.89227295,998.86785889,0.0825)) return 4;
	else if(IsObjectInSphere(PoolBall[i][bObject],510.61825562,-85.80107880,998.86785889,0.0825)) return 5;
	else if(IsObjectInSphere(PoolBall[i][bObject],509.55642700,-84.84602356,998.86785889,0.0825)) return 6;
	else return 0;
}

stock GetXYBehindObjectInAngle(objectid, Float:a, &Float:x2, &Float:y2, Float:distance)
{
    new Float:z;
    GetObjectPos(objectid, x2, y2, z);

    x2 += (distance * floatsin(-a+180, degrees));
    y2 += (distance * floatcos(-a+180, degrees));
}

forward PlayPoolSound(soundid);
public PlayPoolSound(soundid)
{
 foreach(new i : Player)
	{
	    if(PlayingPool[i])
	    {
	        PlayerPlaySound(i, soundid, 0, 0, 0);
	    }
	}
	return 1;
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
    if((newkeys & key) && !(oldkeys & key)) return 1;
    return 0;
}

stock IsKeyJustUp(key, newkeys, oldkeys)
{
    if(!(newkeys & key) && (oldkeys & key)) return 1;
    return 0;
}

stock CreateBall()
{
	if(Ball != -1)
	    return;

	Ball = CreateObject(2114, BallSpawn[0], BallSpawn[1], BallSpawn[2] - 0.875, 0, 0, 0, 100.0);
	SetObjectMaterial(Ball, 0, 5033, "union_las", "ws_carparkwall2", 0);
	PHY_InitObject(Ball, 2114);
	PHY_RollObject(Ball);
	PHY_SetObjectFriction(Ball, 7.0);
	PHY_SetObjectAirResistance(Ball, 0.2);
	PHY_SetObjectGravity(Ball, 10.0);
	PHY_SetObjectZBound(Ball, _, _, 0.5);
	PHY_ToggleObjectPlayerColls(Ball, 1, 0.6);
}

stock DestroyBall()
{
	PHY_DeleteObject(Ball);
	DestroyObject(Ball);
	Ball = -1;
}

stock GetBallPos(&Float:x, &Float:y, &Float:z)
{
	if(BallHolder != -1)
	{
	    new
	        Float:angle;
	    GetPlayerPos(BallHolder, x, y, z);
		GetPlayerFacingAngle(BallHolder, angle);
		x += 0.6 * floatsin(-angle, degrees);
		y += 0.6 * floatcos(-angle, degrees);
		z -= 0.875;
	}
	else
		GetObjectPos(Ball, x, y, z);
}

stock RecreateBall()
{
    DestroyBall();
	CreateBall();
	BallHolder = -1;
}

stock LoadCollisions()
{
	// Field
	PHY_CreateArea(2669.03, -1864.08, 2745.12, -1740.54, _, _, 424.5);

	// Goal
	PHY_CreateWall(2711.87, -1857.30, 2711.87, -1862.75, 0.5, _, 425.87);
	PHY_CreateWall(2711.87, -1862.75, 2701.92, -1862.75, 0.5, _, 425.87);
	PHY_CreateWall(2701.92, -1862.75, 2701.92, -1857.30, 0.5, _, 425.87);
	// Crossbar
	PHY_CreateWall(2701.92, -1857.30, 2711.87, -1857.30, _, 425.87 - 0.1, 425.87 + 0.1);
	// Pole
	PHY_CreateCylinder(2711.87, -1857.30, 0.3, _, _, 425.87);
	PHY_CreateCylinder(2701.92, -1857.30, 0.3, _, _, 425.87);

	// Goal
    PHY_CreateWall(2701.92, -1747.10, 2701.92, -1741.60, 0.5, _, 425.87);
	PHY_CreateWall(2701.92, -1741.60, 2711.89, -1741.60, 0.5, _, 425.87);
	PHY_CreateWall(2711.89, -1741.60, 2711.89, -1747.10, 0.5, _, 425.87);
	// Crossbar
	PHY_CreateWall(2711.89, -1747.10, 2701.92, -1747.10, _, 425.87 - 0.1, 425.87 + 0.1);
	// Pole
	PHY_CreateCylinder(2701.92, -1747.10, 0.3, _, _, 425.87);
	PHY_CreateCylinder(2711.89, -1747.10, 0.3, _, _, 425.87);
}
stock LoadTextDraws()
{
    PowerTD[0] = TextDrawCreate(511.000000, 396.000000, "~n~~n~");
	TextDrawBackgroundColor(PowerTD[0], 255);
	TextDrawFont(PowerTD[0], 1);
	TextDrawLetterSize(PowerTD[0], 0.590000, 0.039999);
	TextDrawColor(PowerTD[0], -1);
	TextDrawSetOutline(PowerTD[0], 0);
	TextDrawSetProportional(PowerTD[0], 1);
	TextDrawSetShadow(PowerTD[0], 1);
	TextDrawUseBox(PowerTD[0], 1);
	TextDrawBoxColor(PowerTD[0], 255);
	TextDrawTextSize(PowerTD[0], 592.000000, -10.000000);

	PowerTD[1] = TextDrawCreate(512.000000, 397.000000, "~n~~n~");
	TextDrawBackgroundColor(PowerTD[1], 255);
	TextDrawFont(PowerTD[1], 1);
	TextDrawLetterSize(PowerTD[1], 0.500000, -0.099999);
	TextDrawColor(PowerTD[1], -1);
	TextDrawSetOutline(PowerTD[1], 0);
	TextDrawSetProportional(PowerTD[1], 1);
	TextDrawSetShadow(PowerTD[1], 1);
	TextDrawUseBox(PowerTD[1], 1);
	TextDrawBoxColor(PowerTD[1], 252645375);
	TextDrawTextSize(PowerTD[1], 591.000000, 0.000000);
}

stock LoadPlayerTextDraws(playerid)
{
    pPowerTD[playerid] = CreatePlayerTextDraw(playerid, 512.000000, 397.000000, "~n~~n~");
	PlayerTextDrawBackgroundColor(playerid, pPowerTD[playerid], 255);
	PlayerTextDrawFont(playerid, pPowerTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, pPowerTD[playerid], 0.500000, -0.099999);
	PlayerTextDrawColor(playerid, pPowerTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, pPowerTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, pPowerTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, pPowerTD[playerid], 1);
	PlayerTextDrawUseBox(playerid, pPowerTD[playerid], 1);
	PlayerTextDrawBoxColor(playerid, pPowerTD[playerid], -1359019777);
	PlayerTextDrawTextSize(playerid, pPowerTD[playerid], 507.000000, 0.000000);
}

forward PowerBar();
public PowerBar()
{
	new
	    tick = GetTickCount(),
		dif;
 foreach(new i : Player)
	{
	    if(pLastTick[i] == -1)
	    {
	        PlayerTextDrawHide(i, pPowerTD[i]);
			TextDrawHideForPlayer(i, PowerTD[0]);
			TextDrawHideForPlayer(i, PowerTD[1]);
			pLastTick[i] = 0;
	    }
	    else if(pLastTick[i])
	    {
			dif = tick - pLastTick[i];
			if(dif > 2000)
			{
			    pLastTick[i] = -1;
			    continue;
			}
			else if(dif > 1000)
			    dif = 2000 - dif;

            PlayerTextDrawTextSize(i, pPowerTD[i], 507.0 + ((84.0 * dif)/1000.0), 0.0);
			PlayerTextDrawShow(i, pPowerTD[i]);
			TextDrawShowForPlayer(i, PowerTD[0]);
			TextDrawShowForPlayer(i, PowerTD[1]);
	    }
	}
	return 1;
}
ImmobiliserYukselt(playerid, vehicleid)
{
	new id = Car_GetID(vehicleid);
	if (id == -1) return 1;
	switch(CarData[id][carImmobiliser])
	{
		case 0: PlayerData[playerid][pYukseltmeUcret] = 5000;
		case 1: PlayerData[playerid][pYukseltmeUcret] = 10000;
		case 2: PlayerData[playerid][pYukseltmeUcret] = 15000;
		case 3: PlayerData[playerid][pYukseltmeUcret] = 20000;
		case 4: PlayerData[playerid][pYukseltmeUcret] = 25000;
	}
	Car_Save(id);
	Dialog_Show(playerid, ImmoOnay, DIALOG_STYLE_MSGBOX, "Yükseltme Onay", "{2ECC71}%d  {FFFFFF}ID'lý aracýnýzýn immobiliser seviyesini {2ECC71}%s {FFFFFF}ödeyerek\nyükseltmek istiyor musunuz?\n\nYükseltilecek seviye: {2ECC71}%d", "Yükselt", "Ýptal", vehicleid, FormatNumber(PlayerData[playerid][pYukseltmeUcret]), CarData[id][carImmobiliser]+1);
	return 1;
}
KilitYukselt(playerid, vehicleid)
{
	new id = Car_GetID(vehicleid);
	if (id == -1) return 1;
	switch(CarData[id][carKilitSeviye])
	{
	    case 0: PlayerData[playerid][pYukseltmeUcret] = 10000;
		case 1: PlayerData[playerid][pYukseltmeUcret] = 15000;
		case 2: PlayerData[playerid][pYukseltmeUcret] = 20000;
		case 3: PlayerData[playerid][pYukseltmeUcret] = 25000;
		case 4: PlayerData[playerid][pYukseltmeUcret] = 30000;
	}
		Car_Save(id);
	Dialog_Show(playerid, KilitOnay, DIALOG_STYLE_MSGBOX, "Yükseltme Onay", "{2ECC71}%d {FFFFFF}ID'lý aracýnýzýn kilit seviyesini {2ECC71}%s {FFFFFF}ödeyerek\nyükseltmek istiyor musunuz?\n\nYükseltilecek seviye: {2ECC71}%d", "Yükselt", "Ýptal", vehicleid, FormatNumber(PlayerData[playerid][pYukseltmeUcret]), CarData[id][carKilitSeviye]+1);
	return 1;
}
forward AracAlarmiDurdur(vehicleid);
public AracAlarmiDurdur(vehicleid)
{
	new
		engine, lights, alarm, doors, bonnet, boot, objective, Float:pos[3];

	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
 foreach (new i : Player)
	{
	 	if(GetFactionType(i) == FACTION_POLICE) SetVehicleParamsForPlayer(vehicleid, i, 1, doors);
	 	if(GetFactionType(i) == FACTION_INTEL) SetVehicleParamsForPlayer(vehicleid, i, 1, doors);
	}
	return 1;
}
OfflineParaVer(sqlid, para)
{
 	new query[256];
    format(query, sizeof(query), "UPDATE `characters` SET `Money` = `Money`+%d WHERE `ID` = '%d'", para, sqlid);
	mysql_tquery(g_iHandle, query);
	printf("id: %d - para: %d", sqlid, para);

	return 1;
}

SQLID_Kontrol(sqlid)
{
 foreach(new i : Player)
	{
	    if(PlayerData[i][pID] == sqlid) return i;
	}
	return -1;
}
stock arrlen(&constinteger)
{
	new tmp[12];
	format(tmp, 12, "%i", constinteger);
	return strlen(tmp);
}
Fabrika_EleGeciren(fabrikaid)
{
 foreach(new i : Player)
	{
		if(PlayerData[i][pCaptureFactory] == fabrikaid)
		{
		    return i;
		}
	}
	return -1;
}
Fabrika_CaptureReset(fabrikaid)
{
 foreach(new i : Player)
	{
		if(PlayerData[i][pCaptureFactory] == fabrikaid)
		{
		    PlayerData[i][pCaptureFactory] = -1;
		}
	}
	return 1;
}
/*Fabrika_Calis(fabrikaid)
{
	if(!Fabrikalar[fabrikaid][fabrikaVarmi]) return 1;
	Fabrikalar[fabrikaid][fabrikaUretimHizi] += 0.10;
	Fabrika_Yenile(fabrikaid); Fabrika_Kaydet(fabrikaid);
	return 1;
}
Fabrika_Depo(playerid, fabrikaid)
{
	if(!Fabrikalar[fabrikaid][fabrikaVarmi]) return 1;
	new string[1024], durum[256];
	format(durum, sizeof(durum), " Para Kasasý\t[Miktar: %d]\t(Almak Ýçin Týkla)\n", Fabrikalar[fabrikaid][fabrikaDepo][0]);
	strcat(string, durum);
	format(durum, sizeof(durum), " Kokain Deposu\t[Miktar: %d]\t(Almak Ýçin Týkla)\n", Fabrikalar[fabrikaid][fabrikaDepo][0]);
	strcat(string, durum);
	format(durum, sizeof(durum), " Eroin Deposu\t[Miktar: %d]\t(Almak Ýçin Týkla)\n", Fabrikalar[fabrikaid][fabrikaDepo][1]);
	strcat(string, durum);
	format(durum, sizeof(durum), " Marijuana Deposu\t[Miktar: %d]\t(Almak Ýçin Týkla)\n", Fabrikalar[fabrikaid][fabrikaDepo][2]);
	strcat(string, durum);
	Dialog_Show(playerid, FabrikaDepo, DIALOG_STYLE_TABLIST, "{8D8DFF}Fabrika Deposu", string, "Al", "Kapat");
	return 1;
}*/

IzlemeBitir(playerid)
{
	SetWeapons(playerid);
 	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pVW"));
 	SetPlayerInterior(playerid, GetPVarInt(playerid, "pInt"));
    IzlenenID[playerid] = INVALID_PLAYER_ID;
    KillTimer(IzlemeGuncelle[playerid]);
	KillTimer(SureGuncelle[playerid]);
	JBC_SetPlayerPos(playerid, Dx[playerid], Dy[playerid], Dz[playerid]);
	new dosya[64];
	GetPlayerName(playerid, dosya, MAX_PLAYER_NAME);
	format(dosya, sizeof(dosya), "specsure/%s.json", dosya);
	if(!fexist(dosya)) djCreateFile(dosya);
	djSetInt(dosya, "SpecSuresi", SpecSuresi[playerid], false);
    foreach(new i : Player) Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, OyuncuLabel[i], E_STREAMER_PLAYER_ID, playerid);
    TextDrawHideForPlayer(playerid, SpecBG);
	TextDrawHideForPlayer(playerid, SpecHPIcon);
	TextDrawHideForPlayer(playerid, SpecGunIcon);
	TextDrawHideForPlayer(playerid, SpecCarIcon);
	PlayerTextDrawHide(playerid, SpecTitle[playerid]);
	PlayerTextDrawHide(playerid, SpecHPText[playerid]);
	PlayerTextDrawHide(playerid, SpecGunText[playerid]);
	PlayerTextDrawHide(playerid, SpecCarText[playerid]);
	PlayerTextDrawHide(playerid, SpecCarModel[playerid]);
	return 1;
}

CMD:kaykay(playerid,params[])
{
    if(!Urun_Kontrol(playerid, "Kaykay Kullanimi"))
        return SendErrorMessage(playerid, "'Kaykay kullanýmý' ürünün yok.");

	if (!Inventory_HasItem(playerid, "Kaykay"))
		return SendErrorMessage(playerid, "Kaykayýn yok.");

		if(!IsPlayerInAnyVehicle(playerid)){
                ApplyAnimation(playerid, "CARRY","null",0,0,0,0,0,0,0);
            ApplyAnimation(playerid, "SKATE","null",0,0,0,0,0,0,0);
            ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
            SetPlayerArmedWeapon(playerid,0);
                if(!InfoSkate[playerid][sActive]){
                        InfoSkate[playerid][sActive] = true;
                        DestroyObject(InfoSkate[playerid][sSkate]);
                        RemovePlayerAttachedObject(playerid,INDEX_SKATE);
                        #if TYPE_SKATE == 0
                        // the skate is placed on the right arm
                        SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
                        #else
                        // the skate is placed in the back
                        SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,1,0.055999,-0.173999,-0.007000,-95.999893,-1.600010,24.099992,1.000000,1.000000,1.000000);
                        #endif
                        PlayerPlaySound(playerid,21000,0,0,0);
                        SendServerMessage(playerid,"Kaykay çýkartýldý.");
                }else{
                        InfoSkate[playerid][sActive] = false;
                        DestroyObject(InfoSkate[playerid][sSkate]);
                        RemovePlayerAttachedObject(playerid,INDEX_SKATE);
                        PlayerPlaySound(playerid,21000,0,0,0);
                        SendServerMessage(playerid,"Kaykay saklandý.");
                }
        } else SendErrorMessage(playerid, "Araçta kaykay kullanamazsýn.");
        return 1;
}

stock ConvertTime(sure)
{
	// niggered from here: http://forum.sa-mp.com/showpost.php?p=3082644&postcount=14
    new gun, saat, dakika, saniye, string[64];
    gun = sure / 86400;
    saat = (sure / 3600) - (gun * 24);
    dakika = (sure / 60) - (gun * 1440) - (saat * 60);
    saniye = sure % 60;
    format(string, sizeof(string), "%d gün %d saat %d dakika %d saniye", gun, saat, dakika, saniye);
    return string;
}

/*forward BilgiGuncelle(playerid);
public BilgiGuncelle(playerid)
{
	new id = IzlenenID[playerid];
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return 1;
	new string[128];
	GetPlayerName(id, string, sizeof(string));
	format(string, sizeof(string), "Izlenen Oyuncu: ~b~~h~%s(%d)", string, id);
	PlayerTextDrawSetString(playerid, SpecTitle[playerid], string);

	new Float: hp, Float: zirh;
	GetPlayerHealth(id, hp);
	GetPlayerArmour(id, zirh);
	format(string, sizeof(string), "~w~HP: ~r~%d ~y~/ ~w~Zirh: %d", floatround(hp, floatround_floor), floatround(zirh, floatround_floor));
	PlayerTextDrawSetString(playerid, SpecHPText[playerid], string);

	format(string, sizeof(string), "~w~%s ~y~/ ~r~%d ~w~Mermi", GunNames[GetPlayerWeapon(id)], GetPlayerAmmo(id));
	PlayerTextDrawSetString(playerid, SpecGunText[playerid], string);

	if(IsPlayerInAnyVehicle(id))
	{
		new Float: arachp, vid = GetPlayerVehicleID(id);
		GetVehicleHealth(vid, arachp);
		new Float: velocityX, Float: velocityY, Float: velocityZ;
  		GetVehicleVelocity (vid, velocityX, velocityY, velocityZ);
		new speed = floatround (floatsqroot (floatpower (velocityX, 2) + floatpower (velocityY, 2) + floatpower (velocityZ, 2)) * 136.666667, floatround_round);
	    format(string, sizeof(string), "%s ~y~/ HP: ~r~%d (HIZ: %d)", VehicleNames[GetVehicleModel(vid)-400], floatround(arachp, floatround_floor), speed);
		PlayerTextDrawSetString(playerid, SpecCarText[playerid], string);
	}

	return 1;
}*/

forward SpecSureArttir(playerid);
public SpecSureArttir(playerid)
{
	SpecSuresi[playerid]++;
	return 1;
}

HasarBolge(bolge)
{
	new string[24];
	switch(bolge)
	{
	    case 3: format(string, 24, "Karýn");
	    case 4: format(string, 24, "Çatal");
	    case 5: format(string, 24, "Sol El");
	    case 6: format(string, 24, "Sað El");
	    case 7: format(string, 24, "Sol Ayak");
	    case 8: format(string, 24, "Sað Ayak");
	    case 9: format(string, 24, "Kafa");
	}
	return string;
}

stock GetXYBehindVehicle(vehicleid, &Float:x2, &Float:y2, Float:distance)
{
    new Float:a;
    GetVehiclePos(vehicleid, x2, y2, a);
    GetVehicleZAngle(vehicleid, a);
    x2 += (distance * floatsin(-a+180, degrees));
    y2 += (distance * floatcos(-a+180, degrees));
}

stock GetTrunkPos(vehicleid, &Float: x3, &Float:y3, &Float:z3)
{
	new Float: x, Float: y;
	new Float: sizeX, Float: sizeY, Float:sizeZ[2];

	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, sizeX, sizeY, sizeZ[0]);

	GetXYBehindVehicle(vehicleid, x, y, sizeY/2);
	x3 = x;
	y3 = y;

    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_REAR_BUMPER_Z , sizeX, sizeY, sizeZ[1]);

	z3 = (sizeZ[1] + sizeZ[0]/2);
}

stock GivePlayerWeaponEx(playerid, WeaponID, Ammo)
{
	GivePlayerWeapon(playerid, WeaponID, Ammo);
	PlayerData[playerid][pGercekSilah] = 1;
    PlayerData[playerid][pWeaponTime] = gettime()+3;
    return 1;
}


stock GetComponentName(component)
{
	new modname[50];
	switch(component)
	{
	   case 1000: format(modname, sizeof(modname), "Pro Spoiler");
	   case 1001: format(modname, sizeof(modname), "Win Spoiler");
	   case 1002: format(modname, sizeof(modname), "Drag Spoiler");
	   case 1003: format(modname, sizeof(modname), "Alpha Spoiler");
	   case 1004: format(modname, sizeof(modname), "Champ Scoop");
	   case 1005: format(modname, sizeof(modname), "Fury Scoop");
	   case 1006: format(modname, sizeof(modname), "Roof Scoop");
	   case 1007: format(modname, sizeof(modname), "Right Sideskirt");
	   case 1008: format(modname, sizeof(modname), "Nitrous x5");
	   case 1009: format(modname, sizeof(modname), "Nitrous x2");
	   case 1010: format(modname, sizeof(modname), "Nitrous x10");
	   case 1011: format(modname, sizeof(modname), "Race Scoop");
	   case 1012: format(modname, sizeof(modname), "Worx Scoop");
	   case 1013: format(modname, sizeof(modname), "Round Fog Lights");
	   case 1014: format(modname, sizeof(modname), "Champ Spoiler");
	   case 1015: format(modname, sizeof(modname), "Race Spoiler");
	   case 1016: format(modname, sizeof(modname), "Worx Spoiler");
	   case 1017: format(modname, sizeof(modname), "Left Sideskirt");
	   case 1018: format(modname, sizeof(modname), "Upswept Exhaust");
	   case 1019: format(modname, sizeof(modname), "Twin Exhaust");
	   case 1020: format(modname, sizeof(modname), "Large Exhaust");
	   case 1021: format(modname, sizeof(modname), "Medium Exhaust");
	   case 1022: format(modname, sizeof(modname), "Small Exhaust");
	   case 1023: format(modname, sizeof(modname), "Fury Spoiler");
	   case 1024: format(modname, sizeof(modname), "Square Fog Lights");
	   case 1025: format(modname, sizeof(modname), "Offroad Wheels");
	   case 1026, 1036, 1047, 1056, 1069, 1090: format(modname, sizeof(modname), "Right Alien Sideskirt");
	   case 1027, 1040, 1051, 1062, 1071, 1094: format(modname, sizeof(modname), "Left Alien Sideskirt");
	   case 1028, 1034, 1046, 1064, 1065, 1092: format(modname, sizeof(modname), "Alien Exhaust");
	   case 1029, 1037, 1045, 1059, 1066, 1089: format(modname, sizeof(modname), "X-Flow Exhaust");
	   case 1030, 1039, 1048, 1057, 1070, 1095: format(modname, sizeof(modname), "Right X-Flow Sideskirt");
	   case 1031, 1041, 1052, 1063, 1072, 1093: format(modname, sizeof(modname), "Left X-Flow Sideskirt");
	   case 1032, 1038, 1054, 1055, 1067, 1088: format(modname, sizeof(modname), "Alien Roof Vent");
	   case 1033, 1035, 1053, 1061, 1068, 1091: format(modname, sizeof(modname), "X-Flow Roof Vent");
	   case 1042: format(modname, sizeof(modname), "Right Chrome Sideskirt");
	   case 1099: format(modname, sizeof(modname), "Left Chrome Sideskirt");
	   case 1043, 1105, 1114, 1127, 1132, 1135: format(modname, sizeof(modname), "Slamin Exhaust");
	   case 1044, 1104, 1113, 1126, 1129, 1136: format(modname, sizeof(modname), "Chrome Exhaust");
	   case 1050, 1058, 1139, 1146, 1158, 1163: format(modname, sizeof(modname), "X-Flow Spoiler");
	   case 1049, 1060, 1138, 1147, 1162, 1164: format(modname, sizeof(modname), "Alien Spoiler");
	   case 1073: format(modname, sizeof(modname), "Shadow Wheels");
	   case 1074: format(modname, sizeof(modname), "Mega Wheels");
	   case 1075: format(modname, sizeof(modname), "Rimshine Wheels");
	   case 1076: format(modname, sizeof(modname), "Wires Wheels");
	   case 1077: format(modname, sizeof(modname), "Classic Wheels");
	   case 1078: format(modname, sizeof(modname), "Twist Wheels");
	   case 1079: format(modname, sizeof(modname), "Cutter Wheels");
	   case 1080: format(modname, sizeof(modname), "Stitch Wheels");
	   case 1081: format(modname, sizeof(modname), "Grove Wheels");
	   case 1082: format(modname, sizeof(modname), "Import Wheels");
	   case 1083: format(modname, sizeof(modname), "Dollar Wheels");
	   case 1084: format(modname, sizeof(modname), "Trance Wheels");
	   case 1085: format(modname, sizeof(modname), "Atomic Wheels");
	   case 1086: format(modname, sizeof(modname), "Stereo");
	   case 1087: format(modname, sizeof(modname), "Hydraulics");
	   case 1096: format(modname, sizeof(modname), "Ahab Wheels");
	   case 1097: format(modname, sizeof(modname), "Virtual Wheels");
	   case 1098: format(modname, sizeof(modname), "Access Wheels");
	   case 1100: format(modname, sizeof(modname), "Chrome Grill");
	   case 1101: format(modname, sizeof(modname), "Left Chrome Flames Sideskirt");
	   case 1102, 1107: format(modname, sizeof(modname), "Left Chrome Strip Sideskirt");
	   case 1103: format(modname, sizeof(modname), "Convertible Roof");
	   case 1106, 1124: format(modname, sizeof(modname), "Left Chrome Arches Sideskirt");
	   case 1108, 1133, 1134: format(modname, sizeof(modname), "Right Chrome Strip Sideskirt");
	   case 1109: format(modname, sizeof(modname), "Chrome Rear Bullbars");
	   case 1110: format(modname, sizeof(modname), "Slamin Rear Bullbars");
	   case 1111, 1112: format(modname, sizeof(modname), "Front Sign");
	   case 1115: format(modname, sizeof(modname), "Chrome Front Bullbars");
	   case 1116: format(modname, sizeof(modname), "Slamin Front Bullbars");
	   case 1117, 1174, 1179, 1182, 1189, 1191: format(modname, sizeof(modname), "Chrome Front Bumper");
	   case 1175, 1181, 1185, 1188, 1190: format(modname, sizeof(modname), "Slamin Front Bumper");
	   case 1176, 1180, 1184, 1187, 1192: format(modname, sizeof(modname), "Chrome Rear Bumper");
	   case 1177, 1178, 1183, 1186, 1193: format(modname, sizeof(modname), "Slamin Rear Bumper");
	   case 1118: format(modname, sizeof(modname), "Right Chrome Trim Sideskirt");
	   case 1119: format(modname, sizeof(modname), "Right Wheelcovers Sideskirt");
	   case 1120: format(modname, sizeof(modname), "Left Chrome Trim Sideskirt");
	   case 1121: format(modname, sizeof(modname), "Left Wheelcovers Sideskirt");
	   case 1122: format(modname, sizeof(modname), "Right Chrome Flames Sideskirt");
	   case 1123: format(modname, sizeof(modname), "Bullbar Chrome Bars");
	   case 1125: format(modname, sizeof(modname), "Bullbar Chrome Lights");
	   case 1128: format(modname, sizeof(modname), "Vinyl Hardtop Roof");
	   case 1130: format(modname, sizeof(modname), "Hardtop Roof");
	   case 1131: format(modname, sizeof(modname), "Softtop Roof");
	   case 1140, 1148, 1151, 1156, 1161, 1167: format(modname, sizeof(modname), "X-Flow Rear Bumper");
	   case 1141, 1149, 1150, 1154, 1159, 1168: format(modname, sizeof(modname), "Alien Rear Bumper");
	   case 1142: format(modname, sizeof(modname), "Left Oval Vents");
	   case 1143: format(modname, sizeof(modname), "Right Oval Vents");
	   case 1144: format(modname, sizeof(modname), "Left Square Vents");
	   case 1145: format(modname, sizeof(modname), "Right Square Vents");
	   case 1152, 1157, 1165, 1170, 1172, 1173: format(modname, sizeof(modname), "X-Flow Front Bumper");
	   case 1153, 1155, 1160, 1166, 1169, 1171: format(modname, sizeof(modname), "Alien Front Bumper");

	}
	return modname;
}

Dialog:RutbeSec(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	     if (!FactionData[PlayerData[playerid][pFaction]][factionExists])
			return 0;
	    if(PlayerData[playerid][pOffRank])
	    {
	        new sqlid = GetPVarInt(playerid, "OfflineSQLID"), query[256];

			if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");

	    	format(query, sizeof(query), "UPDATE `characters` SET `FactionRank` = %d WHERE `ID` = '%d'", listitem+1, sqlid);
			mysql_tquery(g_iHandle, query);

	        cmd_birlik(playerid, "\1");
		    //SendServerMessage(playerid, "%s adlý oyuncunun rütbesini %s olarak deðiþtirdin. ", SQLName(sqlid), FactionRanks[PlayerData[playerid][pFaction]][(listitem+1) - 1] );
            SendFactionMessage(PlayerData[playerid][pFaction], COLOR_GREEN, "BÝRLÝK: %s, %s'ýn rütbesini %s olarak deðiþtirdi.", ReturnName(playerid, 0), SQLName(sqlid, 0), FactionRanks[PlayerData[playerid][pFaction]][(listitem+1) - 1]);
		}
		else {
  		    new userid = GetPVarInt(playerid, "DKI");

	        if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");

			if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
			    return SendErrorMessage(playerid, "Bu oyuncu bu birlikte deðil.");

			PlayerData[userid][pFactionRank] = listitem+1;
	        cmd_birlik(playerid, "\1");
		    //SendServerMessage(playerid, "%s adlý oyuncunun rütbesini %s olarak deðiþtirdin. (%d)", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
		    //SendServerMessage(userid, "%s adlý oyuncu rütbeni %s olarak deðiþtirdi. (%d)", ReturnName(playerid, 0), Faction_GetRank(userid), rankid);
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_GREEN, "BÝRLÝK: %s, %s'ýn rütbesini %s olarak deðiþtirdi.", ReturnName(playerid, 0), ReturnName(userid, 0), Faction_GetRank(userid));
		}
	}
	return 1;
}

Dialog:DivizyonSec(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[PlayerData[playerid][pFaction]][factionExists])
				return 0;
	    if(PlayerData[playerid][pOffDivizyon])
	    {
	        new sqlid = GetPVarInt(playerid, "OfflineSQLID"), query[256];
            if(listitem == 0)
			{
			    format(query, sizeof(query), "UPDATE `characters` SET `FactionDivizyon` = 0 WHERE `ID` = '%d'", sqlid);
				mysql_tquery(g_iHandle, query);
			    SendServerMessage(playerid, "%s adlý oyuncunun divizyonunu Yok olarak deðiþtirdin. ", SQLName(sqlid));
			    return 1;
			}

			if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");


	    	format(query, sizeof(query), "UPDATE `characters` SET `FactionDivizyon` = %d WHERE `ID` = '%d'", listitem, sqlid );
			mysql_tquery(g_iHandle, query);

	        cmd_birlik(playerid, "\1");
		    SendServerMessage(playerid, "%s adlý oyuncunun divizyonunu %s olarak deðiþtirdin. ", SQLName(sqlid), FactionDivizyon[PlayerData[playerid][pFaction]][(listitem+1) - 1]);
		}
		else {

	        new userid = GetPVarInt(playerid, "DKI");
			if(listitem == 0)
			{
			    PlayerData[userid][pFactionDivizyon] = 0;
			    SendServerMessage(playerid, "%s adlý oyuncunun divizyonunu %s olarak deðiþtirdin. ", ReturnName(userid, 0), Faction_GetDivizyon(userid));
		    	SendServerMessage(userid, "%s adlý oyuncu divizyonunu %s olarak deðiþtirdi.", ReturnName(playerid, 0), Faction_GetDivizyon(userid));
			    return 1;
			}

	        if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendErrorMessage(playerid, "Bu iþlemi yapamazsýnýz.");

			if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
			    return SendErrorMessage(playerid, "Bu oyuncu bu birlikte deðil.");

			PlayerData[userid][pFactionDivizyon] = listitem;
	        cmd_birlik(playerid, "\1");
		    SendServerMessage(playerid, "%s adlý oyuncunun divizyonunu %s olarak deðiþtirdin. ", ReturnName(userid, 0), Faction_GetDivizyon(userid));
		    SendServerMessage(userid, "%s adlý oyuncu divizyonunu %s olarak deðiþtirdi.", ReturnName(playerid, 0), Faction_GetDivizyon(userid));
		}
	}
	return 1;
}

stock BizJob_rutbeisim(rid)
{
	new rutbead[32];
	switch(rid)
	{
	    case 5: format(rutbead, sizeof(rutbead), "DJ");
	    case 4: format(rutbead, sizeof(rutbead), "Müdür");
	    case 3: format(rutbead, sizeof(rutbead), "Güvenlik Görevlisi");
	    case 2: format(rutbead, sizeof(rutbead), "Satýþ Sorumlusu");
	    case 1: format(rutbead, sizeof(rutbead), "Eleman");
		default: format(rutbead, sizeof(rutbead), "Yok");
	}
 	return rutbead;
}
stock KayitYazdir(playerid, numara, tip[])
{
    new query[1024];
	format(query, sizeof(query), "INSERT INTO `aramakayitlari` (`ID`, `Numara`, `Tip`, `Zaman`) VALUES('%d', '%d', '%s', '%s')",  PlayerData[playerid][pID], PlayerData[numara][pPhone], tip, ReturnDate());
	mysql_tquery(g_iHandle, query);
	return 1;
}

ObjeleriYukle(playerid)
{
if(IsValidDynamic3DTextLabel(KosText[playerid])) DestroyDynamic3DTextLabel(KosText[playerid]);
	PlayerData[playerid][pGodMode] = 1;
	PlayerData[playerid][pInt] = 1;
	KosText[playerid] = CreateDynamic3DTextLabel("[Kos Korumasý Aktif!]", COLOR_GREEN, 0, 0, -20, 25, playerid);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, KosText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.37);
    SetTimerEx("ObjelerYuklendi",2000,false,"i",playerid);
	TogglePlayerControllable(playerid, 0);
    return 1;
}
forward ObjelerYuklendi(playerid);
public ObjelerYuklendi(playerid)
{
    TogglePlayerControllable(playerid, 1);
    PlayerData[playerid][pGodMode] = 0;
    PlayerData[playerid][pInt] = 1;
    DestroyDynamic3DTextLabel(KosText[playerid]);
    Delete3DTextLabel(KosText[playerid]);
    return 1;
}

AracIlan(vehicleid)
{
	new Float:fX, Float:fY, Float:fZ;
    new carid = Car_GetID(vehicleid);
    if (IsValidDynamic3DTextLabel(aracilan[vehicleid]))
	        DestroyDynamic3DTextLabel(aracilan[vehicleid]);

    GetVehicleBoot(vehicleid, fX, fY, fZ);
	if(CarData[carid][carPrice] > 0)
	{
		aracilan[vehicleid] = CreateDynamic3DTextLabelEx("[SATILIK]", 0x00FF00FF, fX, fY, fZ, 15.0, INVALID_PLAYER_ID, vehicleid, 1, 15.0);
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, aracilan[vehicleid] , E_STREAMER_ATTACH_OFFSET_Z, 0.47);
	}
	else if(CarData[carid][carKiraUcret] > 0)
	{
 		aracilan[vehicleid] = CreateDynamic3DTextLabelEx("[KIRALIK]", COLOR_LIGHTRED, fX, fY, fZ, 15.0, INVALID_PLAYER_ID, vehicleid, 1, 15.0);
 		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, aracilan[vehicleid] , E_STREAMER_ATTACH_OFFSET_Z, 0.47);
	}
}

CMD:em(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if(!IsPlayerInAnyVehicle(playerid) && !IsABike(vehicleid)) return SendErrorMessage(playerid, "Araç dýþýnda kemer takamazsýn!");

	new string[50 + MAX_PLAYER_NAME];
    if(IsPlayerInAnyVehicle(playerid) && !PlayerData[playerid][pEmniyetKemeri])
	{
        PlayerData[playerid][pEmniyetKemeri] = true;
        if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
			format(string, sizeof(string), "* %s motor kaskýný kafasýna geçirir.", ReturnName(playerid, 0));
		 	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 30.0, 5000);
		 	HelmetEnabled[playerid] = 1;
            SetPlayerAttachedObject(playerid, 4, RandomHelmet[random(sizeof(RandomHelmet))], 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1);
		 	SendClientMessageEx(playerid, COLOR_CYAN, "* %s", string);
        }
        else
		{
            //format(string, sizeof(string), "* %s emniyet kemerini takar.", ReturnName(playerid, 0));
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s emniyet kemerini takar.", ReturnName(playerid, 0));
		 //	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 30.0, 5000);
		 //ayarlaChatBubble(playerid, "[ Emniyet kemeri takýlý ]", COLOR_RED, 30.0, 10800000);
		 	//SendClientMessageEx(playerid, COLOR_CYAN, "* %s", string);
        }

    }
    else if(IsPlayerInAnyVehicle(playerid) && PlayerData[playerid][pEmniyetKemeri])
	{
        PlayerData[playerid][pEmniyetKemeri] = false;
		if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
            format(string, sizeof(string), "* %s motor kaskýný kafasýndan çýkartýr.", ReturnName(playerid, 0));
		 	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 30.0, 5000);
		 	HelmetEnabled[playerid] = 0;
            RemovePlayerAttachedObject(playerid, 4);
		 	SendClientMessageEx(playerid, COLOR_CYAN, "* %s", string);
        }
        else
		{
            format(string, sizeof(string), "* %s emniyet kemerini çýkartýr.", ReturnName(playerid, 0));
		 	SetPlayerChatBubble(playerid, string, COLOR_CYAN, 30.0, 5000);
		 	SendClientMessageEx(playerid, COLOR_CYAN, "* %s", string);
        }
    }
    return 1;
}


forward VehicleSpeed(playerid);
public VehicleSpeed(playerid)
{
 /*       new Float:ovx, Float:ovy, Float:ovz;
        if(IsPlayerInAnyVehicle(playerid))
        {
                GetVehicleVelocity(GetPlayerVehicleID(playerid), ovx, ovy, ovz);
                if(ovx < -0.4 || ovx > 0.4 || ovy < -0.4 || ovy > 0.4 && !IsSpeeding[playerid] && !PlayerData[playerid][pEmniyetKemeri])
                {
                    CrashTimer[playerid] = SetTimerEx("Speeding", 100, 1, "i", playerid);
                    ovx = (ovx >= 0) ? ovx : -ovx;
                    ovy = (ovy >= 0) ? ovy : -ovy;
                    pSpeed[playerid] = ((ovx+ovy)/2);
                    IsSpeeding[playerid] = true;
                }
                else
                {
                    KillTimer(CrashTimer[playerid]);
                    pSpeed[playerid] = 0.0;
                    IsSpeeding[playerid] = false;
                }
        }*/
        return 1;
}

forward Speeding(playerid);
public Speeding(playerid)
{
        new Float:nvx, Float:nvy, Float:nvz;
        if(IsPlayerInAnyVehicle(playerid) && IsSpeeding[playerid])
        {
                GetVehicleVelocity(GetPlayerVehicleID(playerid), nvx, nvy, nvz);
                if(nvx > -0.1 && nvx < 0.1 && nvy > -0.1 && nvy < 0.1)
                {
                    new Float:crashhealth;
                    GetPlayerHealth(playerid, crashhealth);
                    crashhealth -= (pSpeed[playerid] * 100.0);
                    CanDegistir(playerid, crashhealth);
                SetPlayerDrunkLevel(playerid, 50000);
                SetTimerEx("StopCameraEffect", 5000, 0, "i", playerid);
                    IsSpeeding[playerid] = false;
                }
        }
        return 1;
}

forward StopCameraEffect(playerid);
public StopCameraEffect(playerid)
{
    	SetPlayerDrunkLevel(playerid, 0);
        return 1;
}

GorunusIncele(playerid, id)
{
	new string[2048], haber_string[512], karakter = 256;
	strcat(haber_string, PlayerData[id][pGorunus]);

	new kac_kere = floatround((strlen(haber_string) / karakter), floatround_floor);
	if(kac_kere > 0) for(new j = 1; j <= kac_kere; j++) strins(haber_string, "\n", j * karakter);

	format(string, sizeof(string), "%s________________________________________________\n\n", string);
	format(string, sizeof(string), "%s{FFFFFF}%s\n", string, haber_string);

	format(string, sizeof(string), "%s________________________________________________\n\n", string);
	Dialog_Show(playerid, HaberIncele, DIALOG_STYLE_MSGBOX, "Dýþ Görünüþ", string, "Tamam", "");
	return 1;
}


Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y)
{

  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2,X));
  DY = floatabs(floatsub(y2,Y));

  if (DY == 0.0 || DX == 0.0)
  {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else
  {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }
  return floatadd(angle, 90.0);
}

GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
{
        x += (distance * floatsin(-angle, degrees));
        y += (distance * floatcos(-angle, degrees));
}

IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
        new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
        GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
        GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

        new Float:vertical, Float:horizontal;

        switch (GetPlayerWeapon(playerid))
        {
                        case 34,35,36: {
                        if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
                        return false;
                        }
                        case 30,31: {vertical = 4.0; horizontal = -1.6;}
                        case 33: {vertical = 2.7; horizontal = -1.0;}
                        default: {vertical = 6.0; horizontal = -2.2;}
        }

        new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
        new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
        GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

        if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
        return false;
}

IsPlayerAimingAtPlayer(playerid, target)
{
        new Float:x, Float:y, Float:z;
        GetPlayerPos(target, x, y, z);
        if (IsPlayerAimingAt(playerid, x, y, z-0.75, 0.25)) return true;
        if (IsPlayerAimingAt(playerid, x, y, z-0.25, 0.25)) return true;
        if (IsPlayerAimingAt(playerid, x, y, z+0.25, 0.25)) return true;
        if (IsPlayerAimingAt(playerid, x, y, z+0.75, 0.25)) return true;
        return false;
}

forward MotorCalistir(playerid, vehicleid);
public MotorCalistir(playerid, vehicleid)
{
	SetEngineStatus(vehicleid, true);
	SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "> '%s' model aracýn motoru çalýþýr. (( %s ))", ReturnVehicleModelName(GetVehicleModel(vehicleid)), ReturnName(playerid, 0));
	return 1;
}

House_LevelPara(geleceklevel)
{
	new deger;
	switch(geleceklevel)
	{
		case 2: deger = 20000;
		case 3: deger = 30500;
		case 4: deger = 41500;
		case 5: deger = 52000;
		case 6: deger = 60000;
	}
	return deger;
}

House_Yukselt(playerid, id, belesmi)
{
	new yenilevel = HouseData[id][houseLevel]+1;
    if(yenilevel > 6) return SendErrorMessage(playerid, "Bu ev zaten maksimum seviyeye ulaþmýþ. (6/6)");

   	if(!belesmi)
    {
	    if(GetMoney(playerid) < House_LevelPara(yenilevel)) return SendErrorMessage(playerid, "Yükseltmek için yeterli paran yok. (%s)", FormatNumber(House_LevelPara(yenilevel)));
		GiveMoney(playerid, -House_LevelPara(yenilevel));
		SendServerMessage(playerid, "Ev '%s' ödenerek  %d. seviyeye yükseltildi.", FormatNumber(House_LevelPara(yenilevel)), yenilevel);
	}
	else SendServerMessage(playerid, "Ev %d. seviyeye yükseltildi.", yenilevel);

	switch(yenilevel)
	{
		case 2:
		{
		    HouseData[id][houseInt][0] = 1730.3673; // özel int yapýldý
		    ObjeleriYukle(playerid);
		    SendServerMessage(playerid, "Ev yükseltildiði için otomatik olarak kapý kilitlendi!");
		    HouseData[id][houseLocked] = 1;
			HouseData[id][houseInt][1] = 1473.3276;
			HouseData[id][houseInt][2] = -43.4118;
		//    HouseData[id][houseInterior] = 15;
		    HouseData[id][houseLevel] = 2;
		}
		case 3:
		{
		    HouseData[id][houseInt][0] = 1735.5527; // özel int yapýldý
		    ObjeleriYukle(playerid);
		    SendServerMessage(playerid, "Ev yükseltildiði için otomatik olarak kapý kilitlendi!");
		    HouseData[id][houseLocked] = 1;
			HouseData[id][houseInt][1] = 1541.7477;
			HouseData[id][houseInt][2] = -17.1321;
		   // HouseData[id][houseInterior] = 15;
		    HouseData[id][houseLevel] = 3;
		}
		case 4:
		{
		    HouseData[id][houseInt][0] = 2183.9749;
		    ObjeleriYukle(playerid);
		    SendServerMessage(playerid, "Ev yükseltildiði için otomatik olarak kapý kilitlendi!");
		    HouseData[id][houseLocked] = 1;
			HouseData[id][houseInt][1] = 1305.4038;
			HouseData[id][houseInt][2] = -33.4921;
		  //  HouseData[id][houseInterior] = 3;
		    HouseData[id][houseLevel] = 4;
		}
		case 5:
		{
		    HouseData[id][houseInt][0] = 1379.2496;
		    ObjeleriYukle(playerid);
		    SendServerMessage(playerid, "Ev yükseltildiði için otomatik olarak kapý kilitlendi!");
		    HouseData[id][houseLocked] = 1;
			HouseData[id][houseInt][1] = -820.3817;
			HouseData[id][houseInt][2] = 1092.3500;
		    //HouseData[id][houseInterior] = 1;
		    HouseData[id][houseLevel] = 5;
		}
		case 6:
		{
		    HouseData[id][houseInt][0] = 243.4165;
		    ObjeleriYukle(playerid);
		    SendServerMessage(playerid, "Ev yükseltildiði için otomatik olarak kapý kilitlendi!");
		    HouseData[id][houseLocked] = 1;
			HouseData[id][houseInt][1] = -1851.5753;
			HouseData[id][houseInt][2] = 3333.9329;
		   // HouseData[id][houseInterior] = 8;
		    HouseData[id][houseLevel] = 6;
		}
	}
 foreach (new i : Player)
	{
		if (PlayerData[i][pHouse] == HouseData[id][houseID])
		{
			JBC_SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
			SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);
			SetPlayerInterior(i, HouseData[id][houseInterior]);
			SetCameraBehindPlayer(i);
		}
	}
	House_Save(id);
	return 1;
}

KomutYukle()
{
	// -------------------------- HESAP    ------------------------ //
    KomutEkle("/songiris", "Bir hesabýn son giriþ tarihini öðrenme.", KATAGORI_HESAP);
	KomutEkle("/hesap", "Bir karakterin hesap adýný öðrenme.", KATAGORI_HESAP);
	KomutEkle("/ayarlar", "Karakterinizin tercihlerini ayarlayabilirsiniz.", KATAGORI_HESAP);
	KomutEkle("/mulklerim", "Karakterinize baðlý iþyerleri ve evleri listeler.", KATAGORI_HESAP);
	KomutEkle("/karakter", "Karakterinizin bilgilerini görme.", KATAGORI_HESAP);
	KomutEkle("/id", "Oyun adýna göre ID sorgulama.", KATAGORI_HESAP);

    // -------------------------- DESTEK    ------------------------ //
	KomutEkle("/destek", "Yetkililere sorunlarýnýzý iletebilirsiniz.", KATAGORI_DESTEK);
//	KomutEkle("/sorusor", "Tester ekibine sorularýnýzý iletebilirsiniz.", KATAGORI_DESTEK);
	KomutEkle("/yetkili", "Aktif yetkilileri listeleme.", KATAGORI_DESTEK);
//	KomutEkle("/testers", "Aktif testerleri listeleme.", KATAGORI_DESTEK);

    // -------------------------- ROL    ------------------------ //
    KomutEkle("/ccmy", "Chat ekranýný temizler.", KATAGORI_ROL);
	KomutEkle("/aksesuar", "Karakterinizin aksesuarlarýný kontrol etme.", KATAGORI_ROL);
	KomutEkle("/me", "Etkileþim komutu.", KATAGORI_ROL);
	KomutEkle("/do", "Etkileþim komutu.", KATAGORI_ROL);
	KomutEkle("/s(hout)", "Baðýrma.", KATAGORI_ROL);
	KomutEkle("/b", "Oyun dýþý kanal. (Lokal)", KATAGORI_ROL);
	KomutEkle("/pm", "Özel mesaj. (Private)", KATAGORI_ROL);
	KomutEkle("/p", "Son PM attýðýnýz kiþiye özel mesaj. (Private)", KATAGORI_ROL);
	KomutEkle("/o(oc)", "Oyun dýþý kanal. (Global)", KATAGORI_ROL);
	KomutEkle("/w(hisper)", "Oyuncuya fýsýldama.", KATAGORI_ROL);
	KomutEkle("/c", "Sessiz konuþma.", KATAGORI_ROL);
	KomutEkle("/ame", "Etkileþim komutu (Karakter üstünde).", KATAGORI_ROL);
	KomutEkle("/ado", "Etkileþim komutu (Karakter üstünde).", KATAGORI_ROL);
	KomutEkle("/banka", "Banka memuruyla etkileþim.", KATAGORI_ROL);
	KomutEkle("/sat", "Ev/araç/iþyerini satma.", KATAGORI_ROL);
	KomutEkle("/kabulet", "Gelen teklifleri onaylama.", KATAGORI_ROL);
    KomutEkle("/paraver", "Kiþiye para aktarma.", KATAGORI_ROL);
    KomutEkle("/dene", "Baþarýlý/Baþarýsýz olma þansý.", KATAGORI_ROL);
    KomutEkle("/tokalas", "Belirlediðiniz kiþiye tokalaþma isteði yollar.", KATAGORI_ROL);
    KomutEkle("/kimlikgoster", "Kimlik bilgilerinizi gösterme.", KATAGORI_ROL);
    KomutEkle("/lisansgoster", "Ehliyet/ruhsat durumunuzu gösterme.", KATAGORI_ROL);
    KomutEkle("/kapi", "Kapýlarý/gateleri açma.", KATAGORI_ROL);

    // -------------------------- TELEFON  ------------------------ //
    KomutEkle("/telefon", "Telefon ekranýný açar.", KATAGORI_TELEFON);
    KomutEkle("/ara", "Numara çevirme.", KATAGORI_TELEFON);
    KomutEkle("/kapat", "Aktif aramayý/gelen aramayý bitirme.", KATAGORI_TELEFON);
    KomutEkle("/yazi & /sms", "SMS yollama.", KATAGORI_TELEFON);

    KomutEkle("/imhaet", "Aracý geri ödeme almadan imha etme.", KATAGORI_ARAC);
    KomutEkle("/benzinkutusu", "Benzin kutusunu kullanma.", KATAGORI_ARAC);
    KomutEkle("/sandiklar", "Araç içindeki sandýklarý kontrol etme.", KATAGORI_ARAC);
    KomutEkle("/motor", "Motoru açma/kapatma.", KATAGORI_ARAC);
    KomutEkle("/anahtarver", "Anahtarý birine ayarlama.", KATAGORI_ARAC);
    KomutEkle("/park", "Aracý parketme.", KATAGORI_ARAC);
    KomutEkle("/akilit", "Kilidi açma/kapatma.", KATAGORI_ARAC);
    KomutEkle("/anahtarver", "Anahtarý birine ayarlama.", KATAGORI_ARAC);
    KomutEkle("/bagaj", "Bagajý açma.", KATAGORI_ARAC);
    KomutEkle("/araclarim", "Tüm araçlarýnýzý listeleme.", KATAGORI_ARAC);
    KomutEkle("/arac", "Araç kontrol menüsü.", KATAGORI_ARAC);
    KomutEkle("/acam", "Camlarý açma/kapatma.", KATAGORI_ARAC);
    KomutEkle("/isiklar", "Farlarý açma/kapatma.", KATAGORI_ARAC);
    KomutEkle("/kaput", "Kaputu açma/kapatma.", KATAGORI_ARAC);
    KomutEkle("/acek", "Arkanýzdaki aracý çekmeye baþlarsýnýz. (TOWTRUCK)", KATAGORI_ARAC);
    KomutEkle("/abirak", "Çektiðiniz aracý býrakýr.", KATAGORI_ARAC);
    KomutEkle("/agps", "Aracýnýzýn konumunu görme.", KATAGORI_ARAC);
    KomutEkle("/modsil", "Araçtaki modifikasyonlarý kaldýrma.", KATAGORI_ARAC);
    KomutEkle("/paintjobsil", "Paintjob kaldýrma.", KATAGORI_ARAC);

    // -------------------------- ENVANTER ------------------------ //
    KomutEkle("/envanter", "Envanterinizi açar.", KATAGORI_ENVANTER);
//    KomutEkle("/boya", "Araç boyama.", KATAGORI_ENVANTER);
	KomutEkle("/ilkyardim", "Kendinize veya baþkasýna ilk yardým yapma.", KATAGORI_ENVANTER);
	KomutEkle("/ic", "Envanterinizdeki içecekleri kullanmak.", KATAGORI_ENVANTER);
	KomutEkle("/ye", "Envanterinizdeki yiyecekleri kullanmak.", KATAGORI_ENVANTER);
	KomutEkle("/celikyelek", "Çelik yelek giyme.", KATAGORI_ENVANTER);
	KomutEkle("/kampatesi", "Kamp ateþini kullanma.", KATAGORI_ENVANTER);
	KomutEkle("/levye", "Sandýk açma.", KATAGORI_ENVANTER);
	KomutEkle("/gps", "GPS Cihazý ekranýný açma.", KATAGORI_ENVANTER);
	KomutEkle("/canta", "Çantanýzý açar.", KATAGORI_ENVANTER);

    // -------------------------- SILAH  ------------------------ //
	KomutEkle("/silahbirak", "Silahý yere atma.", KATAGORI_SILAH);
	KomutEkle("/ammo", "Cephane kartuþunu kullanma.", KATAGORI_SILAH);
	KomutEkle("/sarjor", "Þarjör kullanma.", KATAGORI_SILAH);
	KomutEkle("/silahver", "Baþka oyuncuya silahýnýzý verme.", KATAGORI_SILAH);


    // -------------------------- UYUÞTURUCU  ------------------------ //
	KomutEkle("/ukullan", "Uyuþturucu kullanma.", KATAGORI_UYUSTURUCU);
	KomutEkle("/uara", "Kiþinin üzerinde uyuþturucu arama.", KATAGORI_UYUSTURUCU);
	KomutEkle("/cantauara", "Kiþinin çantasýnda uyuþturucu arama.", KATAGORI_UYUSTURUCU);
	KomutEkle("/tohumek", "Tohum ekme.", KATAGORI_UYUSTURUCU);
	KomutEkle("/hasatet", "Ekilen tohumu hasat etme.", KATAGORI_UYUSTURUCU);


    // -------------------------- OYUN  ------------------------ //
    KomutEkle("/dl", "Sunucudaki araçlarýn Client bilgilerine bakma.", KATAGORI_OYUN);
    KomutEkle("/vw", "Bulunduðunuz Virtual World NO'sunu öðrenme.", KATAGORI_OYUN);
    KomutEkle("/interior", "Bulunduðunuz Interior ID'sýný öðrenme.", KATAGORI_OYUN);
	KomutEkle("/cpsifirla", "Haritadaki kontrol noktasýný siler.", KATAGORI_OYUN);
	KomutEkle("/vwduzelt", "Virtual World bugundaysanýz bu komutla çözebilirsiniz.", KATAGORI_OYUN);
	KomutEkle("/hudkapa", "Ekrandaki simgeleri kaldýrýr.", KATAGORI_OYUN);

    // -------------------------- ISYERI  ------------------------ //
	KomutEkle("/imhaet", "Ýþyerinizi yarý fiyatýný alarak tekrardan satýlýða çýkartýrsýnýz.", KATAGORI_ISYERI);
	KomutEkle("/isyeri", "Ýþyeri kontrol menüsü.", KATAGORI_ISYERI);
	KomutEkle("/satinal", "Ürün/iþyeri satýn alma.", KATAGORI_ISYERI);
	KomutEkle("/mulkkilit", "Ýþyerini kilitleme/açma.", KATAGORI_ISYERI);
	KomutEkle("/ibilgi", "Tüm iþyerlerinizin kasa durumunu kontrol etme.", KATAGORI_ISYERI);
	KomutEkle("/iayril", "Ýþyerinin çalýþanlýðýndan ayrýlma.", KATAGORI_ISYERI);
	KomutEkle("/tv", "TV izleme.", KATAGORI_ISYERI);

    // -------------------------- OTEL  ------------------------ //
	KomutEkle("/odakilit", "Odanýzýn kilidini açýp kapatabilirsiniz.", KATAGORI_OTEL);
	KomutEkle("/odaiptal", "Odanýzý iptal edersiniz.", KATAGORI_OTEL);
	KomutEkle("/odacik", "Otel odasýndan çýkmanýzý saðlar.", KATAGORI_OTEL);
	KomutEkle("/asansor", "Odanýza/odalara çýkmak için asansörü açarsýnýz.", KATAGORI_OTEL);

	// -------------------------- Balýkçýlýk  ------------------------ //
	KomutEkle("/baliktut", "Balýk tutma komutu.", KATAGORI_BALIKCILIK);
	KomutEkle("/baliklarim", "Balýklarýnýzý görme komutu.", KATAGORI_BALIKCILIK);

    // -------------------------- EV  ------------------------ //
    KomutEkle("/imhaet", "Evinizin yarý fiyatýný alarak tekrardan satýlýða çýkartýrsýnýz.", KATAGORI_EV);
    KomutEkle("/ev", "Ev kontrol menüsü.", KATAGORI_EV);
    KomutEkle("/satinal", "Satýlýk olan evleri satýn alma.", KATAGORI_EV);
    KomutEkle("/mulkkilit", "Evi kilitleme/açma.", KATAGORI_ISYERI);
    KomutEkle("/garajkilit", "Garaj kilitleme/açma.", KATAGORI_EV);
    KomutEkle("/gardolap", "Evin gardolabýný açma.", KATAGORI_EV);
    KomutEkle("/pisir", "Donmuþ yiyecekleri ocakta piþirme.", KATAGORI_EV);
    KomutEkle("/tv", "TV izleme.", KATAGORI_EV);

    // -------------------------- BÝRLÝK  ------------------------ //
    KomutEkle("/birlikler", "Tüm birlikleri listeler.", KATAGORI_BIRLIK);
    KomutEkle("/f(ac)", "Birlik içi sohbet.", KATAGORI_BIRLIK);
    KomutEkle("/fspray", "Çete tipi birlikler için graffiti komutu.", KATAGORI_BIRLIK);
    KomutEkle("/birlik", "Birlik menüsünü açar.", KATAGORI_BIRLIK);

    /// -------------------------- TESTER  ------------------------ //
    KomutEkle("/t", "Tester kanalý.", KATAGORI_TESTER);
    KomutEkle("/tduty", "Tester iþbaþý komutu.", KATAGORI_TESTER);
    KomutEkle("/sorular", "Sorularý listeleme.", KATAGORI_TESTER);
    KomutEkle("/ah", "Soruyu kabul etme.", KATAGORI_TESTER);
    KomutEkle("/dh", "Soruyu silme..", KATAGORI_TESTER);
    KomutEkle("/rh", "Soruyu rapora yönlendirme.", KATAGORI_TESTER);
    KomutEkle("/ro", "Reklamý onaylama.", KATAGORI_TESTER);
    KomutEkle("/kick", "Oyuncuyu oyundan atma.", KATAGORI_TESTER);
    KomutEkle("/reklamlar", "Bekleyen reklamlarý listeleme.", KATAGORI_TESTER);

	/// -------------------------- ADMIN  ------------------------ //
    KomutEkle("/a(dmin)", "Admin sohbet.", KATAGORI_ADMIN);
    KomutEkle("/ahelp", "Admin komutlarý.", KATAGORI_ADMIN);

    /// -------------------------- POLÝS  ------------------------ //
	KomutEkle("/tazer", "Elektroþok cihazý.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/kelepce", "Kiþiyi kelepçeler.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/kelepcecoz", "Kiþinin kelepçesini çözer.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/surukle", "Kiþiyi sürüklersiniz.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/mdc", "Mobil Bilgi Sistemini açar.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/hapseat", "Hapse atma.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/r(adio)", "Telsiz iletiþimi.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/d(ept)", "Departman telsizi.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/yt(yakýn telsiz)", "Yakýn telsiz.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/cezayaz", "Kiþiye ceza yazma.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/dtel", "Dikenli tel koyma.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/uelkoy", "Uyuþturuculara el koyma.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/barikat", "Barikat koyma..",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/parmakizi", "Yerdeki eþyayý kimin attýðýný öðrenme.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/aracibagla", "Çekilmiþ aracý baðlama.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/ruhsatsil", "Silah ruhsatýný silme.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/elkoy", "Kiþinin eþyalarýna el koyma.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/kapiyikir", "Ev/iþyeri kapýsý kýrma.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/siren", "Tepe sireni koyma.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/flasor", "Farlarý hýzlý açýp kapama.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/callsign", "Birim kodu koyma.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/rozetgoster", "Rozet gösterme komutu.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/destekiste", "Birimlere sinyal göndererek destek isteme.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/bagaj", "Birim araçlarýnda silah deposuna ulaþma.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/yereyatir", "Kiþiyi yere yatýrma.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/yukkontrol", "Týrlarýn yükünü kontrol etme.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/telsizkodlari(1-3)", "Telsiz kodlarý hakkýnda bilgiler.",  KATAGORI_BIRLIK, FACTION_POLICE);
    KomutEkle("/ihbarlar", "Son düþen ihbarlarý gösterir.",  KATAGORI_BIRLIK, FACTION_POLICE);
    //KomutEkle("/cctv", "CCTV'yi izlemeye baþlarsýnýz.",  KATAGORI_BIRLIK, FACTION_POLICE);

	/// -------------------------- TV  ------------------------ //
	KomutEkle("/r(adio)", "Telsiz iletiþimi.",  KATAGORI_BIRLIK, FACTION_NEWS);
	KomutEkle("/yayin", "Broadcast yayýnýný baþlatýr.",  KATAGORI_BIRLIK, FACTION_NEWS);
	KomutEkle("/bc", "Yayýndan konuþmanýzý saðlar.",  KATAGORI_BIRLIK, FACTION_NEWS);
	KomutEkle("/ydavet", "Yayýna konuk alma.",  KATAGORI_BIRLIK, FACTION_NEWS);
	KomutEkle("/ykov", "Yayýndaki konuðu atma.",  KATAGORI_BIRLIK, FACTION_NEWS);
    KomutEkle("/rozetgoster", "Basýn kartýný komutu.",  KATAGORI_BIRLIK, FACTION_NEWS);
    KomutEkle("/yayinmenu", "TV yayýnýný kontrol etmenizi saðlar.",  KATAGORI_BIRLIK, FACTION_NEWS);
    KomutEkle("/altyazi", "Altyazý geçme komutu.",  KATAGORI_BIRLIK, FACTION_NEWS);

    /// -------------------------- MEDIC  ------------------------ //
	KomutEkle("/r(adio)", "Telsiz iletiþimi.",  KATAGORI_BIRLIK, FACTION_MEDIC);
    KomutEkle("/d(ept)", "Departman telsizi.",  KATAGORI_BIRLIK, FACTION_MEDIC);
    KomutEkle("/bandaj", "Kan kaybeden birine ilkyardým yapma.",  KATAGORI_BIRLIK, FACTION_MEDIC);
    KomutEkle("/hyukle", "Yaralýyý araca yükleme.",  KATAGORI_BIRLIK, FACTION_MEDIC);
    KomutEkle("/hteslim", "Araca yüklenen yaralýyý teslim etme.",  KATAGORI_BIRLIK, FACTION_MEDIC);
    KomutEkle("/rozetgoster", "Rozet gösterme komutu.",  KATAGORI_BIRLIK, FACTION_MEDIC);
    KomutEkle("/megafon", "Araç megafonu.",  KATAGORI_BIRLIK, FACTION_MEDIC);

    /// -------------------------- GOV ------------------------ //
	KomutEkle("/r(adio)", "Telsiz iletiþimi.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/d(ept)", "Departman telsizi.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/twithdraw", "Devlet kasasýndan para çekme.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/tdeposit", "Devlet kasasýna para koyma.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/rozetgoster", "Rozet gösterme komutu.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/gov", "Devlet duyurusu kanalýndan yazma.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/govdurum", "Devlet duyurusunu baþlatma/kapatma.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/tazer", "Elektroþok cihazý.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/kelepce", "Kiþiyi kelepçeler.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/kelepcecoz", "Kiþinin kelepçesini çözer.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/siren", "Tepe sireni koyma.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/flasor", "Farlarý hýzlý açýp kapama.",  KATAGORI_BIRLIK, FACTION_GOV);
    KomutEkle("/megafon", "Araç megafonu.",  KATAGORI_BIRLIK, FACTION_GOV);

	/// -------------------------- HITMAN ------------------------ //
	KomutEkle("/kontraktlar", "Kontraktlarý listeler.",  KATAGORI_BIRLIK, FACTION_GANG);
    KomutEkle("/c4", "C4 koyma.",  KATAGORI_BIRLIK, FACTION_GANG);
    KomutEkle("/katilsms", "Toplu SMS yollama.",  KATAGORI_BIRLIK, FACTION_GANG);
    KomutEkle("/okatilsms", "Numaraya SMS yollama.",  KATAGORI_BIRLIK, FACTION_GANG);


	/// -------------------------- AKADEMI ------------------------ //
	KomutEkle("/r(adio)", "Telsiz iletiþimi.",  KATAGORI_BIRLIK, FACTION_AKADEMI);
    KomutEkle("/d(ept)", "Departman telsizi.",  KATAGORI_BIRLIK, FACTION_AKADEMI);
    KomutEkle("/yt(yakýn telsiz)", "Yakýn telsiz.",  KATAGORI_BIRLIK, FACTION_AKADEMI);
	KomutEkle("/tazer", "Elektroþok cihazý.",  KATAGORI_BIRLIK, FACTION_AKADEMI);
    KomutEkle("/kelepce", "Kiþiyi kelepçeler.",  KATAGORI_BIRLIK, FACTION_AKADEMI);
    KomutEkle("/kelepcecoz", "Kiþinin kelepçesini çözer.",  KATAGORI_BIRLIK, FACTION_AKADEMI);
    KomutEkle("/surukle", "Kiþiyi sürüklersiniz.",  KATAGORI_BIRLIK, FACTION_AKADEMI);
    KomutEkle("/rozet", "Akademi kartýnýzý takarsýnýz.",  KATAGORI_BIRLIK, FACTION_AKADEMI);

	return 1;
}

Arac_VergiGecikmismi(aracid)
{
	new id = Car_GetID(aracid);
	if(id != -1)
	{
	    new Float:fPercentage = AracFiyati(CarData[id][carModel])*0.02;
		new vergi_hesap = floatround(fPercentage, floatround_round);
		if(CarData[id][carVergi] >= vergi_hesap && AracFiyati(CarData[id][carModel]) != -1 )
			return 1;
	}
	return 0;
}

AracFiyati(modelid)
{
    for(new i=0; i != MAX_BUSINESSES; i++) if(BusinessData[i][bizType] == 5)
    {
    	for(new j=0; j != MAX_DEALERSHIP_CARS; j++)
    	{
			if(DealershipCars[i][j][vehModel] == modelid)
			    return DealershipCars[i][j][vehPrice];
		}
	}
	return -1;
}

Otel_OdaKirala(playerid)
{
	if(Otel_KiraladigiOda(playerid) != -1)
	    return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Resepsiyonist] »:{FFFFFF} Sizin adýnýza tutulmuþ oda bulunmaktadýr.");

	for(new i=0; i != MAX_OTELODASI; i++) if(!OtelOdalari[i][odaVarmi] && OtelOdalari[i][odaKiralayan] == 0)
	{

		OtelOdalari[i][odaVarmi] = true;
		OtelOdalari[i][odaKiralayan] = PlayerData[playerid][pID];
		OtelOdalari[i][odaKiraBitis] = gettime()+3600000;
        OtelOdalari[i][odaKilit] = false;
        GiveMoney(playerid, OTEL_KIRAUCRET);
        SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Resepsiyonist] »:{FFFFFF} Odanýz hazýr, oda numaranýz %d. Ýyi keyifler!", 500+i);
		return i;
	}
	return -1;
}


Otel_OdaKapat(oi)
{
	OtelOdalari[oi][odaVarmi] = false;
	OtelOdalari[oi][odaKiralayan] = 0;
	OtelOdalari[oi][odaKiraBitis] = 0;
 	OtelOdalari[oi][odaKilit] = true;

	foreach (new i : Player) {
 		if(IsPlayerInRangeOfPoint(i, 20.0, 2238.9555,-1170.6721,1029.7968) && oi+500 == GetPlayerVirtualWorld(i))
        {
            SetPlayerVirtualWorld(i, 1);
            SetPlayerInterior(i, 0);
            ObjeleriYukle(i);
            JBC_SetPlayerPos(i, 1714.9365,3300.3415,1204.8129);
            SendServerMessage(i, "Oda kapatýldýðý için lobiye gönderildiniz.");
		}
	}
	return 1;
}

Otel_KiraladigiOda(playerid)
{
	for(new i=0; i != MAX_OTELODASI; i++) if(OtelOdalari[i][odaVarmi] && OtelOdalari[i][odaKiralayan] == PlayerData[playerid][pID])
	{
		return i;
	}
	return -1;
}
Dialog:AlinmisOdalar(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new notreal[128], idx;
		notreal = strtok(inputtext, idx);
		new id = strval(notreal)-500;
		if(!OtelOdalari[id][odaVarmi] || OtelOdalari[id][odaKiralayan] == 0)
		    return SendErrorMessage(playerid, "Oda artýk yok.");

    	if(OtelOdalari[id][odaKilit])
		    return SendErrorMessage(playerid, "Oda kilitli.");

		SetPlayerInterior(playerid, 15);
		SetPlayerVirtualWorld(playerid, id+500);
		JBC_SetPlayerPos(playerid, 2238.9555,-1170.6721,1029.7968);
		SetPlayerFacingAngle(playerid, 90.7577);
		ObjeleriYukle(playerid);
		SendServerMessage(playerid, "Odadan çýkmak isterseniz kapýda /odacik yazýn.");
	}
	return 1;
}


Dialog:OdaTut(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		if(GetMoney(playerid) < OTEL_KIRAUCRET) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Resepsiyonist] »:{FFFFFF} Eðer yeterli paranýz yok ise size oda veremeyiz.");
		new oda = Otel_OdaKirala(playerid);
		if(oda == -1) SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Resepsiyonist] »:{FFFFFF} Malesef size þu anda oda veremeyiz.");
	}
	return 1;
}

Dialog:SeyehatBiletiAl(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		if(GetMoney(playerid) < SEYEHAT_BILETUCRET) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Bilet Satýcýsý] »:{FFFFFF} Eðer yeterli paranýz yok ise size bilet veremeyiz.");
		if(PlayerData[playerid][pBilet] >= 5) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Bilet Satýcýsý] »:{FFFFFF} Zaten adýnýza alýnmýþ 5 adet bilet var, malesef size daha fazla veremeyiz.");
		PlayerData[playerid][pBilet]++;
		GiveMoney(playerid, -SEYEHAT_BILETUCRET);
		ShowPlayerFooter(playerid, "~g~Bilet alindi!");
		SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Bilet Satýcýsý] »:{FFFFFF} Bizi tercih ettiðiniz için teþekkürler, buyrun biletiniz.");
	}
	return 1;
}
Dialog:MermiTuccari(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		switch(listitem)
		{
			case 0:
			{
			    if(GetMoney(playerid) < 300) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Mermi Tüccarý] »:{FFFFFF} Benimle taþþak mý geçiyorsun? Paran yok.");
				new id = Inventory_Add(playerid, "Sarjor", 2039);

				if (id == -1)
        			return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

				GiveMoney(playerid, -300);
				ShowPlayerFooter(playerid, "~g~Urun alindi.");
			}
			case 1:
			{
			    if(GetMoney(playerid) < 1200) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Mermi Tüccarý] »:{FFFFFF} Benimle taþþak mý geçiyorsun? Paran yok.");
				new id = Inventory_Add(playerid, "Cephane Kartusu", 2358);

				if (id == -1)
        			return SendErrorMessage(playerid, "Envanterinde boþ yer yok.");

				GiveMoney(playerid, -1200);
				ShowPlayerFooter(playerid, "~g~Urun alindi.");
			}
			case 2:
			{
			    if(GetMoney(playerid) < 250) return SendClientMessageEx(playerid, COLOR_DEPARTMENT, "{2F4F4F} [Mermi Tüccarý] »:{FFFFFF} Benimle taþþak mý geçiyorsun? Paran yok.");

				if (PlayerHasWeapon(playerid, 4))
					return SendErrorMessage(playerid, "Zaten býçak taþýyorsun!");

				GiveWeaponToPlayer(playerid, 4, 1);

				GiveMoney(playerid, -250);
				ShowPlayerFooter(playerid, "~g~Urun alindi.");
			}
		}

	}
	return 1;
}

forward BalikTut(playerid, tekne);
public BalikTut(playerid, tekne)
{
	new Float: asama = GetPlayerProgressBarValue(playerid, BalikBari[playerid]), Float: bitis = (tekne) ? 10.0 : 15.0;
	asama++;
	if(asama > bitis) asama = bitis;
	SetPlayerProgressBarValue(playerid, BalikBari[playerid], asama);

	if(asama == bitis)
	{
	    if(random(100) < TUTMA_ORANI) {
	        new slot = -1, slot2 = -1;

			for(new i; i < MAX_BALIK_SLOT; ++i)
			{
				if(OyuncuBaliklari[playerid][BalikID][i] == -1)
		    	{
		  			slot = i;
		        	break;
			    }
			}
            for(new i; i < MAX_BALIK_SLOT; ++i)
			{
				if(OyuncuBaliklari[playerid][BalikID][i] == -1)
		    	{
		  			slot2 = i;
		        	break;
			    }
			}
			if(slot == -1 && slot2 == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Daha fazla balýk tutamazsýn.");
			new id = RandomEx(0, sizeof(BalikTurleri)-1), gram = RandomEx(BalikTurleri[id][MinAgirlik], BalikTurleri[id][MaxAgirlik]);

			if(slot != -1)
			{
				OyuncuBaliklari[playerid][BalikID][slot] = id;
				OyuncuBaliklari[playerid][BalikGram][slot] = gram;
				new string[144];
				format(string, sizeof(string), "{3498DB}%d {FFFFFF}gram bir {3498DB}%s {FFFFFF}tuttunuz.", gram, BalikTurleri[id][TurAdi]);
				SendClientMessage(playerid, -1, string);
			} else if( slot == -1 && slot2 != -1)
			{
			    KovaBaliklari[playerid][BalikID][slot] = id;
				KovaBaliklari[playerid][BalikGram][slot] = gram;
				new string[144];
				format(string, sizeof(string), "{3498DB}%d {FFFFFF}gram bir {3498DB}%s {FFFFFF}tuttunuz ve kovaya attýnýz.", gram, BalikTurleri[id][TurAdi]);
				SendClientMessage(playerid, -1, string);
			}
		}else{
		    SendClientMessage(playerid, 0xE74C3CFF, "Balýk tutma baþarýsýz oldu.");
		}

		if(!tekne)
		{
			if(GetPVarInt(playerid, "OltaSlot") != -1)
			{
				RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "OltaSlot"));
				SetPVarInt(playerid, "OltaSlot", -1);
			}

            ClearAnimations(playerid);
		}

		TextDrawHideForPlayer(playerid, BalikText);
		HidePlayerProgressBar(playerid, BalikBari[playerid]);
		SetPVarInt(playerid, "BalikBekle", tickcount() + ((tekne) ? 4000 : 6000));
		KillTimer(BalikTimer[playerid]);
		BalikTimer[playerid] = -1;
	}

	return 1;
}

stock RandomEx(min, max)
	return random(max - min) + min;

stock BaliklariListele(playerid, mod = 0)
{
	if(!IsPlayerConnected(playerid)) return 0;
    new string[1024];
    format(string, sizeof(string), "Balýk\tAðýrlýk\tDeðer\n");
	if(mod == 0) {
	    for(new i; i < MAX_BALIK_SLOT; ++i)
	    {
	        if(OyuncuBaliklari[playerid][BalikID][i] == -1) {
	            format(string, sizeof(string), "%sBoþ Slot\n", string);
	        }else{
	            format(string, sizeof(string), "%s%s\t%d gr.\t{2ECC71}$%d\n",
					string,
					BalikTurleri[ OyuncuBaliklari[playerid][BalikID][i] ][TurAdi],
					OyuncuBaliklari[playerid][BalikGram][i],
					floatround(OyuncuBaliklari[playerid][BalikGram][i] * BalikTurleri[ OyuncuBaliklari[playerid][BalikID][i] ][GramFiyat])
				);
	        }
		}

		format(string, sizeof(string), "%s\n{FF0000}Hepsini At", string);
		ShowPlayerDialog(playerid, DIALOG_BALIK, DIALOG_STYLE_TABLIST_HEADERS, "Balýklarým", string, "Seç", "Kapat");
	}else{
	    new deger, toplam_gram, toplam_deger;

        for(new i; i < MAX_BALIK_SLOT; ++i)
		{
		    if(OyuncuBaliklari[playerid][BalikID][i] == -1) {
		        format(string, sizeof(string), "%sBoþ Slot\n", string);
		    }else{
		        deger = floatround(OyuncuBaliklari[playerid][BalikGram][i] * BalikTurleri[ OyuncuBaliklari[playerid][BalikID][i] ][GramFiyat]);

		        format(string, sizeof(string), "%s%s\t%d gr.\t{2ECC71}$%d\n",
					string,
					BalikTurleri[ OyuncuBaliklari[playerid][BalikID][i] ][TurAdi],
					OyuncuBaliklari[playerid][BalikGram][i],
					deger
				);

				toplam_gram += OyuncuBaliklari[playerid][BalikGram][i];
				toplam_deger += deger;
		    }
		}

		format(string, sizeof(string), "%s\n{FF0000}Hepsini Sat\t%d gr.\t$%d", string, toplam_gram, toplam_deger);
		ShowPlayerDialog(playerid, DIALOG_BALIK+2, DIALOG_STYLE_TABLIST_HEADERS, "Balýklarým", string, "Sat", "Kapat");
	}

	return 1;
}

stock Float: GetPointZPos(const Float: fX, const Float: fY, &Float: fZ = 0.0) {
    /*
		SA-MP MapAndreas Include
		Copyright © 2011-2012 RyDeR`
	*/

	if(!((-3000.0 < fX < 3000.0) && (-3000.0 < fY < 3000.0))) {
		return 0.0;
	}
	static
		File: s_hMap
	;
	if(!s_hMap) {
		s_hMap = fopen("SAfull.hmap", io_read);

		if(!s_hMap) {
			return 0.0;
		}
	}
	new
		afZ[1]
	;
	fseek(s_hMap, ((6000 * (-floatround(fY, floatround_tozero) + 3000) + (floatround(fX, floatround_tozero) + 3000)) << 1));
	fblockread(s_hMap, afZ);

	return (fZ = ((afZ[0] >>> 16) * 0.01));
}

CMD:baliktut(playerid, params[])
{
	    new slot = -1;
		for(new i; i < MAX_BALIK_SLOT; ++i)
		{
  			if(OyuncuBaliklari[playerid][BalikID][i] == -1)
	    	{
      			slot = i;
	        	break;
		    }
		}
		new slot2 = -1;
        for(new i; i < MAX_BALIK_SLOT; ++i)
		{
  			if(KovaBaliklari[playerid][BalikID][i] == -1)
	    	{
      			slot2 = i;
	        	break;
		    }
		}
		if(slot == -1 && slot2 == -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Daha fazla balýk tutamazsýn.");
		if(BalikTimer[playerid] != -1) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Zaten balýk tutuyorsun.");
		if (!Inventory_HasItem(playerid, "Yem")) return SendErrorMessage(playerid, "Yemin bulunmuyor.");
	//	if(!spamProtect(playerid, "BalikTut", 6))  return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Tekrar balýk tutmak için bekle.");
		if(!IsPlayerInAnyVehicle(playerid)) {
			if(!IsPlayerNearWater(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Burada balýk tutamazsýn.");
			SetPlayerArmedWeapon(playerid, 0);
			ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 0, 1, 1, 1, 0);
			SetPVarInt(playerid, "OltaSlot", -1);

            for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS; ++i)
			{
			    if(IsPlayerAttachedObjectSlotUsed(playerid, i)) continue;
		    	SetPlayerAttachedObject(playerid, i, 18632, 6, 0.091496, 0.019614, 0.000000, 185.619995, 354.958374, 0.000000);
				SetPVarInt(playerid, "OltaSlot", i);
			    break;
			}
		}else{
			if(!IsABoat(GetVehicleModel(GetPlayerVehicleID(playerid)))) return SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bir teknede deðilsin.");
		}

		//TextDrawShowForPlayer(playerid, BalikText);
		SetPlayerProgressBarMaxValue(playerid, BalikBari[playerid], (IsPlayerInAnyVehicle(playerid)) ? 10.0 : 15.0);
		SetPlayerProgressBarValue(playerid, BalikBari[playerid], 0.0);
		Inventory_Remove(playerid, "Yem", 1);
		SendNearbyMessage(playerid, 20.0, COLOR_CYAN, "** %s oltasýný denize doðru sallar.", ReturnName(playerid, 0));
		BalikTimer[playerid] = SetTimerEx("BalikTut", 1000, true, "ii", playerid, IsPlayerInAnyVehicle(playerid));
		return 1;
}

CMD:baliklarim(playerid, params[])
{
	BaliklariListele(playerid);
	return 1;
}

CMD:kova(playerid, params[])
{
	static
	    type[24],
	    string[128];


	if (!Inventory_HasItem(playerid, "Balik Kovasi"))
	    return SendErrorMessage(playerid, "Balýk kovan yok.");

	if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/kova [ad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADLAR]:{FFFFFF} koy, al, ac");
	    return 1;
	}
	if (!strcmp(type, "koy", true))
	{
	    if (KovaData[playerid][kovaPlaced])
	        return SendErrorMessage(playerid, "Zaten bir balýk kovasý koymuþsun.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Bu komutu araçta kullanamazsýn.");

		Kova_Koy(playerid);

		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s portatif balýk kovasýný yere kurar.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Balýk kovasý koydun. (Ayarlarý  \"/kova\" komutu düzenleyebilirsin).");
	}
	else if (!strcmp(type, "al", true))
	{
	    if (!KovaData[playerid][kovaPlaced])
	        return SendErrorMessage(playerid, "Balýk kovasý koymamýþsýn.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, KovaData[playerid][kovaPos][0], KovaData[playerid][kovaPos][1], KovaData[playerid][kovaPos][2]))
		    return SendErrorMessage(playerid, "Balýk kovasýnýn yanýnda olmalýsýn.");

		Kova_Kaldir(playerid);
		SendNearbyMessage(playerid, 30.0, COLOR_CYAN, "** %s portatif balýk kovasýný yerden alýr.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "ac", true))
	{
        if (!KovaData[playerid][kovaPlaced])
	        return SendErrorMessage(playerid, "Balýk kovasýný kurmamýþsýn.");

       	if (!IsPlayerInRangeOfPoint(playerid, 3.0, KovaData[playerid][kovaPos][0], KovaData[playerid][kovaPos][1], KovaData[playerid][kovaPos][2]))
		    return SendErrorMessage(playerid, "Balýk kovasýnýn yanýnda olmalýsýn.");

		for(new i; i < MAX_BALIK_SLOT; ++i)
		{
			if(KovaBaliklari[playerid][BalikID][i] == -1) {
		    	format(string, sizeof(string), "%sBoþ Slot\n", string);
	      	}else{
		    	format(string, sizeof(string), "%s%s\t%d gr.\t{2ECC71}$%d\n",
				string,
				BalikTurleri[ KovaBaliklari[playerid][BalikID][i] ][TurAdi],
				KovaBaliklari[playerid][BalikGram][i],
				floatround(KovaBaliklari[playerid][BalikGram][i] * BalikTurleri[ KovaBaliklari[playerid][BalikID][i] ][GramFiyat])
				);
		    }
		}
		format(string, sizeof(string), "%s\n{FF0000}Kovayý boþalt", string);
		Dialog_Show(playerid, Kova, DIALOG_STYLE_TABLIST_HEADERS, "Kova", string, "Seç", "Kapat");
	}
	return 1;
}


forward BusMissions(playerid);
public BusMissions(playerid){
	new vehicleid = GetPlayerVehicleID(playerid);
	new carid = Car_GetID(vehicleid);
	if(Car_Meslek(playerid, carid) && PlayerData[playerid][pJob] == JOB_OTOBUSSOFORU){
		if(Mise[playerid][BusMission] == 999){
			switch(random(37)){
			    case 0:{ SetPlayerCheckpoint(playerid,361.7982,-1527.4463,33.069700,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Rodeo"); 				Mise[playerid][BusMission] = 0;}
			    case 1:{ SetPlayerCheckpoint(playerid,535.0513,-1262.2404,16.368700,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Rodeo"); 				Mise[playerid][BusMission] = 1;}
			    case 2:{ SetPlayerCheckpoint(playerid,626.7946,-1636.8909,16.002600,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Rodeo"); 				Mise[playerid][BusMission] = 2;}
			    case 3:{ SetPlayerCheckpoint(playerid,770.7590,-1676.8026,12.922700,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Marina"); 				Mise[playerid][BusMission] = 3;}
			    case 4:{ SetPlayerCheckpoint(playerid,796.7376,-1472.4398,13.382800,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Marina"); 				Mise[playerid][BusMission] = 4;}
			    case 5:{ SetPlayerCheckpoint(playerid,886.7276,-997.1920,35.9273000,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Vinewood"); 				Mise[playerid][BusMission] = 5;}
			    case 6:{ SetPlayerCheckpoint(playerid,1030.4622,-1152.1044,23.65600,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Market"); 				Mise[playerid][BusMission] = 6;}
			    case 7:{ SetPlayerCheckpoint(playerid,1207.4020,-948.4581,42.727500,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Temple"); 				Mise[playerid][BusMission] = 7;}
			    case 8:{ SetPlayerCheckpoint(playerid,1414.8257,-1158.7787,23.65630,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Downtown Los Santos"); 	Mise[playerid][BusMission] = 8;}
			    case 9:{ SetPlayerCheckpoint(playerid,1712.4600,-1274.5700,13.38000,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Downtown Los Santos"); 	Mise[playerid][BusMission] = 9;}
			    case 10:{ SetPlayerCheckpoint(playerid,1933.5078,-1044.9818,23.9135,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Glen Park"); 			Mise[playerid][BusMission] = 10;}
			    case 11:{ SetPlayerCheckpoint(playerid,2268.4385,-1192.2931,24.8130,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Jefferson"); 			Mise[playerid][BusMission] = 11;}
			    case 12:{ SetPlayerCheckpoint(playerid,2317.0918,-1386.5325,23.8715,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ East Los Santos"); 		Mise[playerid][BusMission] = 12;}
			    case 13:{ SetPlayerCheckpoint(playerid,2420.4346,-1259.8356,23.8316,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ East Los Santos"); 		Mise[playerid][BusMission] = 13;}
			    case 14:{ SetPlayerCheckpoint(playerid,2508.8904,-1414.6725,28.3594,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ East Los Santos"); 		Mise[playerid][BusMission] = 14;}
			    case 15:{ SetPlayerCheckpoint(playerid,2740.5342,-1460.7323,30.2813,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ East Beach"); 			Mise[playerid][BusMission] = 15;}
			    case 16:{ SetPlayerCheckpoint(playerid,2795.3704,-1380.3308,21.2550,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ East Beach"); 			Mise[playerid][BusMission] = 16;}
			    case 17:{ SetPlayerCheckpoint(playerid,2771.5024,-1654.8423,11.6193,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Ganton"); 				Mise[playerid][BusMission] = 17;}
			    case 18:{ SetPlayerCheckpoint(playerid,2479.2590,-1729.6877,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Willowfield"); 			Mise[playerid][BusMission] = 18;}
			    case 19:{ SetPlayerCheckpoint(playerid,2450.0835,-1934.4447,13.3361,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Playa Del Seville"); 	Mise[playerid][BusMission] = 19;}
			    case 20:{ SetPlayerCheckpoint(playerid,2711.8206,-2026.3109,13.3270,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Ocean Docks"); 			Mise[playerid][BusMission] = 20;}
			    case 21:{ SetPlayerCheckpoint(playerid,2223.9805,-2136.5171,13.3324,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Willowfield"); 			Mise[playerid][BusMission] = 21;}
			    case 22:{ SetPlayerCheckpoint(playerid,1995.4023,-2163.7217,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ El Corona"); 			Mise[playerid][BusMission] = 22;}
			    case 23:{ SetPlayerCheckpoint(playerid,1825.7169,-2083.2720,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ El Corona"); 			Mise[playerid][BusMission] = 23;}
			    case 24:{ SetPlayerCheckpoint(playerid,1964.0333,-2001.6047,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ El Corona");				Mise[playerid][BusMission] = 24;}
			    case 25:{ SetPlayerCheckpoint(playerid,1824.5422,-1884.4218,13.3277,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Willowfield"); 			Mise[playerid][BusMission] = 25;}
			    case 26:{ SetPlayerCheckpoint(playerid,1823.6591,-1649.7051,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Idlewood"); 				Mise[playerid][BusMission] = 26;}
			    case 27:{ SetPlayerCheckpoint(playerid,2053.2000,-1815.0000,13.3800,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Idlewood"); 				Mise[playerid][BusMission] = 27;}
			    case 28:{ SetPlayerCheckpoint(playerid,2107.2432,-1714.2798,13.3892,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Idlewood"); 				Mise[playerid][BusMission] = 28;}
			    case 29:{ SetPlayerCheckpoint(playerid,2007.6346,-1457.7531,13.3906,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Commerce"); 				Mise[playerid][BusMission] = 29;}
			    case 30:{ SetPlayerCheckpoint(playerid,1741.2539,-1596.0043,13.3817,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Pershing Square"); 		Mise[playerid][BusMission] = 30;}
			    case 31:{ SetPlayerCheckpoint(playerid,1526.8031,-1672.5814,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Verdant Bluffs"); 		Mise[playerid][BusMission] = 31;}
			    case 32:{ SetPlayerCheckpoint(playerid,1458.7119,-1869.5370,13.3906,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Commerce"); 				Mise[playerid][BusMission] = 32;}
			    case 33:{ SetPlayerCheckpoint(playerid,1182.7495,-1816.8263,13.3984,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Conference Center"); 	Mise[playerid][BusMission] = 33;}
			    case 34:{ SetPlayerCheckpoint(playerid,1208.2617,-1350.3226,13.4014,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Market"); 				Mise[playerid][BusMission] = 34;}
			    case 35:{ SetPlayerCheckpoint(playerid,1003.3614,-1317.4762,13.3906,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Market"); 				Mise[playerid][BusMission] = 35;}
			    case 36:{ SetPlayerCheckpoint(playerid,508.0580,-1662.4474,18.9118 ,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Rodeo"); 				Mise[playerid][BusMission] = 36;}
		    }
	    	TogglePlayerControllable(playerid, 1);
		}

		if(Mise[playerid][BusMission] != 999){
			switch(Mise[playerid][BusMission]){
			    case 0:{ SetPlayerCheckpoint(playerid,361.7982,-1527.4463,33.069700,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Rodeo"); 				Mise[playerid][BusMission] = 0;}
			    case 1:{ SetPlayerCheckpoint(playerid,535.0513,-1262.2404,16.368700,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Rodeo"); 				Mise[playerid][BusMission] = 1;}
			    case 2:{ SetPlayerCheckpoint(playerid,626.7946,-1636.8909,16.002600,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Rodeo"); 				Mise[playerid][BusMission] = 2;}
			    case 3:{ SetPlayerCheckpoint(playerid,770.7590,-1676.8026,12.922700,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Marina"); 				Mise[playerid][BusMission] = 3;}
			    case 4:{ SetPlayerCheckpoint(playerid,796.7376,-1472.4398,13.382800,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Marina"); 				Mise[playerid][BusMission] = 4;}
			    case 5:{ SetPlayerCheckpoint(playerid,886.7276,-997.1920,35.9273000,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Vinewood"); 				Mise[playerid][BusMission] = 5;}
			    case 6:{ SetPlayerCheckpoint(playerid,1030.4622,-1152.1044,23.65600,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Market"); 				Mise[playerid][BusMission] = 6;}
			    case 7:{ SetPlayerCheckpoint(playerid,1207.4020,-948.4581,42.727500,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Temple"); 				Mise[playerid][BusMission] = 7;}
			    case 8:{ SetPlayerCheckpoint(playerid,1414.8257,-1158.7787,23.65630,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Downtown Los Santos"); 	Mise[playerid][BusMission] = 8;}
			    case 9:{ SetPlayerCheckpoint(playerid,1712.4600,-1274.5700,13.38000,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Downtown Los Santos"); 	Mise[playerid][BusMission] = 9;}
			    case 10:{ SetPlayerCheckpoint(playerid,1933.5078,-1044.9818,23.9135,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Glen Park"); 			Mise[playerid][BusMission] = 10;}
			    case 11:{ SetPlayerCheckpoint(playerid,2268.4385,-1192.2931,24.8130,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Jefferson"); 			Mise[playerid][BusMission] = 11;}
			    case 12:{ SetPlayerCheckpoint(playerid,2317.0918,-1386.5325,23.8715,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ East Los Santos"); 		Mise[playerid][BusMission] = 12;}
			    case 13:{ SetPlayerCheckpoint(playerid,2420.4346,-1259.8356,23.8316,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ East Los Santos"); 		Mise[playerid][BusMission] = 13;}
			    case 14:{ SetPlayerCheckpoint(playerid,2508.8904,-1414.6725,28.3594,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ East Los Santos"); 		Mise[playerid][BusMission] = 14;}
			    case 15:{ SetPlayerCheckpoint(playerid,2740.5342,-1460.7323,30.2813,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ East Beach"); 			Mise[playerid][BusMission] = 15;}
			    case 16:{ SetPlayerCheckpoint(playerid,2795.3704,-1380.3308,21.2550,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ East Beach"); 			Mise[playerid][BusMission] = 16;}
			    case 17:{ SetPlayerCheckpoint(playerid,2771.5024,-1654.8423,11.6193,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Ganton"); 				Mise[playerid][BusMission] = 17;}
			    case 18:{ SetPlayerCheckpoint(playerid,2479.2590,-1729.6877,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Willowfield"); 			Mise[playerid][BusMission] = 18;}
			    case 19:{ SetPlayerCheckpoint(playerid,2450.0835,-1934.4447,13.3361,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Playa Del Seville"); 	Mise[playerid][BusMission] = 19;}
			    case 20:{ SetPlayerCheckpoint(playerid,2711.8206,-2026.3109,13.3270,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Ocean Docks"); 			Mise[playerid][BusMission] = 20;}
			    case 21:{ SetPlayerCheckpoint(playerid,2223.9805,-2136.5171,13.3324,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Willowfield"); 			Mise[playerid][BusMission] = 21;}
			    case 22:{ SetPlayerCheckpoint(playerid,1995.4023,-2163.7217,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ El Corona"); 			Mise[playerid][BusMission] = 22;}
			    case 23:{ SetPlayerCheckpoint(playerid,1825.7169,-2083.2720,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ El Corona"); 			Mise[playerid][BusMission] = 23;}
			    case 24:{ SetPlayerCheckpoint(playerid,1964.0333,-2001.6047,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ El Corona");				Mise[playerid][BusMission] = 24;}
			    case 25:{ SetPlayerCheckpoint(playerid,1824.5422,-1884.4218,13.3277,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Willowfield"); 			Mise[playerid][BusMission] = 25;}
			    case 26:{ SetPlayerCheckpoint(playerid,1823.6591,-1649.7051,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Idlewood"); 				Mise[playerid][BusMission] = 26;}
			    case 27:{ SetPlayerCheckpoint(playerid,2053.2000,-1815.0000,13.3800,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Idlewood"); 				Mise[playerid][BusMission] = 27;}
			    case 28:{ SetPlayerCheckpoint(playerid,2107.2432,-1714.2798,13.3892,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Idlewood"); 				Mise[playerid][BusMission] = 28;}
			    case 29:{ SetPlayerCheckpoint(playerid,2007.6346,-1457.7531,13.3906,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Commerce"); 				Mise[playerid][BusMission] = 29;}
			    case 30:{ SetPlayerCheckpoint(playerid,1741.2539,-1596.0043,13.3817,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Pershing Square"); 		Mise[playerid][BusMission] = 30;}
			    case 31:{ SetPlayerCheckpoint(playerid,1526.8031,-1672.5814,13.3828,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Verdant Bluffs"); 		Mise[playerid][BusMission] = 31;}
			    case 32:{ SetPlayerCheckpoint(playerid,1458.7119,-1869.5370,13.3906,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Commerce"); 				Mise[playerid][BusMission] = 32;}
			    case 33:{ SetPlayerCheckpoint(playerid,1182.7495,-1816.8263,13.3984,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Conference Center"); 	Mise[playerid][BusMission] = 33;}
			    case 34:{ SetPlayerCheckpoint(playerid,1208.2617,-1350.3226,13.4014,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Market"); 				Mise[playerid][BusMission] = 34;}
			    case 35:{ SetPlayerCheckpoint(playerid,1003.3614,-1317.4762,13.3906,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Market"); 				Mise[playerid][BusMission] = 35;}
			    case 36:{ SetPlayerCheckpoint(playerid,508.0580,-1662.4474,18.9118 ,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Rodeo"); 				Mise[playerid][BusMission] = 36;}
			    case 37:{ SetPlayerCheckpoint(playerid,361.7982,-1527.4463,33.069700,3);ShowPlayerFooter(playerid,"~r~Gelecek durak: ~w~ Rodeo"); 				Mise[playerid][BusMission] = 0;}
		    }
		    TogglePlayerControllable(playerid, 1);
		}
	}
	return 1;
}

stock SoyadKilitlimi(soyad[])
{
	new query[512], Cache: owner_query;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `kilitlisoyadlar` WHERE `Soyad` = '%s'", SQL_ReturnEscaped(soyad));
	owner_query = mysql_query(g_iHandle, query);
	if(cache_num_rows())
	{
		return 1;
	}
	cache_delete(owner_query);
	return 0;
}

stock ResetCiftciInfo(playerid)
{
    CiftciJob[playerid] = false;
    CiftciUpdate[playerid] = 0;
    CiftciDistance[playerid] = 0;
    return 1;
}

stock ResetSweeperInfo(playerid)
{
    SweeperJob[playerid] = false;
    SweeperUpdate[playerid] = 0;
    SweeperDistance[playerid] = 0;
    return 1;
}


BlueEclipseCheck(playerid)
{
	SetTimerEx("be_HackCheck", 2000, false, "i", playerid);
	TogglePlayerControllable(playerid, false);

	return 1;
}

forward be_HackCheck(playerid);
public be_HackCheck(playerid)
{
	if( GetPlayerCameraMode(playerid) == 7 )
	{
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s muhtemelen sobeit kullandýðý için oyundan atýldý.", ReturnName(playerid, 0));
	    //SendServerMessage(playerid, "Çomar savar devrede, kardeþim hileyi kapatýp girer misin?");
	    KickEx(playerid);
	}
	TogglePlayerControllable(playerid, true);
}

hack_WeaponCode(playerid, weapon)
{

	new silahlar[14], mermiler[14];
    for (new i = 0; i < 13; i ++)
    {
		if ((i == 2 && PlayerData[playerid][pTazer]) || (i == 3 && PlayerData[playerid][pBeanBag]) || i == 0)
		    continue;

        GetPlayerWeaponData(playerid, i, silahlar[i], mermiler[i]);

        if (silahlar[i] != 0 && silahlar[i] != PlayerData[playerid][pGuns][i]) {
            ResetWeapons(playerid);
            SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s muhtemelen silah hilesi kullandýðý için oyundan atýldý. (Anti hile)", ReturnName(playerid, 0));
			SendServerMessage(playerid, "Anti-Hile aktif edildi.");
			KickEx(playerid);
			return 1;
		}
	}
    for(new j; j < 43; j++)
	{
	 	if(weapon == j && GetPlayerWeapon(playerid) != j )
		{
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s muhtemelen silah hilesi kullandýðý için oyundan atýldý. (Anti hile)", ReturnName(playerid, 0));
		    SendServerMessage(playerid, "Anti-Hile aktif edildi.");
    	    KickEx(playerid);
			return 1;
		}
	}
	return 0;
}
BanKontrol(playerid)
{
	new strex[1024];
	format(strex, sizeof(strex), "SELECT * FROM `blacklist` WHERE `Username` = '%s' OR `IP` = '%s'", PlayerData[playerid][pUsername], PlayerData[playerid][pIP]);
	mysql_function_query(g_iHandle, strex, true, "OnQueryFinished", "dd", playerid, THREAD_BAN_LOOKUP);
}
forward RemoveEffects(playerid);
public RemoveEffects(playerid)
{

    SetPlayerDrunkLevel(playerid, 0);

    SetPlayerWeather(playerid, 10);

    if(EffectTimer[playerid] != -1)
    {
        KillTimer(EffectTimer[playerid]);
        EffectTimer[playerid] = -1;
    }

    return 1;
}
stock playerName(playerid)
{
	new gName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, gName, sizeof gName);
	return gName;
}

stock SavePapagan()
{

	return true;
}

stock LoadPapagan()
{

	return true;
}

forward OnBankAccountCreated(playerid, pass[]);
public OnBankAccountCreated(playerid, pass[])
{
	GiveMoney(playerid, -ACCOUNT_PRICE);

	new id = cache_insert_id(), string[64];
	SendClientMessage(playerid, 0x3498DBFF, "BANKA: {FFFFFF}Yeni hesabýnýz baþarýyla oluþturuldu!");

	format(string, sizeof(string), "BANKA: {FFFFFF}Yeni Hesap NO: {F1C40F}%d", id);
	SendClientMessage(playerid, 0x3498DBFF, string);

	format(string, sizeof(string), "BANKA: {FFFFFF}Hesap þifrenizi unutmayýnýz!: {F1C40F}%s", pass);
	SendClientMessage(playerid, 0x3498DBFF, string);
	return 1;
}

forward OnBankAccountLogin(playerid, id);
public OnBankAccountLogin(playerid, id)
{
	if(cache_num_rows() > 0) {
	    new string[128], owner[MAX_PLAYER_NAME], ldate[24];
	    cache_get_field_content(0, "Owner", owner);
	    cache_get_field_content(0, "Last", ldate);

	    format(string, sizeof(string), "BANKA: {FFFFFF}Bu hesabýn sahibi {F1C40F}%s.", owner);
	    SendClientMessage(playerid, 0x3498DBFF, string);
	    format(string, sizeof(string), "BANKA: {FFFFFF}Hesabýnýza en son giriþ: {F1C40F}%s", (cache_get_field_content_int(0, "LastAccess") == 0) ? ("Hiç") : ldate);
	    SendClientMessage(playerid, 0x3498DBFF, string);

	    CurrentAccountID[playerid] = id;
	    Bank_ShowMenu(playerid);

	    new queryy[96];
	    mysql_format(g_iHandle, queryy, sizeof(queryy), "UPDATE bank_accounts SET LastAccess=UNIX_TIMESTAMP() WHERE ID=%d && Disabled=0", id);
	    mysql_tquery(g_iHandle, queryy);

	    Bank_SaveLog(playerid, TYPE_LOGIN, id, -1, 0);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Hatalý kullaným");
	    Bank_ShowMenu(playerid);
	}

	return 1;
}

forward OnBankAccountDeposit(playerid, amount);
public OnBankAccountDeposit(playerid, amount)
{
	if(cache_affected_rows() > 0) {
	    new string[64];
	    format(string, sizeof(string), "BANKA: {FFFFFF}Baþarýyla para yatýrdýnýz. {2ECC71}%s.", formatInt(amount));
		SendClientMessage(playerid, 0x3498DBFF, string);

	    GiveMoney(playerid, -amount);
	    Bank_SaveLog(playerid, TYPE_DEPOSIT, CurrentAccountID[playerid], -1, amount);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Hatalý iþlem yaptýnýz.");
	}

	Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountWithdraw(playerid, amount);
public OnBankAccountWithdraw(playerid, amount)
{
	if(cache_affected_rows() > 0) {
	    new string[64];
	    format(string, sizeof(string), "BANKA: {FFFFFF}Baþarýyla para çektiniz. {2ECC71}%s.", formatInt(amount));
		SendClientMessage(playerid, 0x3498DBFF, string);

	    GiveMoney(playerid, amount);
	    Bank_SaveLog(playerid, TYPE_WITHDRAW, CurrentAccountID[playerid], -1, amount);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Transaction failed.");
	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountTransfer(playerid, id, amount);
public OnBankAccountTransfer(playerid, id, amount)
{
	if(cache_affected_rows() > 0) {
		new queryy[144];
		mysql_format(g_iHandle, queryy, sizeof(queryy), "UPDATE bank_accounts SET Balance=Balance-%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
		mysql_tquery(g_iHandle, queryy, "OnBankAccountTransferDone", "iii", playerid, id, amount);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Transaction failed.");
	    Bank_ShowMenu(playerid);
	}

	return 1;
}

forward OnBankAccountTransferDone(playerid, id, amount);
public OnBankAccountTransferDone(playerid, id, amount)
{
	if(cache_affected_rows() > 0) {
	    new string[128];
	    format(string, sizeof(string), "BANKA: {FFFFFF}Baþarýyla para transfer ettiniz {2ECC71}%s {FFFFFF}transfer ettiðiniz hesap no: {F1C40F}%d.", formatInt(amount), id);
		SendClientMessage(playerid, 0x3498DBFF, string);

		Bank_SaveLog(playerid, TYPE_TRANSFER, CurrentAccountID[playerid], id, amount);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Transaction failed.");

	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountPassChange(playerid, newpass[]);
public OnBankAccountPassChange(playerid, newpass[])
{
	if(cache_affected_rows() > 0) {
	    new string[128];
	    format(string, sizeof(string), "BANKA: {FFFFFF}Hesap þifreniz deðiþtirildi {F1C40F}%s.", newpass);
		SendClientMessage(playerid, 0x3498DBFF, string);

        Bank_SaveLog(playerid, TYPE_PASSCHANGE, CurrentAccountID[playerid], -1, 0);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Password change failed.");
	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountDeleted(playerid, id, amount);
public OnBankAccountDeleted(playerid, id, amount)
{
    if(cache_affected_rows() > 0) {
        GiveMoney(playerid, amount);

        foreach(new i : Player)
        {
            if(i == playerid) continue;
            if(CurrentAccountID[i] == id) CurrentAccountID[i] = -1;
        }

	    new string[128];
	    format(string, sizeof(string), "BANKA: {FFFFFF}Account removed, you got the {2ECC71}%s {FFFFFF}left in the account.", formatInt(amount));
		SendClientMessage(playerid, 0x3498DBFF, string);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Account removal failed.");
	}

	CurrentAccountID[playerid] = -1;
    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountAdminEdit(playerid);
public OnBankAccountAdminEdit(playerid)
{
    if(cache_affected_rows() > 0) {
        SendClientMessage(playerid, 0x3498DBFF, "BANK: {FFFFFF}Account edited.");
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Account editing failed. (No affected rows)");
	}

	return 1;
}

CMD:atm(playerid, params[])
{
if (ATM_Nearest(playerid) == -1)
	    return SendErrorMessage(playerid, "Herhangi bir ATM'ye yakýn deðilsin.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Araçtan inmeniz gerekmektdir.");

	Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "ATM", "Bankadaki Para Miktarý: %s", "Tamam", "Kapat", FormatNumber(PlayerData[playerid][pBankMoney]));
	return 1;
}

CMD:createatm(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	id = ATM_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Sunucu maksimum ATM limitine ulaþmýþ.");

	SendServerMessage(playerid, "ATM yaratýldý. ID: %d", id);
	return 1;
}
CMD:destroyatm(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Yetkin yok!");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyatm [atm id]");

	if ((id < 0 || id >= MAX_ATM_MACHINES) || !ATMData[id][atmExists])
	    return SendErrorMessage(playerid, "Geçersiz ATM ID girdin!");

	ATM_Delete(id);
	SendServerMessage(playerid, "ATM silindi. ID: %d", id);
	return 1;
}
stock ATM_Create(playerid)
{
    new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_ATM_MACHINES; i ++) if (!ATMData[i][atmExists])
		{
		    ATMData[i][atmExists] = true;

		    x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

            ATMData[i][atmPos][0] = x;
            ATMData[i][atmPos][1] = y;
            ATMData[i][atmPos][2] = z;
            ATMData[i][atmPos][3] = angle;

            ATMData[i][atmInterior] = GetPlayerInterior(playerid);
            ATMData[i][atmWorld] = GetPlayerVirtualWorld(playerid);

			ATM_Refresh(i);
			mysql_tquery(g_iHandle, "INSERT INTO `atm` (`atmInterior`) VALUES(0)", "OnATMCreated", "d", i);

			return i;
		}
	}
	return -1;
}
stock ATM_Refresh(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

		new
	        string[64];

		format(string, sizeof(string), "[ATM]\n[ID: %d]\n{FFFFFF}Kullanmak için '/atm'", atmid);

		ATMData[atmid][atmObject] = CreateDynamicObject(19526, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2] - 1, 0.0, 0.0, ATMData[atmid][atmPos][3]-1, ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
        ATMData[atmid][atmText3D] = CreateDynamic3DTextLabel(string, COLOR_GRAY, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
		ATM_Save(atmid);
		return 1;
	}
	return 0;
}
stock ATM_Save(atmid)
{
	new
	    query[200];

	format(query, sizeof(query), "UPDATE `atm` SET `atmX` = '%.4f', `atmY` = '%.4f', `atmZ` = '%.4f', `atmA` = '%.4f', `atmInterior` = '%d', `atmWorld` = '%d' WHERE `atmID` = '%d'",
	    ATMData[atmid][atmPos][0],
	    ATMData[atmid][atmPos][1],
	    ATMData[atmid][atmPos][2],
	    ATMData[atmid][atmPos][3],
	    ATMData[atmid][atmInterior],
	    ATMData[atmid][atmWorld],
	    ATMData[atmid][atmID]
	);
	return mysql_tquery(g_iHandle, query);
}
stock ATM_Delete(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `atm` WHERE `atmID` = '%d'", ATMData[atmid][atmID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

	    ATMData[atmid][atmExists] = false;
	    ATMData[atmid][atmID] = 0;
	}
	return 1;
}
#if defined _ALS_OnGameModeInit
    #undef OnGameModeInit
#else
    #define _ALS_OnGameModeInit
#endif

#define OnGameModeInit cctv_OnGameModeInit
#if defined cctv_OnGameModeInit
    forward cctv_OnGameModeInit();
#endif
#if defined _ALS_OnPlayerEditDynamicObject
    #undef OnPlayerEditDynamicObject
#else
    #define _ALS_OnPlayerEditDynamicObject
#endif

#define OnPlayerEditDynamicObject cctv_OnPlayerEditDynamicObject
#if defined cctv_OnPlayerEditDynamicObject
    forward cctv_OnPlayerEditDynamicObject(playerid, objectid, response, Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz);
#endif

AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

WasteDeAMXersTime()
{
    new b;
    #emit load.pri b
    #emit stor.pri b
}
